
DataLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000644  0800d650  0800d650  0001d650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc94  0800dc94  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800dc94  0800dc94  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dc94  0800dc94  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc94  0800dc94  0001dc94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc98  0800dc98  0001dc98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800dc9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f8  2**0
                  CONTENTS
 10 .bss          00001320  200001f8  200001f8  000201f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001518  20001518  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016bed  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031c9  00000000  00000000  00036e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001308  00000000  00000000  00039fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001190  00000000  00000000  0003b2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ddb4  00000000  00000000  0003c478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018ba6  00000000  00000000  0005a22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a68f3  00000000  00000000  00072dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001196c5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065cc  00000000  00000000  00119718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d634 	.word	0x0800d634

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800d634 	.word	0x0800d634

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <bmxRead8>:
static const uint8_t Addr_Gyro = 0x69 << 1;
static const uint8_t Addr_Mag = 0x11 << 1;

I2C_HandleTypeDef *bmxPort;

uint8_t bmxRead8(uint8_t addr, uint8_t reg) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af04      	add	r7, sp, #16
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	460a      	mov	r2, r1
 8000cfe:	71fb      	strb	r3, [r7, #7]
 8000d00:	4613      	mov	r3, r2
 8000d02:	71bb      	strb	r3, [r7, #6]
	uint8_t data;
	HAL_I2C_Mem_Read(bmxPort, addr, reg, I2C_MEMADD_SIZE_8BIT, &data, 1,
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <bmxRead8+0x3c>)
 8000d06:	6818      	ldr	r0, [r3, #0]
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	b299      	uxth	r1, r3
 8000d0c:	79bb      	ldrb	r3, [r7, #6]
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	f04f 33ff 	mov.w	r3, #4294967295
 8000d14:	9302      	str	r3, [sp, #8]
 8000d16:	2301      	movs	r3, #1
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	f107 030f 	add.w	r3, r7, #15
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2301      	movs	r3, #1
 8000d22:	f002 f901 	bl	8002f28 <HAL_I2C_Mem_Read>
	HAL_MAX_DELAY);
	return data;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	2000027c 	.word	0x2000027c

08000d34 <bmxWrite8>:
	HAL_I2C_Mem_Read(bmxPort, addr, reg, I2C_MEMADD_SIZE_8BIT, data, 2,
	HAL_MAX_DELAY);
	return (data[0] << 8) | data[1];
}

void bmxWrite8(uint8_t addr, uint8_t reg, uint8_t value) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af04      	add	r7, sp, #16
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	71bb      	strb	r3, [r7, #6]
 8000d42:	4613      	mov	r3, r2
 8000d44:	717b      	strb	r3, [r7, #5]
	uint8_t data[2] = { reg, value };
 8000d46:	79bb      	ldrb	r3, [r7, #6]
 8000d48:	733b      	strb	r3, [r7, #12]
 8000d4a:	797b      	ldrb	r3, [r7, #5]
 8000d4c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(bmxPort, addr, reg, I2C_MEMADD_SIZE_8BIT, data, 2,
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <bmxWrite8+0x44>)
 8000d50:	6818      	ldr	r0, [r3, #0]
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	b299      	uxth	r1, r3
 8000d56:	79bb      	ldrb	r3, [r7, #6]
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	9302      	str	r3, [sp, #8]
 8000d60:	2302      	movs	r3, #2
 8000d62:	9301      	str	r3, [sp, #4]
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	f001 ffc8 	bl	8002d00 <HAL_I2C_Mem_Write>
	HAL_MAX_DELAY);
}
 8000d70:	bf00      	nop
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	2000027c 	.word	0x2000027c

08000d7c <bmxBegin>:

uint8_t bmxBegin(I2C_HandleTypeDef *i2cdev) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	bmxPort = i2cdev;
 8000d84:	4a39      	ldr	r2, [pc, #228]	; (8000e6c <bmxBegin+0xf0>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6013      	str	r3, [r2, #0]

	// Initialization of accelerometer sensor
	bmxWrite8(Addr_Accl, 0x0F, 0x03);
 8000d8a:	2332      	movs	r3, #50	; 0x32
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	210f      	movs	r1, #15
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ffcf 	bl	8000d34 <bmxWrite8>
	HAL_Delay(100);
 8000d96:	2064      	movs	r0, #100	; 0x64
 8000d98:	f001 fc8e 	bl	80026b8 <HAL_Delay>
	bmxWrite8(Addr_Accl, 0x10, 0x08);
 8000d9c:	2332      	movs	r3, #50	; 0x32
 8000d9e:	2208      	movs	r2, #8
 8000da0:	2110      	movs	r1, #16
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ffc6 	bl	8000d34 <bmxWrite8>
	HAL_Delay(100);
 8000da8:	2064      	movs	r0, #100	; 0x64
 8000daa:	f001 fc85 	bl	80026b8 <HAL_Delay>
	bmxWrite8(Addr_Accl, 0x11, 0x00);
 8000dae:	2332      	movs	r3, #50	; 0x32
 8000db0:	2200      	movs	r2, #0
 8000db2:	2111      	movs	r1, #17
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ffbd 	bl	8000d34 <bmxWrite8>
	HAL_Delay(100);
 8000dba:	2064      	movs	r0, #100	; 0x64
 8000dbc:	f001 fc7c 	bl	80026b8 <HAL_Delay>

	// Initialization of gyroscope sensor
	bmxWrite8(Addr_Gyro, 0x0F, 0x04);
 8000dc0:	23d2      	movs	r3, #210	; 0xd2
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	210f      	movs	r1, #15
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ffb4 	bl	8000d34 <bmxWrite8>
	HAL_Delay(100);
 8000dcc:	2064      	movs	r0, #100	; 0x64
 8000dce:	f001 fc73 	bl	80026b8 <HAL_Delay>
	bmxWrite8(Addr_Gyro, 0x10, 0x07);
 8000dd2:	23d2      	movs	r3, #210	; 0xd2
 8000dd4:	2207      	movs	r2, #7
 8000dd6:	2110      	movs	r1, #16
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ffab 	bl	8000d34 <bmxWrite8>
	HAL_Delay(100);
 8000dde:	2064      	movs	r0, #100	; 0x64
 8000de0:	f001 fc6a 	bl	80026b8 <HAL_Delay>
	bmxWrite8(Addr_Gyro, 0x11, 0x00);
 8000de4:	23d2      	movs	r3, #210	; 0xd2
 8000de6:	2200      	movs	r2, #0
 8000de8:	2111      	movs	r1, #17
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ffa2 	bl	8000d34 <bmxWrite8>
	HAL_Delay(100);
 8000df0:	2064      	movs	r0, #100	; 0x64
 8000df2:	f001 fc61 	bl	80026b8 <HAL_Delay>

	// Initialization of magnetometer sensor
	bmxWrite8(Addr_Mag, 0x4B, 0x83);
 8000df6:	2322      	movs	r3, #34	; 0x22
 8000df8:	2283      	movs	r2, #131	; 0x83
 8000dfa:	214b      	movs	r1, #75	; 0x4b
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff99 	bl	8000d34 <bmxWrite8>
	HAL_Delay(100);
 8000e02:	2064      	movs	r0, #100	; 0x64
 8000e04:	f001 fc58 	bl	80026b8 <HAL_Delay>
	bmxWrite8(Addr_Mag, 0x4B, 0x01);
 8000e08:	2322      	movs	r3, #34	; 0x22
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	214b      	movs	r1, #75	; 0x4b
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff90 	bl	8000d34 <bmxWrite8>
	HAL_Delay(100);
 8000e14:	2064      	movs	r0, #100	; 0x64
 8000e16:	f001 fc4f 	bl	80026b8 <HAL_Delay>
	bmxWrite8(Addr_Mag, 0x4C, 0x00);
 8000e1a:	2322      	movs	r3, #34	; 0x22
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	214c      	movs	r1, #76	; 0x4c
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff87 	bl	8000d34 <bmxWrite8>
	HAL_Delay(100);
 8000e26:	2064      	movs	r0, #100	; 0x64
 8000e28:	f001 fc46 	bl	80026b8 <HAL_Delay>
	bmxWrite8(Addr_Mag, 0x4E, 0x84);
 8000e2c:	2322      	movs	r3, #34	; 0x22
 8000e2e:	2284      	movs	r2, #132	; 0x84
 8000e30:	214e      	movs	r1, #78	; 0x4e
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ff7e 	bl	8000d34 <bmxWrite8>
	HAL_Delay(100);
 8000e38:	2064      	movs	r0, #100	; 0x64
 8000e3a:	f001 fc3d 	bl	80026b8 <HAL_Delay>
	bmxWrite8(Addr_Mag, 0x51, 0x04);
 8000e3e:	2322      	movs	r3, #34	; 0x22
 8000e40:	2204      	movs	r2, #4
 8000e42:	2151      	movs	r1, #81	; 0x51
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff75 	bl	8000d34 <bmxWrite8>
	HAL_Delay(10);
 8000e4a:	200a      	movs	r0, #10
 8000e4c:	f001 fc34 	bl	80026b8 <HAL_Delay>
	bmxWrite8(Addr_Mag, 0x52, 0x16);
 8000e50:	2322      	movs	r3, #34	; 0x22
 8000e52:	2216      	movs	r2, #22
 8000e54:	2152      	movs	r1, #82	; 0x52
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ff6c 	bl	8000d34 <bmxWrite8>
	HAL_Delay(100);
 8000e5c:	2064      	movs	r0, #100	; 0x64
 8000e5e:	f001 fc2b 	bl	80026b8 <HAL_Delay>

	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	2000027c 	.word	0x2000027c

08000e70 <read_bmx_accl>:

void read_bmx_accl(float *accl) {
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	uint8_t data[6];
	const float accl_coefficient = 0.0098;
 8000e78:	4b5b      	ldr	r3, [pc, #364]	; (8000fe8 <read_bmx_accl+0x178>)
 8000e7a:	613b      	str	r3, [r7, #16]

	for (uint8_t i = 0; i < 6; i++) {
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	75fb      	strb	r3, [r7, #23]
 8000e80:	e012      	b.n	8000ea8 <read_bmx_accl+0x38>
		data[i] = bmxRead8(Addr_Accl, 0x02 + i);
 8000e82:	2232      	movs	r2, #50	; 0x32
 8000e84:	7dfb      	ldrb	r3, [r7, #23]
 8000e86:	3302      	adds	r3, #2
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	7dfc      	ldrb	r4, [r7, #23]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4610      	mov	r0, r2
 8000e90:	f7ff ff30 	bl	8000cf4 <bmxRead8>
 8000e94:	4603      	mov	r3, r0
 8000e96:	461a      	mov	r2, r3
 8000e98:	f107 0318 	add.w	r3, r7, #24
 8000e9c:	4423      	add	r3, r4
 8000e9e:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (uint8_t i = 0; i < 6; i++) {
 8000ea2:	7dfb      	ldrb	r3, [r7, #23]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	75fb      	strb	r3, [r7, #23]
 8000ea8:	7dfb      	ldrb	r3, [r7, #23]
 8000eaa:	2b05      	cmp	r3, #5
 8000eac:	d9e9      	bls.n	8000e82 <read_bmx_accl+0x12>
	}

	accl[0] = ((data[1] * 256) + (data[0] & 0xF0)) / 16;
 8000eae:	7a7b      	ldrb	r3, [r7, #9]
 8000eb0:	021a      	lsls	r2, r3, #8
 8000eb2:	7a3b      	ldrb	r3, [r7, #8]
 8000eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000eb8:	4413      	add	r3, r2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	da00      	bge.n	8000ec0 <read_bmx_accl+0x50>
 8000ebe:	330f      	adds	r3, #15
 8000ec0:	111b      	asrs	r3, r3, #4
 8000ec2:	ee07 3a90 	vmov	s15, r3
 8000ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	edc3 7a00 	vstr	s15, [r3]
	if (accl[0] > 2047)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	edd3 7a00 	vldr	s15, [r3]
 8000ed6:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8000fec <read_bmx_accl+0x17c>
 8000eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee2:	dd09      	ble.n	8000ef8 <read_bmx_accl+0x88>
		accl[0] -= 4096;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	edd3 7a00 	vldr	s15, [r3]
 8000eea:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8000ff0 <read_bmx_accl+0x180>
 8000eee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	edc3 7a00 	vstr	s15, [r3]
	accl[1] = ((data[3] * 256) + (data[2] & 0xF0)) / 16;
 8000ef8:	7afb      	ldrb	r3, [r7, #11]
 8000efa:	021a      	lsls	r2, r3, #8
 8000efc:	7abb      	ldrb	r3, [r7, #10]
 8000efe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f02:	4413      	add	r3, r2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	da00      	bge.n	8000f0a <read_bmx_accl+0x9a>
 8000f08:	330f      	adds	r3, #15
 8000f0a:	111b      	asrs	r3, r3, #4
 8000f0c:	ee07 3a90 	vmov	s15, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3304      	adds	r3, #4
 8000f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f18:	edc3 7a00 	vstr	s15, [r3]
	if (accl[1] > 2047)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3304      	adds	r3, #4
 8000f20:	edd3 7a00 	vldr	s15, [r3]
 8000f24:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000fec <read_bmx_accl+0x17c>
 8000f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f30:	dd0b      	ble.n	8000f4a <read_bmx_accl+0xda>
		accl[1] -= 4096;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3304      	adds	r3, #4
 8000f36:	edd3 7a00 	vldr	s15, [r3]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000ff0 <read_bmx_accl+0x180>
 8000f42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f46:	edc3 7a00 	vstr	s15, [r3]
	accl[2] = ((data[5] * 256) + (data[4] & 0xF0)) / 16;
 8000f4a:	7b7b      	ldrb	r3, [r7, #13]
 8000f4c:	021a      	lsls	r2, r3, #8
 8000f4e:	7b3b      	ldrb	r3, [r7, #12]
 8000f50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f54:	4413      	add	r3, r2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	da00      	bge.n	8000f5c <read_bmx_accl+0xec>
 8000f5a:	330f      	adds	r3, #15
 8000f5c:	111b      	asrs	r3, r3, #4
 8000f5e:	ee07 3a90 	vmov	s15, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3308      	adds	r3, #8
 8000f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f6a:	edc3 7a00 	vstr	s15, [r3]
	if (accl[2] > 2047)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3308      	adds	r3, #8
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000fec <read_bmx_accl+0x17c>
 8000f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f82:	dd0b      	ble.n	8000f9c <read_bmx_accl+0x12c>
		accl[2] -= 4096;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3308      	adds	r3, #8
 8000f88:	edd3 7a00 	vldr	s15, [r3]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3308      	adds	r3, #8
 8000f90:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000ff0 <read_bmx_accl+0x180>
 8000f94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f98:	edc3 7a00 	vstr	s15, [r3]

	accl[0] *= accl_coefficient;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	ed93 7a00 	vldr	s14, [r3]
 8000fa2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	edc3 7a00 	vstr	s15, [r3]
	accl[1] *= accl_coefficient;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3304      	adds	r3, #4
 8000fb4:	ed93 7a00 	vldr	s14, [r3]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3304      	adds	r3, #4
 8000fbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc4:	edc3 7a00 	vstr	s15, [r3]
	accl[2] *= accl_coefficient;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3308      	adds	r3, #8
 8000fcc:	ed93 7a00 	vldr	s14, [r3]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3308      	adds	r3, #8
 8000fd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fdc:	edc3 7a00 	vstr	s15, [r3]
}
 8000fe0:	bf00      	nop
 8000fe2:	371c      	adds	r7, #28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd90      	pop	{r4, r7, pc}
 8000fe8:	3c20902e 	.word	0x3c20902e
 8000fec:	44ffe000 	.word	0x44ffe000
 8000ff0:	45800000 	.word	0x45800000

08000ff4 <read_bmx_gyro>:

void read_bmx_gyro(float *gyro) {
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	uint8_t data[6];
	const float gyro_coefficient = 0.0038;
 8000ffc:	4b52      	ldr	r3, [pc, #328]	; (8001148 <read_bmx_gyro+0x154>)
 8000ffe:	613b      	str	r3, [r7, #16]

	for (uint8_t i = 0; i < 6; i++) {
 8001000:	2300      	movs	r3, #0
 8001002:	75fb      	strb	r3, [r7, #23]
 8001004:	e012      	b.n	800102c <read_bmx_gyro+0x38>
		data[i] = bmxRead8(Addr_Gyro, 0x02 + i);
 8001006:	22d2      	movs	r2, #210	; 0xd2
 8001008:	7dfb      	ldrb	r3, [r7, #23]
 800100a:	3302      	adds	r3, #2
 800100c:	b2db      	uxtb	r3, r3
 800100e:	7dfc      	ldrb	r4, [r7, #23]
 8001010:	4619      	mov	r1, r3
 8001012:	4610      	mov	r0, r2
 8001014:	f7ff fe6e 	bl	8000cf4 <bmxRead8>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	f107 0318 	add.w	r3, r7, #24
 8001020:	4423      	add	r3, r4
 8001022:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (uint8_t i = 0; i < 6; i++) {
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	3301      	adds	r3, #1
 800102a:	75fb      	strb	r3, [r7, #23]
 800102c:	7dfb      	ldrb	r3, [r7, #23]
 800102e:	2b05      	cmp	r3, #5
 8001030:	d9e9      	bls.n	8001006 <read_bmx_gyro+0x12>
	}

	gyro[0] = (data[1] * 256) + data[0];
 8001032:	7a7b      	ldrb	r3, [r7, #9]
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	7a3a      	ldrb	r2, [r7, #8]
 8001038:	4413      	add	r3, r2
 800103a:	ee07 3a90 	vmov	s15, r3
 800103e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	edc3 7a00 	vstr	s15, [r3]
	if (gyro[0] > 32767)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	edd3 7a00 	vldr	s15, [r3]
 800104e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800114c <read_bmx_gyro+0x158>
 8001052:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105a:	dd09      	ble.n	8001070 <read_bmx_gyro+0x7c>
		gyro[0] -= 65536;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	edd3 7a00 	vldr	s15, [r3]
 8001062:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001150 <read_bmx_gyro+0x15c>
 8001066:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	edc3 7a00 	vstr	s15, [r3]
	gyro[1] = (data[3] * 256) + data[2];
 8001070:	7afb      	ldrb	r3, [r7, #11]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	7aba      	ldrb	r2, [r7, #10]
 8001076:	441a      	add	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3304      	adds	r3, #4
 800107c:	ee07 2a90 	vmov	s15, r2
 8001080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001084:	edc3 7a00 	vstr	s15, [r3]
	if (gyro[1] > 32767)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3304      	adds	r3, #4
 800108c:	edd3 7a00 	vldr	s15, [r3]
 8001090:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800114c <read_bmx_gyro+0x158>
 8001094:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109c:	dd0b      	ble.n	80010b6 <read_bmx_gyro+0xc2>
		gyro[1] -= 65536;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3304      	adds	r3, #4
 80010a2:	edd3 7a00 	vldr	s15, [r3]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3304      	adds	r3, #4
 80010aa:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001150 <read_bmx_gyro+0x15c>
 80010ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010b2:	edc3 7a00 	vstr	s15, [r3]
	gyro[2] = (data[5] * 256) + data[4];
 80010b6:	7b7b      	ldrb	r3, [r7, #13]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	7b3a      	ldrb	r2, [r7, #12]
 80010bc:	441a      	add	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3308      	adds	r3, #8
 80010c2:	ee07 2a90 	vmov	s15, r2
 80010c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ca:	edc3 7a00 	vstr	s15, [r3]
	if (gyro[2] > 32767)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3308      	adds	r3, #8
 80010d2:	edd3 7a00 	vldr	s15, [r3]
 80010d6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800114c <read_bmx_gyro+0x158>
 80010da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e2:	dd0b      	ble.n	80010fc <read_bmx_gyro+0x108>
		gyro[2] -= 65536;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3308      	adds	r3, #8
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3308      	adds	r3, #8
 80010f0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001150 <read_bmx_gyro+0x15c>
 80010f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010f8:	edc3 7a00 	vstr	s15, [r3]

	gyro[0] *= gyro_coefficient; //  Full scale = +/- 125 degree/s
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	ed93 7a00 	vldr	s14, [r3]
 8001102:	edd7 7a04 	vldr	s15, [r7, #16]
 8001106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	edc3 7a00 	vstr	s15, [r3]
	gyro[1] *= gyro_coefficient; //  Full scale = +/- 125 degree/s
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3304      	adds	r3, #4
 8001114:	ed93 7a00 	vldr	s14, [r3]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3304      	adds	r3, #4
 800111c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001124:	edc3 7a00 	vstr	s15, [r3]
	gyro[2] *= gyro_coefficient; //  Full scale = +/- 125 degree/s
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3308      	adds	r3, #8
 800112c:	ed93 7a00 	vldr	s14, [r3]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3308      	adds	r3, #8
 8001134:	edd7 7a04 	vldr	s15, [r7, #16]
 8001138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800113c:	edc3 7a00 	vstr	s15, [r3]
}
 8001140:	bf00      	nop
 8001142:	371c      	adds	r7, #28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd90      	pop	{r4, r7, pc}
 8001148:	3b79096c 	.word	0x3b79096c
 800114c:	46fffe00 	.word	0x46fffe00
 8001150:	47800000 	.word	0x47800000

08001154 <read_bmx_mag>:

void read_bmx_mag(float *mag) {
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b087      	sub	sp, #28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	uint8_t data[8];
	//const float mag_coefficient = 0.3;

	for (uint8_t i = 0; i < 8; i++) {
 800115c:	2300      	movs	r3, #0
 800115e:	75fb      	strb	r3, [r7, #23]
 8001160:	e012      	b.n	8001188 <read_bmx_mag+0x34>
		data[i] = bmxRead8(Addr_Mag, 0x42 + i);
 8001162:	2222      	movs	r2, #34	; 0x22
 8001164:	7dfb      	ldrb	r3, [r7, #23]
 8001166:	3342      	adds	r3, #66	; 0x42
 8001168:	b2db      	uxtb	r3, r3
 800116a:	7dfc      	ldrb	r4, [r7, #23]
 800116c:	4619      	mov	r1, r3
 800116e:	4610      	mov	r0, r2
 8001170:	f7ff fdc0 	bl	8000cf4 <bmxRead8>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	f107 0318 	add.w	r3, r7, #24
 800117c:	4423      	add	r3, r4
 800117e:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t i = 0; i < 8; i++) {
 8001182:	7dfb      	ldrb	r3, [r7, #23]
 8001184:	3301      	adds	r3, #1
 8001186:	75fb      	strb	r3, [r7, #23]
 8001188:	7dfb      	ldrb	r3, [r7, #23]
 800118a:	2b07      	cmp	r3, #7
 800118c:	d9e9      	bls.n	8001162 <read_bmx_mag+0xe>
	}

	mag[0] = ((data[1] << 5) | (data[0] >> 3));
 800118e:	7b7b      	ldrb	r3, [r7, #13]
 8001190:	015b      	lsls	r3, r3, #5
 8001192:	7b3a      	ldrb	r2, [r7, #12]
 8001194:	08d2      	lsrs	r2, r2, #3
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	4313      	orrs	r3, r2
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	edc3 7a00 	vstr	s15, [r3]
	if (mag[0] > 4095)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	edd3 7a00 	vldr	s15, [r3]
 80011ae:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001270 <read_bmx_mag+0x11c>
 80011b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	dd09      	ble.n	80011d0 <read_bmx_mag+0x7c>
		mag[0] -= 8192;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	edd3 7a00 	vldr	s15, [r3]
 80011c2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001274 <read_bmx_mag+0x120>
 80011c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	edc3 7a00 	vstr	s15, [r3]
	mag[1] = ((data[3] << 5) | (data[2] >> 3));
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	015b      	lsls	r3, r3, #5
 80011d4:	7bba      	ldrb	r2, [r7, #14]
 80011d6:	08d2      	lsrs	r2, r2, #3
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	431a      	orrs	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3304      	adds	r3, #4
 80011e0:	ee07 2a90 	vmov	s15, r2
 80011e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e8:	edc3 7a00 	vstr	s15, [r3]
	if (mag[1] > 4095)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3304      	adds	r3, #4
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001270 <read_bmx_mag+0x11c>
 80011f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001200:	dd0b      	ble.n	800121a <read_bmx_mag+0xc6>
		mag[1] -= 8192;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3304      	adds	r3, #4
 8001206:	edd3 7a00 	vldr	s15, [r3]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3304      	adds	r3, #4
 800120e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001274 <read_bmx_mag+0x120>
 8001212:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001216:	edc3 7a00 	vstr	s15, [r3]
	mag[2] = ((data[5] << 7) | (data[4] >> 1));
 800121a:	7c7b      	ldrb	r3, [r7, #17]
 800121c:	01db      	lsls	r3, r3, #7
 800121e:	7c3a      	ldrb	r2, [r7, #16]
 8001220:	0852      	lsrs	r2, r2, #1
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	431a      	orrs	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3308      	adds	r3, #8
 800122a:	ee07 2a90 	vmov	s15, r2
 800122e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001232:	edc3 7a00 	vstr	s15, [r3]
	if (mag[2] > 16383)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3308      	adds	r3, #8
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001278 <read_bmx_mag+0x124>
 8001242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124a:	dc00      	bgt.n	800124e <read_bmx_mag+0xfa>
		mag[2] -= 32768;
}
 800124c:	e00b      	b.n	8001266 <read_bmx_mag+0x112>
		mag[2] -= 32768;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3308      	adds	r3, #8
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3308      	adds	r3, #8
 800125a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800127c <read_bmx_mag+0x128>
 800125e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001262:	edc3 7a00 	vstr	s15, [r3]
}
 8001266:	bf00      	nop
 8001268:	371c      	adds	r7, #28
 800126a:	46bd      	mov	sp, r7
 800126c:	bd90      	pop	{r4, r7, pc}
 800126e:	bf00      	nop
 8001270:	457ff000 	.word	0x457ff000
 8001274:	46000000 	.word	0x46000000
 8001278:	467ffc00 	.word	0x467ffc00
 800127c:	47000000 	.word	0x47000000

08001280 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	2110      	movs	r1, #16
 8001288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128c:	f001 fc90 	bl	8002bb0 <HAL_GPIO_WritePin>
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}

08001294 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	2110      	movs	r1, #16
 800129c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a0:	f001 fc86 	bl	8002bb0 <HAL_GPIO_WritePin>
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80012b2:	bf00      	nop
 80012b4:	4808      	ldr	r0, [pc, #32]	; (80012d8 <SPI_TxByte+0x30>)
 80012b6:	f004 f8ef 	bl	8005498 <HAL_SPI_GetState>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d1f9      	bne.n	80012b4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80012c0:	1df9      	adds	r1, r7, #7
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	2201      	movs	r2, #1
 80012c8:	4803      	ldr	r0, [pc, #12]	; (80012d8 <SPI_TxByte+0x30>)
 80012ca:	f003 fd4e 	bl	8004d6a <HAL_SPI_Transmit>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2000080c 	.word	0x2000080c

080012dc <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80012e2:	23ff      	movs	r3, #255	; 0xff
 80012e4:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80012ea:	bf00      	nop
 80012ec:	4809      	ldr	r0, [pc, #36]	; (8001314 <SPI_RxByte+0x38>)
 80012ee:	f004 f8d3 	bl	8005498 <HAL_SPI_GetState>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d1f9      	bne.n	80012ec <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80012f8:	1dba      	adds	r2, r7, #6
 80012fa:	1df9      	adds	r1, r7, #7
 80012fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2301      	movs	r3, #1
 8001304:	4803      	ldr	r0, [pc, #12]	; (8001314 <SPI_RxByte+0x38>)
 8001306:	f003 fea5 	bl	8005054 <HAL_SPI_TransmitReceive>

  return data;
 800130a:	79bb      	ldrb	r3, [r7, #6]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	2000080c 	.word	0x2000080c

08001318 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001320:	f7ff ffdc 	bl	80012dc <SPI_RxByte>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	701a      	strb	r2, [r3, #0]
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <SD_ReadyWait+0x34>)
 800133c:	2232      	movs	r2, #50	; 0x32
 800133e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001340:	f7ff ffcc 	bl	80012dc <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001344:	f7ff ffca 	bl	80012dc <SPI_RxByte>
 8001348:	4603      	mov	r3, r0
 800134a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	2bff      	cmp	r3, #255	; 0xff
 8001350:	d004      	beq.n	800135c <SD_ReadyWait+0x28>
 8001352:	4b05      	ldr	r3, [pc, #20]	; (8001368 <SD_ReadyWait+0x34>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f3      	bne.n	8001344 <SD_ReadyWait+0x10>

  return res;
 800135c:	79fb      	ldrb	r3, [r7, #7]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000c9c 	.word	0x20000c9c

0800136c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001372:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001376:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001378:	f7ff ff8c 	bl	8001294 <DESELECT>

  for(int i = 0; i < 10; i++)
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	e005      	b.n	800138e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001382:	20ff      	movs	r0, #255	; 0xff
 8001384:	f7ff ff90 	bl	80012a8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	3301      	adds	r3, #1
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	2b09      	cmp	r3, #9
 8001392:	ddf6      	ble.n	8001382 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001394:	f7ff ff74 	bl	8001280 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001398:	2340      	movs	r3, #64	; 0x40
 800139a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80013ac:	2395      	movs	r3, #149	; 0x95
 80013ae:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	e009      	b.n	80013ca <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80013b6:	1d3a      	adds	r2, r7, #4
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff72 	bl	80012a8 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	3301      	adds	r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b05      	cmp	r3, #5
 80013ce:	ddf2      	ble.n	80013b6 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80013d0:	e002      	b.n	80013d8 <SD_PowerOn+0x6c>
  {
    Count--;
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80013d8:	f7ff ff80 	bl	80012dc <SPI_RxByte>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d002      	beq.n	80013e8 <SD_PowerOn+0x7c>
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f4      	bne.n	80013d2 <SD_PowerOn+0x66>
  }

  DESELECT();
 80013e8:	f7ff ff54 	bl	8001294 <DESELECT>
  SPI_TxByte(0XFF);
 80013ec:	20ff      	movs	r0, #255	; 0xff
 80013ee:	f7ff ff5b 	bl	80012a8 <SPI_TxByte>

  PowerFlag = 1;
 80013f2:	4b03      	ldr	r3, [pc, #12]	; (8001400 <SD_PowerOn+0x94>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
}
 80013f8:	bf00      	nop
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000215 	.word	0x20000215

08001404 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <SD_PowerOff+0x14>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	20000215 	.word	0x20000215

0800141c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <SD_CheckPower+0x14>)
 8001422:	781b      	ldrb	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000215 	.word	0x20000215

08001434 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800143e:	4b17      	ldr	r3, [pc, #92]	; (800149c <SD_RxDataBlock+0x68>)
 8001440:	220a      	movs	r2, #10
 8001442:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001444:	f7ff ff4a 	bl	80012dc <SPI_RxByte>
 8001448:	4603      	mov	r3, r0
 800144a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	2bff      	cmp	r3, #255	; 0xff
 8001450:	d104      	bne.n	800145c <SD_RxDataBlock+0x28>
 8001452:	4b12      	ldr	r3, [pc, #72]	; (800149c <SD_RxDataBlock+0x68>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f3      	bne.n	8001444 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	2bfe      	cmp	r3, #254	; 0xfe
 8001460:	d001      	beq.n	8001466 <SD_RxDataBlock+0x32>
    return FALSE;
 8001462:	2300      	movs	r3, #0
 8001464:	e016      	b.n	8001494 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff53 	bl	8001318 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	1c5a      	adds	r2, r3, #1
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff4d 	bl	8001318 <SPI_RxBytePtr>
  } while(btr -= 2);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	3b02      	subs	r3, #2
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1ed      	bne.n	8001466 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 800148a:	f7ff ff27 	bl	80012dc <SPI_RxByte>
  SPI_RxByte();
 800148e:	f7ff ff25 	bl	80012dc <SPI_RxByte>

  return TRUE;
 8001492:	2301      	movs	r3, #1
}
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000c9d 	.word	0x20000c9d

080014a0 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80014b0:	f7ff ff40 	bl	8001334 <SD_ReadyWait>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2bff      	cmp	r3, #255	; 0xff
 80014b8:	d001      	beq.n	80014be <SD_TxDataBlock+0x1e>
    return FALSE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e040      	b.n	8001540 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80014be:	78fb      	ldrb	r3, [r7, #3]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fef1 	bl	80012a8 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	2bfd      	cmp	r3, #253	; 0xfd
 80014ca:	d031      	beq.n	8001530 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fee5 	bl	80012a8 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	1c5a      	adds	r2, r3, #1
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fede 	bl	80012a8 <SPI_TxByte>
    } while (--wc);
 80014ec:	7bbb      	ldrb	r3, [r7, #14]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	73bb      	strb	r3, [r7, #14]
 80014f2:	7bbb      	ldrb	r3, [r7, #14]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1eb      	bne.n	80014d0 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80014f8:	f7ff fef0 	bl	80012dc <SPI_RxByte>
    SPI_RxByte();
 80014fc:	f7ff feee 	bl	80012dc <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001500:	e00b      	b.n	800151a <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8001502:	f7ff feeb 	bl	80012dc <SPI_RxByte>
 8001506:	4603      	mov	r3, r0
 8001508:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	f003 031f 	and.w	r3, r3, #31
 8001510:	2b05      	cmp	r3, #5
 8001512:	d006      	beq.n	8001522 <SD_TxDataBlock+0x82>
        break;

      i++;
 8001514:	7b7b      	ldrb	r3, [r7, #13]
 8001516:	3301      	adds	r3, #1
 8001518:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800151a:	7b7b      	ldrb	r3, [r7, #13]
 800151c:	2b40      	cmp	r3, #64	; 0x40
 800151e:	d9f0      	bls.n	8001502 <SD_TxDataBlock+0x62>
 8001520:	e000      	b.n	8001524 <SD_TxDataBlock+0x84>
        break;
 8001522:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001524:	bf00      	nop
 8001526:	f7ff fed9 	bl	80012dc <SPI_RxByte>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0fa      	beq.n	8001526 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	2b05      	cmp	r3, #5
 8001538:	d101      	bne.n	800153e <SD_TxDataBlock+0x9e>
    return TRUE;
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001554:	f7ff feee 	bl	8001334 <SD_ReadyWait>
 8001558:	4603      	mov	r3, r0
 800155a:	2bff      	cmp	r3, #255	; 0xff
 800155c:	d001      	beq.n	8001562 <SD_SendCmd+0x1a>
    return 0xFF;
 800155e:	23ff      	movs	r3, #255	; 0xff
 8001560:	e040      	b.n	80015e4 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fe9f 	bl	80012a8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	0e1b      	lsrs	r3, r3, #24
 800156e:	b2db      	uxtb	r3, r3
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fe99 	bl	80012a8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	0c1b      	lsrs	r3, r3, #16
 800157a:	b2db      	uxtb	r3, r3
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fe93 	bl	80012a8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fe8d 	bl	80012a8 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fe88 	bl	80012a8 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	2b40      	cmp	r3, #64	; 0x40
 80015a0:	d101      	bne.n	80015a6 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80015a2:	2395      	movs	r3, #149	; 0x95
 80015a4:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	2b48      	cmp	r3, #72	; 0x48
 80015aa:	d101      	bne.n	80015b0 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80015ac:	2387      	movs	r3, #135	; 0x87
 80015ae:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fe78 	bl	80012a8 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	2b4c      	cmp	r3, #76	; 0x4c
 80015bc:	d101      	bne.n	80015c2 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80015be:	f7ff fe8d 	bl	80012dc <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80015c2:	230a      	movs	r3, #10
 80015c4:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80015c6:	f7ff fe89 	bl	80012dc <SPI_RxByte>
 80015ca:	4603      	mov	r3, r0
 80015cc:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80015ce:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	da05      	bge.n	80015e2 <SD_SendCmd+0x9a>
 80015d6:	7bbb      	ldrb	r3, [r7, #14]
 80015d8:	3b01      	subs	r3, #1
 80015da:	73bb      	strb	r3, [r7, #14]
 80015dc:	7bbb      	ldrb	r3, [r7, #14]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f1      	bne.n	80015c6 <SD_SendCmd+0x7e>

  return res;
 80015e2:	7b7b      	ldrb	r3, [r7, #13]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0d5      	b.n	80017ac <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001600:	4b6c      	ldr	r3, [pc, #432]	; (80017b4 <SD_disk_initialize+0x1c8>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <SD_disk_initialize+0x2a>
    return Stat;
 800160e:	4b69      	ldr	r3, [pc, #420]	; (80017b4 <SD_disk_initialize+0x1c8>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	e0ca      	b.n	80017ac <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8001616:	f7ff fea9 	bl	800136c <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 800161a:	f7ff fe31 	bl	8001280 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001622:	2100      	movs	r1, #0
 8001624:	2040      	movs	r0, #64	; 0x40
 8001626:	f7ff ff8f 	bl	8001548 <SD_SendCmd>
 800162a:	4603      	mov	r3, r0
 800162c:	2b01      	cmp	r3, #1
 800162e:	f040 80a5 	bne.w	800177c <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001632:	4b61      	ldr	r3, [pc, #388]	; (80017b8 <SD_disk_initialize+0x1cc>)
 8001634:	2264      	movs	r2, #100	; 0x64
 8001636:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001638:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800163c:	2048      	movs	r0, #72	; 0x48
 800163e:	f7ff ff83 	bl	8001548 <SD_SendCmd>
 8001642:	4603      	mov	r3, r0
 8001644:	2b01      	cmp	r3, #1
 8001646:	d158      	bne.n	80016fa <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001648:	2300      	movs	r3, #0
 800164a:	73fb      	strb	r3, [r7, #15]
 800164c:	e00c      	b.n	8001668 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800164e:	7bfc      	ldrb	r4, [r7, #15]
 8001650:	f7ff fe44 	bl	80012dc <SPI_RxByte>
 8001654:	4603      	mov	r3, r0
 8001656:	461a      	mov	r2, r3
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	4423      	add	r3, r4
 800165e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	3301      	adds	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	2b03      	cmp	r3, #3
 800166c:	d9ef      	bls.n	800164e <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800166e:	7abb      	ldrb	r3, [r7, #10]
 8001670:	2b01      	cmp	r3, #1
 8001672:	f040 8083 	bne.w	800177c <SD_disk_initialize+0x190>
 8001676:	7afb      	ldrb	r3, [r7, #11]
 8001678:	2baa      	cmp	r3, #170	; 0xaa
 800167a:	d17f      	bne.n	800177c <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800167c:	2100      	movs	r1, #0
 800167e:	2077      	movs	r0, #119	; 0x77
 8001680:	f7ff ff62 	bl	8001548 <SD_SendCmd>
 8001684:	4603      	mov	r3, r0
 8001686:	2b01      	cmp	r3, #1
 8001688:	d807      	bhi.n	800169a <SD_disk_initialize+0xae>
 800168a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800168e:	2069      	movs	r0, #105	; 0x69
 8001690:	f7ff ff5a 	bl	8001548 <SD_SendCmd>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d005      	beq.n	80016a6 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800169a:	4b47      	ldr	r3, [pc, #284]	; (80017b8 <SD_disk_initialize+0x1cc>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1eb      	bne.n	800167c <SD_disk_initialize+0x90>
 80016a4:	e000      	b.n	80016a8 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80016a6:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80016a8:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <SD_disk_initialize+0x1cc>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d064      	beq.n	800177c <SD_disk_initialize+0x190>
 80016b2:	2100      	movs	r1, #0
 80016b4:	207a      	movs	r0, #122	; 0x7a
 80016b6:	f7ff ff47 	bl	8001548 <SD_SendCmd>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d15d      	bne.n	800177c <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	e00c      	b.n	80016e0 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80016c6:	7bfc      	ldrb	r4, [r7, #15]
 80016c8:	f7ff fe08 	bl	80012dc <SPI_RxByte>
 80016cc:	4603      	mov	r3, r0
 80016ce:	461a      	mov	r2, r3
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	4423      	add	r3, r4
 80016d6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	3301      	adds	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d9ef      	bls.n	80016c6 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80016e6:	7a3b      	ldrb	r3, [r7, #8]
 80016e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <SD_disk_initialize+0x108>
 80016f0:	2306      	movs	r3, #6
 80016f2:	e000      	b.n	80016f6 <SD_disk_initialize+0x10a>
 80016f4:	2302      	movs	r3, #2
 80016f6:	73bb      	strb	r3, [r7, #14]
 80016f8:	e040      	b.n	800177c <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80016fa:	2100      	movs	r1, #0
 80016fc:	2077      	movs	r0, #119	; 0x77
 80016fe:	f7ff ff23 	bl	8001548 <SD_SendCmd>
 8001702:	4603      	mov	r3, r0
 8001704:	2b01      	cmp	r3, #1
 8001706:	d808      	bhi.n	800171a <SD_disk_initialize+0x12e>
 8001708:	2100      	movs	r1, #0
 800170a:	2069      	movs	r0, #105	; 0x69
 800170c:	f7ff ff1c 	bl	8001548 <SD_SendCmd>
 8001710:	4603      	mov	r3, r0
 8001712:	2b01      	cmp	r3, #1
 8001714:	d801      	bhi.n	800171a <SD_disk_initialize+0x12e>
 8001716:	2302      	movs	r3, #2
 8001718:	e000      	b.n	800171c <SD_disk_initialize+0x130>
 800171a:	2301      	movs	r3, #1
 800171c:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 800171e:	7bbb      	ldrb	r3, [r7, #14]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d10e      	bne.n	8001742 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001724:	2100      	movs	r1, #0
 8001726:	2077      	movs	r0, #119	; 0x77
 8001728:	f7ff ff0e 	bl	8001548 <SD_SendCmd>
 800172c:	4603      	mov	r3, r0
 800172e:	2b01      	cmp	r3, #1
 8001730:	d80e      	bhi.n	8001750 <SD_disk_initialize+0x164>
 8001732:	2100      	movs	r1, #0
 8001734:	2069      	movs	r0, #105	; 0x69
 8001736:	f7ff ff07 	bl	8001548 <SD_SendCmd>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d107      	bne.n	8001750 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001740:	e00d      	b.n	800175e <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001742:	2100      	movs	r1, #0
 8001744:	2041      	movs	r0, #65	; 0x41
 8001746:	f7ff feff 	bl	8001548 <SD_SendCmd>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001750:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <SD_disk_initialize+0x1cc>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1e1      	bne.n	800171e <SD_disk_initialize+0x132>
 800175a:	e000      	b.n	800175e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 800175c:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800175e:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <SD_disk_initialize+0x1cc>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d007      	beq.n	8001778 <SD_disk_initialize+0x18c>
 8001768:	f44f 7100 	mov.w	r1, #512	; 0x200
 800176c:	2050      	movs	r0, #80	; 0x50
 800176e:	f7ff feeb 	bl	8001548 <SD_SendCmd>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 800177c:	4a0f      	ldr	r2, [pc, #60]	; (80017bc <SD_disk_initialize+0x1d0>)
 800177e:	7bbb      	ldrb	r3, [r7, #14]
 8001780:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001782:	f7ff fd87 	bl	8001294 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001786:	f7ff fda9 	bl	80012dc <SPI_RxByte>

  if (type)
 800178a:	7bbb      	ldrb	r3, [r7, #14]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d008      	beq.n	80017a2 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <SD_disk_initialize+0x1c8>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f023 0301 	bic.w	r3, r3, #1
 800179a:	b2da      	uxtb	r2, r3
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <SD_disk_initialize+0x1c8>)
 800179e:	701a      	strb	r2, [r3, #0]
 80017a0:	e001      	b.n	80017a6 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80017a2:	f7ff fe2f 	bl	8001404 <SD_PowerOff>
  }

  return Stat;
 80017a6:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <SD_disk_initialize+0x1c8>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	b2db      	uxtb	r3, r3
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd90      	pop	{r4, r7, pc}
 80017b4:	20000000 	.word	0x20000000
 80017b8:	20000c9d 	.word	0x20000c9d
 80017bc:	20000214 	.word	0x20000214

080017c0 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <SD_disk_status+0x14>
    return STA_NOINIT;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e002      	b.n	80017da <SD_disk_status+0x1a>

  return Stat;
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <SD_disk_status+0x28>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b2db      	uxtb	r3, r3
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20000000 	.word	0x20000000

080017ec <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	4603      	mov	r3, r0
 80017fa:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <SD_disk_read+0x1c>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <SD_disk_read+0x20>
    return RES_PARERR;
 8001808:	2304      	movs	r3, #4
 800180a:	e051      	b.n	80018b0 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 800180c:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <SD_disk_read+0xcc>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <SD_disk_read+0x32>
    return RES_NOTRDY;
 800181a:	2303      	movs	r3, #3
 800181c:	e048      	b.n	80018b0 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 800181e:	4b27      	ldr	r3, [pc, #156]	; (80018bc <SD_disk_read+0xd0>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	025b      	lsls	r3, r3, #9
 800182e:	607b      	str	r3, [r7, #4]

  SELECT();
 8001830:	f7ff fd26 	bl	8001280 <SELECT>

  if (count == 1)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d111      	bne.n	800185e <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	2051      	movs	r0, #81	; 0x51
 800183e:	f7ff fe83 	bl	8001548 <SD_SendCmd>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d129      	bne.n	800189c <SD_disk_read+0xb0>
 8001848:	f44f 7100 	mov.w	r1, #512	; 0x200
 800184c:	68b8      	ldr	r0, [r7, #8]
 800184e:	f7ff fdf1 	bl	8001434 <SD_RxDataBlock>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d021      	beq.n	800189c <SD_disk_read+0xb0>
      count = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	e01e      	b.n	800189c <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	2052      	movs	r0, #82	; 0x52
 8001862:	f7ff fe71 	bl	8001548 <SD_SendCmd>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d117      	bne.n	800189c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 800186c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001870:	68b8      	ldr	r0, [r7, #8]
 8001872:	f7ff fddf 	bl	8001434 <SD_RxDataBlock>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00a      	beq.n	8001892 <SD_disk_read+0xa6>
          break;

        buff += 512;
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001882:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	3b01      	subs	r3, #1
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1ed      	bne.n	800186c <SD_disk_read+0x80>
 8001890:	e000      	b.n	8001894 <SD_disk_read+0xa8>
          break;
 8001892:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001894:	2100      	movs	r1, #0
 8001896:	204c      	movs	r0, #76	; 0x4c
 8001898:	f7ff fe56 	bl	8001548 <SD_SendCmd>
    }
  }

  DESELECT();
 800189c:	f7ff fcfa 	bl	8001294 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80018a0:	f7ff fd1c 	bl	80012dc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	bf14      	ite	ne
 80018aa:	2301      	movne	r3, #1
 80018ac:	2300      	moveq	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000000 	.word	0x20000000
 80018bc:	20000214 	.word	0x20000214

080018c0 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	4603      	mov	r3, r0
 80018ce:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <SD_disk_write+0x1c>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <SD_disk_write+0x20>
    return RES_PARERR;
 80018dc:	2304      	movs	r3, #4
 80018de:	e06b      	b.n	80019b8 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80018e0:	4b37      	ldr	r3, [pc, #220]	; (80019c0 <SD_disk_write+0x100>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e062      	b.n	80019b8 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80018f2:	4b33      	ldr	r3, [pc, #204]	; (80019c0 <SD_disk_write+0x100>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001900:	2302      	movs	r3, #2
 8001902:	e059      	b.n	80019b8 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001904:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <SD_disk_write+0x104>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d102      	bne.n	8001916 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	025b      	lsls	r3, r3, #9
 8001914:	607b      	str	r3, [r7, #4]

  SELECT();
 8001916:	f7ff fcb3 	bl	8001280 <SELECT>

  if (count == 1)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d110      	bne.n	8001942 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	2058      	movs	r0, #88	; 0x58
 8001924:	f7ff fe10 	bl	8001548 <SD_SendCmd>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d13a      	bne.n	80019a4 <SD_disk_write+0xe4>
 800192e:	21fe      	movs	r1, #254	; 0xfe
 8001930:	68b8      	ldr	r0, [r7, #8]
 8001932:	f7ff fdb5 	bl	80014a0 <SD_TxDataBlock>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d033      	beq.n	80019a4 <SD_disk_write+0xe4>
      count = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	e030      	b.n	80019a4 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <SD_disk_write+0x104>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d007      	beq.n	800195e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800194e:	2100      	movs	r1, #0
 8001950:	2077      	movs	r0, #119	; 0x77
 8001952:	f7ff fdf9 	bl	8001548 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001956:	6839      	ldr	r1, [r7, #0]
 8001958:	2057      	movs	r0, #87	; 0x57
 800195a:	f7ff fdf5 	bl	8001548 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	2059      	movs	r0, #89	; 0x59
 8001962:	f7ff fdf1 	bl	8001548 <SD_SendCmd>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d11b      	bne.n	80019a4 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 800196c:	21fc      	movs	r1, #252	; 0xfc
 800196e:	68b8      	ldr	r0, [r7, #8]
 8001970:	f7ff fd96 	bl	80014a0 <SD_TxDataBlock>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00a      	beq.n	8001990 <SD_disk_write+0xd0>
          break;

        buff += 512;
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001980:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	3b01      	subs	r3, #1
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1ee      	bne.n	800196c <SD_disk_write+0xac>
 800198e:	e000      	b.n	8001992 <SD_disk_write+0xd2>
          break;
 8001990:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001992:	21fd      	movs	r1, #253	; 0xfd
 8001994:	2000      	movs	r0, #0
 8001996:	f7ff fd83 	bl	80014a0 <SD_TxDataBlock>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <SD_disk_write+0xe4>
      {
        count = 1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80019a4:	f7ff fc76 	bl	8001294 <DESELECT>
  SPI_RxByte();
 80019a8:	f7ff fc98 	bl	80012dc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	bf14      	ite	ne
 80019b2:	2301      	movne	r3, #1
 80019b4:	2300      	moveq	r3, #0
 80019b6:	b2db      	uxtb	r3, r3
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000000 	.word	0x20000000
 80019c4:	20000214 	.word	0x20000214

080019c8 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b08b      	sub	sp, #44	; 0x2c
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	603a      	str	r2, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
 80019d4:	460b      	mov	r3, r1
 80019d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80019e2:	2304      	movs	r3, #4
 80019e4:	e11b      	b.n	8001c1e <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80019ec:	79bb      	ldrb	r3, [r7, #6]
 80019ee:	2b05      	cmp	r3, #5
 80019f0:	d129      	bne.n	8001a46 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d017      	beq.n	8001a2a <SD_disk_ioctl+0x62>
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	dc1f      	bgt.n	8001a3e <SD_disk_ioctl+0x76>
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <SD_disk_ioctl+0x40>
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d00b      	beq.n	8001a1e <SD_disk_ioctl+0x56>
 8001a06:	e01a      	b.n	8001a3e <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001a08:	f7ff fd08 	bl	800141c <SD_CheckPower>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001a12:	f7ff fcf7 	bl	8001404 <SD_PowerOff>
      res = RES_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001a1c:	e0fd      	b.n	8001c1a <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001a1e:	f7ff fca5 	bl	800136c <SD_PowerOn>
      res = RES_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001a28:	e0f7      	b.n	8001c1a <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	1c5c      	adds	r4, r3, #1
 8001a2e:	f7ff fcf5 	bl	800141c <SD_CheckPower>
 8001a32:	4603      	mov	r3, r0
 8001a34:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001a36:	2300      	movs	r3, #0
 8001a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001a3c:	e0ed      	b.n	8001c1a <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001a3e:	2304      	movs	r3, #4
 8001a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a44:	e0e9      	b.n	8001c1a <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001a46:	4b78      	ldr	r3, [pc, #480]	; (8001c28 <SD_disk_ioctl+0x260>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e0e2      	b.n	8001c1e <SD_disk_ioctl+0x256>

    SELECT();
 8001a58:	f7ff fc12 	bl	8001280 <SELECT>

    switch (ctrl)
 8001a5c:	79bb      	ldrb	r3, [r7, #6]
 8001a5e:	2b0d      	cmp	r3, #13
 8001a60:	f200 80cc 	bhi.w	8001bfc <SD_disk_ioctl+0x234>
 8001a64:	a201      	add	r2, pc, #4	; (adr r2, 8001a6c <SD_disk_ioctl+0xa4>)
 8001a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6a:	bf00      	nop
 8001a6c:	08001b67 	.word	0x08001b67
 8001a70:	08001aa5 	.word	0x08001aa5
 8001a74:	08001b57 	.word	0x08001b57
 8001a78:	08001bfd 	.word	0x08001bfd
 8001a7c:	08001bfd 	.word	0x08001bfd
 8001a80:	08001bfd 	.word	0x08001bfd
 8001a84:	08001bfd 	.word	0x08001bfd
 8001a88:	08001bfd 	.word	0x08001bfd
 8001a8c:	08001bfd 	.word	0x08001bfd
 8001a90:	08001bfd 	.word	0x08001bfd
 8001a94:	08001bfd 	.word	0x08001bfd
 8001a98:	08001b79 	.word	0x08001b79
 8001a9c:	08001b9d 	.word	0x08001b9d
 8001aa0:	08001bc1 	.word	0x08001bc1
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	2049      	movs	r0, #73	; 0x49
 8001aa8:	f7ff fd4e 	bl	8001548 <SD_SendCmd>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f040 80a8 	bne.w	8001c04 <SD_disk_ioctl+0x23c>
 8001ab4:	f107 030c 	add.w	r3, r7, #12
 8001ab8:	2110      	movs	r1, #16
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fcba 	bl	8001434 <SD_RxDataBlock>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 809e 	beq.w	8001c04 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001ac8:	7b3b      	ldrb	r3, [r7, #12]
 8001aca:	099b      	lsrs	r3, r3, #6
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d10e      	bne.n	8001af0 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001ad2:	7d7b      	ldrb	r3, [r7, #21]
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	7d3b      	ldrb	r3, [r7, #20]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	021b      	lsls	r3, r3, #8
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	4413      	add	r3, r2
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001ae6:	8bfb      	ldrh	r3, [r7, #30]
 8001ae8:	029a      	lsls	r2, r3, #10
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	e02e      	b.n	8001b4e <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001af0:	7c7b      	ldrb	r3, [r7, #17]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	7dbb      	ldrb	r3, [r7, #22]
 8001afa:	09db      	lsrs	r3, r3, #7
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	4413      	add	r3, r2
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	7d7b      	ldrb	r3, [r7, #21]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	f003 0306 	and.w	r3, r3, #6
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	4413      	add	r3, r2
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	3302      	adds	r3, #2
 8001b14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001b18:	7d3b      	ldrb	r3, [r7, #20]
 8001b1a:	099b      	lsrs	r3, r3, #6
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	7cfb      	ldrb	r3, [r7, #19]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	4413      	add	r3, r2
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	7cbb      	ldrb	r3, [r7, #18]
 8001b2e:	029b      	lsls	r3, r3, #10
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	4413      	add	r3, r2
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001b40:	8bfa      	ldrh	r2, [r7, #30]
 8001b42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b46:	3b09      	subs	r3, #9
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001b54:	e056      	b.n	8001c04 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b5c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b64:	e055      	b.n	8001c12 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001b66:	f7ff fbe5 	bl	8001334 <SD_ReadyWait>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2bff      	cmp	r3, #255	; 0xff
 8001b6e:	d14b      	bne.n	8001c08 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b76:	e047      	b.n	8001c08 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001b78:	2100      	movs	r1, #0
 8001b7a:	2049      	movs	r0, #73	; 0x49
 8001b7c:	f7ff fce4 	bl	8001548 <SD_SendCmd>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d142      	bne.n	8001c0c <SD_disk_ioctl+0x244>
 8001b86:	2110      	movs	r1, #16
 8001b88:	6a38      	ldr	r0, [r7, #32]
 8001b8a:	f7ff fc53 	bl	8001434 <SD_RxDataBlock>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d03b      	beq.n	8001c0c <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b9a:	e037      	b.n	8001c0c <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	204a      	movs	r0, #74	; 0x4a
 8001ba0:	f7ff fcd2 	bl	8001548 <SD_SendCmd>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d132      	bne.n	8001c10 <SD_disk_ioctl+0x248>
 8001baa:	2110      	movs	r1, #16
 8001bac:	6a38      	ldr	r0, [r7, #32]
 8001bae:	f7ff fc41 	bl	8001434 <SD_RxDataBlock>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d02b      	beq.n	8001c10 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001bbe:	e027      	b.n	8001c10 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	207a      	movs	r0, #122	; 0x7a
 8001bc4:	f7ff fcc0 	bl	8001548 <SD_SendCmd>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d116      	bne.n	8001bfc <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bd4:	e00b      	b.n	8001bee <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001bd6:	6a3c      	ldr	r4, [r7, #32]
 8001bd8:	1c63      	adds	r3, r4, #1
 8001bda:	623b      	str	r3, [r7, #32]
 8001bdc:	f7ff fb7e 	bl	80012dc <SPI_RxByte>
 8001be0:	4603      	mov	r3, r0
 8001be2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001be4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001be8:	3301      	adds	r3, #1
 8001bea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d9ef      	bls.n	8001bd6 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c02:	e006      	b.n	8001c12 <SD_disk_ioctl+0x24a>
      break;
 8001c04:	bf00      	nop
 8001c06:	e004      	b.n	8001c12 <SD_disk_ioctl+0x24a>
      break;
 8001c08:	bf00      	nop
 8001c0a:	e002      	b.n	8001c12 <SD_disk_ioctl+0x24a>
      break;
 8001c0c:	bf00      	nop
 8001c0e:	e000      	b.n	8001c12 <SD_disk_ioctl+0x24a>
      break;
 8001c10:	bf00      	nop
    }

    DESELECT();
 8001c12:	f7ff fb3f 	bl	8001294 <DESELECT>
    SPI_RxByte();
 8001c16:	f7ff fb61 	bl	80012dc <SPI_RxByte>
  }

  return res;
 8001c1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	372c      	adds	r7, #44	; 0x2c
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd90      	pop	{r4, r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000000 	.word	0x20000000

08001c2c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001c34:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c38:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d013      	beq.n	8001c6c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001c44:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c48:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001c4c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00b      	beq.n	8001c6c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001c54:	e000      	b.n	8001c58 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001c56:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001c58:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f9      	beq.n	8001c56 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001c62:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001c6c:	687b      	ldr	r3, [r7, #4]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c80:	b09f      	sub	sp, #124	; 0x7c
 8001c82:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c84:	f000 fcb2 	bl	80025ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c88:	f000 f8ea 	bl	8001e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c8c:	f000 fa0c 	bl	80020a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001c90:	f000 f97e 	bl	8001f90 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001c94:	f004 f870 	bl	8005d78 <MX_FATFS_Init>
  MX_I2C1_Init();
 8001c98:	f000 f93a 	bl	8001f10 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001c9c:	f000 f9b6 	bl	800200c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 8001ca0:	485c      	ldr	r0, [pc, #368]	; (8001e14 <main+0x198>)
 8001ca2:	f003 fdc3 	bl	800582c <HAL_TIM_Base_Start_IT>
	int initBMX = bmxBegin(&hi2c1);
 8001ca6:	485c      	ldr	r0, [pc, #368]	; (8001e18 <main+0x19c>)
 8001ca8:	f7ff f868 	bl	8000d7c <bmxBegin>
 8001cac:	4603      	mov	r3, r0
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
	printf("%d\r\n", initBMX);
 8001cb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001cb2:	485a      	ldr	r0, [pc, #360]	; (8001e1c <main+0x1a0>)
 8001cb4:	f007 fefa 	bl	8009aac <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	fresult = f_mount(&fs, "/", 1);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4959      	ldr	r1, [pc, #356]	; (8001e20 <main+0x1a4>)
 8001cbc:	4859      	ldr	r0, [pc, #356]	; (8001e24 <main+0x1a8>)
 8001cbe:	f006 f845 	bl	8007d4c <f_mount>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b58      	ldr	r3, [pc, #352]	; (8001e28 <main+0x1ac>)
 8001cc8:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 8001cca:	4b57      	ldr	r3, [pc, #348]	; (8001e28 <main+0x1ac>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d103      	bne.n	8001cda <main+0x5e>
		//send_uart("SD CARD mounted successfully.");
		printf("SD CARD mounted successfully.");
 8001cd2:	4856      	ldr	r0, [pc, #344]	; (8001e2c <main+0x1b0>)
 8001cd4:	f007 feea 	bl	8009aac <iprintf>
 8001cd8:	e002      	b.n	8001ce0 <main+0x64>
	} else {
		//send_uart("ERROR : SD CARD mounted");
		printf("ERROR : SD CARD mounted");
 8001cda:	4855      	ldr	r0, [pc, #340]	; (8001e30 <main+0x1b4>)
 8001cdc:	f007 fee6 	bl	8009aac <iprintf>
	}

	HAL_Delay(1000);
 8001ce0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ce4:	f000 fce8 	bl	80026b8 <HAL_Delay>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (f_open(&fil, "log0815.csv", FA_OPEN_ALWAYS | FA_WRITE) == FR_OK) {
 8001ce8:	2212      	movs	r2, #18
 8001cea:	4952      	ldr	r1, [pc, #328]	; (8001e34 <main+0x1b8>)
 8001cec:	4852      	ldr	r0, [pc, #328]	; (8001e38 <main+0x1bc>)
 8001cee:	f006 f875 	bl	8007ddc <f_open>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f040 8089 	bne.w	8001e0c <main+0x190>
			//strcpy(buffer, "hello world\n");

			read_bmx_accl(acc);
 8001cfa:	4850      	ldr	r0, [pc, #320]	; (8001e3c <main+0x1c0>)
 8001cfc:	f7ff f8b8 	bl	8000e70 <read_bmx_accl>
			read_bmx_gyro(gyro);
 8001d00:	484f      	ldr	r0, [pc, #316]	; (8001e40 <main+0x1c4>)
 8001d02:	f7ff f977 	bl	8000ff4 <read_bmx_gyro>
			read_bmx_mag(mag);
 8001d06:	484f      	ldr	r0, [pc, #316]	; (8001e44 <main+0x1c8>)
 8001d08:	f7ff fa24 	bl	8001154 <read_bmx_mag>

			currentTime = HAL_GetTick();
 8001d0c:	f000 fcc8 	bl	80026a0 <HAL_GetTick>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461a      	mov	r2, r3
 8001d14:	4b4c      	ldr	r3, [pc, #304]	; (8001e48 <main+0x1cc>)
 8001d16:	601a      	str	r2, [r3, #0]

			sprintf(buffer,
 8001d18:	4b4b      	ldr	r3, [pc, #300]	; (8001e48 <main+0x1cc>)
 8001d1a:	681e      	ldr	r6, [r3, #0]
					"%d, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f\n",
					currentTime, acc[0], acc[1], acc[2], gyro[0], gyro[1],
 8001d1c:	4b47      	ldr	r3, [pc, #284]	; (8001e3c <main+0x1c0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fc11 	bl	8000548 <__aeabi_f2d>
 8001d26:	e9c7 0108 	strd	r0, r1, [r7, #32]
					currentTime, acc[0], acc[1], acc[2], gyro[0], gyro[1],
 8001d2a:	4b44      	ldr	r3, [pc, #272]	; (8001e3c <main+0x1c0>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fc0a 	bl	8000548 <__aeabi_f2d>
 8001d34:	e9c7 0106 	strd	r0, r1, [r7, #24]
					currentTime, acc[0], acc[1], acc[2], gyro[0], gyro[1],
 8001d38:	4b40      	ldr	r3, [pc, #256]	; (8001e3c <main+0x1c0>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fc03 	bl	8000548 <__aeabi_f2d>
 8001d42:	e9c7 0104 	strd	r0, r1, [r7, #16]
					currentTime, acc[0], acc[1], acc[2], gyro[0], gyro[1],
 8001d46:	4b3e      	ldr	r3, [pc, #248]	; (8001e40 <main+0x1c4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fbfc 	bl	8000548 <__aeabi_f2d>
 8001d50:	e9c7 0102 	strd	r0, r1, [r7, #8]
					currentTime, acc[0], acc[1], acc[2], gyro[0], gyro[1],
 8001d54:	4b3a      	ldr	r3, [pc, #232]	; (8001e40 <main+0x1c4>)
 8001d56:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fbf5 	bl	8000548 <__aeabi_f2d>
 8001d5e:	e9c7 0100 	strd	r0, r1, [r7]
					gyro[2], mag[0], mag[1], mag[2]);
 8001d62:	4b37      	ldr	r3, [pc, #220]	; (8001e40 <main+0x1c4>)
 8001d64:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fbee 	bl	8000548 <__aeabi_f2d>
 8001d6c:	4682      	mov	sl, r0
 8001d6e:	468b      	mov	fp, r1
					gyro[2], mag[0], mag[1], mag[2]);
 8001d70:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <main+0x1c8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fbe7 	bl	8000548 <__aeabi_f2d>
 8001d7a:	4680      	mov	r8, r0
 8001d7c:	4689      	mov	r9, r1
					gyro[2], mag[0], mag[1], mag[2]);
 8001d7e:	4b31      	ldr	r3, [pc, #196]	; (8001e44 <main+0x1c8>)
 8001d80:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fbe0 	bl	8000548 <__aeabi_f2d>
 8001d88:	4604      	mov	r4, r0
 8001d8a:	460d      	mov	r5, r1
					gyro[2], mag[0], mag[1], mag[2]);
 8001d8c:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <main+0x1c8>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fbd9 	bl	8000548 <__aeabi_f2d>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001d9e:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8001da2:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8001da6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8001daa:	ed97 7b00 	vldr	d7, [r7]
 8001dae:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001db2:	ed97 7b02 	vldr	d7, [r7, #8]
 8001db6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001dba:	ed97 7b04 	vldr	d7, [r7, #16]
 8001dbe:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001dc2:	ed97 7b06 	vldr	d7, [r7, #24]
 8001dc6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001dca:	ed97 7b08 	vldr	d7, [r7, #32]
 8001dce:	ed8d 7b00 	vstr	d7, [sp]
 8001dd2:	4632      	mov	r2, r6
 8001dd4:	491d      	ldr	r1, [pc, #116]	; (8001e4c <main+0x1d0>)
 8001dd6:	481e      	ldr	r0, [pc, #120]	; (8001e50 <main+0x1d4>)
 8001dd8:	f007 fe86 	bl	8009ae8 <siprintf>
			// for debug
			printf("%s", buffer);
 8001ddc:	491c      	ldr	r1, [pc, #112]	; (8001e50 <main+0x1d4>)
 8001dde:	481d      	ldr	r0, [pc, #116]	; (8001e54 <main+0x1d8>)
 8001de0:	f007 fe64 	bl	8009aac <iprintf>
			f_lseek(&fil, f_size(&fil));
 8001de4:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <main+0x1bc>)
 8001de6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001dea:	4619      	mov	r1, r3
 8001dec:	4812      	ldr	r0, [pc, #72]	; (8001e38 <main+0x1bc>)
 8001dee:	f006 fcc9 	bl	8008784 <f_lseek>
			f_write(&fil, buffer, strlen(buffer), &bw);
 8001df2:	4817      	ldr	r0, [pc, #92]	; (8001e50 <main+0x1d4>)
 8001df4:	f7fe f9ec 	bl	80001d0 <strlen>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <main+0x1dc>)
 8001dfc:	4914      	ldr	r1, [pc, #80]	; (8001e50 <main+0x1d4>)
 8001dfe:	480e      	ldr	r0, [pc, #56]	; (8001e38 <main+0x1bc>)
 8001e00:	f006 f9f7 	bl	80081f2 <f_write>
			f_close(&fil);
 8001e04:	480c      	ldr	r0, [pc, #48]	; (8001e38 <main+0x1bc>)
 8001e06:	f006 fc95 	bl	8008734 <f_close>
 8001e0a:	e76d      	b.n	8001ce8 <main+0x6c>

		} else {
			printf("open failed");
 8001e0c:	4813      	ldr	r0, [pc, #76]	; (8001e5c <main+0x1e0>)
 8001e0e:	f007 fe4d 	bl	8009aac <iprintf>
		if (f_open(&fil, "log0815.csv", FA_OPEN_ALWAYS | FA_WRITE) == FR_OK) {
 8001e12:	e769      	b.n	8001ce8 <main+0x6c>
 8001e14:	2000070c 	.word	0x2000070c
 8001e18:	200006b4 	.word	0x200006b4
 8001e1c:	0800d650 	.word	0x0800d650
 8001e20:	0800d658 	.word	0x0800d658
 8001e24:	20000284 	.word	0x20000284
 8001e28:	20000808 	.word	0x20000808
 8001e2c:	0800d65c 	.word	0x0800d65c
 8001e30:	0800d67c 	.word	0x0800d67c
 8001e34:	0800d694 	.word	0x0800d694
 8001e38:	20000870 	.word	0x20000870
 8001e3c:	20000218 	.word	0x20000218
 8001e40:	20000224 	.word	0x20000224
 8001e44:	20000230 	.word	0x20000230
 8001e48:	2000023c 	.word	0x2000023c
 8001e4c:	0800d6a0 	.word	0x0800d6a0
 8001e50:	20000758 	.word	0x20000758
 8001e54:	0800d6dc 	.word	0x0800d6dc
 8001e58:	200007fc 	.word	0x200007fc
 8001e5c:	0800d6e0 	.word	0x0800d6e0

08001e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b096      	sub	sp, #88	; 0x58
 8001e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e6a:	2228      	movs	r2, #40	; 0x28
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f006 ff9a 	bl	8008da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	611a      	str	r2, [r3, #16]
 8001e92:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e94:	2302      	movs	r3, #2
 8001e96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e9c:	2310      	movs	r3, #16
 8001e9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001ea8:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8001eac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f001 fca2 	bl	80037fc <HAL_RCC_OscConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001ebe:	f000 f94d 	bl	800215c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ec2:	230f      	movs	r3, #15
 8001ec4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	2101      	movs	r1, #1
 8001edc:	4618      	mov	r0, r3
 8001ede:	f002 fb95 	bl	800460c <HAL_RCC_ClockConfig>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001ee8:	f000 f938 	bl	800215c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001eec:	2320      	movs	r3, #32
 8001eee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f002 fd6e 	bl	80049d8 <HAL_RCCEx_PeriphCLKConfig>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001f02:	f000 f92b 	bl	800215c <Error_Handler>
  }
}
 8001f06:	bf00      	nop
 8001f08:	3758      	adds	r7, #88	; 0x58
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f14:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f16:	4a1c      	ldr	r2, [pc, #112]	; (8001f88 <MX_I2C1_Init+0x78>)
 8001f18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f1c:	4a1b      	ldr	r2, [pc, #108]	; (8001f8c <MX_I2C1_Init+0x7c>)
 8001f1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f20:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f26:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f2c:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f32:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f4a:	480e      	ldr	r0, [pc, #56]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f4c:	f000 fe48 	bl	8002be0 <HAL_I2C_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f56:	f000 f901 	bl	800215c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4809      	ldr	r0, [pc, #36]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f5e:	f001 fbb5 	bl	80036cc <HAL_I2CEx_ConfigAnalogFilter>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f68:	f000 f8f8 	bl	800215c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4805      	ldr	r0, [pc, #20]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f70:	f001 fbf7 	bl	8003762 <HAL_I2CEx_ConfigDigitalFilter>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f7a:	f000 f8ef 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200006b4 	.word	0x200006b4
 8001f88:	40005400 	.word	0x40005400
 8001f8c:	2000090e 	.word	0x2000090e

08001f90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f94:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <MX_SPI1_Init+0x74>)
 8001f96:	4a1c      	ldr	r2, [pc, #112]	; (8002008 <MX_SPI1_Init+0x78>)
 8001f98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <MX_SPI1_Init+0x74>)
 8001f9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fa0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fa2:	4b18      	ldr	r3, [pc, #96]	; (8002004 <MX_SPI1_Init+0x74>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fa8:	4b16      	ldr	r3, [pc, #88]	; (8002004 <MX_SPI1_Init+0x74>)
 8001faa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <MX_SPI1_Init+0x74>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fb6:	4b13      	ldr	r3, [pc, #76]	; (8002004 <MX_SPI1_Init+0x74>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <MX_SPI1_Init+0x74>)
 8001fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <MX_SPI1_Init+0x74>)
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <MX_SPI1_Init+0x74>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <MX_SPI1_Init+0x74>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <MX_SPI1_Init+0x74>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <MX_SPI1_Init+0x74>)
 8001fde:	2207      	movs	r2, #7
 8001fe0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <MX_SPI1_Init+0x74>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <MX_SPI1_Init+0x74>)
 8001fea:	2208      	movs	r2, #8
 8001fec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fee:	4805      	ldr	r0, [pc, #20]	; (8002004 <MX_SPI1_Init+0x74>)
 8001ff0:	f002 fe18 	bl	8004c24 <HAL_SPI_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001ffa:	f000 f8af 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	2000080c 	.word	0x2000080c
 8002008:	40013000 	.word	0x40013000

0800200c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002012:	f107 0310 	add.w	r3, r7, #16
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800202a:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <MX_TIM3_Init+0x94>)
 800202c:	4a1d      	ldr	r2, [pc, #116]	; (80020a4 <MX_TIM3_Init+0x98>)
 800202e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002030:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <MX_TIM3_Init+0x94>)
 8002032:	2200      	movs	r2, #0
 8002034:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002036:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <MX_TIM3_Init+0x94>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800203c:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <MX_TIM3_Init+0x94>)
 800203e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002042:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002044:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <MX_TIM3_Init+0x94>)
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <MX_TIM3_Init+0x94>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002050:	4813      	ldr	r0, [pc, #76]	; (80020a0 <MX_TIM3_Init+0x94>)
 8002052:	f003 fb93 	bl	800577c <HAL_TIM_Base_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800205c:	f000 f87e 	bl	800215c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002064:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002066:	f107 0310 	add.w	r3, r7, #16
 800206a:	4619      	mov	r1, r3
 800206c:	480c      	ldr	r0, [pc, #48]	; (80020a0 <MX_TIM3_Init+0x94>)
 800206e:	f003 fc39 	bl	80058e4 <HAL_TIM_ConfigClockSource>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002078:	f000 f870 	bl	800215c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800207c:	2300      	movs	r3, #0
 800207e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002084:	1d3b      	adds	r3, r7, #4
 8002086:	4619      	mov	r1, r3
 8002088:	4805      	ldr	r0, [pc, #20]	; (80020a0 <MX_TIM3_Init+0x94>)
 800208a:	f003 fe07 	bl	8005c9c <HAL_TIMEx_MasterConfigSynchronization>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002094:	f000 f862 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002098:	bf00      	nop
 800209a:	3720      	adds	r7, #32
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	2000070c 	.word	0x2000070c
 80020a4:	40000400 	.word	0x40000400

080020a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ae:	f107 030c 	add.w	r3, r7, #12
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	60da      	str	r2, [r3, #12]
 80020bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <MX_GPIO_Init+0x78>)
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	4a17      	ldr	r2, [pc, #92]	; (8002120 <MX_GPIO_Init+0x78>)
 80020c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c8:	6153      	str	r3, [r2, #20]
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <MX_GPIO_Init+0x78>)
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d6:	4b12      	ldr	r3, [pc, #72]	; (8002120 <MX_GPIO_Init+0x78>)
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	4a11      	ldr	r2, [pc, #68]	; (8002120 <MX_GPIO_Init+0x78>)
 80020dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020e0:	6153      	str	r3, [r2, #20]
 80020e2:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <MX_GPIO_Init+0x78>)
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2110      	movs	r1, #16
 80020f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f6:	f000 fd5b 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020fa:	2310      	movs	r3, #16
 80020fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fe:	2301      	movs	r3, #1
 8002100:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210a:	f107 030c 	add.w	r3, r7, #12
 800210e:	4619      	mov	r1, r3
 8002110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002114:	f000 fbda 	bl	80028cc <HAL_GPIO_Init>

}
 8002118:	bf00      	nop
 800211a:	3720      	adds	r7, #32
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000

08002124 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	e009      	b.n	800214a <_write+0x26>
		ITM_SendChar(*ptr++);
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	60ba      	str	r2, [r7, #8]
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fd74 	bl	8001c2c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	3301      	adds	r3, #1
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	429a      	cmp	r2, r3
 8002150:	dbf1      	blt.n	8002136 <_write+0x12>
	}
	return len;
 8002152:	687b      	ldr	r3, [r7, #4]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002160:	b672      	cpsid	i
}
 8002162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002164:	e7fe      	b.n	8002164 <Error_Handler+0x8>
	...

08002168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216e:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <HAL_MspInit+0x44>)
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	4a0e      	ldr	r2, [pc, #56]	; (80021ac <HAL_MspInit+0x44>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6193      	str	r3, [r2, #24]
 800217a:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <HAL_MspInit+0x44>)
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_MspInit+0x44>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	4a08      	ldr	r2, [pc, #32]	; (80021ac <HAL_MspInit+0x44>)
 800218c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002190:	61d3      	str	r3, [r2, #28]
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_MspInit+0x44>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000

080021b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	; 0x28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a26      	ldr	r2, [pc, #152]	; (8002268 <HAL_I2C_MspInit+0xb8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d145      	bne.n	800225e <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d2:	4b26      	ldr	r3, [pc, #152]	; (800226c <HAL_I2C_MspInit+0xbc>)
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	4a25      	ldr	r2, [pc, #148]	; (800226c <HAL_I2C_MspInit+0xbc>)
 80021d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021dc:	6153      	str	r3, [r2, #20]
 80021de:	4b23      	ldr	r3, [pc, #140]	; (800226c <HAL_I2C_MspInit+0xbc>)
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_I2C_MspInit+0xbc>)
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	4a1f      	ldr	r2, [pc, #124]	; (800226c <HAL_I2C_MspInit+0xbc>)
 80021f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f4:	6153      	str	r3, [r2, #20]
 80021f6:	4b1d      	ldr	r3, [pc, #116]	; (800226c <HAL_I2C_MspInit+0xbc>)
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002208:	2312      	movs	r3, #18
 800220a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002210:	2303      	movs	r3, #3
 8002212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002214:	2304      	movs	r3, #4
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	4619      	mov	r1, r3
 800221e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002222:	f000 fb53 	bl	80028cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800222a:	2312      	movs	r3, #18
 800222c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002232:	2303      	movs	r3, #3
 8002234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002236:	2304      	movs	r3, #4
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223a:	f107 0314 	add.w	r3, r7, #20
 800223e:	4619      	mov	r1, r3
 8002240:	480b      	ldr	r0, [pc, #44]	; (8002270 <HAL_I2C_MspInit+0xc0>)
 8002242:	f000 fb43 	bl	80028cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <HAL_I2C_MspInit+0xbc>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	4a08      	ldr	r2, [pc, #32]	; (800226c <HAL_I2C_MspInit+0xbc>)
 800224c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002250:	61d3      	str	r3, [r2, #28]
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_I2C_MspInit+0xbc>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800225e:	bf00      	nop
 8002260:	3728      	adds	r7, #40	; 0x28
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40005400 	.word	0x40005400
 800226c:	40021000 	.word	0x40021000
 8002270:	48000400 	.word	0x48000400

08002274 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08a      	sub	sp, #40	; 0x28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a20      	ldr	r2, [pc, #128]	; (8002314 <HAL_SPI_MspInit+0xa0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d139      	bne.n	800230a <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002296:	4b20      	ldr	r3, [pc, #128]	; (8002318 <HAL_SPI_MspInit+0xa4>)
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	4a1f      	ldr	r2, [pc, #124]	; (8002318 <HAL_SPI_MspInit+0xa4>)
 800229c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022a0:	6193      	str	r3, [r2, #24]
 80022a2:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_SPI_MspInit+0xa4>)
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <HAL_SPI_MspInit+0xa4>)
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	4a19      	ldr	r2, [pc, #100]	; (8002318 <HAL_SPI_MspInit+0xa4>)
 80022b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b8:	6153      	str	r3, [r2, #20]
 80022ba:	4b17      	ldr	r3, [pc, #92]	; (8002318 <HAL_SPI_MspInit+0xa4>)
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80022c6:	2320      	movs	r3, #32
 80022c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022d2:	2303      	movs	r3, #3
 80022d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022d6:	2305      	movs	r3, #5
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022da:	f107 0314 	add.w	r3, r7, #20
 80022de:	4619      	mov	r1, r3
 80022e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e4:	f000 faf2 	bl	80028cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022e8:	23c0      	movs	r3, #192	; 0xc0
 80022ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022f0:	2301      	movs	r3, #1
 80022f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022f4:	2303      	movs	r3, #3
 80022f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022f8:	2305      	movs	r3, #5
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	4619      	mov	r1, r3
 8002302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002306:	f000 fae1 	bl	80028cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800230a:	bf00      	nop
 800230c:	3728      	adds	r7, #40	; 0x28
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40013000 	.word	0x40013000
 8002318:	40021000 	.word	0x40021000

0800231c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <HAL_TIM_Base_MspInit+0x38>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d10b      	bne.n	8002346 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <HAL_TIM_Base_MspInit+0x3c>)
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	4a09      	ldr	r2, [pc, #36]	; (8002358 <HAL_TIM_Base_MspInit+0x3c>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	61d3      	str	r3, [r2, #28]
 800233a:	4b07      	ldr	r3, [pc, #28]	; (8002358 <HAL_TIM_Base_MspInit+0x3c>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40000400 	.word	0x40000400
 8002358:	40021000 	.word	0x40021000

0800235c <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void) {
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 8002360:	4b0e      	ldr	r3, [pc, #56]	; (800239c <SDTimer_Handler+0x40>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d006      	beq.n	8002378 <SDTimer_Handler+0x1c>
		Timer1--;
 800236a:	4b0c      	ldr	r3, [pc, #48]	; (800239c <SDTimer_Handler+0x40>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b2da      	uxtb	r2, r3
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <SDTimer_Handler+0x40>)
 8002376:	701a      	strb	r2, [r3, #0]
	if (Timer2 > 0)
 8002378:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <SDTimer_Handler+0x44>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d006      	beq.n	8002390 <SDTimer_Handler+0x34>
		Timer2--;
 8002382:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <SDTimer_Handler+0x44>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b2da      	uxtb	r2, r3
 800238c:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <SDTimer_Handler+0x44>)
 800238e:	701a      	strb	r2, [r3, #0]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000c9d 	.word	0x20000c9d
 80023a0:	20000c9c 	.word	0x20000c9c

080023a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80023a8:	e7fe      	b.n	80023a8 <NMI_Handler+0x4>

080023aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ae:	e7fe      	b.n	80023ae <HardFault_Handler+0x4>

080023b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <MemManage_Handler+0x4>

080023b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ba:	e7fe      	b.n	80023ba <BusFault_Handler+0x4>

080023bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <UsageFault_Handler+0x4>

080023c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <SysTick_Handler+0x30>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	3301      	adds	r3, #1
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <SysTick_Handler+0x30>)
 80023fc:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10) {
 80023fe:	4b07      	ldr	r3, [pc, #28]	; (800241c <SysTick_Handler+0x30>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b09      	cmp	r3, #9
 8002406:	d904      	bls.n	8002412 <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8002408:	4b04      	ldr	r3, [pc, #16]	; (800241c <SysTick_Handler+0x30>)
 800240a:	2200      	movs	r2, #0
 800240c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800240e:	f7ff ffa5 	bl	800235c <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002412:	f000 f931 	bl	8002678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000240 	.word	0x20000240

08002420 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
	return 1;
 8002424:	2301      	movs	r3, #1
}
 8002426:	4618      	mov	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <_kill>:

int _kill(int pid, int sig)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800243a:	f006 fc8b 	bl	8008d54 <__errno>
 800243e:	4603      	mov	r3, r0
 8002440:	2216      	movs	r2, #22
 8002442:	601a      	str	r2, [r3, #0]
	return -1;
 8002444:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <_exit>:

void _exit (int status)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002458:	f04f 31ff 	mov.w	r1, #4294967295
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7ff ffe7 	bl	8002430 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002462:	e7fe      	b.n	8002462 <_exit+0x12>

08002464 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	e00a      	b.n	800248c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002476:	f3af 8000 	nop.w
 800247a:	4601      	mov	r1, r0
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	60ba      	str	r2, [r7, #8]
 8002482:	b2ca      	uxtb	r2, r1
 8002484:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	3301      	adds	r3, #1
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	429a      	cmp	r2, r3
 8002492:	dbf0      	blt.n	8002476 <_read+0x12>
	}

return len;
 8002494:	687b      	ldr	r3, [r7, #4]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <_close>:
	}
	return len;
}

int _close(int file)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
	return -1;
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024c6:	605a      	str	r2, [r3, #4]
	return 0;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <_isatty>:

int _isatty(int file)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
	return 1;
 80024de:	2301      	movs	r3, #1
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
	return 0;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002510:	4a14      	ldr	r2, [pc, #80]	; (8002564 <_sbrk+0x5c>)
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <_sbrk+0x60>)
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800251c:	4b13      	ldr	r3, [pc, #76]	; (800256c <_sbrk+0x64>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <_sbrk+0x64>)
 8002526:	4a12      	ldr	r2, [pc, #72]	; (8002570 <_sbrk+0x68>)
 8002528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <_sbrk+0x64>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	429a      	cmp	r2, r3
 8002536:	d207      	bcs.n	8002548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002538:	f006 fc0c 	bl	8008d54 <__errno>
 800253c:	4603      	mov	r3, r0
 800253e:	220c      	movs	r2, #12
 8002540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002542:	f04f 33ff 	mov.w	r3, #4294967295
 8002546:	e009      	b.n	800255c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002548:	4b08      	ldr	r3, [pc, #32]	; (800256c <_sbrk+0x64>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800254e:	4b07      	ldr	r3, [pc, #28]	; (800256c <_sbrk+0x64>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	4a05      	ldr	r2, [pc, #20]	; (800256c <_sbrk+0x64>)
 8002558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800255a:	68fb      	ldr	r3, [r7, #12]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20003000 	.word	0x20003000
 8002568:	00000400 	.word	0x00000400
 800256c:	20000244 	.word	0x20000244
 8002570:	20001518 	.word	0x20001518

08002574 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <SystemInit+0x20>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257e:	4a05      	ldr	r2, [pc, #20]	; (8002594 <SystemInit+0x20>)
 8002580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025d0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800259c:	f7ff ffea 	bl	8002574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025a0:	480c      	ldr	r0, [pc, #48]	; (80025d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80025a2:	490d      	ldr	r1, [pc, #52]	; (80025d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025a4:	4a0d      	ldr	r2, [pc, #52]	; (80025dc <LoopForever+0xe>)
  movs r3, #0
 80025a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025a8:	e002      	b.n	80025b0 <LoopCopyDataInit>

080025aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ae:	3304      	adds	r3, #4

080025b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b4:	d3f9      	bcc.n	80025aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025b6:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025b8:	4c0a      	ldr	r4, [pc, #40]	; (80025e4 <LoopForever+0x16>)
  movs r3, #0
 80025ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025bc:	e001      	b.n	80025c2 <LoopFillZerobss>

080025be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c0:	3204      	adds	r2, #4

080025c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c4:	d3fb      	bcc.n	80025be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025c6:	f006 fbcb 	bl	8008d60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025ca:	f7ff fb57 	bl	8001c7c <main>

080025ce <LoopForever>:

LoopForever:
    b LoopForever
 80025ce:	e7fe      	b.n	80025ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80025d0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80025d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80025dc:	0800dc9c 	.word	0x0800dc9c
  ldr r2, =_sbss
 80025e0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80025e4:	20001518 	.word	0x20001518

080025e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025e8:	e7fe      	b.n	80025e8 <ADC1_2_IRQHandler>
	...

080025ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025f0:	4b08      	ldr	r3, [pc, #32]	; (8002614 <HAL_Init+0x28>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a07      	ldr	r2, [pc, #28]	; (8002614 <HAL_Init+0x28>)
 80025f6:	f043 0310 	orr.w	r3, r3, #16
 80025fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025fc:	2003      	movs	r0, #3
 80025fe:	f000 f931 	bl	8002864 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002602:	200f      	movs	r0, #15
 8002604:	f000 f808 	bl	8002618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002608:	f7ff fdae 	bl	8002168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40022000 	.word	0x40022000

08002618 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002620:	4b12      	ldr	r3, [pc, #72]	; (800266c <HAL_InitTick+0x54>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <HAL_InitTick+0x58>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	4619      	mov	r1, r3
 800262a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800262e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002632:	fbb2 f3f3 	udiv	r3, r2, r3
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f93b 	bl	80028b2 <HAL_SYSTICK_Config>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e00e      	b.n	8002664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b0f      	cmp	r3, #15
 800264a:	d80a      	bhi.n	8002662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800264c:	2200      	movs	r2, #0
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	f04f 30ff 	mov.w	r0, #4294967295
 8002654:	f000 f911 	bl	800287a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002658:	4a06      	ldr	r2, [pc, #24]	; (8002674 <HAL_InitTick+0x5c>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	e000      	b.n	8002664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000004 	.word	0x20000004
 8002670:	2000000c 	.word	0x2000000c
 8002674:	20000008 	.word	0x20000008

08002678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_IncTick+0x20>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	461a      	mov	r2, r3
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_IncTick+0x24>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4413      	add	r3, r2
 8002688:	4a04      	ldr	r2, [pc, #16]	; (800269c <HAL_IncTick+0x24>)
 800268a:	6013      	str	r3, [r2, #0]
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	2000000c 	.word	0x2000000c
 800269c:	20000ca0 	.word	0x20000ca0

080026a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80026a4:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <HAL_GetTick+0x14>)
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	20000ca0 	.word	0x20000ca0

080026b8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026c0:	f7ff ffee 	bl	80026a0 <HAL_GetTick>
 80026c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d0:	d005      	beq.n	80026de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026d2:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <HAL_Delay+0x44>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4413      	add	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80026de:	bf00      	nop
 80026e0:	f7ff ffde 	bl	80026a0 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d8f7      	bhi.n	80026e0 <HAL_Delay+0x28>
  {
  }
}
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	2000000c 	.word	0x2000000c

08002700 <__NVIC_SetPriorityGrouping>:
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <__NVIC_SetPriorityGrouping+0x44>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800271c:	4013      	ands	r3, r2
 800271e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800272c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002732:	4a04      	ldr	r2, [pc, #16]	; (8002744 <__NVIC_SetPriorityGrouping+0x44>)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	60d3      	str	r3, [r2, #12]
}
 8002738:	bf00      	nop
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <__NVIC_GetPriorityGrouping>:
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800274c:	4b04      	ldr	r3, [pc, #16]	; (8002760 <__NVIC_GetPriorityGrouping+0x18>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	0a1b      	lsrs	r3, r3, #8
 8002752:	f003 0307 	and.w	r3, r3, #7
}
 8002756:	4618      	mov	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <__NVIC_SetPriority>:
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	6039      	str	r1, [r7, #0]
 800276e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002774:	2b00      	cmp	r3, #0
 8002776:	db0a      	blt.n	800278e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	b2da      	uxtb	r2, r3
 800277c:	490c      	ldr	r1, [pc, #48]	; (80027b0 <__NVIC_SetPriority+0x4c>)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	0112      	lsls	r2, r2, #4
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	440b      	add	r3, r1
 8002788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800278c:	e00a      	b.n	80027a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	b2da      	uxtb	r2, r3
 8002792:	4908      	ldr	r1, [pc, #32]	; (80027b4 <__NVIC_SetPriority+0x50>)
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	3b04      	subs	r3, #4
 800279c:	0112      	lsls	r2, r2, #4
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	440b      	add	r3, r1
 80027a2:	761a      	strb	r2, [r3, #24]
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	e000e100 	.word	0xe000e100
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <NVIC_EncodePriority>:
{
 80027b8:	b480      	push	{r7}
 80027ba:	b089      	sub	sp, #36	; 0x24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f1c3 0307 	rsb	r3, r3, #7
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	bf28      	it	cs
 80027d6:	2304      	movcs	r3, #4
 80027d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3304      	adds	r3, #4
 80027de:	2b06      	cmp	r3, #6
 80027e0:	d902      	bls.n	80027e8 <NVIC_EncodePriority+0x30>
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3b03      	subs	r3, #3
 80027e6:	e000      	b.n	80027ea <NVIC_EncodePriority+0x32>
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ec:	f04f 32ff 	mov.w	r2, #4294967295
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43da      	mvns	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	401a      	ands	r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002800:	f04f 31ff 	mov.w	r1, #4294967295
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	fa01 f303 	lsl.w	r3, r1, r3
 800280a:	43d9      	mvns	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002810:	4313      	orrs	r3, r2
}
 8002812:	4618      	mov	r0, r3
 8002814:	3724      	adds	r7, #36	; 0x24
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <SysTick_Config>:
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3b01      	subs	r3, #1
 800282c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002830:	d301      	bcc.n	8002836 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002832:	2301      	movs	r3, #1
 8002834:	e00f      	b.n	8002856 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002836:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <SysTick_Config+0x40>)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3b01      	subs	r3, #1
 800283c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800283e:	210f      	movs	r1, #15
 8002840:	f04f 30ff 	mov.w	r0, #4294967295
 8002844:	f7ff ff8e 	bl	8002764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002848:	4b05      	ldr	r3, [pc, #20]	; (8002860 <SysTick_Config+0x40>)
 800284a:	2200      	movs	r2, #0
 800284c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800284e:	4b04      	ldr	r3, [pc, #16]	; (8002860 <SysTick_Config+0x40>)
 8002850:	2207      	movs	r2, #7
 8002852:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	e000e010 	.word	0xe000e010

08002864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff ff47 	bl	8002700 <__NVIC_SetPriorityGrouping>
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b086      	sub	sp, #24
 800287e:	af00      	add	r7, sp, #0
 8002880:	4603      	mov	r3, r0
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800288c:	f7ff ff5c 	bl	8002748 <__NVIC_GetPriorityGrouping>
 8002890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	6978      	ldr	r0, [r7, #20]
 8002898:	f7ff ff8e 	bl	80027b8 <NVIC_EncodePriority>
 800289c:	4602      	mov	r2, r0
 800289e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a2:	4611      	mov	r1, r2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff ff5d 	bl	8002764 <__NVIC_SetPriority>
}
 80028aa:	bf00      	nop
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff ffb0 	bl	8002820 <SysTick_Config>
 80028c0:	4603      	mov	r3, r0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028da:	e14e      	b.n	8002b7a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	2101      	movs	r1, #1
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	fa01 f303 	lsl.w	r3, r1, r3
 80028e8:	4013      	ands	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 8140 	beq.w	8002b74 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d005      	beq.n	800290c <HAL_GPIO_Init+0x40>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d130      	bne.n	800296e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002942:	2201      	movs	r2, #1
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4013      	ands	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	091b      	lsrs	r3, r3, #4
 8002958:	f003 0201 	and.w	r2, r3, #1
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2b03      	cmp	r3, #3
 8002978:	d017      	beq.n	80029aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	2203      	movs	r2, #3
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4013      	ands	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d123      	bne.n	80029fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	08da      	lsrs	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3208      	adds	r2, #8
 80029be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	220f      	movs	r2, #15
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	691a      	ldr	r2, [r3, #16]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	08da      	lsrs	r2, r3, #3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3208      	adds	r2, #8
 80029f8:	6939      	ldr	r1, [r7, #16]
 80029fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	2203      	movs	r2, #3
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f003 0203 	and.w	r2, r3, #3
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 809a 	beq.w	8002b74 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a40:	4b55      	ldr	r3, [pc, #340]	; (8002b98 <HAL_GPIO_Init+0x2cc>)
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	4a54      	ldr	r2, [pc, #336]	; (8002b98 <HAL_GPIO_Init+0x2cc>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	6193      	str	r3, [r2, #24]
 8002a4c:	4b52      	ldr	r3, [pc, #328]	; (8002b98 <HAL_GPIO_Init+0x2cc>)
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a58:	4a50      	ldr	r2, [pc, #320]	; (8002b9c <HAL_GPIO_Init+0x2d0>)
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	089b      	lsrs	r3, r3, #2
 8002a5e:	3302      	adds	r3, #2
 8002a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	220f      	movs	r2, #15
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a82:	d013      	beq.n	8002aac <HAL_GPIO_Init+0x1e0>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a46      	ldr	r2, [pc, #280]	; (8002ba0 <HAL_GPIO_Init+0x2d4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00d      	beq.n	8002aa8 <HAL_GPIO_Init+0x1dc>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a45      	ldr	r2, [pc, #276]	; (8002ba4 <HAL_GPIO_Init+0x2d8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d007      	beq.n	8002aa4 <HAL_GPIO_Init+0x1d8>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a44      	ldr	r2, [pc, #272]	; (8002ba8 <HAL_GPIO_Init+0x2dc>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d101      	bne.n	8002aa0 <HAL_GPIO_Init+0x1d4>
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e006      	b.n	8002aae <HAL_GPIO_Init+0x1e2>
 8002aa0:	2305      	movs	r3, #5
 8002aa2:	e004      	b.n	8002aae <HAL_GPIO_Init+0x1e2>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e002      	b.n	8002aae <HAL_GPIO_Init+0x1e2>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <HAL_GPIO_Init+0x1e2>
 8002aac:	2300      	movs	r3, #0
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	f002 0203 	and.w	r2, r2, #3
 8002ab4:	0092      	lsls	r2, r2, #2
 8002ab6:	4093      	lsls	r3, r2
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002abe:	4937      	ldr	r1, [pc, #220]	; (8002b9c <HAL_GPIO_Init+0x2d0>)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	089b      	lsrs	r3, r3, #2
 8002ac4:	3302      	adds	r3, #2
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002acc:	4b37      	ldr	r3, [pc, #220]	; (8002bac <HAL_GPIO_Init+0x2e0>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002af0:	4a2e      	ldr	r2, [pc, #184]	; (8002bac <HAL_GPIO_Init+0x2e0>)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002af6:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <HAL_GPIO_Init+0x2e0>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	43db      	mvns	r3, r3
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4013      	ands	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b1a:	4a24      	ldr	r2, [pc, #144]	; (8002bac <HAL_GPIO_Init+0x2e0>)
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b20:	4b22      	ldr	r3, [pc, #136]	; (8002bac <HAL_GPIO_Init+0x2e0>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b44:	4a19      	ldr	r2, [pc, #100]	; (8002bac <HAL_GPIO_Init+0x2e0>)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b4a:	4b18      	ldr	r3, [pc, #96]	; (8002bac <HAL_GPIO_Init+0x2e0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	43db      	mvns	r3, r3
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4013      	ands	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b6e:	4a0f      	ldr	r2, [pc, #60]	; (8002bac <HAL_GPIO_Init+0x2e0>)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	3301      	adds	r3, #1
 8002b78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f47f aea9 	bne.w	80028dc <HAL_GPIO_Init+0x10>
  }
}
 8002b8a:	bf00      	nop
 8002b8c:	bf00      	nop
 8002b8e:	371c      	adds	r7, #28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40010000 	.word	0x40010000
 8002ba0:	48000400 	.word	0x48000400
 8002ba4:	48000800 	.word	0x48000800
 8002ba8:	48000c00 	.word	0x48000c00
 8002bac:	40010400 	.word	0x40010400

08002bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc0:	787b      	ldrb	r3, [r7, #1]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bc6:	887a      	ldrh	r2, [r7, #2]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bcc:	e002      	b.n	8002bd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bce:	887a      	ldrh	r2, [r7, #2]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e081      	b.n	8002cf6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d106      	bne.n	8002c0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff fad2 	bl	80021b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2224      	movs	r2, #36	; 0x24
 8002c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0201 	bic.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d107      	bne.n	8002c5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	e006      	b.n	8002c68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d104      	bne.n	8002c7a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691a      	ldr	r2, [r3, #16]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69d9      	ldr	r1, [r3, #28]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1a      	ldr	r2, [r3, #32]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	4608      	mov	r0, r1
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4603      	mov	r3, r0
 8002d10:	817b      	strh	r3, [r7, #10]
 8002d12:	460b      	mov	r3, r1
 8002d14:	813b      	strh	r3, [r7, #8]
 8002d16:	4613      	mov	r3, r2
 8002d18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	f040 80f9 	bne.w	8002f1a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <HAL_I2C_Mem_Write+0x34>
 8002d2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d105      	bne.n	8002d40 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d3a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0ed      	b.n	8002f1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_I2C_Mem_Write+0x4e>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e0e6      	b.n	8002f1c <HAL_I2C_Mem_Write+0x21c>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d56:	f7ff fca3 	bl	80026a0 <HAL_GetTick>
 8002d5a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	2319      	movs	r3, #25
 8002d62:	2201      	movs	r2, #1
 8002d64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 fac3 	bl	80032f4 <I2C_WaitOnFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0d1      	b.n	8002f1c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2221      	movs	r2, #33	; 0x21
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2240      	movs	r2, #64	; 0x40
 8002d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a3a      	ldr	r2, [r7, #32]
 8002d92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002da0:	88f8      	ldrh	r0, [r7, #6]
 8002da2:	893a      	ldrh	r2, [r7, #8]
 8002da4:	8979      	ldrh	r1, [r7, #10]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	9301      	str	r3, [sp, #4]
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	4603      	mov	r3, r0
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f9d3 	bl	800315c <I2C_RequestMemoryWrite>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0a9      	b.n	8002f1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	2bff      	cmp	r3, #255	; 0xff
 8002dd0:	d90e      	bls.n	8002df0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	22ff      	movs	r2, #255	; 0xff
 8002dd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	8979      	ldrh	r1, [r7, #10]
 8002de0:	2300      	movs	r3, #0
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 fc3d 	bl	8003668 <I2C_TransferConfig>
 8002dee:	e00f      	b.n	8002e10 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	8979      	ldrh	r1, [r7, #10]
 8002e02:	2300      	movs	r3, #0
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 fc2c 	bl	8003668 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 fabc 	bl	8003392 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e07b      	b.n	8002f1c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	781a      	ldrb	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d034      	beq.n	8002ec8 <HAL_I2C_Mem_Write+0x1c8>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d130      	bne.n	8002ec8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2180      	movs	r1, #128	; 0x80
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 fa3f 	bl	80032f4 <I2C_WaitOnFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e04d      	b.n	8002f1c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2bff      	cmp	r3, #255	; 0xff
 8002e88:	d90e      	bls.n	8002ea8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	22ff      	movs	r2, #255	; 0xff
 8002e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	8979      	ldrh	r1, [r7, #10]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 fbe1 	bl	8003668 <I2C_TransferConfig>
 8002ea6:	e00f      	b.n	8002ec8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	8979      	ldrh	r1, [r7, #10]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 fbd0 	bl	8003668 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d19e      	bne.n	8002e10 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 faa2 	bl	8003420 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e01a      	b.n	8002f1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2220      	movs	r2, #32
 8002eec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <HAL_I2C_Mem_Write+0x224>)
 8002efa:	400b      	ands	r3, r1
 8002efc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	e000      	b.n	8002f1c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002f1a:	2302      	movs	r3, #2
  }
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	fe00e800 	.word	0xfe00e800

08002f28 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	4608      	mov	r0, r1
 8002f32:	4611      	mov	r1, r2
 8002f34:	461a      	mov	r2, r3
 8002f36:	4603      	mov	r3, r0
 8002f38:	817b      	strh	r3, [r7, #10]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	813b      	strh	r3, [r7, #8]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b20      	cmp	r3, #32
 8002f4c:	f040 80fd 	bne.w	800314a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <HAL_I2C_Mem_Read+0x34>
 8002f56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d105      	bne.n	8002f68 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f62:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0f1      	b.n	800314c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_I2C_Mem_Read+0x4e>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e0ea      	b.n	800314c <HAL_I2C_Mem_Read+0x224>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f7e:	f7ff fb8f 	bl	80026a0 <HAL_GetTick>
 8002f82:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	2319      	movs	r3, #25
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f9af 	bl	80032f4 <I2C_WaitOnFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0d5      	b.n	800314c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2222      	movs	r2, #34	; 0x22
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2240      	movs	r2, #64	; 0x40
 8002fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a3a      	ldr	r2, [r7, #32]
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fc8:	88f8      	ldrh	r0, [r7, #6]
 8002fca:	893a      	ldrh	r2, [r7, #8]
 8002fcc:	8979      	ldrh	r1, [r7, #10]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	9301      	str	r3, [sp, #4]
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f913 	bl	8003204 <I2C_RequestMemoryRead>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0ad      	b.n	800314c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2bff      	cmp	r3, #255	; 0xff
 8002ff8:	d90e      	bls.n	8003018 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	22ff      	movs	r2, #255	; 0xff
 8002ffe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003004:	b2da      	uxtb	r2, r3
 8003006:	8979      	ldrh	r1, [r7, #10]
 8003008:	4b52      	ldr	r3, [pc, #328]	; (8003154 <HAL_I2C_Mem_Read+0x22c>)
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 fb29 	bl	8003668 <I2C_TransferConfig>
 8003016:	e00f      	b.n	8003038 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301c:	b29a      	uxth	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003026:	b2da      	uxtb	r2, r3
 8003028:	8979      	ldrh	r1, [r7, #10]
 800302a:	4b4a      	ldr	r3, [pc, #296]	; (8003154 <HAL_I2C_Mem_Read+0x22c>)
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 fb18 	bl	8003668 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303e:	2200      	movs	r2, #0
 8003040:	2104      	movs	r1, #4
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f956 	bl	80032f4 <I2C_WaitOnFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e07c      	b.n	800314c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307a:	b29b      	uxth	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d034      	beq.n	80030f8 <HAL_I2C_Mem_Read+0x1d0>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003092:	2b00      	cmp	r3, #0
 8003094:	d130      	bne.n	80030f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309c:	2200      	movs	r2, #0
 800309e:	2180      	movs	r1, #128	; 0x80
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 f927 	bl	80032f4 <I2C_WaitOnFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e04d      	b.n	800314c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2bff      	cmp	r3, #255	; 0xff
 80030b8:	d90e      	bls.n	80030d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	22ff      	movs	r2, #255	; 0xff
 80030be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	8979      	ldrh	r1, [r7, #10]
 80030c8:	2300      	movs	r3, #0
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 fac9 	bl	8003668 <I2C_TransferConfig>
 80030d6:	e00f      	b.n	80030f8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	8979      	ldrh	r1, [r7, #10]
 80030ea:	2300      	movs	r3, #0
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 fab8 	bl	8003668 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d19a      	bne.n	8003038 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f98a 	bl	8003420 <I2C_WaitOnSTOPFlagUntilTimeout>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e01a      	b.n	800314c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2220      	movs	r2, #32
 800311c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6859      	ldr	r1, [r3, #4]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <HAL_I2C_Mem_Read+0x230>)
 800312a:	400b      	ands	r3, r1
 800312c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2220      	movs	r2, #32
 8003132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	e000      	b.n	800314c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800314a:	2302      	movs	r3, #2
  }
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	80002400 	.word	0x80002400
 8003158:	fe00e800 	.word	0xfe00e800

0800315c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af02      	add	r7, sp, #8
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	4608      	mov	r0, r1
 8003166:	4611      	mov	r1, r2
 8003168:	461a      	mov	r2, r3
 800316a:	4603      	mov	r3, r0
 800316c:	817b      	strh	r3, [r7, #10]
 800316e:	460b      	mov	r3, r1
 8003170:	813b      	strh	r3, [r7, #8]
 8003172:	4613      	mov	r3, r2
 8003174:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	b2da      	uxtb	r2, r3
 800317a:	8979      	ldrh	r1, [r7, #10]
 800317c:	4b20      	ldr	r3, [pc, #128]	; (8003200 <I2C_RequestMemoryWrite+0xa4>)
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 fa6f 	bl	8003668 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	69b9      	ldr	r1, [r7, #24]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f8ff 	bl	8003392 <I2C_WaitOnTXISFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e02c      	b.n	80031f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d105      	bne.n	80031b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031a4:	893b      	ldrh	r3, [r7, #8]
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	629a      	str	r2, [r3, #40]	; 0x28
 80031ae:	e015      	b.n	80031dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031b0:	893b      	ldrh	r3, [r7, #8]
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	69b9      	ldr	r1, [r7, #24]
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 f8e5 	bl	8003392 <I2C_WaitOnTXISFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e012      	b.n	80031f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031d2:	893b      	ldrh	r3, [r7, #8]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	2200      	movs	r2, #0
 80031e4:	2180      	movs	r1, #128	; 0x80
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f884 	bl	80032f4 <I2C_WaitOnFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	80002000 	.word	0x80002000

08003204 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	4608      	mov	r0, r1
 800320e:	4611      	mov	r1, r2
 8003210:	461a      	mov	r2, r3
 8003212:	4603      	mov	r3, r0
 8003214:	817b      	strh	r3, [r7, #10]
 8003216:	460b      	mov	r3, r1
 8003218:	813b      	strh	r3, [r7, #8]
 800321a:	4613      	mov	r3, r2
 800321c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	b2da      	uxtb	r2, r3
 8003222:	8979      	ldrh	r1, [r7, #10]
 8003224:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <I2C_RequestMemoryRead+0xa4>)
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	2300      	movs	r3, #0
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 fa1c 	bl	8003668 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	69b9      	ldr	r1, [r7, #24]
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f8ac 	bl	8003392 <I2C_WaitOnTXISFlagUntilTimeout>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e02c      	b.n	800329e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003244:	88fb      	ldrh	r3, [r7, #6]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d105      	bne.n	8003256 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800324a:	893b      	ldrh	r3, [r7, #8]
 800324c:	b2da      	uxtb	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	629a      	str	r2, [r3, #40]	; 0x28
 8003254:	e015      	b.n	8003282 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003256:	893b      	ldrh	r3, [r7, #8]
 8003258:	0a1b      	lsrs	r3, r3, #8
 800325a:	b29b      	uxth	r3, r3
 800325c:	b2da      	uxtb	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003264:	69fa      	ldr	r2, [r7, #28]
 8003266:	69b9      	ldr	r1, [r7, #24]
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f892 	bl	8003392 <I2C_WaitOnTXISFlagUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e012      	b.n	800329e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003278:	893b      	ldrh	r3, [r7, #8]
 800327a:	b2da      	uxtb	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	2200      	movs	r2, #0
 800328a:	2140      	movs	r1, #64	; 0x40
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f831 	bl	80032f4 <I2C_WaitOnFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	80002000 	.word	0x80002000

080032ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d103      	bne.n	80032ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2200      	movs	r2, #0
 80032c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d007      	beq.n	80032e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	619a      	str	r2, [r3, #24]
  }
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	4613      	mov	r3, r2
 8003302:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003304:	e031      	b.n	800336a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330c:	d02d      	beq.n	800336a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800330e:	f7ff f9c7 	bl	80026a0 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d302      	bcc.n	8003324 <I2C_WaitOnFlagUntilTimeout+0x30>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d122      	bne.n	800336a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	4013      	ands	r3, r2
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	429a      	cmp	r2, r3
 8003332:	bf0c      	ite	eq
 8003334:	2301      	moveq	r3, #1
 8003336:	2300      	movne	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	461a      	mov	r2, r3
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	429a      	cmp	r2, r3
 8003340:	d113      	bne.n	800336a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003346:	f043 0220 	orr.w	r2, r3, #32
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e00f      	b.n	800338a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699a      	ldr	r2, [r3, #24]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	4013      	ands	r3, r2
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	429a      	cmp	r2, r3
 8003378:	bf0c      	ite	eq
 800337a:	2301      	moveq	r3, #1
 800337c:	2300      	movne	r3, #0
 800337e:	b2db      	uxtb	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	429a      	cmp	r2, r3
 8003386:	d0be      	beq.n	8003306 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800339e:	e033      	b.n	8003408 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	68b9      	ldr	r1, [r7, #8]
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 f87f 	bl	80034a8 <I2C_IsErrorOccurred>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e031      	b.n	8003418 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ba:	d025      	beq.n	8003408 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033bc:	f7ff f970 	bl	80026a0 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d302      	bcc.n	80033d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d11a      	bne.n	8003408 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d013      	beq.n	8003408 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e4:	f043 0220 	orr.w	r2, r3, #32
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e007      	b.n	8003418 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b02      	cmp	r3, #2
 8003414:	d1c4      	bne.n	80033a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800342c:	e02f      	b.n	800348e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f838 	bl	80034a8 <I2C_IsErrorOccurred>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e02d      	b.n	800349e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003442:	f7ff f92d 	bl	80026a0 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	429a      	cmp	r2, r3
 8003450:	d302      	bcc.n	8003458 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d11a      	bne.n	800348e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b20      	cmp	r3, #32
 8003464:	d013      	beq.n	800348e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	f043 0220 	orr.w	r2, r3, #32
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e007      	b.n	800349e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b20      	cmp	r3, #32
 800349a:	d1c8      	bne.n	800342e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	; 0x28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d068      	beq.n	80035a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2210      	movs	r2, #16
 80034da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034dc:	e049      	b.n	8003572 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e4:	d045      	beq.n	8003572 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034e6:	f7ff f8db 	bl	80026a0 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d302      	bcc.n	80034fc <I2C_IsErrorOccurred+0x54>
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d13a      	bne.n	8003572 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003506:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800350e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800351a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800351e:	d121      	bne.n	8003564 <I2C_IsErrorOccurred+0xbc>
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003526:	d01d      	beq.n	8003564 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003528:	7cfb      	ldrb	r3, [r7, #19]
 800352a:	2b20      	cmp	r3, #32
 800352c:	d01a      	beq.n	8003564 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800353c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800353e:	f7ff f8af 	bl	80026a0 <HAL_GetTick>
 8003542:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003544:	e00e      	b.n	8003564 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003546:	f7ff f8ab 	bl	80026a0 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b19      	cmp	r3, #25
 8003552:	d907      	bls.n	8003564 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	f043 0320 	orr.w	r3, r3, #32
 800355a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003562:	e006      	b.n	8003572 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	f003 0320 	and.w	r3, r3, #32
 800356e:	2b20      	cmp	r3, #32
 8003570:	d1e9      	bne.n	8003546 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b20      	cmp	r3, #32
 800357e:	d003      	beq.n	8003588 <I2C_IsErrorOccurred+0xe0>
 8003580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0aa      	beq.n	80034de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800358c:	2b00      	cmp	r3, #0
 800358e:	d103      	bne.n	8003598 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2220      	movs	r2, #32
 8003596:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	f043 0304 	orr.w	r3, r3, #4
 800359e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00b      	beq.n	80035d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00b      	beq.n	80035f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	f043 0308 	orr.w	r3, r3, #8
 80035e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00b      	beq.n	8003614 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	f043 0302 	orr.w	r3, r3, #2
 8003602:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800360c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003618:	2b00      	cmp	r3, #0
 800361a:	d01c      	beq.n	8003656 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f7ff fe45 	bl	80032ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	4b0d      	ldr	r3, [pc, #52]	; (8003664 <I2C_IsErrorOccurred+0x1bc>)
 800362e:	400b      	ands	r3, r1
 8003630:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	431a      	orrs	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003656:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800365a:	4618      	mov	r0, r3
 800365c:	3728      	adds	r7, #40	; 0x28
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	fe00e800 	.word	0xfe00e800

08003668 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	607b      	str	r3, [r7, #4]
 8003672:	460b      	mov	r3, r1
 8003674:	817b      	strh	r3, [r7, #10]
 8003676:	4613      	mov	r3, r2
 8003678:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800367a:	897b      	ldrh	r3, [r7, #10]
 800367c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003680:	7a7b      	ldrb	r3, [r7, #9]
 8003682:	041b      	lsls	r3, r3, #16
 8003684:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003688:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	4313      	orrs	r3, r2
 8003692:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003696:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	0d5b      	lsrs	r3, r3, #21
 80036a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80036a6:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <I2C_TransferConfig+0x60>)
 80036a8:	430b      	orrs	r3, r1
 80036aa:	43db      	mvns	r3, r3
 80036ac:	ea02 0103 	and.w	r1, r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036ba:	bf00      	nop
 80036bc:	371c      	adds	r7, #28
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	03ff63ff 	.word	0x03ff63ff

080036cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d138      	bne.n	8003754 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036ec:	2302      	movs	r3, #2
 80036ee:	e032      	b.n	8003756 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2224      	movs	r2, #36	; 0x24
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0201 	bic.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800371e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6819      	ldr	r1, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	e000      	b.n	8003756 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003754:	2302      	movs	r3, #2
  }
}
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003762:	b480      	push	{r7}
 8003764:	b085      	sub	sp, #20
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b20      	cmp	r3, #32
 8003776:	d139      	bne.n	80037ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003782:	2302      	movs	r3, #2
 8003784:	e033      	b.n	80037ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2224      	movs	r2, #36	; 0x24
 8003792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0201 	bic.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	021b      	lsls	r3, r3, #8
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	e000      	b.n	80037ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037ec:	2302      	movs	r3, #2
  }
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
	...

080037fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003802:	af00      	add	r7, sp, #0
 8003804:	1d3b      	adds	r3, r7, #4
 8003806:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003808:	1d3b      	adds	r3, r7, #4
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d102      	bne.n	8003816 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	f000 bef4 	b.w	80045fe <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003816:	1d3b      	adds	r3, r7, #4
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 816a 	beq.w	8003afa <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003826:	4bb3      	ldr	r3, [pc, #716]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f003 030c 	and.w	r3, r3, #12
 800382e:	2b04      	cmp	r3, #4
 8003830:	d00c      	beq.n	800384c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003832:	4bb0      	ldr	r3, [pc, #704]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b08      	cmp	r3, #8
 800383c:	d159      	bne.n	80038f2 <HAL_RCC_OscConfig+0xf6>
 800383e:	4bad      	ldr	r3, [pc, #692]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384a:	d152      	bne.n	80038f2 <HAL_RCC_OscConfig+0xf6>
 800384c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003850:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003854:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003858:	fa93 f3a3 	rbit	r3, r3
 800385c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003860:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003864:	fab3 f383 	clz	r3, r3
 8003868:	b2db      	uxtb	r3, r3
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	b2db      	uxtb	r3, r3
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d102      	bne.n	800387e <HAL_RCC_OscConfig+0x82>
 8003878:	4b9e      	ldr	r3, [pc, #632]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	e015      	b.n	80038aa <HAL_RCC_OscConfig+0xae>
 800387e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003882:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003886:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800388a:	fa93 f3a3 	rbit	r3, r3
 800388e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003892:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003896:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800389a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80038a6:	4b93      	ldr	r3, [pc, #588]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038ae:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80038b2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80038b6:	fa92 f2a2 	rbit	r2, r2
 80038ba:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80038be:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80038c2:	fab2 f282 	clz	r2, r2
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	f042 0220 	orr.w	r2, r2, #32
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	f002 021f 	and.w	r2, r2, #31
 80038d2:	2101      	movs	r1, #1
 80038d4:	fa01 f202 	lsl.w	r2, r1, r2
 80038d8:	4013      	ands	r3, r2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 810c 	beq.w	8003af8 <HAL_RCC_OscConfig+0x2fc>
 80038e0:	1d3b      	adds	r3, r7, #4
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f040 8106 	bne.w	8003af8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	f000 be86 	b.w	80045fe <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038f2:	1d3b      	adds	r3, r7, #4
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fc:	d106      	bne.n	800390c <HAL_RCC_OscConfig+0x110>
 80038fe:	4b7d      	ldr	r3, [pc, #500]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a7c      	ldr	r2, [pc, #496]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 8003904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	e030      	b.n	800396e <HAL_RCC_OscConfig+0x172>
 800390c:	1d3b      	adds	r3, r7, #4
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10c      	bne.n	8003930 <HAL_RCC_OscConfig+0x134>
 8003916:	4b77      	ldr	r3, [pc, #476]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a76      	ldr	r2, [pc, #472]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 800391c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	4b74      	ldr	r3, [pc, #464]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a73      	ldr	r2, [pc, #460]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 8003928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e01e      	b.n	800396e <HAL_RCC_OscConfig+0x172>
 8003930:	1d3b      	adds	r3, r7, #4
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800393a:	d10c      	bne.n	8003956 <HAL_RCC_OscConfig+0x15a>
 800393c:	4b6d      	ldr	r3, [pc, #436]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a6c      	ldr	r2, [pc, #432]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 8003942:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	4b6a      	ldr	r3, [pc, #424]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a69      	ldr	r2, [pc, #420]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 800394e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	e00b      	b.n	800396e <HAL_RCC_OscConfig+0x172>
 8003956:	4b67      	ldr	r3, [pc, #412]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a66      	ldr	r2, [pc, #408]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 800395c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	4b64      	ldr	r3, [pc, #400]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a63      	ldr	r2, [pc, #396]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 8003968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800396c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800396e:	4b61      	ldr	r3, [pc, #388]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 8003970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003972:	f023 020f 	bic.w	r2, r3, #15
 8003976:	1d3b      	adds	r3, r7, #4
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	495d      	ldr	r1, [pc, #372]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 800397e:	4313      	orrs	r3, r2
 8003980:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003982:	1d3b      	adds	r3, r7, #4
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d059      	beq.n	8003a40 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398c:	f7fe fe88 	bl	80026a0 <HAL_GetTick>
 8003990:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003994:	e00a      	b.n	80039ac <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003996:	f7fe fe83 	bl	80026a0 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b64      	cmp	r3, #100	; 0x64
 80039a4:	d902      	bls.n	80039ac <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	f000 be29 	b.w	80045fe <HAL_RCC_OscConfig+0xe02>
 80039ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039b0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80039b8:	fa93 f3a3 	rbit	r3, r3
 80039bc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80039c0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c4:	fab3 f383 	clz	r3, r3
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d102      	bne.n	80039de <HAL_RCC_OscConfig+0x1e2>
 80039d8:	4b46      	ldr	r3, [pc, #280]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	e015      	b.n	8003a0a <HAL_RCC_OscConfig+0x20e>
 80039de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039e2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80039ea:	fa93 f3a3 	rbit	r3, r3
 80039ee:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80039f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039f6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80039fa:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80039fe:	fa93 f3a3 	rbit	r3, r3
 8003a02:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003a06:	4b3b      	ldr	r3, [pc, #236]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a0e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003a12:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003a16:	fa92 f2a2 	rbit	r2, r2
 8003a1a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003a1e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003a22:	fab2 f282 	clz	r2, r2
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	f042 0220 	orr.w	r2, r2, #32
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	f002 021f 	and.w	r2, r2, #31
 8003a32:	2101      	movs	r1, #1
 8003a34:	fa01 f202 	lsl.w	r2, r1, r2
 8003a38:	4013      	ands	r3, r2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0ab      	beq.n	8003996 <HAL_RCC_OscConfig+0x19a>
 8003a3e:	e05c      	b.n	8003afa <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a40:	f7fe fe2e 	bl	80026a0 <HAL_GetTick>
 8003a44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a48:	e00a      	b.n	8003a60 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a4a:	f7fe fe29 	bl	80026a0 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b64      	cmp	r3, #100	; 0x64
 8003a58:	d902      	bls.n	8003a60 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	f000 bdcf 	b.w	80045fe <HAL_RCC_OscConfig+0xe02>
 8003a60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a64:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a68:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003a6c:	fa93 f3a3 	rbit	r3, r3
 8003a70:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003a74:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a78:	fab3 f383 	clz	r3, r3
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	f043 0301 	orr.w	r3, r3, #1
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d102      	bne.n	8003a92 <HAL_RCC_OscConfig+0x296>
 8003a8c:	4b19      	ldr	r3, [pc, #100]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	e015      	b.n	8003abe <HAL_RCC_OscConfig+0x2c2>
 8003a92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a96:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003aa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aaa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003aae:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003ab2:	fa93 f3a3 	rbit	r3, r3
 8003ab6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003aba:	4b0e      	ldr	r3, [pc, #56]	; (8003af4 <HAL_RCC_OscConfig+0x2f8>)
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ac2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003ac6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003aca:	fa92 f2a2 	rbit	r2, r2
 8003ace:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003ad2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003ad6:	fab2 f282 	clz	r2, r2
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	f042 0220 	orr.w	r2, r2, #32
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	f002 021f 	and.w	r2, r2, #31
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8003aec:	4013      	ands	r3, r2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1ab      	bne.n	8003a4a <HAL_RCC_OscConfig+0x24e>
 8003af2:	e002      	b.n	8003afa <HAL_RCC_OscConfig+0x2fe>
 8003af4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003afa:	1d3b      	adds	r3, r7, #4
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 816f 	beq.w	8003de8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003b0a:	4bd0      	ldr	r3, [pc, #832]	; (8003e4c <HAL_RCC_OscConfig+0x650>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f003 030c 	and.w	r3, r3, #12
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00b      	beq.n	8003b2e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b16:	4bcd      	ldr	r3, [pc, #820]	; (8003e4c <HAL_RCC_OscConfig+0x650>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 030c 	and.w	r3, r3, #12
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d16c      	bne.n	8003bfc <HAL_RCC_OscConfig+0x400>
 8003b22:	4bca      	ldr	r3, [pc, #808]	; (8003e4c <HAL_RCC_OscConfig+0x650>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d166      	bne.n	8003bfc <HAL_RCC_OscConfig+0x400>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b34:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003b38:	fa93 f3a3 	rbit	r3, r3
 8003b3c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003b40:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b44:	fab3 f383 	clz	r3, r3
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d102      	bne.n	8003b5e <HAL_RCC_OscConfig+0x362>
 8003b58:	4bbc      	ldr	r3, [pc, #752]	; (8003e4c <HAL_RCC_OscConfig+0x650>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	e013      	b.n	8003b86 <HAL_RCC_OscConfig+0x38a>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b64:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003b68:	fa93 f3a3 	rbit	r3, r3
 8003b6c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003b70:	2302      	movs	r3, #2
 8003b72:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003b76:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b7a:	fa93 f3a3 	rbit	r3, r3
 8003b7e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003b82:	4bb2      	ldr	r3, [pc, #712]	; (8003e4c <HAL_RCC_OscConfig+0x650>)
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	2202      	movs	r2, #2
 8003b88:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003b8c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003b90:	fa92 f2a2 	rbit	r2, r2
 8003b94:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003b98:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003b9c:	fab2 f282 	clz	r2, r2
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	f042 0220 	orr.w	r2, r2, #32
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	f002 021f 	and.w	r2, r2, #31
 8003bac:	2101      	movs	r1, #1
 8003bae:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d007      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x3cc>
 8003bb8:	1d3b      	adds	r3, r7, #4
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d002      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	f000 bd1b 	b.w	80045fe <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc8:	4ba0      	ldr	r3, [pc, #640]	; (8003e4c <HAL_RCC_OscConfig+0x650>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bd0:	1d3b      	adds	r3, r7, #4
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	21f8      	movs	r1, #248	; 0xf8
 8003bd8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bdc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003be0:	fa91 f1a1 	rbit	r1, r1
 8003be4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003be8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003bec:	fab1 f181 	clz	r1, r1
 8003bf0:	b2c9      	uxtb	r1, r1
 8003bf2:	408b      	lsls	r3, r1
 8003bf4:	4995      	ldr	r1, [pc, #596]	; (8003e4c <HAL_RCC_OscConfig+0x650>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfa:	e0f5      	b.n	8003de8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bfc:	1d3b      	adds	r3, r7, #4
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 8085 	beq.w	8003d12 <HAL_RCC_OscConfig+0x516>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003c12:	fa93 f3a3 	rbit	r3, r3
 8003c16:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003c1a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c1e:	fab3 f383 	clz	r3, r3
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	461a      	mov	r2, r3
 8003c30:	2301      	movs	r3, #1
 8003c32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c34:	f7fe fd34 	bl	80026a0 <HAL_GetTick>
 8003c38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3c:	e00a      	b.n	8003c54 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c3e:	f7fe fd2f 	bl	80026a0 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d902      	bls.n	8003c54 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	f000 bcd5 	b.w	80045fe <HAL_RCC_OscConfig+0xe02>
 8003c54:	2302      	movs	r3, #2
 8003c56:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003c5e:	fa93 f3a3 	rbit	r3, r3
 8003c62:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003c66:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c6a:	fab3 f383 	clz	r3, r3
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	f043 0301 	orr.w	r3, r3, #1
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d102      	bne.n	8003c84 <HAL_RCC_OscConfig+0x488>
 8003c7e:	4b73      	ldr	r3, [pc, #460]	; (8003e4c <HAL_RCC_OscConfig+0x650>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	e013      	b.n	8003cac <HAL_RCC_OscConfig+0x4b0>
 8003c84:	2302      	movs	r3, #2
 8003c86:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003c8e:	fa93 f3a3 	rbit	r3, r3
 8003c92:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003c96:	2302      	movs	r3, #2
 8003c98:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003c9c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003ca0:	fa93 f3a3 	rbit	r3, r3
 8003ca4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003ca8:	4b68      	ldr	r3, [pc, #416]	; (8003e4c <HAL_RCC_OscConfig+0x650>)
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	2202      	movs	r2, #2
 8003cae:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003cb2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003cb6:	fa92 f2a2 	rbit	r2, r2
 8003cba:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003cbe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003cc2:	fab2 f282 	clz	r2, r2
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	f042 0220 	orr.w	r2, r2, #32
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	f002 021f 	and.w	r2, r2, #31
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0af      	beq.n	8003c3e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cde:	4b5b      	ldr	r3, [pc, #364]	; (8003e4c <HAL_RCC_OscConfig+0x650>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ce6:	1d3b      	adds	r3, r7, #4
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	21f8      	movs	r1, #248	; 0xf8
 8003cee:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003cf6:	fa91 f1a1 	rbit	r1, r1
 8003cfa:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003cfe:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003d02:	fab1 f181 	clz	r1, r1
 8003d06:	b2c9      	uxtb	r1, r1
 8003d08:	408b      	lsls	r3, r1
 8003d0a:	4950      	ldr	r1, [pc, #320]	; (8003e4c <HAL_RCC_OscConfig+0x650>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	600b      	str	r3, [r1, #0]
 8003d10:	e06a      	b.n	8003de8 <HAL_RCC_OscConfig+0x5ec>
 8003d12:	2301      	movs	r3, #1
 8003d14:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d18:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003d1c:	fa93 f3a3 	rbit	r3, r3
 8003d20:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003d24:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d28:	fab3 f383 	clz	r3, r3
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d32:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	461a      	mov	r2, r3
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3e:	f7fe fcaf 	bl	80026a0 <HAL_GetTick>
 8003d42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d46:	e00a      	b.n	8003d5e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d48:	f7fe fcaa 	bl	80026a0 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d902      	bls.n	8003d5e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	f000 bc50 	b.w	80045fe <HAL_RCC_OscConfig+0xe02>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d64:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003d68:	fa93 f3a3 	rbit	r3, r3
 8003d6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d74:	fab3 f383 	clz	r3, r3
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d102      	bne.n	8003d8e <HAL_RCC_OscConfig+0x592>
 8003d88:	4b30      	ldr	r3, [pc, #192]	; (8003e4c <HAL_RCC_OscConfig+0x650>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	e013      	b.n	8003db6 <HAL_RCC_OscConfig+0x5ba>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003d98:	fa93 f3a3 	rbit	r3, r3
 8003d9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003da0:	2302      	movs	r3, #2
 8003da2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003da6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003daa:	fa93 f3a3 	rbit	r3, r3
 8003dae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003db2:	4b26      	ldr	r3, [pc, #152]	; (8003e4c <HAL_RCC_OscConfig+0x650>)
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	2202      	movs	r2, #2
 8003db8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003dbc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003dc0:	fa92 f2a2 	rbit	r2, r2
 8003dc4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003dc8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003dcc:	fab2 f282 	clz	r2, r2
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	f042 0220 	orr.w	r2, r2, #32
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	f002 021f 	and.w	r2, r2, #31
 8003ddc:	2101      	movs	r1, #1
 8003dde:	fa01 f202 	lsl.w	r2, r1, r2
 8003de2:	4013      	ands	r3, r2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1af      	bne.n	8003d48 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 80da 	beq.w	8003fac <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003df8:	1d3b      	adds	r3, r7, #4
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d069      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x6da>
 8003e02:	2301      	movs	r3, #1
 8003e04:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e08:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003e0c:	fa93 f3a3 	rbit	r3, r3
 8003e10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e18:	fab3 f383 	clz	r3, r3
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	461a      	mov	r2, r3
 8003e20:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <HAL_RCC_OscConfig+0x654>)
 8003e22:	4413      	add	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	461a      	mov	r2, r3
 8003e28:	2301      	movs	r3, #1
 8003e2a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e2c:	f7fe fc38 	bl	80026a0 <HAL_GetTick>
 8003e30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e34:	e00e      	b.n	8003e54 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e36:	f7fe fc33 	bl	80026a0 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d906      	bls.n	8003e54 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e3d9      	b.n	80045fe <HAL_RCC_OscConfig+0xe02>
 8003e4a:	bf00      	nop
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	10908120 	.word	0x10908120
 8003e54:	2302      	movs	r3, #2
 8003e56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e5e:	fa93 f3a3 	rbit	r3, r3
 8003e62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003e66:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	fa93 f2a3 	rbit	r2, r3
 8003e78:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003e82:	2202      	movs	r2, #2
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	fa93 f2a3 	rbit	r2, r3
 8003e90:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003e94:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e96:	4ba5      	ldr	r3, [pc, #660]	; (800412c <HAL_RCC_OscConfig+0x930>)
 8003e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e9a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003e9e:	2102      	movs	r1, #2
 8003ea0:	6019      	str	r1, [r3, #0]
 8003ea2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	fa93 f1a3 	rbit	r1, r3
 8003eac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003eb0:	6019      	str	r1, [r3, #0]
  return result;
 8003eb2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	fab3 f383 	clz	r3, r3
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	2101      	movs	r1, #1
 8003eca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0b0      	beq.n	8003e36 <HAL_RCC_OscConfig+0x63a>
 8003ed4:	e06a      	b.n	8003fac <HAL_RCC_OscConfig+0x7b0>
 8003ed6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	fa93 f2a3 	rbit	r2, r3
 8003ee8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003eec:	601a      	str	r2, [r3, #0]
  return result;
 8003eee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003ef2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ef4:	fab3 f383 	clz	r3, r3
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	4b8c      	ldr	r3, [pc, #560]	; (8004130 <HAL_RCC_OscConfig+0x934>)
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	461a      	mov	r2, r3
 8003f04:	2300      	movs	r3, #0
 8003f06:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f08:	f7fe fbca 	bl	80026a0 <HAL_GetTick>
 8003f0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f10:	e009      	b.n	8003f26 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f12:	f7fe fbc5 	bl	80026a0 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e36b      	b.n	80045fe <HAL_RCC_OscConfig+0xe02>
 8003f26:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	fa93 f2a3 	rbit	r2, r3
 8003f38:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003f42:	2202      	movs	r2, #2
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	fa93 f2a3 	rbit	r2, r3
 8003f50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	fa93 f2a3 	rbit	r2, r3
 8003f68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003f6c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f6e:	4b6f      	ldr	r3, [pc, #444]	; (800412c <HAL_RCC_OscConfig+0x930>)
 8003f70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f72:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003f76:	2102      	movs	r1, #2
 8003f78:	6019      	str	r1, [r3, #0]
 8003f7a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	fa93 f1a3 	rbit	r1, r3
 8003f84:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003f88:	6019      	str	r1, [r3, #0]
  return result;
 8003f8a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	fab3 f383 	clz	r3, r3
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1b2      	bne.n	8003f12 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fac:	1d3b      	adds	r3, r7, #4
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 8158 	beq.w	800426c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fc2:	4b5a      	ldr	r3, [pc, #360]	; (800412c <HAL_RCC_OscConfig+0x930>)
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d112      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fce:	4b57      	ldr	r3, [pc, #348]	; (800412c <HAL_RCC_OscConfig+0x930>)
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	4a56      	ldr	r2, [pc, #344]	; (800412c <HAL_RCC_OscConfig+0x930>)
 8003fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	61d3      	str	r3, [r2, #28]
 8003fda:	4b54      	ldr	r3, [pc, #336]	; (800412c <HAL_RCC_OscConfig+0x930>)
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003fe2:	f107 0308 	add.w	r3, r7, #8
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	f107 0308 	add.w	r3, r7, #8
 8003fec:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff4:	4b4f      	ldr	r3, [pc, #316]	; (8004134 <HAL_RCC_OscConfig+0x938>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d11a      	bne.n	8004036 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004000:	4b4c      	ldr	r3, [pc, #304]	; (8004134 <HAL_RCC_OscConfig+0x938>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a4b      	ldr	r2, [pc, #300]	; (8004134 <HAL_RCC_OscConfig+0x938>)
 8004006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800400c:	f7fe fb48 	bl	80026a0 <HAL_GetTick>
 8004010:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004014:	e009      	b.n	800402a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004016:	f7fe fb43 	bl	80026a0 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b64      	cmp	r3, #100	; 0x64
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e2e9      	b.n	80045fe <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402a:	4b42      	ldr	r3, [pc, #264]	; (8004134 <HAL_RCC_OscConfig+0x938>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0ef      	beq.n	8004016 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004036:	1d3b      	adds	r3, r7, #4
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d106      	bne.n	800404e <HAL_RCC_OscConfig+0x852>
 8004040:	4b3a      	ldr	r3, [pc, #232]	; (800412c <HAL_RCC_OscConfig+0x930>)
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	4a39      	ldr	r2, [pc, #228]	; (800412c <HAL_RCC_OscConfig+0x930>)
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	6213      	str	r3, [r2, #32]
 800404c:	e02f      	b.n	80040ae <HAL_RCC_OscConfig+0x8b2>
 800404e:	1d3b      	adds	r3, r7, #4
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10c      	bne.n	8004072 <HAL_RCC_OscConfig+0x876>
 8004058:	4b34      	ldr	r3, [pc, #208]	; (800412c <HAL_RCC_OscConfig+0x930>)
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	4a33      	ldr	r2, [pc, #204]	; (800412c <HAL_RCC_OscConfig+0x930>)
 800405e:	f023 0301 	bic.w	r3, r3, #1
 8004062:	6213      	str	r3, [r2, #32]
 8004064:	4b31      	ldr	r3, [pc, #196]	; (800412c <HAL_RCC_OscConfig+0x930>)
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	4a30      	ldr	r2, [pc, #192]	; (800412c <HAL_RCC_OscConfig+0x930>)
 800406a:	f023 0304 	bic.w	r3, r3, #4
 800406e:	6213      	str	r3, [r2, #32]
 8004070:	e01d      	b.n	80040ae <HAL_RCC_OscConfig+0x8b2>
 8004072:	1d3b      	adds	r3, r7, #4
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	2b05      	cmp	r3, #5
 800407a:	d10c      	bne.n	8004096 <HAL_RCC_OscConfig+0x89a>
 800407c:	4b2b      	ldr	r3, [pc, #172]	; (800412c <HAL_RCC_OscConfig+0x930>)
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	4a2a      	ldr	r2, [pc, #168]	; (800412c <HAL_RCC_OscConfig+0x930>)
 8004082:	f043 0304 	orr.w	r3, r3, #4
 8004086:	6213      	str	r3, [r2, #32]
 8004088:	4b28      	ldr	r3, [pc, #160]	; (800412c <HAL_RCC_OscConfig+0x930>)
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	4a27      	ldr	r2, [pc, #156]	; (800412c <HAL_RCC_OscConfig+0x930>)
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	6213      	str	r3, [r2, #32]
 8004094:	e00b      	b.n	80040ae <HAL_RCC_OscConfig+0x8b2>
 8004096:	4b25      	ldr	r3, [pc, #148]	; (800412c <HAL_RCC_OscConfig+0x930>)
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	4a24      	ldr	r2, [pc, #144]	; (800412c <HAL_RCC_OscConfig+0x930>)
 800409c:	f023 0301 	bic.w	r3, r3, #1
 80040a0:	6213      	str	r3, [r2, #32]
 80040a2:	4b22      	ldr	r3, [pc, #136]	; (800412c <HAL_RCC_OscConfig+0x930>)
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	4a21      	ldr	r2, [pc, #132]	; (800412c <HAL_RCC_OscConfig+0x930>)
 80040a8:	f023 0304 	bic.w	r3, r3, #4
 80040ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040ae:	1d3b      	adds	r3, r7, #4
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d06b      	beq.n	8004190 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b8:	f7fe faf2 	bl	80026a0 <HAL_GetTick>
 80040bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c0:	e00b      	b.n	80040da <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c2:	f7fe faed 	bl	80026a0 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e291      	b.n	80045fe <HAL_RCC_OscConfig+0xe02>
 80040da:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80040de:	2202      	movs	r2, #2
 80040e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	fa93 f2a3 	rbit	r2, r3
 80040ec:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80040f6:	2202      	movs	r2, #2
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	fa93 f2a3 	rbit	r2, r3
 8004104:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004108:	601a      	str	r2, [r3, #0]
  return result;
 800410a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800410e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004110:	fab3 f383 	clz	r3, r3
 8004114:	b2db      	uxtb	r3, r3
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	b2db      	uxtb	r3, r3
 800411a:	f043 0302 	orr.w	r3, r3, #2
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d109      	bne.n	8004138 <HAL_RCC_OscConfig+0x93c>
 8004124:	4b01      	ldr	r3, [pc, #4]	; (800412c <HAL_RCC_OscConfig+0x930>)
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	e014      	b.n	8004154 <HAL_RCC_OscConfig+0x958>
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000
 8004130:	10908120 	.word	0x10908120
 8004134:	40007000 	.word	0x40007000
 8004138:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800413c:	2202      	movs	r2, #2
 800413e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004140:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	fa93 f2a3 	rbit	r2, r3
 800414a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	4bbb      	ldr	r3, [pc, #748]	; (8004440 <HAL_RCC_OscConfig+0xc44>)
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004158:	2102      	movs	r1, #2
 800415a:	6011      	str	r1, [r2, #0]
 800415c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004160:	6812      	ldr	r2, [r2, #0]
 8004162:	fa92 f1a2 	rbit	r1, r2
 8004166:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800416a:	6011      	str	r1, [r2, #0]
  return result;
 800416c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	fab2 f282 	clz	r2, r2
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	f002 021f 	and.w	r2, r2, #31
 8004182:	2101      	movs	r1, #1
 8004184:	fa01 f202 	lsl.w	r2, r1, r2
 8004188:	4013      	ands	r3, r2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d099      	beq.n	80040c2 <HAL_RCC_OscConfig+0x8c6>
 800418e:	e063      	b.n	8004258 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004190:	f7fe fa86 	bl	80026a0 <HAL_GetTick>
 8004194:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004198:	e00b      	b.n	80041b2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800419a:	f7fe fa81 	bl	80026a0 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e225      	b.n	80045fe <HAL_RCC_OscConfig+0xe02>
 80041b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80041b6:	2202      	movs	r2, #2
 80041b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	fa93 f2a3 	rbit	r2, r3
 80041c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80041ce:	2202      	movs	r2, #2
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	fa93 f2a3 	rbit	r2, r3
 80041dc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80041e0:	601a      	str	r2, [r3, #0]
  return result;
 80041e2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80041e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e8:	fab3 f383 	clz	r3, r3
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	f043 0302 	orr.w	r3, r3, #2
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d102      	bne.n	8004202 <HAL_RCC_OscConfig+0xa06>
 80041fc:	4b90      	ldr	r3, [pc, #576]	; (8004440 <HAL_RCC_OscConfig+0xc44>)
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	e00d      	b.n	800421e <HAL_RCC_OscConfig+0xa22>
 8004202:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004206:	2202      	movs	r2, #2
 8004208:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	fa93 f2a3 	rbit	r2, r3
 8004214:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	4b89      	ldr	r3, [pc, #548]	; (8004440 <HAL_RCC_OscConfig+0xc44>)
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004222:	2102      	movs	r1, #2
 8004224:	6011      	str	r1, [r2, #0]
 8004226:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800422a:	6812      	ldr	r2, [r2, #0]
 800422c:	fa92 f1a2 	rbit	r1, r2
 8004230:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004234:	6011      	str	r1, [r2, #0]
  return result;
 8004236:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800423a:	6812      	ldr	r2, [r2, #0]
 800423c:	fab2 f282 	clz	r2, r2
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	f002 021f 	and.w	r2, r2, #31
 800424c:	2101      	movs	r1, #1
 800424e:	fa01 f202 	lsl.w	r2, r1, r2
 8004252:	4013      	ands	r3, r2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1a0      	bne.n	800419a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004258:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800425c:	2b01      	cmp	r3, #1
 800425e:	d105      	bne.n	800426c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004260:	4b77      	ldr	r3, [pc, #476]	; (8004440 <HAL_RCC_OscConfig+0xc44>)
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	4a76      	ldr	r2, [pc, #472]	; (8004440 <HAL_RCC_OscConfig+0xc44>)
 8004266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800426a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800426c:	1d3b      	adds	r3, r7, #4
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 81c2 	beq.w	80045fc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004278:	4b71      	ldr	r3, [pc, #452]	; (8004440 <HAL_RCC_OscConfig+0xc44>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 030c 	and.w	r3, r3, #12
 8004280:	2b08      	cmp	r3, #8
 8004282:	f000 819c 	beq.w	80045be <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004286:	1d3b      	adds	r3, r7, #4
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	2b02      	cmp	r3, #2
 800428e:	f040 8114 	bne.w	80044ba <HAL_RCC_OscConfig+0xcbe>
 8004292:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004296:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800429a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	fa93 f2a3 	rbit	r2, r3
 80042a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80042aa:	601a      	str	r2, [r3, #0]
  return result;
 80042ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80042b0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b2:	fab3 f383 	clz	r3, r3
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80042bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	461a      	mov	r2, r3
 80042c4:	2300      	movs	r3, #0
 80042c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c8:	f7fe f9ea 	bl	80026a0 <HAL_GetTick>
 80042cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042d0:	e009      	b.n	80042e6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d2:	f7fe f9e5 	bl	80026a0 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e18b      	b.n	80045fe <HAL_RCC_OscConfig+0xe02>
 80042e6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80042ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	fa93 f2a3 	rbit	r2, r3
 80042fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80042fe:	601a      	str	r2, [r3, #0]
  return result;
 8004300:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004304:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004306:	fab3 f383 	clz	r3, r3
 800430a:	b2db      	uxtb	r3, r3
 800430c:	095b      	lsrs	r3, r3, #5
 800430e:	b2db      	uxtb	r3, r3
 8004310:	f043 0301 	orr.w	r3, r3, #1
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b01      	cmp	r3, #1
 8004318:	d102      	bne.n	8004320 <HAL_RCC_OscConfig+0xb24>
 800431a:	4b49      	ldr	r3, [pc, #292]	; (8004440 <HAL_RCC_OscConfig+0xc44>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	e01b      	b.n	8004358 <HAL_RCC_OscConfig+0xb5c>
 8004320:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004324:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004328:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	fa93 f2a3 	rbit	r2, r3
 8004334:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800433e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	fa93 f2a3 	rbit	r2, r3
 800434e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	4b3a      	ldr	r3, [pc, #232]	; (8004440 <HAL_RCC_OscConfig+0xc44>)
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800435c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004360:	6011      	str	r1, [r2, #0]
 8004362:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	fa92 f1a2 	rbit	r1, r2
 800436c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004370:	6011      	str	r1, [r2, #0]
  return result;
 8004372:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004376:	6812      	ldr	r2, [r2, #0]
 8004378:	fab2 f282 	clz	r2, r2
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	f042 0220 	orr.w	r2, r2, #32
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	f002 021f 	and.w	r2, r2, #31
 8004388:	2101      	movs	r1, #1
 800438a:	fa01 f202 	lsl.w	r2, r1, r2
 800438e:	4013      	ands	r3, r2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d19e      	bne.n	80042d2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004394:	4b2a      	ldr	r3, [pc, #168]	; (8004440 <HAL_RCC_OscConfig+0xc44>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800439c:	1d3b      	adds	r3, r7, #4
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80043a2:	1d3b      	adds	r3, r7, #4
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	430b      	orrs	r3, r1
 80043aa:	4925      	ldr	r1, [pc, #148]	; (8004440 <HAL_RCC_OscConfig+0xc44>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	604b      	str	r3, [r1, #4]
 80043b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80043b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	fa93 f2a3 	rbit	r2, r3
 80043c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043c8:	601a      	str	r2, [r3, #0]
  return result;
 80043ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043ce:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043d0:	fab3 f383 	clz	r3, r3
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	461a      	mov	r2, r3
 80043e2:	2301      	movs	r3, #1
 80043e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e6:	f7fe f95b 	bl	80026a0 <HAL_GetTick>
 80043ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043ee:	e009      	b.n	8004404 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f0:	f7fe f956 	bl	80026a0 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e0fc      	b.n	80045fe <HAL_RCC_OscConfig+0xe02>
 8004404:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004408:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800440c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	fa93 f2a3 	rbit	r2, r3
 8004418:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800441c:	601a      	str	r2, [r3, #0]
  return result;
 800441e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004422:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004424:	fab3 f383 	clz	r3, r3
 8004428:	b2db      	uxtb	r3, r3
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	b2db      	uxtb	r3, r3
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b01      	cmp	r3, #1
 8004436:	d105      	bne.n	8004444 <HAL_RCC_OscConfig+0xc48>
 8004438:	4b01      	ldr	r3, [pc, #4]	; (8004440 <HAL_RCC_OscConfig+0xc44>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	e01e      	b.n	800447c <HAL_RCC_OscConfig+0xc80>
 800443e:	bf00      	nop
 8004440:	40021000 	.word	0x40021000
 8004444:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004448:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800444c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	fa93 f2a3 	rbit	r2, r3
 8004458:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004462:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	fa93 f2a3 	rbit	r2, r3
 8004472:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	4b63      	ldr	r3, [pc, #396]	; (8004608 <HAL_RCC_OscConfig+0xe0c>)
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004480:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004484:	6011      	str	r1, [r2, #0]
 8004486:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	fa92 f1a2 	rbit	r1, r2
 8004490:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004494:	6011      	str	r1, [r2, #0]
  return result;
 8004496:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	fab2 f282 	clz	r2, r2
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	f042 0220 	orr.w	r2, r2, #32
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	f002 021f 	and.w	r2, r2, #31
 80044ac:	2101      	movs	r1, #1
 80044ae:	fa01 f202 	lsl.w	r2, r1, r2
 80044b2:	4013      	ands	r3, r2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d09b      	beq.n	80043f0 <HAL_RCC_OscConfig+0xbf4>
 80044b8:	e0a0      	b.n	80045fc <HAL_RCC_OscConfig+0xe00>
 80044ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	fa93 f2a3 	rbit	r2, r3
 80044ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044d2:	601a      	str	r2, [r3, #0]
  return result;
 80044d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044d8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044da:	fab3 f383 	clz	r3, r3
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	461a      	mov	r2, r3
 80044ec:	2300      	movs	r3, #0
 80044ee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f0:	f7fe f8d6 	bl	80026a0 <HAL_GetTick>
 80044f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044f8:	e009      	b.n	800450e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044fa:	f7fe f8d1 	bl	80026a0 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e077      	b.n	80045fe <HAL_RCC_OscConfig+0xe02>
 800450e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004512:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004518:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	fa93 f2a3 	rbit	r2, r3
 8004522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004526:	601a      	str	r2, [r3, #0]
  return result;
 8004528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800452c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800452e:	fab3 f383 	clz	r3, r3
 8004532:	b2db      	uxtb	r3, r3
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	b2db      	uxtb	r3, r3
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b01      	cmp	r3, #1
 8004540:	d102      	bne.n	8004548 <HAL_RCC_OscConfig+0xd4c>
 8004542:	4b31      	ldr	r3, [pc, #196]	; (8004608 <HAL_RCC_OscConfig+0xe0c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	e01b      	b.n	8004580 <HAL_RCC_OscConfig+0xd84>
 8004548:	f107 0320 	add.w	r3, r7, #32
 800454c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004550:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004552:	f107 0320 	add.w	r3, r7, #32
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	fa93 f2a3 	rbit	r2, r3
 800455c:	f107 031c 	add.w	r3, r7, #28
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	f107 0318 	add.w	r3, r7, #24
 8004566:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	f107 0318 	add.w	r3, r7, #24
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	fa93 f2a3 	rbit	r2, r3
 8004576:	f107 0314 	add.w	r3, r7, #20
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	4b22      	ldr	r3, [pc, #136]	; (8004608 <HAL_RCC_OscConfig+0xe0c>)
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	f107 0210 	add.w	r2, r7, #16
 8004584:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004588:	6011      	str	r1, [r2, #0]
 800458a:	f107 0210 	add.w	r2, r7, #16
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	fa92 f1a2 	rbit	r1, r2
 8004594:	f107 020c 	add.w	r2, r7, #12
 8004598:	6011      	str	r1, [r2, #0]
  return result;
 800459a:	f107 020c 	add.w	r2, r7, #12
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	fab2 f282 	clz	r2, r2
 80045a4:	b2d2      	uxtb	r2, r2
 80045a6:	f042 0220 	orr.w	r2, r2, #32
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	f002 021f 	and.w	r2, r2, #31
 80045b0:	2101      	movs	r1, #1
 80045b2:	fa01 f202 	lsl.w	r2, r1, r2
 80045b6:	4013      	ands	r3, r2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d19e      	bne.n	80044fa <HAL_RCC_OscConfig+0xcfe>
 80045bc:	e01e      	b.n	80045fc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045be:	1d3b      	adds	r3, r7, #4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e018      	b.n	80045fe <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045cc:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <HAL_RCC_OscConfig+0xe0c>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80045d4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80045d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045dc:	1d3b      	adds	r3, r7, #4
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d108      	bne.n	80045f8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80045e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80045ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80045ee:	1d3b      	adds	r3, r7, #4
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d001      	beq.n	80045fc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e000      	b.n	80045fe <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40021000 	.word	0x40021000

0800460c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b09e      	sub	sp, #120	; 0x78
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e162      	b.n	80048ea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004624:	4b90      	ldr	r3, [pc, #576]	; (8004868 <HAL_RCC_ClockConfig+0x25c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d910      	bls.n	8004654 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004632:	4b8d      	ldr	r3, [pc, #564]	; (8004868 <HAL_RCC_ClockConfig+0x25c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f023 0207 	bic.w	r2, r3, #7
 800463a:	498b      	ldr	r1, [pc, #556]	; (8004868 <HAL_RCC_ClockConfig+0x25c>)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	4313      	orrs	r3, r2
 8004640:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004642:	4b89      	ldr	r3, [pc, #548]	; (8004868 <HAL_RCC_ClockConfig+0x25c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d001      	beq.n	8004654 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e14a      	b.n	80048ea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d008      	beq.n	8004672 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004660:	4b82      	ldr	r3, [pc, #520]	; (800486c <HAL_RCC_ClockConfig+0x260>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	497f      	ldr	r1, [pc, #508]	; (800486c <HAL_RCC_ClockConfig+0x260>)
 800466e:	4313      	orrs	r3, r2
 8004670:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 80dc 	beq.w	8004838 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d13c      	bne.n	8004702 <HAL_RCC_ClockConfig+0xf6>
 8004688:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800468c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004690:	fa93 f3a3 	rbit	r3, r3
 8004694:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004698:	fab3 f383 	clz	r3, r3
 800469c:	b2db      	uxtb	r3, r3
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d102      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xa6>
 80046ac:	4b6f      	ldr	r3, [pc, #444]	; (800486c <HAL_RCC_ClockConfig+0x260>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	e00f      	b.n	80046d2 <HAL_RCC_ClockConfig+0xc6>
 80046b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046ba:	fa93 f3a3 	rbit	r3, r3
 80046be:	667b      	str	r3, [r7, #100]	; 0x64
 80046c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046c4:	663b      	str	r3, [r7, #96]	; 0x60
 80046c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046c8:	fa93 f3a3 	rbit	r3, r3
 80046cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046ce:	4b67      	ldr	r3, [pc, #412]	; (800486c <HAL_RCC_ClockConfig+0x260>)
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80046d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046da:	fa92 f2a2 	rbit	r2, r2
 80046de:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80046e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80046e2:	fab2 f282 	clz	r2, r2
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	f042 0220 	orr.w	r2, r2, #32
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	f002 021f 	and.w	r2, r2, #31
 80046f2:	2101      	movs	r1, #1
 80046f4:	fa01 f202 	lsl.w	r2, r1, r2
 80046f8:	4013      	ands	r3, r2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d17b      	bne.n	80047f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e0f3      	b.n	80048ea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d13c      	bne.n	8004784 <HAL_RCC_ClockConfig+0x178>
 800470a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800470e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004712:	fa93 f3a3 	rbit	r3, r3
 8004716:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800471a:	fab3 f383 	clz	r3, r3
 800471e:	b2db      	uxtb	r3, r3
 8004720:	095b      	lsrs	r3, r3, #5
 8004722:	b2db      	uxtb	r3, r3
 8004724:	f043 0301 	orr.w	r3, r3, #1
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b01      	cmp	r3, #1
 800472c:	d102      	bne.n	8004734 <HAL_RCC_ClockConfig+0x128>
 800472e:	4b4f      	ldr	r3, [pc, #316]	; (800486c <HAL_RCC_ClockConfig+0x260>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	e00f      	b.n	8004754 <HAL_RCC_ClockConfig+0x148>
 8004734:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004738:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800473c:	fa93 f3a3 	rbit	r3, r3
 8004740:	647b      	str	r3, [r7, #68]	; 0x44
 8004742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004746:	643b      	str	r3, [r7, #64]	; 0x40
 8004748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800474a:	fa93 f3a3 	rbit	r3, r3
 800474e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004750:	4b46      	ldr	r3, [pc, #280]	; (800486c <HAL_RCC_ClockConfig+0x260>)
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004758:	63ba      	str	r2, [r7, #56]	; 0x38
 800475a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800475c:	fa92 f2a2 	rbit	r2, r2
 8004760:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004764:	fab2 f282 	clz	r2, r2
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	f042 0220 	orr.w	r2, r2, #32
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	f002 021f 	and.w	r2, r2, #31
 8004774:	2101      	movs	r1, #1
 8004776:	fa01 f202 	lsl.w	r2, r1, r2
 800477a:	4013      	ands	r3, r2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d13a      	bne.n	80047f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e0b2      	b.n	80048ea <HAL_RCC_ClockConfig+0x2de>
 8004784:	2302      	movs	r3, #2
 8004786:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478a:	fa93 f3a3 	rbit	r3, r3
 800478e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004792:	fab3 f383 	clz	r3, r3
 8004796:	b2db      	uxtb	r3, r3
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	b2db      	uxtb	r3, r3
 800479c:	f043 0301 	orr.w	r3, r3, #1
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d102      	bne.n	80047ac <HAL_RCC_ClockConfig+0x1a0>
 80047a6:	4b31      	ldr	r3, [pc, #196]	; (800486c <HAL_RCC_ClockConfig+0x260>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	e00d      	b.n	80047c8 <HAL_RCC_ClockConfig+0x1bc>
 80047ac:	2302      	movs	r3, #2
 80047ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	fa93 f3a3 	rbit	r3, r3
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
 80047b8:	2302      	movs	r3, #2
 80047ba:	623b      	str	r3, [r7, #32]
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	fa93 f3a3 	rbit	r3, r3
 80047c2:	61fb      	str	r3, [r7, #28]
 80047c4:	4b29      	ldr	r3, [pc, #164]	; (800486c <HAL_RCC_ClockConfig+0x260>)
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	2202      	movs	r2, #2
 80047ca:	61ba      	str	r2, [r7, #24]
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	fa92 f2a2 	rbit	r2, r2
 80047d2:	617a      	str	r2, [r7, #20]
  return result;
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	fab2 f282 	clz	r2, r2
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	f042 0220 	orr.w	r2, r2, #32
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	f002 021f 	and.w	r2, r2, #31
 80047e6:	2101      	movs	r1, #1
 80047e8:	fa01 f202 	lsl.w	r2, r1, r2
 80047ec:	4013      	ands	r3, r2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e079      	b.n	80048ea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047f6:	4b1d      	ldr	r3, [pc, #116]	; (800486c <HAL_RCC_ClockConfig+0x260>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f023 0203 	bic.w	r2, r3, #3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	491a      	ldr	r1, [pc, #104]	; (800486c <HAL_RCC_ClockConfig+0x260>)
 8004804:	4313      	orrs	r3, r2
 8004806:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004808:	f7fd ff4a 	bl	80026a0 <HAL_GetTick>
 800480c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480e:	e00a      	b.n	8004826 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004810:	f7fd ff46 	bl	80026a0 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	f241 3288 	movw	r2, #5000	; 0x1388
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e061      	b.n	80048ea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004826:	4b11      	ldr	r3, [pc, #68]	; (800486c <HAL_RCC_ClockConfig+0x260>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f003 020c 	and.w	r2, r3, #12
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	429a      	cmp	r2, r3
 8004836:	d1eb      	bne.n	8004810 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004838:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <HAL_RCC_ClockConfig+0x25c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d214      	bcs.n	8004870 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004846:	4b08      	ldr	r3, [pc, #32]	; (8004868 <HAL_RCC_ClockConfig+0x25c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f023 0207 	bic.w	r2, r3, #7
 800484e:	4906      	ldr	r1, [pc, #24]	; (8004868 <HAL_RCC_ClockConfig+0x25c>)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	4313      	orrs	r3, r2
 8004854:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b04      	ldr	r3, [pc, #16]	; (8004868 <HAL_RCC_ClockConfig+0x25c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d005      	beq.n	8004870 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e040      	b.n	80048ea <HAL_RCC_ClockConfig+0x2de>
 8004868:	40022000 	.word	0x40022000
 800486c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800487c:	4b1d      	ldr	r3, [pc, #116]	; (80048f4 <HAL_RCC_ClockConfig+0x2e8>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	491a      	ldr	r1, [pc, #104]	; (80048f4 <HAL_RCC_ClockConfig+0x2e8>)
 800488a:	4313      	orrs	r3, r2
 800488c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800489a:	4b16      	ldr	r3, [pc, #88]	; (80048f4 <HAL_RCC_ClockConfig+0x2e8>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	4912      	ldr	r1, [pc, #72]	; (80048f4 <HAL_RCC_ClockConfig+0x2e8>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80048ae:	f000 f829 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 80048b2:	4601      	mov	r1, r0
 80048b4:	4b0f      	ldr	r3, [pc, #60]	; (80048f4 <HAL_RCC_ClockConfig+0x2e8>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048bc:	22f0      	movs	r2, #240	; 0xf0
 80048be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	fa92 f2a2 	rbit	r2, r2
 80048c6:	60fa      	str	r2, [r7, #12]
  return result;
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	fab2 f282 	clz	r2, r2
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	40d3      	lsrs	r3, r2
 80048d2:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <HAL_RCC_ClockConfig+0x2ec>)
 80048d4:	5cd3      	ldrb	r3, [r2, r3]
 80048d6:	fa21 f303 	lsr.w	r3, r1, r3
 80048da:	4a08      	ldr	r2, [pc, #32]	; (80048fc <HAL_RCC_ClockConfig+0x2f0>)
 80048dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80048de:	4b08      	ldr	r3, [pc, #32]	; (8004900 <HAL_RCC_ClockConfig+0x2f4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fd fe98 	bl	8002618 <HAL_InitTick>
  
  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3778      	adds	r7, #120	; 0x78
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	40021000 	.word	0x40021000
 80048f8:	0800d730 	.word	0x0800d730
 80048fc:	20000004 	.word	0x20000004
 8004900:	20000008 	.word	0x20000008

08004904 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004904:	b480      	push	{r7}
 8004906:	b08b      	sub	sp, #44	; 0x2c
 8004908:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	61fb      	str	r3, [r7, #28]
 800490e:	2300      	movs	r3, #0
 8004910:	61bb      	str	r3, [r7, #24]
 8004912:	2300      	movs	r3, #0
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800491e:	4b29      	ldr	r3, [pc, #164]	; (80049c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	f003 030c 	and.w	r3, r3, #12
 800492a:	2b04      	cmp	r3, #4
 800492c:	d002      	beq.n	8004934 <HAL_RCC_GetSysClockFreq+0x30>
 800492e:	2b08      	cmp	r3, #8
 8004930:	d003      	beq.n	800493a <HAL_RCC_GetSysClockFreq+0x36>
 8004932:	e03c      	b.n	80049ae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004934:	4b24      	ldr	r3, [pc, #144]	; (80049c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004936:	623b      	str	r3, [r7, #32]
      break;
 8004938:	e03c      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004940:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004944:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	fa92 f2a2 	rbit	r2, r2
 800494c:	607a      	str	r2, [r7, #4]
  return result;
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	fab2 f282 	clz	r2, r2
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	40d3      	lsrs	r3, r2
 8004958:	4a1c      	ldr	r2, [pc, #112]	; (80049cc <HAL_RCC_GetSysClockFreq+0xc8>)
 800495a:	5cd3      	ldrb	r3, [r2, r3]
 800495c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800495e:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	220f      	movs	r2, #15
 8004968:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	fa92 f2a2 	rbit	r2, r2
 8004970:	60fa      	str	r2, [r7, #12]
  return result;
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	fab2 f282 	clz	r2, r2
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	40d3      	lsrs	r3, r2
 800497c:	4a14      	ldr	r2, [pc, #80]	; (80049d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800497e:	5cd3      	ldrb	r3, [r2, r3]
 8004980:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d008      	beq.n	800499e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800498c:	4a0e      	ldr	r2, [pc, #56]	; (80049c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	fbb2 f2f3 	udiv	r2, r2, r3
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	fb02 f303 	mul.w	r3, r2, r3
 800499a:	627b      	str	r3, [r7, #36]	; 0x24
 800499c:	e004      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	4a0c      	ldr	r2, [pc, #48]	; (80049d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	623b      	str	r3, [r7, #32]
      break;
 80049ac:	e002      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049ae:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80049b0:	623b      	str	r3, [r7, #32]
      break;
 80049b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049b4:	6a3b      	ldr	r3, [r7, #32]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	372c      	adds	r7, #44	; 0x2c
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	40021000 	.word	0x40021000
 80049c8:	007a1200 	.word	0x007a1200
 80049cc:	0800d740 	.word	0x0800d740
 80049d0:	0800d750 	.word	0x0800d750
 80049d4:	003d0900 	.word	0x003d0900

080049d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b092      	sub	sp, #72	; 0x48
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80049e8:	2300      	movs	r3, #0
 80049ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 80cd 	beq.w	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049fc:	4b86      	ldr	r3, [pc, #536]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10e      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a08:	4b83      	ldr	r3, [pc, #524]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	4a82      	ldr	r2, [pc, #520]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a12:	61d3      	str	r3, [r2, #28]
 8004a14:	4b80      	ldr	r3, [pc, #512]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1c:	60bb      	str	r3, [r7, #8]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a20:	2301      	movs	r3, #1
 8004a22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a26:	4b7d      	ldr	r3, [pc, #500]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d118      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a32:	4b7a      	ldr	r3, [pc, #488]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a79      	ldr	r2, [pc, #484]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a3c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a3e:	f7fd fe2f 	bl	80026a0 <HAL_GetTick>
 8004a42:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a44:	e008      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a46:	f7fd fe2b 	bl	80026a0 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b64      	cmp	r3, #100	; 0x64
 8004a52:	d901      	bls.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e0db      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a58:	4b70      	ldr	r3, [pc, #448]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0f0      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a64:	4b6c      	ldr	r3, [pc, #432]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d07d      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d076      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a82:	4b65      	ldr	r3, [pc, #404]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a90:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	fa93 f3a3 	rbit	r3, r3
 8004a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a9c:	fab3 f383 	clz	r3, r3
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	4b5e      	ldr	r3, [pc, #376]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	461a      	mov	r2, r3
 8004aac:	2301      	movs	r3, #1
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	fa93 f3a3 	rbit	r3, r3
 8004abc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ac0:	fab3 f383 	clz	r3, r3
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	4b55      	ldr	r3, [pc, #340]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004aca:	4413      	add	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	461a      	mov	r2, r3
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ad4:	4a50      	ldr	r2, [pc, #320]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d045      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae4:	f7fd fddc 	bl	80026a0 <HAL_GetTick>
 8004ae8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aea:	e00a      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aec:	f7fd fdd8 	bl	80026a0 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e086      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004b02:	2302      	movs	r3, #2
 8004b04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b08:	fa93 f3a3 	rbit	r3, r3
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b0e:	2302      	movs	r3, #2
 8004b10:	623b      	str	r3, [r7, #32]
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	fa93 f3a3 	rbit	r3, r3
 8004b18:	61fb      	str	r3, [r7, #28]
  return result;
 8004b1a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b1c:	fab3 f383 	clz	r3, r3
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	f043 0302 	orr.w	r3, r3, #2
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d102      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004b30:	4b39      	ldr	r3, [pc, #228]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	e007      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004b36:	2302      	movs	r3, #2
 8004b38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	fa93 f3a3 	rbit	r3, r3
 8004b40:	617b      	str	r3, [r7, #20]
 8004b42:	4b35      	ldr	r3, [pc, #212]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	2202      	movs	r2, #2
 8004b48:	613a      	str	r2, [r7, #16]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	fa92 f2a2 	rbit	r2, r2
 8004b50:	60fa      	str	r2, [r7, #12]
  return result;
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	fab2 f282 	clz	r2, r2
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	f002 021f 	and.w	r2, r2, #31
 8004b64:	2101      	movs	r1, #1
 8004b66:	fa01 f202 	lsl.w	r2, r1, r2
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0bd      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004b70:	4b29      	ldr	r3, [pc, #164]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	4926      	ldr	r1, [pc, #152]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b82:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d105      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b8a:	4b23      	ldr	r3, [pc, #140]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	4a22      	ldr	r2, [pc, #136]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b94:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d008      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ba2:	4b1d      	ldr	r3, [pc, #116]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	f023 0203 	bic.w	r2, r3, #3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	491a      	ldr	r1, [pc, #104]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0320 	and.w	r3, r3, #32
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d008      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bc0:	4b15      	ldr	r3, [pc, #84]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc4:	f023 0210 	bic.w	r2, r3, #16
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	4912      	ldr	r1, [pc, #72]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d008      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004bde:	4b0e      	ldr	r3, [pc, #56]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	490b      	ldr	r1, [pc, #44]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d008      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	4903      	ldr	r1, [pc, #12]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3748      	adds	r7, #72	; 0x48
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	40007000 	.word	0x40007000
 8004c20:	10908100 	.word	0x10908100

08004c24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e095      	b.n	8004d62 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d108      	bne.n	8004c50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c46:	d009      	beq.n	8004c5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	61da      	str	r2, [r3, #28]
 8004c4e:	e005      	b.n	8004c5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fd fafc 	bl	8002274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c9c:	d902      	bls.n	8004ca4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	e002      	b.n	8004caa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ca8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004cb2:	d007      	beq.n	8004cc4 <HAL_SPI_Init+0xa0>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cbc:	d002      	beq.n	8004cc4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d06:	ea42 0103 	orr.w	r1, r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	0c1b      	lsrs	r3, r3, #16
 8004d20:	f003 0204 	and.w	r2, r3, #4
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	f003 0310 	and.w	r3, r3, #16
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d40:	ea42 0103 	orr.w	r1, r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b088      	sub	sp, #32
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	603b      	str	r3, [r7, #0]
 8004d76:	4613      	mov	r3, r2
 8004d78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d101      	bne.n	8004d8c <HAL_SPI_Transmit+0x22>
 8004d88:	2302      	movs	r3, #2
 8004d8a:	e15f      	b.n	800504c <HAL_SPI_Transmit+0x2e2>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d94:	f7fd fc84 	bl	80026a0 <HAL_GetTick>
 8004d98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d9a:	88fb      	ldrh	r3, [r7, #6]
 8004d9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d002      	beq.n	8004db0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004daa:	2302      	movs	r3, #2
 8004dac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dae:	e148      	b.n	8005042 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <HAL_SPI_Transmit+0x52>
 8004db6:	88fb      	ldrh	r3, [r7, #6]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d102      	bne.n	8004dc2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dc0:	e13f      	b.n	8005042 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2203      	movs	r2, #3
 8004dc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	88fa      	ldrh	r2, [r7, #6]
 8004dda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	88fa      	ldrh	r2, [r7, #6]
 8004de0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e0c:	d10f      	bne.n	8004e2e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e38:	2b40      	cmp	r3, #64	; 0x40
 8004e3a:	d007      	beq.n	8004e4c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e54:	d94f      	bls.n	8004ef6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <HAL_SPI_Transmit+0xfa>
 8004e5e:	8afb      	ldrh	r3, [r7, #22]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d142      	bne.n	8004eea <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e68:	881a      	ldrh	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e74:	1c9a      	adds	r2, r3, #2
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e88:	e02f      	b.n	8004eea <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d112      	bne.n	8004ebe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	881a      	ldrh	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea8:	1c9a      	adds	r2, r3, #2
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ebc:	e015      	b.n	8004eea <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ebe:	f7fd fbef 	bl	80026a0 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d803      	bhi.n	8004ed6 <HAL_SPI_Transmit+0x16c>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed4:	d102      	bne.n	8004edc <HAL_SPI_Transmit+0x172>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d106      	bne.n	8004eea <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004ee8:	e0ab      	b.n	8005042 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1ca      	bne.n	8004e8a <HAL_SPI_Transmit+0x120>
 8004ef4:	e080      	b.n	8004ff8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <HAL_SPI_Transmit+0x19a>
 8004efe:	8afb      	ldrh	r3, [r7, #22]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d174      	bne.n	8004fee <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d912      	bls.n	8004f34 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	881a      	ldrh	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1e:	1c9a      	adds	r2, r3, #2
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3b02      	subs	r3, #2
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f32:	e05c      	b.n	8004fee <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	330c      	adds	r3, #12
 8004f3e:	7812      	ldrb	r2, [r2, #0]
 8004f40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004f5a:	e048      	b.n	8004fee <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d12b      	bne.n	8004fc2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d912      	bls.n	8004f9a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f78:	881a      	ldrh	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	1c9a      	adds	r2, r3, #2
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	3b02      	subs	r3, #2
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f98:	e029      	b.n	8004fee <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	330c      	adds	r3, #12
 8004fa4:	7812      	ldrb	r2, [r2, #0]
 8004fa6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fc0:	e015      	b.n	8004fee <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fc2:	f7fd fb6d 	bl	80026a0 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d803      	bhi.n	8004fda <HAL_SPI_Transmit+0x270>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd8:	d102      	bne.n	8004fe0 <HAL_SPI_Transmit+0x276>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d106      	bne.n	8004fee <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004fec:	e029      	b.n	8005042 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1b1      	bne.n	8004f5c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	6839      	ldr	r1, [r7, #0]
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 fb77 	bl	80056f0 <SPI_EndRxTxTransaction>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2220      	movs	r2, #32
 800500c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10a      	bne.n	800502c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005016:	2300      	movs	r3, #0
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	613b      	str	r3, [r7, #16]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	613b      	str	r3, [r7, #16]
 800502a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	77fb      	strb	r3, [r7, #31]
 8005038:	e003      	b.n	8005042 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800504a:	7ffb      	ldrb	r3, [r7, #31]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3720      	adds	r7, #32
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b08a      	sub	sp, #40	; 0x28
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005062:	2301      	movs	r3, #1
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_SPI_TransmitReceive+0x26>
 8005076:	2302      	movs	r3, #2
 8005078:	e20a      	b.n	8005490 <HAL_SPI_TransmitReceive+0x43c>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005082:	f7fd fb0d 	bl	80026a0 <HAL_GetTick>
 8005086:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800508e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005096:	887b      	ldrh	r3, [r7, #2]
 8005098:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800509a:	887b      	ldrh	r3, [r7, #2]
 800509c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800509e:	7efb      	ldrb	r3, [r7, #27]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d00e      	beq.n	80050c2 <HAL_SPI_TransmitReceive+0x6e>
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050aa:	d106      	bne.n	80050ba <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d102      	bne.n	80050ba <HAL_SPI_TransmitReceive+0x66>
 80050b4:	7efb      	ldrb	r3, [r7, #27]
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d003      	beq.n	80050c2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80050ba:	2302      	movs	r3, #2
 80050bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80050c0:	e1e0      	b.n	8005484 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d005      	beq.n	80050d4 <HAL_SPI_TransmitReceive+0x80>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_SPI_TransmitReceive+0x80>
 80050ce:	887b      	ldrh	r3, [r7, #2]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d103      	bne.n	80050dc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80050da:	e1d3      	b.n	8005484 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	d003      	beq.n	80050f0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2205      	movs	r2, #5
 80050ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	887a      	ldrh	r2, [r7, #2]
 8005100:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	887a      	ldrh	r2, [r7, #2]
 8005108:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	887a      	ldrh	r2, [r7, #2]
 8005116:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	887a      	ldrh	r2, [r7, #2]
 800511c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005132:	d802      	bhi.n	800513a <HAL_SPI_TransmitReceive+0xe6>
 8005134:	8a3b      	ldrh	r3, [r7, #16]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d908      	bls.n	800514c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005148:	605a      	str	r2, [r3, #4]
 800514a:	e007      	b.n	800515c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800515a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005166:	2b40      	cmp	r3, #64	; 0x40
 8005168:	d007      	beq.n	800517a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005178:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005182:	f240 8081 	bls.w	8005288 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <HAL_SPI_TransmitReceive+0x140>
 800518e:	8a7b      	ldrh	r3, [r7, #18]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d16d      	bne.n	8005270 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	881a      	ldrh	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a4:	1c9a      	adds	r2, r3, #2
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051b8:	e05a      	b.n	8005270 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d11b      	bne.n	8005200 <HAL_SPI_TransmitReceive+0x1ac>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d016      	beq.n	8005200 <HAL_SPI_TransmitReceive+0x1ac>
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d113      	bne.n	8005200 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051dc:	881a      	ldrh	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	1c9a      	adds	r2, r3, #2
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b01      	cmp	r3, #1
 800520c:	d11c      	bne.n	8005248 <HAL_SPI_TransmitReceive+0x1f4>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005214:	b29b      	uxth	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d016      	beq.n	8005248 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68da      	ldr	r2, [r3, #12]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	b292      	uxth	r2, r2
 8005226:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522c:	1c9a      	adds	r2, r3, #2
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005238:	b29b      	uxth	r3, r3
 800523a:	3b01      	subs	r3, #1
 800523c:	b29a      	uxth	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005244:	2301      	movs	r3, #1
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005248:	f7fd fa2a 	bl	80026a0 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005254:	429a      	cmp	r2, r3
 8005256:	d80b      	bhi.n	8005270 <HAL_SPI_TransmitReceive+0x21c>
 8005258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525e:	d007      	beq.n	8005270 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800526e:	e109      	b.n	8005484 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005274:	b29b      	uxth	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d19f      	bne.n	80051ba <HAL_SPI_TransmitReceive+0x166>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005280:	b29b      	uxth	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d199      	bne.n	80051ba <HAL_SPI_TransmitReceive+0x166>
 8005286:	e0e3      	b.n	8005450 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <HAL_SPI_TransmitReceive+0x244>
 8005290:	8a7b      	ldrh	r3, [r7, #18]
 8005292:	2b01      	cmp	r3, #1
 8005294:	f040 80cf 	bne.w	8005436 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d912      	bls.n	80052c8 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	881a      	ldrh	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b2:	1c9a      	adds	r2, r3, #2
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052bc:	b29b      	uxth	r3, r3
 80052be:	3b02      	subs	r3, #2
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052c6:	e0b6      	b.n	8005436 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	330c      	adds	r3, #12
 80052d2:	7812      	ldrb	r2, [r2, #0]
 80052d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	3b01      	subs	r3, #1
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052ee:	e0a2      	b.n	8005436 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d134      	bne.n	8005368 <HAL_SPI_TransmitReceive+0x314>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005302:	b29b      	uxth	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d02f      	beq.n	8005368 <HAL_SPI_TransmitReceive+0x314>
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	2b01      	cmp	r3, #1
 800530c:	d12c      	bne.n	8005368 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005312:	b29b      	uxth	r3, r3
 8005314:	2b01      	cmp	r3, #1
 8005316:	d912      	bls.n	800533e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531c:	881a      	ldrh	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	1c9a      	adds	r2, r3, #2
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005332:	b29b      	uxth	r3, r3
 8005334:	3b02      	subs	r3, #2
 8005336:	b29a      	uxth	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800533c:	e012      	b.n	8005364 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	330c      	adds	r3, #12
 8005348:	7812      	ldrb	r2, [r2, #0]
 800534a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b01      	cmp	r3, #1
 8005374:	d148      	bne.n	8005408 <HAL_SPI_TransmitReceive+0x3b4>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800537c:	b29b      	uxth	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d042      	beq.n	8005408 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b01      	cmp	r3, #1
 800538c:	d923      	bls.n	80053d6 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005398:	b292      	uxth	r2, r2
 800539a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	1c9a      	adds	r2, r3, #2
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b02      	subs	r3, #2
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d81f      	bhi.n	8005404 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053d2:	605a      	str	r2, [r3, #4]
 80053d4:	e016      	b.n	8005404 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f103 020c 	add.w	r2, r3, #12
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	7812      	ldrb	r2, [r2, #0]
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005404:	2301      	movs	r3, #1
 8005406:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005408:	f7fd f94a 	bl	80026a0 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005414:	429a      	cmp	r2, r3
 8005416:	d803      	bhi.n	8005420 <HAL_SPI_TransmitReceive+0x3cc>
 8005418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541e:	d102      	bne.n	8005426 <HAL_SPI_TransmitReceive+0x3d2>
 8005420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005422:	2b00      	cmp	r3, #0
 8005424:	d107      	bne.n	8005436 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005434:	e026      	b.n	8005484 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800543a:	b29b      	uxth	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	f47f af57 	bne.w	80052f0 <HAL_SPI_TransmitReceive+0x29c>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005448:	b29b      	uxth	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	f47f af50 	bne.w	80052f0 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005450:	69fa      	ldr	r2, [r7, #28]
 8005452:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 f94b 	bl	80056f0 <SPI_EndRxTxTransaction>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2220      	movs	r2, #32
 800546a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547a:	e003      	b.n	8005484 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800548c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005490:	4618      	mov	r0, r3
 8005492:	3728      	adds	r7, #40	; 0x28
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054a6:	b2db      	uxtb	r3, r3
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	4613      	mov	r3, r2
 80054c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054c4:	f7fd f8ec 	bl	80026a0 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054cc:	1a9b      	subs	r3, r3, r2
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	4413      	add	r3, r2
 80054d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054d4:	f7fd f8e4 	bl	80026a0 <HAL_GetTick>
 80054d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054da:	4b39      	ldr	r3, [pc, #228]	; (80055c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	015b      	lsls	r3, r3, #5
 80054e0:	0d1b      	lsrs	r3, r3, #20
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	fb02 f303 	mul.w	r3, r2, r3
 80054e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054ea:	e054      	b.n	8005596 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f2:	d050      	beq.n	8005596 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054f4:	f7fd f8d4 	bl	80026a0 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	69fa      	ldr	r2, [r7, #28]
 8005500:	429a      	cmp	r2, r3
 8005502:	d902      	bls.n	800550a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d13d      	bne.n	8005586 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005518:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005522:	d111      	bne.n	8005548 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800552c:	d004      	beq.n	8005538 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005536:	d107      	bne.n	8005548 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005546:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005550:	d10f      	bne.n	8005572 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005570:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e017      	b.n	80055b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	3b01      	subs	r3, #1
 8005594:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689a      	ldr	r2, [r3, #8]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	4013      	ands	r3, r2
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	bf0c      	ite	eq
 80055a6:	2301      	moveq	r3, #1
 80055a8:	2300      	movne	r3, #0
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d19b      	bne.n	80054ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3720      	adds	r7, #32
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	20000004 	.word	0x20000004

080055c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08a      	sub	sp, #40	; 0x28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80055d6:	f7fd f863 	bl	80026a0 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	4413      	add	r3, r2
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80055e6:	f7fd f85b 	bl	80026a0 <HAL_GetTick>
 80055ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	330c      	adds	r3, #12
 80055f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80055f4:	4b3d      	ldr	r3, [pc, #244]	; (80056ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	00da      	lsls	r2, r3, #3
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	0d1b      	lsrs	r3, r3, #20
 8005604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005606:	fb02 f303 	mul.w	r3, r2, r3
 800560a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800560c:	e060      	b.n	80056d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005614:	d107      	bne.n	8005626 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d104      	bne.n	8005626 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	b2db      	uxtb	r3, r3
 8005622:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005624:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562c:	d050      	beq.n	80056d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800562e:	f7fd f837 	bl	80026a0 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800563a:	429a      	cmp	r2, r3
 800563c:	d902      	bls.n	8005644 <SPI_WaitFifoStateUntilTimeout+0x80>
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	2b00      	cmp	r3, #0
 8005642:	d13d      	bne.n	80056c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005652:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800565c:	d111      	bne.n	8005682 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005666:	d004      	beq.n	8005672 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005670:	d107      	bne.n	8005682 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005680:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800568a:	d10f      	bne.n	80056ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e010      	b.n	80056e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	4013      	ands	r3, r2
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d196      	bne.n	800560e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3728      	adds	r7, #40	; 0x28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	20000004 	.word	0x20000004

080056f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2200      	movs	r2, #0
 8005704:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f7ff ff5b 	bl	80055c4 <SPI_WaitFifoStateUntilTimeout>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d007      	beq.n	8005724 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005718:	f043 0220 	orr.w	r2, r3, #32
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e027      	b.n	8005774 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2200      	movs	r2, #0
 800572c:	2180      	movs	r1, #128	; 0x80
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f7ff fec0 	bl	80054b4 <SPI_WaitFlagStateUntilTimeout>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d007      	beq.n	800574a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800573e:	f043 0220 	orr.w	r2, r3, #32
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e014      	b.n	8005774 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2200      	movs	r2, #0
 8005752:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f7ff ff34 	bl	80055c4 <SPI_WaitFifoStateUntilTimeout>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d007      	beq.n	8005772 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005766:	f043 0220 	orr.w	r2, r3, #32
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e000      	b.n	8005774 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e049      	b.n	8005822 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d106      	bne.n	80057a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fc fdba 	bl	800231c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3304      	adds	r3, #4
 80057b8:	4619      	mov	r1, r3
 80057ba:	4610      	mov	r0, r2
 80057bc:	f000 f95c 	bl	8005a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
	...

0800582c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b01      	cmp	r3, #1
 800583e:	d001      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e040      	b.n	80058c6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0201 	orr.w	r2, r2, #1
 800585a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a1c      	ldr	r2, [pc, #112]	; (80058d4 <HAL_TIM_Base_Start_IT+0xa8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00e      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x58>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586e:	d009      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x58>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a18      	ldr	r2, [pc, #96]	; (80058d8 <HAL_TIM_Base_Start_IT+0xac>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d004      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x58>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a17      	ldr	r2, [pc, #92]	; (80058dc <HAL_TIM_Base_Start_IT+0xb0>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d115      	bne.n	80058b0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	4b15      	ldr	r3, [pc, #84]	; (80058e0 <HAL_TIM_Base_Start_IT+0xb4>)
 800588c:	4013      	ands	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b06      	cmp	r3, #6
 8005894:	d015      	beq.n	80058c2 <HAL_TIM_Base_Start_IT+0x96>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800589c:	d011      	beq.n	80058c2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f042 0201 	orr.w	r2, r2, #1
 80058ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ae:	e008      	b.n	80058c2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0201 	orr.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	e000      	b.n	80058c4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40012c00 	.word	0x40012c00
 80058d8:	40000400 	.word	0x40000400
 80058dc:	40014000 	.word	0x40014000
 80058e0:	00010007 	.word	0x00010007

080058e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d101      	bne.n	8005900 <HAL_TIM_ConfigClockSource+0x1c>
 80058fc:	2302      	movs	r3, #2
 80058fe:	e0b6      	b.n	8005a6e <HAL_TIM_ConfigClockSource+0x18a>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800591e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800592a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800593c:	d03e      	beq.n	80059bc <HAL_TIM_ConfigClockSource+0xd8>
 800593e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005942:	f200 8087 	bhi.w	8005a54 <HAL_TIM_ConfigClockSource+0x170>
 8005946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800594a:	f000 8086 	beq.w	8005a5a <HAL_TIM_ConfigClockSource+0x176>
 800594e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005952:	d87f      	bhi.n	8005a54 <HAL_TIM_ConfigClockSource+0x170>
 8005954:	2b70      	cmp	r3, #112	; 0x70
 8005956:	d01a      	beq.n	800598e <HAL_TIM_ConfigClockSource+0xaa>
 8005958:	2b70      	cmp	r3, #112	; 0x70
 800595a:	d87b      	bhi.n	8005a54 <HAL_TIM_ConfigClockSource+0x170>
 800595c:	2b60      	cmp	r3, #96	; 0x60
 800595e:	d050      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0x11e>
 8005960:	2b60      	cmp	r3, #96	; 0x60
 8005962:	d877      	bhi.n	8005a54 <HAL_TIM_ConfigClockSource+0x170>
 8005964:	2b50      	cmp	r3, #80	; 0x50
 8005966:	d03c      	beq.n	80059e2 <HAL_TIM_ConfigClockSource+0xfe>
 8005968:	2b50      	cmp	r3, #80	; 0x50
 800596a:	d873      	bhi.n	8005a54 <HAL_TIM_ConfigClockSource+0x170>
 800596c:	2b40      	cmp	r3, #64	; 0x40
 800596e:	d058      	beq.n	8005a22 <HAL_TIM_ConfigClockSource+0x13e>
 8005970:	2b40      	cmp	r3, #64	; 0x40
 8005972:	d86f      	bhi.n	8005a54 <HAL_TIM_ConfigClockSource+0x170>
 8005974:	2b30      	cmp	r3, #48	; 0x30
 8005976:	d064      	beq.n	8005a42 <HAL_TIM_ConfigClockSource+0x15e>
 8005978:	2b30      	cmp	r3, #48	; 0x30
 800597a:	d86b      	bhi.n	8005a54 <HAL_TIM_ConfigClockSource+0x170>
 800597c:	2b20      	cmp	r3, #32
 800597e:	d060      	beq.n	8005a42 <HAL_TIM_ConfigClockSource+0x15e>
 8005980:	2b20      	cmp	r3, #32
 8005982:	d867      	bhi.n	8005a54 <HAL_TIM_ConfigClockSource+0x170>
 8005984:	2b00      	cmp	r3, #0
 8005986:	d05c      	beq.n	8005a42 <HAL_TIM_ConfigClockSource+0x15e>
 8005988:	2b10      	cmp	r3, #16
 800598a:	d05a      	beq.n	8005a42 <HAL_TIM_ConfigClockSource+0x15e>
 800598c:	e062      	b.n	8005a54 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6818      	ldr	r0, [r3, #0]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	6899      	ldr	r1, [r3, #8]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f000 f95d 	bl	8005c5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	609a      	str	r2, [r3, #8]
      break;
 80059ba:	e04f      	b.n	8005a5c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	6899      	ldr	r1, [r3, #8]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	f000 f946 	bl	8005c5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059de:	609a      	str	r2, [r3, #8]
      break;
 80059e0:	e03c      	b.n	8005a5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6859      	ldr	r1, [r3, #4]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	461a      	mov	r2, r3
 80059f0:	f000 f8ba 	bl	8005b68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2150      	movs	r1, #80	; 0x50
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 f913 	bl	8005c26 <TIM_ITRx_SetConfig>
      break;
 8005a00:	e02c      	b.n	8005a5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6818      	ldr	r0, [r3, #0]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	6859      	ldr	r1, [r3, #4]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f000 f8d9 	bl	8005bc6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2160      	movs	r1, #96	; 0x60
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 f903 	bl	8005c26 <TIM_ITRx_SetConfig>
      break;
 8005a20:	e01c      	b.n	8005a5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6818      	ldr	r0, [r3, #0]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	6859      	ldr	r1, [r3, #4]
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f000 f89a 	bl	8005b68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2140      	movs	r1, #64	; 0x40
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 f8f3 	bl	8005c26 <TIM_ITRx_SetConfig>
      break;
 8005a40:	e00c      	b.n	8005a5c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	f000 f8ea 	bl	8005c26 <TIM_ITRx_SetConfig>
      break;
 8005a52:	e003      	b.n	8005a5c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	73fb      	strb	r3, [r7, #15]
      break;
 8005a58:	e000      	b.n	8005a5c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005a5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a32      	ldr	r2, [pc, #200]	; (8005b54 <TIM_Base_SetConfig+0xdc>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d007      	beq.n	8005aa0 <TIM_Base_SetConfig+0x28>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a96:	d003      	beq.n	8005aa0 <TIM_Base_SetConfig+0x28>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a2f      	ldr	r2, [pc, #188]	; (8005b58 <TIM_Base_SetConfig+0xe0>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d108      	bne.n	8005ab2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a27      	ldr	r2, [pc, #156]	; (8005b54 <TIM_Base_SetConfig+0xdc>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d013      	beq.n	8005ae2 <TIM_Base_SetConfig+0x6a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac0:	d00f      	beq.n	8005ae2 <TIM_Base_SetConfig+0x6a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a24      	ldr	r2, [pc, #144]	; (8005b58 <TIM_Base_SetConfig+0xe0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d00b      	beq.n	8005ae2 <TIM_Base_SetConfig+0x6a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a23      	ldr	r2, [pc, #140]	; (8005b5c <TIM_Base_SetConfig+0xe4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d007      	beq.n	8005ae2 <TIM_Base_SetConfig+0x6a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a22      	ldr	r2, [pc, #136]	; (8005b60 <TIM_Base_SetConfig+0xe8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d003      	beq.n	8005ae2 <TIM_Base_SetConfig+0x6a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a21      	ldr	r2, [pc, #132]	; (8005b64 <TIM_Base_SetConfig+0xec>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d108      	bne.n	8005af4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a0e      	ldr	r2, [pc, #56]	; (8005b54 <TIM_Base_SetConfig+0xdc>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00b      	beq.n	8005b38 <TIM_Base_SetConfig+0xc0>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a0e      	ldr	r2, [pc, #56]	; (8005b5c <TIM_Base_SetConfig+0xe4>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d007      	beq.n	8005b38 <TIM_Base_SetConfig+0xc0>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a0d      	ldr	r2, [pc, #52]	; (8005b60 <TIM_Base_SetConfig+0xe8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d003      	beq.n	8005b38 <TIM_Base_SetConfig+0xc0>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a0c      	ldr	r2, [pc, #48]	; (8005b64 <TIM_Base_SetConfig+0xec>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d103      	bne.n	8005b40 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	615a      	str	r2, [r3, #20]
}
 8005b46:	bf00      	nop
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40012c00 	.word	0x40012c00
 8005b58:	40000400 	.word	0x40000400
 8005b5c:	40014000 	.word	0x40014000
 8005b60:	40014400 	.word	0x40014400
 8005b64:	40014800 	.word	0x40014800

08005b68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	f023 0201 	bic.w	r2, r3, #1
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f023 030a 	bic.w	r3, r3, #10
 8005ba4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	621a      	str	r2, [r3, #32]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b087      	sub	sp, #28
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	f023 0210 	bic.w	r2, r3, #16
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	031b      	lsls	r3, r3, #12
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	621a      	str	r2, [r3, #32]
}
 8005c1a:	bf00      	nop
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b085      	sub	sp, #20
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	f043 0307 	orr.w	r3, r3, #7
 8005c48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	609a      	str	r2, [r3, #8]
}
 8005c50:	bf00      	nop
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
 8005c68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	021a      	lsls	r2, r3, #8
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	609a      	str	r2, [r3, #8]
}
 8005c90:	bf00      	nop
 8005c92:	371c      	adds	r7, #28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e054      	b.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a24      	ldr	r2, [pc, #144]	; (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d108      	bne.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ce4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a17      	ldr	r2, [pc, #92]	; (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00e      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d1c:	d009      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a13      	ldr	r2, [pc, #76]	; (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d004      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a11      	ldr	r2, [pc, #68]	; (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d10c      	bne.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40012c00 	.word	0x40012c00
 8005d70:	40000400 	.word	0x40000400
 8005d74:	40014000 	.word	0x40014000

08005d78 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005d7c:	4904      	ldr	r1, [pc, #16]	; (8005d90 <MX_FATFS_Init+0x18>)
 8005d7e:	4805      	ldr	r0, [pc, #20]	; (8005d94 <MX_FATFS_Init+0x1c>)
 8005d80:	f002 ffd8 	bl	8008d34 <FATFS_LinkDriver>
 8005d84:	4603      	mov	r3, r0
 8005d86:	461a      	mov	r2, r3
 8005d88:	4b03      	ldr	r3, [pc, #12]	; (8005d98 <MX_FATFS_Init+0x20>)
 8005d8a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005d8c:	bf00      	nop
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	20000ca4 	.word	0x20000ca4
 8005d94:	20000010 	.word	0x20000010
 8005d98:	20000ca8 	.word	0x20000ca8

08005d9c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005da0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4603      	mov	r3, r0
 8005db4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8005db6:	79fb      	ldrb	r3, [r7, #7]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7fb fc17 	bl	80015ec <SD_disk_initialize>
 8005dbe:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	4603      	mov	r3, r0
 8005dd0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8005dd2:	79fb      	ldrb	r3, [r7, #7]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fb fcf3 	bl	80017c0 <SD_disk_status>
 8005dda:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	607a      	str	r2, [r7, #4]
 8005dee:	603b      	str	r3, [r7, #0]
 8005df0:	4603      	mov	r3, r0
 8005df2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8005df4:	7bf8      	ldrb	r0, [r7, #15]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	68b9      	ldr	r1, [r7, #8]
 8005dfc:	f7fb fcf6 	bl	80017ec <SD_disk_read>
 8005e00:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
 8005e14:	603b      	str	r3, [r7, #0]
 8005e16:	4603      	mov	r3, r0
 8005e18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8005e1a:	7bf8      	ldrb	r0, [r7, #15]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	68b9      	ldr	r1, [r7, #8]
 8005e22:	f7fb fd4d 	bl	80018c0 <SD_disk_write>
 8005e26:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	603a      	str	r2, [r7, #0]
 8005e3a:	71fb      	strb	r3, [r7, #7]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8005e40:	79b9      	ldrb	r1, [r7, #6]
 8005e42:	79fb      	ldrb	r3, [r7, #7]
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fb fdbe 	bl	80019c8 <SD_disk_ioctl>
 8005e4c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
	...

08005e58 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	4603      	mov	r3, r0
 8005e60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005e62:	79fb      	ldrb	r3, [r7, #7]
 8005e64:	4a08      	ldr	r2, [pc, #32]	; (8005e88 <disk_status+0x30>)
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	79fa      	ldrb	r2, [r7, #7]
 8005e70:	4905      	ldr	r1, [pc, #20]	; (8005e88 <disk_status+0x30>)
 8005e72:	440a      	add	r2, r1
 8005e74:	7a12      	ldrb	r2, [r2, #8]
 8005e76:	4610      	mov	r0, r2
 8005e78:	4798      	blx	r3
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	20000268 	.word	0x20000268

08005e8c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	4603      	mov	r3, r0
 8005e94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8005e9a:	79fb      	ldrb	r3, [r7, #7]
 8005e9c:	4a0d      	ldr	r2, [pc, #52]	; (8005ed4 <disk_initialize+0x48>)
 8005e9e:	5cd3      	ldrb	r3, [r2, r3]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d111      	bne.n	8005ec8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8005ea4:	79fb      	ldrb	r3, [r7, #7]
 8005ea6:	4a0b      	ldr	r2, [pc, #44]	; (8005ed4 <disk_initialize+0x48>)
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005eac:	79fb      	ldrb	r3, [r7, #7]
 8005eae:	4a09      	ldr	r2, [pc, #36]	; (8005ed4 <disk_initialize+0x48>)
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	79fa      	ldrb	r2, [r7, #7]
 8005eba:	4906      	ldr	r1, [pc, #24]	; (8005ed4 <disk_initialize+0x48>)
 8005ebc:	440a      	add	r2, r1
 8005ebe:	7a12      	ldrb	r2, [r2, #8]
 8005ec0:	4610      	mov	r0, r2
 8005ec2:	4798      	blx	r3
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	20000268 	.word	0x20000268

08005ed8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005ed8:	b590      	push	{r4, r7, lr}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60b9      	str	r1, [r7, #8]
 8005ee0:	607a      	str	r2, [r7, #4]
 8005ee2:	603b      	str	r3, [r7, #0]
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005ee8:	7bfb      	ldrb	r3, [r7, #15]
 8005eea:	4a0a      	ldr	r2, [pc, #40]	; (8005f14 <disk_read+0x3c>)
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	689c      	ldr	r4, [r3, #8]
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
 8005ef6:	4a07      	ldr	r2, [pc, #28]	; (8005f14 <disk_read+0x3c>)
 8005ef8:	4413      	add	r3, r2
 8005efa:	7a18      	ldrb	r0, [r3, #8]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	68b9      	ldr	r1, [r7, #8]
 8005f02:	47a0      	blx	r4
 8005f04:	4603      	mov	r3, r0
 8005f06:	75fb      	strb	r3, [r7, #23]
  return res;
 8005f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	371c      	adds	r7, #28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd90      	pop	{r4, r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20000268 	.word	0x20000268

08005f18 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005f18:	b590      	push	{r4, r7, lr}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60b9      	str	r1, [r7, #8]
 8005f20:	607a      	str	r2, [r7, #4]
 8005f22:	603b      	str	r3, [r7, #0]
 8005f24:	4603      	mov	r3, r0
 8005f26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
 8005f2a:	4a0a      	ldr	r2, [pc, #40]	; (8005f54 <disk_write+0x3c>)
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	68dc      	ldr	r4, [r3, #12]
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	4a07      	ldr	r2, [pc, #28]	; (8005f54 <disk_write+0x3c>)
 8005f38:	4413      	add	r3, r2
 8005f3a:	7a18      	ldrb	r0, [r3, #8]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	68b9      	ldr	r1, [r7, #8]
 8005f42:	47a0      	blx	r4
 8005f44:	4603      	mov	r3, r0
 8005f46:	75fb      	strb	r3, [r7, #23]
  return res;
 8005f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	371c      	adds	r7, #28
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd90      	pop	{r4, r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20000268 	.word	0x20000268

08005f58 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	4603      	mov	r3, r0
 8005f60:	603a      	str	r2, [r7, #0]
 8005f62:	71fb      	strb	r3, [r7, #7]
 8005f64:	460b      	mov	r3, r1
 8005f66:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	4a09      	ldr	r2, [pc, #36]	; (8005f90 <disk_ioctl+0x38>)
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	79fa      	ldrb	r2, [r7, #7]
 8005f76:	4906      	ldr	r1, [pc, #24]	; (8005f90 <disk_ioctl+0x38>)
 8005f78:	440a      	add	r2, r1
 8005f7a:	7a10      	ldrb	r0, [r2, #8]
 8005f7c:	79b9      	ldrb	r1, [r7, #6]
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	4798      	blx	r3
 8005f82:	4603      	mov	r3, r0
 8005f84:	73fb      	strb	r3, [r7, #15]
  return res;
 8005f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	20000268 	.word	0x20000268

08005f94 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8005fa8:	e007      	b.n	8005fba <mem_cpy+0x26>
		*d++ = *s++;
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	1c53      	adds	r3, r2, #1
 8005fae:	613b      	str	r3, [r7, #16]
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	1c59      	adds	r1, r3, #1
 8005fb4:	6179      	str	r1, [r7, #20]
 8005fb6:	7812      	ldrb	r2, [r2, #0]
 8005fb8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	1e5a      	subs	r2, r3, #1
 8005fbe:	607a      	str	r2, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1f2      	bne.n	8005faa <mem_cpy+0x16>
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005fd2:	b480      	push	{r7}
 8005fd4:	b087      	sub	sp, #28
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	60f8      	str	r0, [r7, #12]
 8005fda:	60b9      	str	r1, [r7, #8]
 8005fdc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8005fe2:	e005      	b.n	8005ff0 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	617a      	str	r2, [r7, #20]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	b2d2      	uxtb	r2, r2
 8005fee:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	1e5a      	subs	r2, r3, #1
 8005ff4:	607a      	str	r2, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1f4      	bne.n	8005fe4 <mem_set+0x12>
}
 8005ffa:	bf00      	nop
 8005ffc:	bf00      	nop
 8005ffe:	371c      	adds	r7, #28
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8006008:	b480      	push	{r7}
 800600a:	b089      	sub	sp, #36	; 0x24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	61fb      	str	r3, [r7, #28]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800601c:	2300      	movs	r3, #0
 800601e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8006020:	bf00      	nop
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	1e5a      	subs	r2, r3, #1
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00d      	beq.n	8006048 <mem_cmp+0x40>
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	61fa      	str	r2, [r7, #28]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	4619      	mov	r1, r3
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	1c5a      	adds	r2, r3, #1
 800603a:	61ba      	str	r2, [r7, #24]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	1acb      	subs	r3, r1, r3
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d0ec      	beq.n	8006022 <mem_cmp+0x1a>
	return r;
 8006048:	697b      	ldr	r3, [r7, #20]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3724      	adds	r7, #36	; 0x24
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006060:	e002      	b.n	8006068 <chk_chr+0x12>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3301      	adds	r3, #1
 8006066:	607b      	str	r3, [r7, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d005      	beq.n	800607c <chk_chr+0x26>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	461a      	mov	r2, r3
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	4293      	cmp	r3, r2
 800607a:	d1f2      	bne.n	8006062 <chk_chr+0xc>
	return *str;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	781b      	ldrb	r3, [r3, #0]
}
 8006080:	4618      	mov	r0, r3
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006096:	2300      	movs	r3, #0
 8006098:	60bb      	str	r3, [r7, #8]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	e038      	b.n	8006112 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80060a0:	4930      	ldr	r1, [pc, #192]	; (8006164 <chk_lock+0xd8>)
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4613      	mov	r3, r2
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	440b      	add	r3, r1
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d029      	beq.n	8006108 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80060b4:	492b      	ldr	r1, [pc, #172]	; (8006164 <chk_lock+0xd8>)
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	4613      	mov	r3, r2
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	4413      	add	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	440b      	add	r3, r1
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d11e      	bne.n	800610c <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80060ce:	4925      	ldr	r1, [pc, #148]	; (8006164 <chk_lock+0xd8>)
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	4613      	mov	r3, r2
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	4413      	add	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	440b      	add	r3, r1
 80060dc:	3304      	adds	r3, #4
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d110      	bne.n	800610c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80060ea:	491e      	ldr	r1, [pc, #120]	; (8006164 <chk_lock+0xd8>)
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4613      	mov	r3, r2
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	4413      	add	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	440b      	add	r3, r1
 80060f8:	3308      	adds	r3, #8
 80060fa:	881a      	ldrh	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
				Files[i].clu == dp->sclust &&
 8006102:	429a      	cmp	r2, r3
 8006104:	d102      	bne.n	800610c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8006106:	e007      	b.n	8006118 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8006108:	2301      	movs	r3, #1
 800610a:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	3301      	adds	r3, #1
 8006110:	60fb      	str	r3, [r7, #12]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d9c3      	bls.n	80060a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2b02      	cmp	r3, #2
 800611c:	d109      	bne.n	8006132 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d102      	bne.n	800612a <chk_lock+0x9e>
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	2b02      	cmp	r3, #2
 8006128:	d101      	bne.n	800612e <chk_lock+0xa2>
 800612a:	2300      	movs	r3, #0
 800612c:	e013      	b.n	8006156 <chk_lock+0xca>
 800612e:	2312      	movs	r3, #18
 8006130:	e011      	b.n	8006156 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10b      	bne.n	8006150 <chk_lock+0xc4>
 8006138:	490a      	ldr	r1, [pc, #40]	; (8006164 <chk_lock+0xd8>)
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	4613      	mov	r3, r2
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	4413      	add	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	440b      	add	r3, r1
 8006146:	330a      	adds	r3, #10
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800614e:	d101      	bne.n	8006154 <chk_lock+0xc8>
 8006150:	2310      	movs	r3, #16
 8006152:	e000      	b.n	8006156 <chk_lock+0xca>
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	20000250 	.word	0x20000250

08006168 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800616e:	2300      	movs	r3, #0
 8006170:	607b      	str	r3, [r7, #4]
 8006172:	e002      	b.n	800617a <enq_lock+0x12>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3301      	adds	r3, #1
 8006178:	607b      	str	r3, [r7, #4]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d809      	bhi.n	8006194 <enq_lock+0x2c>
 8006180:	490a      	ldr	r1, [pc, #40]	; (80061ac <enq_lock+0x44>)
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	4613      	mov	r3, r2
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	440b      	add	r3, r1
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1ef      	bne.n	8006174 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b02      	cmp	r3, #2
 8006198:	bf14      	ite	ne
 800619a:	2301      	movne	r3, #1
 800619c:	2300      	moveq	r3, #0
 800619e:	b2db      	uxtb	r3, r3
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr
 80061ac:	20000250 	.word	0x20000250

080061b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80061ba:	2300      	movs	r3, #0
 80061bc:	60fb      	str	r3, [r7, #12]
 80061be:	e02b      	b.n	8006218 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 80061c0:	4956      	ldr	r1, [pc, #344]	; (800631c <inc_lock+0x16c>)
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	4613      	mov	r3, r2
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	440b      	add	r3, r1
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d11b      	bne.n	8006212 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80061da:	4950      	ldr	r1, [pc, #320]	; (800631c <inc_lock+0x16c>)
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	4613      	mov	r3, r2
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	4413      	add	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	440b      	add	r3, r1
 80061e8:	3304      	adds	r3, #4
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
		if (Files[i].fs == dp->fs &&
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d10d      	bne.n	8006212 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 80061f6:	4949      	ldr	r1, [pc, #292]	; (800631c <inc_lock+0x16c>)
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	4613      	mov	r3, r2
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	4413      	add	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	440b      	add	r3, r1
 8006204:	3308      	adds	r3, #8
 8006206:	881a      	ldrh	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
			Files[i].clu == dp->sclust &&
 800620e:	429a      	cmp	r2, r3
 8006210:	d006      	beq.n	8006220 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	3301      	adds	r3, #1
 8006216:	60fb      	str	r3, [r7, #12]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d9d0      	bls.n	80061c0 <inc_lock+0x10>
 800621e:	e000      	b.n	8006222 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8006220:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b02      	cmp	r3, #2
 8006226:	d145      	bne.n	80062b4 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006228:	2300      	movs	r3, #0
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	e002      	b.n	8006234 <inc_lock+0x84>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3301      	adds	r3, #1
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d809      	bhi.n	800624e <inc_lock+0x9e>
 800623a:	4938      	ldr	r1, [pc, #224]	; (800631c <inc_lock+0x16c>)
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4613      	mov	r3, r2
 8006240:	005b      	lsls	r3, r3, #1
 8006242:	4413      	add	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	440b      	add	r3, r1
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1ef      	bne.n	800622e <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2b02      	cmp	r3, #2
 8006252:	d101      	bne.n	8006258 <inc_lock+0xa8>
 8006254:	2300      	movs	r3, #0
 8006256:	e05a      	b.n	800630e <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800625e:	482f      	ldr	r0, [pc, #188]	; (800631c <inc_lock+0x16c>)
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4613      	mov	r3, r2
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	4413      	add	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4403      	add	r3, r0
 800626c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
 8006274:	4829      	ldr	r0, [pc, #164]	; (800631c <inc_lock+0x16c>)
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4613      	mov	r3, r2
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	4413      	add	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4403      	add	r3, r0
 8006282:	3304      	adds	r3, #4
 8006284:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8b3 0406 	ldrh.w	r0, [r3, #1030]	; 0x406
 800628c:	4923      	ldr	r1, [pc, #140]	; (800631c <inc_lock+0x16c>)
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4613      	mov	r3, r2
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	4413      	add	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	440b      	add	r3, r1
 800629a:	3308      	adds	r3, #8
 800629c:	4602      	mov	r2, r0
 800629e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80062a0:	491e      	ldr	r1, [pc, #120]	; (800631c <inc_lock+0x16c>)
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	4613      	mov	r3, r2
 80062a6:	005b      	lsls	r3, r3, #1
 80062a8:	4413      	add	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	440b      	add	r3, r1
 80062ae:	330a      	adds	r3, #10
 80062b0:	2200      	movs	r2, #0
 80062b2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00c      	beq.n	80062d4 <inc_lock+0x124>
 80062ba:	4918      	ldr	r1, [pc, #96]	; (800631c <inc_lock+0x16c>)
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4613      	mov	r3, r2
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	4413      	add	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	440b      	add	r3, r1
 80062c8:	330a      	adds	r3, #10
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <inc_lock+0x124>
 80062d0:	2300      	movs	r3, #0
 80062d2:	e01c      	b.n	800630e <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10b      	bne.n	80062f2 <inc_lock+0x142>
 80062da:	4910      	ldr	r1, [pc, #64]	; (800631c <inc_lock+0x16c>)
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4613      	mov	r3, r2
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	440b      	add	r3, r1
 80062e8:	330a      	adds	r3, #10
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	3301      	adds	r3, #1
 80062ee:	b299      	uxth	r1, r3
 80062f0:	e001      	b.n	80062f6 <inc_lock+0x146>
 80062f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062f6:	4809      	ldr	r0, [pc, #36]	; (800631c <inc_lock+0x16c>)
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	4613      	mov	r3, r2
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	4413      	add	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4403      	add	r3, r0
 8006304:	330a      	adds	r3, #10
 8006306:	460a      	mov	r2, r1
 8006308:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	3301      	adds	r3, #1
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	20000250 	.word	0x20000250

08006320 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	3b01      	subs	r3, #1
 800632c:	607b      	str	r3, [r7, #4]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d82e      	bhi.n	8006392 <dec_lock+0x72>
		n = Files[i].ctr;
 8006334:	491b      	ldr	r1, [pc, #108]	; (80063a4 <dec_lock+0x84>)
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	4613      	mov	r3, r2
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	4413      	add	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	440b      	add	r3, r1
 8006342:	330a      	adds	r3, #10
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006348:	89fb      	ldrh	r3, [r7, #14]
 800634a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800634e:	d101      	bne.n	8006354 <dec_lock+0x34>
 8006350:	2300      	movs	r3, #0
 8006352:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8006354:	89fb      	ldrh	r3, [r7, #14]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d002      	beq.n	8006360 <dec_lock+0x40>
 800635a:	89fb      	ldrh	r3, [r7, #14]
 800635c:	3b01      	subs	r3, #1
 800635e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006360:	4910      	ldr	r1, [pc, #64]	; (80063a4 <dec_lock+0x84>)
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	4613      	mov	r3, r2
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	440b      	add	r3, r1
 800636e:	330a      	adds	r3, #10
 8006370:	89fa      	ldrh	r2, [r7, #14]
 8006372:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006374:	89fb      	ldrh	r3, [r7, #14]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d108      	bne.n	800638c <dec_lock+0x6c>
 800637a:	490a      	ldr	r1, [pc, #40]	; (80063a4 <dec_lock+0x84>)
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	4613      	mov	r3, r2
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	4413      	add	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	440b      	add	r3, r1
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800638c:	2300      	movs	r3, #0
 800638e:	737b      	strb	r3, [r7, #13]
 8006390:	e001      	b.n	8006396 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006392:	2302      	movs	r3, #2
 8006394:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006396:	7b7b      	ldrb	r3, [r7, #13]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	20000250 	.word	0x20000250

080063a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80063b0:	2300      	movs	r3, #0
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	e016      	b.n	80063e4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80063b6:	4910      	ldr	r1, [pc, #64]	; (80063f8 <clear_lock+0x50>)
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	4613      	mov	r3, r2
 80063bc:	005b      	lsls	r3, r3, #1
 80063be:	4413      	add	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	440b      	add	r3, r1
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d108      	bne.n	80063de <clear_lock+0x36>
 80063cc:	490a      	ldr	r1, [pc, #40]	; (80063f8 <clear_lock+0x50>)
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	4613      	mov	r3, r2
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	4413      	add	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	440b      	add	r3, r1
 80063da:	2200      	movs	r2, #0
 80063dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	3301      	adds	r3, #1
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d9e5      	bls.n	80063b6 <clear_lock+0xe>
	}
}
 80063ea:	bf00      	nop
 80063ec:	bf00      	nop
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	20000250 	.word	0x20000250

080063fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 800640e:	2b00      	cmp	r3, #0
 8006410:	d038      	beq.n	8006484 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8006418:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8006420:	6879      	ldr	r1, [r7, #4]
 8006422:	2301      	movs	r3, #1
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	f7ff fd77 	bl	8005f18 <disk_write>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d002      	beq.n	8006436 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8006430:	2301      	movs	r3, #1
 8006432:	73fb      	strb	r3, [r7, #15]
 8006434:	e026      	b.n	8006484 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	1ad2      	subs	r2, r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800644e:	429a      	cmp	r2, r3
 8006450:	d218      	bcs.n	8006484 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8006458:	613b      	str	r3, [r7, #16]
 800645a:	e010      	b.n	800647e <sync_window+0x82>
					wsect += fs->fsize;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	4413      	add	r3, r2
 8006466:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	2301      	movs	r3, #1
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	f7ff fd50 	bl	8005f18 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	3b01      	subs	r3, #1
 800647c:	613b      	str	r3, [r7, #16]
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d8eb      	bhi.n	800645c <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8006484:	7bfb      	ldrb	r3, [r7, #15]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b084      	sub	sp, #16
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d01b      	beq.n	80064e0 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff ffa7 	bl	80063fc <sync_window>
 80064ae:	4603      	mov	r3, r0
 80064b0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d113      	bne.n	80064e0 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	2301      	movs	r3, #1
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	f7ff fd08 	bl	8005ed8 <disk_read>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d004      	beq.n	80064d8 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80064ce:	f04f 33ff 	mov.w	r3, #4294967295
 80064d2:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
		}
	}
	return res;
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b084      	sub	sp, #16
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7ff ff82 	bl	80063fc <sync_window>
 80064f8:	4603      	mov	r3, r0
 80064fa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f040 809c 	bne.w	800663c <sync_fs+0x152>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800650a:	2b03      	cmp	r3, #3
 800650c:	f040 8089 	bne.w	8006622 <sync_fs+0x138>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 8006516:	2b01      	cmp	r3, #1
 8006518:	f040 8083 	bne.w	8006622 <sync_fs+0x138>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006524:	461a      	mov	r2, r3
 8006526:	2100      	movs	r1, #0
 8006528:	f7ff fd53 	bl	8005fd2 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2255      	movs	r2, #85	; 0x55
 8006530:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	22aa      	movs	r2, #170	; 0xaa
 8006538:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2252      	movs	r2, #82	; 0x52
 8006540:	701a      	strb	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2252      	movs	r2, #82	; 0x52
 8006546:	705a      	strb	r2, [r3, #1]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2261      	movs	r2, #97	; 0x61
 800654c:	709a      	strb	r2, [r3, #2]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2241      	movs	r2, #65	; 0x41
 8006552:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2272      	movs	r2, #114	; 0x72
 8006558:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2272      	movs	r2, #114	; 0x72
 8006560:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2241      	movs	r2, #65	; 0x41
 8006568:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2261      	movs	r2, #97	; 0x61
 8006570:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800657a:	b2da      	uxtb	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006588:	b29b      	uxth	r3, r3
 800658a:	0a1b      	lsrs	r3, r3, #8
 800658c:	b29b      	uxth	r3, r3
 800658e:	b2da      	uxtb	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800659c:	0c1b      	lsrs	r3, r3, #16
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80065ac:	0e1b      	lsrs	r3, r3, #24
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	0a1b      	lsrs	r3, r3, #8
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80065de:	0c1b      	lsrs	r3, r3, #16
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80065ee:	0e1b      	lsrs	r3, r3, #24
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800660c:	6879      	ldr	r1, [r7, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8006614:	2301      	movs	r3, #1
 8006616:	f7ff fc7f 	bl	8005f18 <disk_write>
			fs->fsi_flag = 0;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8006628:	2200      	movs	r2, #0
 800662a:	2100      	movs	r1, #0
 800662c:	4618      	mov	r0, r3
 800662e:	f7ff fc93 	bl	8005f58 <disk_ioctl>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <sync_fs+0x152>
			res = FR_DISK_ERR;
 8006638:	2301      	movs	r3, #1
 800663a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800663c:	7bfb      	ldrb	r3, [r7, #15]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	3b02      	subs	r3, #2
 8006654:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800665c:	3b02      	subs	r3, #2
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	429a      	cmp	r2, r3
 8006662:	d301      	bcc.n	8006668 <clust2sect+0x22>
 8006664:	2300      	movs	r3, #0
 8006666:	e00a      	b.n	800667e <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800666e:	461a      	mov	r2, r3
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	fb03 f202 	mul.w	r2, r3, r2
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 800667c:	4413      	add	r3, r2
}
 800667e:	4618      	mov	r0, r3
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b086      	sub	sp, #24
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d905      	bls.n	80066a6 <get_fat+0x1c>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d302      	bcc.n	80066ac <get_fat+0x22>
		val = 1;	/* Internal error */
 80066a6:	2301      	movs	r3, #1
 80066a8:	617b      	str	r3, [r7, #20]
 80066aa:	e0d7      	b.n	800685c <get_fat+0x1d2>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80066ac:	f04f 33ff 	mov.w	r3, #4294967295
 80066b0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	f000 808f 	beq.w	80067dc <get_fat+0x152>
 80066be:	2b03      	cmp	r3, #3
 80066c0:	f300 80c2 	bgt.w	8006848 <get_fat+0x1be>
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d002      	beq.n	80066ce <get_fat+0x44>
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d059      	beq.n	8006780 <get_fat+0xf6>
 80066cc:	e0bc      	b.n	8006848 <get_fat+0x1be>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	60fb      	str	r3, [r7, #12]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	085b      	lsrs	r3, r3, #1
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	4413      	add	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80066e8:	4619      	mov	r1, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80066f0:	4413      	add	r3, r2
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7ff feca 	bl	800648e <move_window>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f040 80a6 	bne.w	800684e <get_fat+0x1c4>
			wc = fs->win.d8[bc++ % SS(fs)];
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	60fa      	str	r2, [r7, #12]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800670e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006712:	fb02 f201 	mul.w	r2, r2, r1
 8006716:	1a9b      	subs	r3, r3, r2
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	5cd3      	ldrb	r3, [r2, r3]
 800671c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800672a:	4619      	mov	r1, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006732:	4413      	add	r3, r2
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7ff fea9 	bl	800648e <move_window>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	f040 8087 	bne.w	8006852 <get_fat+0x1c8>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800674a:	461a      	mov	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006752:	fb02 f201 	mul.w	r2, r2, r1
 8006756:	1a9b      	subs	r3, r3, r2
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	5cd3      	ldrb	r3, [r2, r3]
 800675c:	021b      	lsls	r3, r3, #8
 800675e:	461a      	mov	r2, r3
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	4313      	orrs	r3, r2
 8006764:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <get_fat+0xec>
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	091b      	lsrs	r3, r3, #4
 8006774:	e002      	b.n	800677c <get_fat+0xf2>
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800677c:	617b      	str	r3, [r7, #20]
			break;
 800677e:	e06d      	b.n	800685c <get_fat+0x1d2>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800678c:	085b      	lsrs	r3, r3, #1
 800678e:	b29b      	uxth	r3, r3
 8006790:	4619      	mov	r1, r3
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	fbb3 f3f1 	udiv	r3, r3, r1
 8006798:	4413      	add	r3, r2
 800679a:	4619      	mov	r1, r3
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f7ff fe76 	bl	800648e <move_window>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d156      	bne.n	8006856 <get_fat+0x1cc>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80067b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80067b6:	fb02 f201 	mul.w	r2, r2, r1
 80067ba:	1a9b      	subs	r3, r3, r2
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	4413      	add	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	3301      	adds	r3, #1
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	021b      	lsls	r3, r3, #8
 80067ca:	b21a      	sxth	r2, r3
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	b21b      	sxth	r3, r3
 80067d2:	4313      	orrs	r3, r2
 80067d4:	b21b      	sxth	r3, r3
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	617b      	str	r3, [r7, #20]
			break;
 80067da:	e03f      	b.n	800685c <get_fat+0x1d2>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80067e8:	089b      	lsrs	r3, r3, #2
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	4619      	mov	r1, r3
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80067f4:	4413      	add	r3, r2
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7ff fe48 	bl	800648e <move_window>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d12a      	bne.n	800685a <get_fat+0x1d0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800680e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006812:	fb02 f201 	mul.w	r2, r2, r1
 8006816:	1a9b      	subs	r3, r3, r2
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	4413      	add	r3, r2
 800681c:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	3303      	adds	r3, #3
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	061a      	lsls	r2, r3, #24
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	3302      	adds	r3, #2
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	041b      	lsls	r3, r3, #16
 800682e:	4313      	orrs	r3, r2
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	3201      	adds	r2, #1
 8006834:	7812      	ldrb	r2, [r2, #0]
 8006836:	0212      	lsls	r2, r2, #8
 8006838:	4313      	orrs	r3, r2
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	7812      	ldrb	r2, [r2, #0]
 800683e:	4313      	orrs	r3, r2
 8006840:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006844:	617b      	str	r3, [r7, #20]
			break;
 8006846:	e009      	b.n	800685c <get_fat+0x1d2>

		default:
			val = 1;	/* Internal error */
 8006848:	2301      	movs	r3, #1
 800684a:	617b      	str	r3, [r7, #20]
 800684c:	e006      	b.n	800685c <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800684e:	bf00      	nop
 8006850:	e004      	b.n	800685c <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006852:	bf00      	nop
 8006854:	e002      	b.n	800685c <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006856:	bf00      	nop
 8006858:	e000      	b.n	800685c <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800685a:	bf00      	nop
		}
	}

	return val;
 800685c:	697b      	ldr	r3, [r7, #20]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b088      	sub	sp, #32
 800686a:	af00      	add	r7, sp, #0
 800686c:	60f8      	str	r0, [r7, #12]
 800686e:	60b9      	str	r1, [r7, #8]
 8006870:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d905      	bls.n	8006884 <put_fat+0x1e>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	429a      	cmp	r2, r3
 8006882:	d302      	bcc.n	800688a <put_fat+0x24>
		res = FR_INT_ERR;
 8006884:	2302      	movs	r3, #2
 8006886:	77fb      	strb	r3, [r7, #31]
 8006888:	e128      	b.n	8006adc <put_fat+0x276>

	} else {
		switch (fs->fs_type) {
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8006890:	2b03      	cmp	r3, #3
 8006892:	f000 80c3 	beq.w	8006a1c <put_fat+0x1b6>
 8006896:	2b03      	cmp	r3, #3
 8006898:	f300 8116 	bgt.w	8006ac8 <put_fat+0x262>
 800689c:	2b01      	cmp	r3, #1
 800689e:	d003      	beq.n	80068a8 <put_fat+0x42>
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	f000 8087 	beq.w	80069b4 <put_fat+0x14e>
 80068a6:	e10f      	b.n	8006ac8 <put_fat+0x262>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	617b      	str	r3, [r7, #20]
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	085b      	lsrs	r3, r3, #1
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	4413      	add	r3, r2
 80068b4:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80068c2:	4619      	mov	r1, r3
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80068ca:	4413      	add	r3, r2
 80068cc:	4619      	mov	r1, r3
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f7ff fddd 	bl	800648e <move_window>
 80068d4:	4603      	mov	r3, r0
 80068d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80068d8:	7ffb      	ldrb	r3, [r7, #31]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f040 80f7 	bne.w	8006ace <put_fat+0x268>
			p = &fs->win.d8[bc++ % SS(fs)];
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	617a      	str	r2, [r7, #20]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80068ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80068f0:	fb02 f201 	mul.w	r2, r2, r1
 80068f4:	1a9b      	subs	r3, r3, r2
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4413      	add	r3, r2
 80068fa:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00d      	beq.n	8006922 <put_fat+0xbc>
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	b25b      	sxtb	r3, r3
 800690c:	f003 030f 	and.w	r3, r3, #15
 8006910:	b25a      	sxtb	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	b2db      	uxtb	r3, r3
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	b25b      	sxtb	r3, r3
 800691a:	4313      	orrs	r3, r2
 800691c:	b25b      	sxtb	r3, r3
 800691e:	b2db      	uxtb	r3, r3
 8006920:	e001      	b.n	8006926 <put_fat+0xc0>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	b2db      	uxtb	r3, r3
 8006926:	69ba      	ldr	r2, [r7, #24]
 8006928:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800693e:	4619      	mov	r1, r3
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	fbb3 f3f1 	udiv	r3, r3, r1
 8006946:	4413      	add	r3, r2
 8006948:	4619      	mov	r1, r3
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f7ff fd9f 	bl	800648e <move_window>
 8006950:	4603      	mov	r3, r0
 8006952:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006954:	7ffb      	ldrb	r3, [r7, #31]
 8006956:	2b00      	cmp	r3, #0
 8006958:	f040 80bb 	bne.w	8006ad2 <put_fat+0x26c>
			p = &fs->win.d8[bc % SS(fs)];
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006962:	461a      	mov	r2, r3
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	fbb3 f1f2 	udiv	r1, r3, r2
 800696a:	fb02 f201 	mul.w	r2, r2, r1
 800696e:	1a9b      	subs	r3, r3, r2
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	f003 0301 	and.w	r3, r3, #1
 800697c:	2b00      	cmp	r3, #0
 800697e:	d003      	beq.n	8006988 <put_fat+0x122>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	091b      	lsrs	r3, r3, #4
 8006984:	b2db      	uxtb	r3, r3
 8006986:	e00e      	b.n	80069a6 <put_fat+0x140>
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	b25b      	sxtb	r3, r3
 800698e:	f023 030f 	bic.w	r3, r3, #15
 8006992:	b25a      	sxtb	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	0a1b      	lsrs	r3, r3, #8
 8006998:	b25b      	sxtb	r3, r3
 800699a:	f003 030f 	and.w	r3, r3, #15
 800699e:	b25b      	sxtb	r3, r3
 80069a0:	4313      	orrs	r3, r2
 80069a2:	b25b      	sxtb	r3, r3
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 80069b2:	e093      	b.n	8006adc <put_fat+0x276>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80069c0:	085b      	lsrs	r3, r3, #1
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	4619      	mov	r1, r3
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80069cc:	4413      	add	r3, r2
 80069ce:	4619      	mov	r1, r3
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f7ff fd5c 	bl	800648e <move_window>
 80069d6:	4603      	mov	r3, r0
 80069d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80069da:	7ffb      	ldrb	r3, [r7, #31]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d17a      	bne.n	8006ad6 <put_fat+0x270>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80069ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80069ee:	fb02 f201 	mul.w	r2, r2, r1
 80069f2:	1a9b      	subs	r3, r3, r2
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	701a      	strb	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	0a1b      	lsrs	r3, r3, #8
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	b2d2      	uxtb	r2, r2
 8006a10:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 8006a1a:	e05f      	b.n	8006adc <put_fat+0x276>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006a28:	089b      	lsrs	r3, r3, #2
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a34:	4413      	add	r3, r2
 8006a36:	4619      	mov	r1, r3
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f7ff fd28 	bl	800648e <move_window>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a42:	7ffb      	ldrb	r3, [r7, #31]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d148      	bne.n	8006ada <put_fat+0x274>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8006a52:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a56:	fb02 f201 	mul.w	r2, r2, r1
 8006a5a:	1a9b      	subs	r3, r3, r2
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	4413      	add	r3, r2
 8006a60:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	3303      	adds	r3, #3
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	061a      	lsls	r2, r3, #24
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	3302      	adds	r3, #2
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	041b      	lsls	r3, r3, #16
 8006a72:	4313      	orrs	r3, r2
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	3201      	adds	r2, #1
 8006a78:	7812      	ldrb	r2, [r2, #0]
 8006a7a:	0212      	lsls	r2, r2, #8
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	69ba      	ldr	r2, [r7, #24]
 8006a80:	7812      	ldrb	r2, [r2, #0]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	701a      	strb	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	0a1b      	lsrs	r3, r3, #8
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	701a      	strb	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	0c1a      	lsrs	r2, r3, #16
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	3302      	adds	r3, #2
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	701a      	strb	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	0e1a      	lsrs	r2, r3, #24
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	3303      	adds	r3, #3
 8006aba:	b2d2      	uxtb	r2, r2
 8006abc:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 8006ac6:	e009      	b.n	8006adc <put_fat+0x276>

		default :
			res = FR_INT_ERR;
 8006ac8:	2302      	movs	r3, #2
 8006aca:	77fb      	strb	r3, [r7, #31]
 8006acc:	e006      	b.n	8006adc <put_fat+0x276>
			if (res != FR_OK) break;
 8006ace:	bf00      	nop
 8006ad0:	e004      	b.n	8006adc <put_fat+0x276>
			if (res != FR_OK) break;
 8006ad2:	bf00      	nop
 8006ad4:	e002      	b.n	8006adc <put_fat+0x276>
			if (res != FR_OK) break;
 8006ad6:	bf00      	nop
 8006ad8:	e000      	b.n	8006adc <put_fat+0x276>
			if (res != FR_OK) break;
 8006ada:	bf00      	nop
		}
	}

	return res;
 8006adc:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3720      	adds	r7, #32
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b084      	sub	sp, #16
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d905      	bls.n	8006b02 <remove_chain+0x1c>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d302      	bcc.n	8006b08 <remove_chain+0x22>
		res = FR_INT_ERR;
 8006b02:	2302      	movs	r3, #2
 8006b04:	73fb      	strb	r3, [r7, #15]
 8006b06:	e043      	b.n	8006b90 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006b0c:	e036      	b.n	8006b7c <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7ff fdba 	bl	800668a <get_fat>
 8006b16:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d035      	beq.n	8006b8a <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d102      	bne.n	8006b2a <remove_chain+0x44>
 8006b24:	2302      	movs	r3, #2
 8006b26:	73fb      	strb	r3, [r7, #15]
 8006b28:	e032      	b.n	8006b90 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b30:	d102      	bne.n	8006b38 <remove_chain+0x52>
 8006b32:	2301      	movs	r3, #1
 8006b34:	73fb      	strb	r3, [r7, #15]
 8006b36:	e02b      	b.n	8006b90 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006b38:	2200      	movs	r2, #0
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7ff fe92 	bl	8006866 <put_fat>
 8006b42:	4603      	mov	r3, r0
 8006b44:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d120      	bne.n	8006b8e <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b56:	d00f      	beq.n	8006b78 <remove_chain+0x92>
				fs->free_clust++;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
				fs->fsi_flag |= 1;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 8006b6c:	f043 0301 	orr.w	r3, r3, #1
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d3c2      	bcc.n	8006b0e <remove_chain+0x28>
 8006b88:	e002      	b.n	8006b90 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8006b8a:	bf00      	nop
 8006b8c:	e000      	b.n	8006b90 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8006b8e:	bf00      	nop
		}
	}

	return res;
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b086      	sub	sp, #24
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10f      	bne.n	8006bca <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006bb0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d005      	beq.n	8006bc4 <create_chain+0x2a>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d31c      	bcc.n	8006bfe <create_chain+0x64>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	613b      	str	r3, [r7, #16]
 8006bc8:	e019      	b.n	8006bfe <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7ff fd5c 	bl	800668a <get_fat>
 8006bd2:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d801      	bhi.n	8006bde <create_chain+0x44>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e076      	b.n	8006ccc <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be4:	d101      	bne.n	8006bea <create_chain+0x50>
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	e070      	b.n	8006ccc <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d201      	bcs.n	8006bfa <create_chain+0x60>
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	e068      	b.n	8006ccc <create_chain+0x132>
		scl = clst;
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	3301      	adds	r3, #1
 8006c06:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d307      	bcc.n	8006c24 <create_chain+0x8a>
			ncl = 2;
 8006c14:	2302      	movs	r3, #2
 8006c16:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d901      	bls.n	8006c24 <create_chain+0x8a>
 8006c20:	2300      	movs	r3, #0
 8006c22:	e053      	b.n	8006ccc <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8006c24:	6979      	ldr	r1, [r7, #20]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7ff fd2f 	bl	800668a <get_fat>
 8006c2c:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00e      	beq.n	8006c52 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3a:	d002      	beq.n	8006c42 <create_chain+0xa8>
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d101      	bne.n	8006c46 <create_chain+0xac>
			return cs;
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	e042      	b.n	8006ccc <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d1d9      	bne.n	8006c02 <create_chain+0x68>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e03c      	b.n	8006ccc <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8006c52:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8006c54:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006c58:	6979      	ldr	r1, [r7, #20]
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7ff fe03 	bl	8006866 <put_fat>
 8006c60:	4603      	mov	r3, r0
 8006c62:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d109      	bne.n	8006c7e <create_chain+0xe4>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d006      	beq.n	8006c7e <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7ff fdf6 	bl	8006866 <put_fat>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d11a      	bne.n	8006cba <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		if (fs->free_clust != 0xFFFFFFFF) {
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c96:	d018      	beq.n	8006cca <create_chain+0x130>
			fs->free_clust--;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006c9e:	1e5a      	subs	r2, r3, #1
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			fs->fsi_flag |= 1;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 8006cac:	f043 0301 	orr.w	r3, r3, #1
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 8006cb8:	e007      	b.n	8006cca <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8006cba:	7bfb      	ldrb	r3, [r7, #15]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d102      	bne.n	8006cc6 <create_chain+0x12c>
 8006cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cc4:	e000      	b.n	8006cc8 <create_chain+0x12e>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8006cca:	697b      	ldr	r3, [r7, #20]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3718      	adds	r7, #24
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006cee:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8006d00:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8006d04:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d08:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	1d1a      	adds	r2, r3, #4
 8006d0e:	613a      	str	r2, [r7, #16]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <clmt_clust+0x4a>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	e010      	b.n	8006d40 <clmt_clust+0x6c>
		if (cl < ncl) break;	/* In this fragment? */
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d307      	bcc.n	8006d36 <clmt_clust+0x62>
		cl -= ncl; tbl++;		/* Next fragment */
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	617b      	str	r3, [r7, #20]
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	3304      	adds	r3, #4
 8006d32:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006d34:	e7e9      	b.n	8006d0a <clmt_clust+0x36>
		if (cl < ncl) break;	/* In this fragment? */
 8006d36:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	4413      	add	r3, r2
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	371c      	adds	r7, #28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8006d66:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d007      	beq.n	8006d7e <dir_sdi+0x32>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006d74:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d301      	bcc.n	8006d82 <dir_sdi+0x36>
		return FR_INT_ERR;
 8006d7e:	2302      	movs	r3, #2
 8006d80:	e091      	b.n	8006ea6 <dir_sdi+0x15a>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10c      	bne.n	8006da2 <dir_sdi+0x56>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006d8e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	d105      	bne.n	8006da2 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006d9c:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8006da0:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d111      	bne.n	8006dcc <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006dae:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8006db2:	461a      	mov	r2, r3
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d301      	bcc.n	8006dbe <dir_sdi+0x72>
			return FR_INT_ERR;
 8006dba:	2302      	movs	r3, #2
 8006dbc:	e073      	b.n	8006ea6 <dir_sdi+0x15a>
		sect = dp->fs->dirbase;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006dc4:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8006dc8:	613b      	str	r3, [r7, #16]
 8006dca:	e03b      	b.n	8006e44 <dir_sdi+0xf8>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006dd2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006dd6:	095b      	lsrs	r3, r3, #5
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	461a      	mov	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006de2:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8006de6:	fb03 f302 	mul.w	r3, r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8006dec:	e01e      	b.n	8006e2c <dir_sdi+0xe0>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006df4:	6979      	ldr	r1, [r7, #20]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7ff fc47 	bl	800668a <get_fat>
 8006dfc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e04:	d101      	bne.n	8006e0a <dir_sdi+0xbe>
 8006e06:	2301      	movs	r3, #1
 8006e08:	e04d      	b.n	8006ea6 <dir_sdi+0x15a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d907      	bls.n	8006e20 <dir_sdi+0xd4>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006e16:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d301      	bcc.n	8006e24 <dir_sdi+0xd8>
				return FR_INT_ERR;
 8006e20:	2302      	movs	r3, #2
 8006e22:	e040      	b.n	8006ea6 <dir_sdi+0x15a>
			idx -= ic;
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d2dc      	bcs.n	8006dee <dir_sdi+0xa2>
		}
		sect = clust2sect(dp->fs, clst);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006e3a:	6979      	ldr	r1, [r7, #20]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff fc02 	bl	8006646 <clust2sect>
 8006e42:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	if (!sect) return FR_INT_ERR;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <dir_sdi+0x10a>
 8006e52:	2302      	movs	r3, #2
 8006e54:	e027      	b.n	8006ea6 <dir_sdi+0x15a>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006e5c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006e60:	095b      	lsrs	r3, r3, #5
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	461a      	mov	r2, r3
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	441a      	add	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006e84:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006e88:	095b      	lsrs	r3, r3, #5
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e94:	fb02 f201 	mul.w	r2, r2, r1
 8006e98:	1a9b      	subs	r3, r3, r2
 8006e9a:	015b      	lsls	r3, r3, #5
 8006e9c:	18c2      	adds	r2, r0, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414

	return FR_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3718      	adds	r7, #24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006eae:	b590      	push	{r4, r7, lr}
 8006eb0:	b087      	sub	sp, #28
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d004      	beq.n	8006ed4 <dir_next+0x26>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <dir_next+0x2a>
		return FR_NO_FILE;
 8006ed4:	2304      	movs	r3, #4
 8006ed6:	e100      	b.n	80070da <dir_next+0x22c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006ede:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006ee2:	095b      	lsrs	r3, r3, #5
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	fbb3 f1f2 	udiv	r1, r3, r2
 8006eee:	fb02 f201 	mul.w	r2, r2, r1
 8006ef2:	1a9b      	subs	r3, r3, r2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f040 80d3 	bne.w	80070a0 <dir_next+0x1f2>
		dp->sect++;					/* Next sector */
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410

		if (!dp->clust) {		/* Static table */
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10b      	bne.n	8006f2a <dir_next+0x7c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006f18:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	4293      	cmp	r3, r2
 8006f22:	f0c0 80bd 	bcc.w	80070a0 <dir_next+0x1f2>
				return FR_NO_FILE;
 8006f26:	2304      	movs	r3, #4
 8006f28:	e0d7      	b.n	80070da <dir_next+0x22c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006f30:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006f34:	095b      	lsrs	r3, r3, #5
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8006f46:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8006f4a:	3a01      	subs	r2, #1
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f040 80a6 	bne.w	80070a0 <dir_next+0x1f2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006f60:	4619      	mov	r1, r3
 8006f62:	4610      	mov	r0, r2
 8006f64:	f7ff fb91 	bl	800668a <get_fat>
 8006f68:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d801      	bhi.n	8006f74 <dir_next+0xc6>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e0b2      	b.n	80070da <dir_next+0x22c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7a:	d101      	bne.n	8006f80 <dir_next+0xd2>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e0ac      	b.n	80070da <dir_next+0x22c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006f86:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d378      	bcc.n	8007082 <dir_next+0x1d4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <dir_next+0xec>
 8006f96:	2304      	movs	r3, #4
 8006f98:	e09f      	b.n	80070da <dir_next+0x22c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	4610      	mov	r0, r2
 8006faa:	f7ff fdf6 	bl	8006b9a <create_chain>
 8006fae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <dir_next+0x10c>
 8006fb6:	2307      	movs	r3, #7
 8006fb8:	e08f      	b.n	80070da <dir_next+0x22c>
					if (clst == 1) return FR_INT_ERR;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d101      	bne.n	8006fc4 <dir_next+0x116>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e08a      	b.n	80070da <dir_next+0x22c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fca:	d101      	bne.n	8006fd0 <dir_next+0x122>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e084      	b.n	80070da <dir_next+0x22c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7ff fa10 	bl	80063fc <sync_window>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <dir_next+0x138>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e079      	b.n	80070da <dir_next+0x22c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006fec:	4618      	mov	r0, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006ff4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	f7fe ffe9 	bl	8005fd2 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 800700c:	6979      	ldr	r1, [r7, #20]
 800700e:	4610      	mov	r0, r2
 8007010:	f7ff fb19 	bl	8006646 <clust2sect>
 8007014:	4603      	mov	r3, r0
 8007016:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800701a:	2300      	movs	r3, #0
 800701c:	613b      	str	r3, [r7, #16]
 800701e:	e01b      	b.n	8007058 <dir_next+0x1aa>
						dp->fs->wflag = 1;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007032:	4618      	mov	r0, r3
 8007034:	f7ff f9e2 	bl	80063fc <sync_window>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <dir_next+0x194>
 800703e:	2301      	movs	r3, #1
 8007040:	e04b      	b.n	80070da <dir_next+0x22c>
						dp->fs->winsect++;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007048:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800704c:	3201      	adds	r2, #1
 800704e:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	3301      	adds	r3, #1
 8007056:	613b      	str	r3, [r7, #16]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800705e:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8007062:	461a      	mov	r2, r3
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	4293      	cmp	r3, r2
 8007068:	d3da      	bcc.n	8007020 <dir_next+0x172>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007070:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	1a8a      	subs	r2, r1, r2
 800707e:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
				dp->sect = clust2sect(dp->fs, clst);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007090:	6979      	ldr	r1, [r7, #20]
 8007092:	4618      	mov	r0, r3
 8007094:	f7ff fad7 	bl	8006646 <clust2sect>
 8007098:	4602      	mov	r2, r0
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80070b0:	4618      	mov	r0, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80070b8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80070bc:	095b      	lsrs	r3, r3, #5
 80070be:	b29b      	uxth	r3, r3
 80070c0:	461a      	mov	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80070c8:	fb02 f201 	mul.w	r2, r2, r1
 80070cc:	1a9b      	subs	r3, r3, r2
 80070ce:	015b      	lsls	r3, r3, #5
 80070d0:	18c2      	adds	r2, r0, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414

	return FR_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	371c      	adds	r7, #28
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd90      	pop	{r4, r7, pc}

080070e2 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b084      	sub	sp, #16
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
 80070ea:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80070ec:	2100      	movs	r1, #0
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7ff fe2c 	bl	8006d4c <dir_sdi>
 80070f4:	4603      	mov	r3, r0
 80070f6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d131      	bne.n	8007162 <dir_alloc+0x80>
		n = 0;
 80070fe:	2300      	movs	r3, #0
 8007100:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800710e:	4619      	mov	r1, r3
 8007110:	4610      	mov	r0, r2
 8007112:	f7ff f9bc 	bl	800648e <move_window>
 8007116:	4603      	mov	r3, r0
 8007118:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800711a:	7bfb      	ldrb	r3, [r7, #15]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d11f      	bne.n	8007160 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2be5      	cmp	r3, #229	; 0xe5
 800712a:	d005      	beq.n	8007138 <dir_alloc+0x56>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d107      	bne.n	8007148 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	3301      	adds	r3, #1
 800713c:	60bb      	str	r3, [r7, #8]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	429a      	cmp	r2, r3
 8007144:	d102      	bne.n	800714c <dir_alloc+0x6a>
 8007146:	e00c      	b.n	8007162 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007148:	2300      	movs	r3, #0
 800714a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800714c:	2101      	movs	r1, #1
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7ff fead 	bl	8006eae <dir_next>
 8007154:	4603      	mov	r3, r0
 8007156:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8007158:	7bfb      	ldrb	r3, [r7, #15]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0d1      	beq.n	8007102 <dir_alloc+0x20>
 800715e:	e000      	b.n	8007162 <dir_alloc+0x80>
			if (res != FR_OK) break;
 8007160:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007162:	7bfb      	ldrb	r3, [r7, #15]
 8007164:	2b04      	cmp	r3, #4
 8007166:	d101      	bne.n	800716c <dir_alloc+0x8a>
 8007168:	2307      	movs	r3, #7
 800716a:	73fb      	strb	r3, [r7, #15]
	return res;
 800716c:	7bfb      	ldrb	r3, [r7, #15]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8007176:	b480      	push	{r7}
 8007178:	b085      	sub	sp, #20
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	331b      	adds	r3, #27
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	021b      	lsls	r3, r3, #8
 8007188:	b21a      	sxth	r2, r3
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	331a      	adds	r3, #26
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	b21b      	sxth	r3, r3
 8007192:	4313      	orrs	r3, r2
 8007194:	b21b      	sxth	r3, r3
 8007196:	b29b      	uxth	r3, r3
 8007198:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80071a0:	2b03      	cmp	r3, #3
 80071a2:	d10f      	bne.n	80071c4 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	3315      	adds	r3, #21
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	021b      	lsls	r3, r3, #8
 80071ac:	b21a      	sxth	r2, r3
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	3314      	adds	r3, #20
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	b21b      	sxth	r3, r3
 80071b6:	4313      	orrs	r3, r2
 80071b8:	b21b      	sxth	r3, r3
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	041b      	lsls	r3, r3, #16
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]

	return cl;
 80071c4:	68fb      	ldr	r3, [r7, #12]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	331a      	adds	r3, #26
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	b2d2      	uxtb	r2, r2
 80071e4:	701a      	strb	r2, [r3, #0]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	0a1b      	lsrs	r3, r3, #8
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	331b      	adds	r3, #27
 80071f2:	b2d2      	uxtb	r2, r2
 80071f4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	0c1a      	lsrs	r2, r3, #16
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	3314      	adds	r3, #20
 80071fe:	b2d2      	uxtb	r2, r2
 8007200:	701a      	strb	r2, [r3, #0]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	0c1b      	lsrs	r3, r3, #16
 8007206:	b29b      	uxth	r3, r3
 8007208:	0a1b      	lsrs	r3, r3, #8
 800720a:	b29a      	uxth	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3315      	adds	r3, #21
 8007210:	b2d2      	uxtb	r2, r2
 8007212:	701a      	strb	r2, [r3, #0]
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007228:	2100      	movs	r1, #0
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7ff fd8e 	bl	8006d4c <dir_sdi>
 8007230:	4603      	mov	r3, r0
 8007232:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007234:	7dfb      	ldrb	r3, [r7, #23]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <dir_find+0x1e>
 800723a:	7dfb      	ldrb	r3, [r7, #23]
 800723c:	e03b      	b.n	80072b6 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800724a:	4619      	mov	r1, r3
 800724c:	4610      	mov	r0, r2
 800724e:	f7ff f91e 	bl	800648e <move_window>
 8007252:	4603      	mov	r3, r0
 8007254:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007256:	7dfb      	ldrb	r3, [r7, #23]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d128      	bne.n	80072ae <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007262:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800726a:	7bfb      	ldrb	r3, [r7, #15]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d102      	bne.n	8007276 <dir_find+0x56>
 8007270:	2304      	movs	r3, #4
 8007272:	75fb      	strb	r3, [r7, #23]
 8007274:	e01e      	b.n	80072b4 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	330b      	adds	r3, #11
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	f003 0308 	and.w	r3, r3, #8
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10a      	bne.n	800729a <dir_find+0x7a>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800728a:	220b      	movs	r2, #11
 800728c:	4619      	mov	r1, r3
 800728e:	6938      	ldr	r0, [r7, #16]
 8007290:	f7fe feba 	bl	8006008 <mem_cmp>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00b      	beq.n	80072b2 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800729a:	2100      	movs	r1, #0
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f7ff fe06 	bl	8006eae <dir_next>
 80072a2:	4603      	mov	r3, r0
 80072a4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80072a6:	7dfb      	ldrb	r3, [r7, #23]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d0c8      	beq.n	800723e <dir_find+0x1e>
 80072ac:	e002      	b.n	80072b4 <dir_find+0x94>
		if (res != FR_OK) break;
 80072ae:	bf00      	nop
 80072b0:	e000      	b.n	80072b4 <dir_find+0x94>
			break;
 80072b2:	bf00      	nop

	return res;
 80072b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b084      	sub	sp, #16
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80072c6:	2101      	movs	r1, #1
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7ff ff0a 	bl	80070e2 <dir_alloc>
 80072ce:	4603      	mov	r3, r0
 80072d0:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d126      	bne.n	8007326 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80072e4:	4619      	mov	r1, r3
 80072e6:	4610      	mov	r0, r2
 80072e8:	f7ff f8d1 	bl	800648e <move_window>
 80072ec:	4603      	mov	r3, r0
 80072ee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d117      	bne.n	8007326 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80072fc:	2220      	movs	r2, #32
 80072fe:	2100      	movs	r1, #0
 8007300:	4618      	mov	r0, r3
 8007302:	f7fe fe66 	bl	8005fd2 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8007312:	220b      	movs	r2, #11
 8007314:	4619      	mov	r1, r3
 8007316:	f7fe fe3d 	bl	8005f94 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007320:	2201      	movs	r2, #1
 8007322:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		}
	}

	return res;
 8007326:	7bfb      	ldrb	r3, [r7, #15]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	e002      	b.n	8007348 <create_name+0x18>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	3301      	adds	r3, #1
 8007346:	60fb      	str	r3, [r7, #12]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	2b2f      	cmp	r3, #47	; 0x2f
 800734e:	d0f8      	beq.n	8007342 <create_name+0x12>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	2b5c      	cmp	r3, #92	; 0x5c
 8007356:	d0f4      	beq.n	8007342 <create_name+0x12>
	sfn = dp->fn;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800735e:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007360:	220b      	movs	r2, #11
 8007362:	2120      	movs	r1, #32
 8007364:	68b8      	ldr	r0, [r7, #8]
 8007366:	f7fe fe34 	bl	8005fd2 <mem_set>
	si = i = b = 0; ni = 8;
 800736a:	2300      	movs	r3, #0
 800736c:	77fb      	strb	r3, [r7, #31]
 800736e:	2300      	movs	r3, #0
 8007370:	613b      	str	r3, [r7, #16]
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	617b      	str	r3, [r7, #20]
 8007376:	2308      	movs	r3, #8
 8007378:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	617a      	str	r2, [r7, #20]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	4413      	add	r3, r2
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8007388:	7fbb      	ldrb	r3, [r7, #30]
 800738a:	2b20      	cmp	r3, #32
 800738c:	d953      	bls.n	8007436 <create_name+0x106>
 800738e:	7fbb      	ldrb	r3, [r7, #30]
 8007390:	2b2f      	cmp	r3, #47	; 0x2f
 8007392:	d050      	beq.n	8007436 <create_name+0x106>
 8007394:	7fbb      	ldrb	r3, [r7, #30]
 8007396:	2b5c      	cmp	r3, #92	; 0x5c
 8007398:	d04d      	beq.n	8007436 <create_name+0x106>
		if (c == '.' || i >= ni) {
 800739a:	7fbb      	ldrb	r3, [r7, #30]
 800739c:	2b2e      	cmp	r3, #46	; 0x2e
 800739e:	d003      	beq.n	80073a8 <create_name+0x78>
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d30f      	bcc.n	80073c8 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	2b08      	cmp	r3, #8
 80073ac:	d102      	bne.n	80073b4 <create_name+0x84>
 80073ae:	7fbb      	ldrb	r3, [r7, #30]
 80073b0:	2b2e      	cmp	r3, #46	; 0x2e
 80073b2:	d001      	beq.n	80073b8 <create_name+0x88>
 80073b4:	2306      	movs	r3, #6
 80073b6:	e073      	b.n	80074a0 <create_name+0x170>
			i = 8; ni = 11;
 80073b8:	2308      	movs	r3, #8
 80073ba:	613b      	str	r3, [r7, #16]
 80073bc:	230b      	movs	r3, #11
 80073be:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 80073c0:	7ffb      	ldrb	r3, [r7, #31]
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	77fb      	strb	r3, [r7, #31]
 80073c6:	e035      	b.n	8007434 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 80073c8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	da08      	bge.n	80073e2 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 80073d0:	7ffb      	ldrb	r3, [r7, #31]
 80073d2:	f043 0303 	orr.w	r3, r3, #3
 80073d6:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80073d8:	7fbb      	ldrb	r3, [r7, #30]
 80073da:	3b80      	subs	r3, #128	; 0x80
 80073dc:	4a32      	ldr	r2, [pc, #200]	; (80074a8 <create_name+0x178>)
 80073de:	5cd3      	ldrb	r3, [r2, r3]
 80073e0:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 80073e2:	7fbb      	ldrb	r3, [r7, #30]
 80073e4:	4619      	mov	r1, r3
 80073e6:	4831      	ldr	r0, [pc, #196]	; (80074ac <create_name+0x17c>)
 80073e8:	f7fe fe35 	bl	8006056 <chk_chr>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <create_name+0xc6>
				return FR_INVALID_NAME;
 80073f2:	2306      	movs	r3, #6
 80073f4:	e054      	b.n	80074a0 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 80073f6:	7fbb      	ldrb	r3, [r7, #30]
 80073f8:	2b40      	cmp	r3, #64	; 0x40
 80073fa:	d907      	bls.n	800740c <create_name+0xdc>
 80073fc:	7fbb      	ldrb	r3, [r7, #30]
 80073fe:	2b5a      	cmp	r3, #90	; 0x5a
 8007400:	d804      	bhi.n	800740c <create_name+0xdc>
				b |= 2;
 8007402:	7ffb      	ldrb	r3, [r7, #31]
 8007404:	f043 0302 	orr.w	r3, r3, #2
 8007408:	77fb      	strb	r3, [r7, #31]
 800740a:	e00c      	b.n	8007426 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800740c:	7fbb      	ldrb	r3, [r7, #30]
 800740e:	2b60      	cmp	r3, #96	; 0x60
 8007410:	d909      	bls.n	8007426 <create_name+0xf6>
 8007412:	7fbb      	ldrb	r3, [r7, #30]
 8007414:	2b7a      	cmp	r3, #122	; 0x7a
 8007416:	d806      	bhi.n	8007426 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8007418:	7ffb      	ldrb	r3, [r7, #31]
 800741a:	f043 0301 	orr.w	r3, r3, #1
 800741e:	77fb      	strb	r3, [r7, #31]
 8007420:	7fbb      	ldrb	r3, [r7, #30]
 8007422:	3b20      	subs	r3, #32
 8007424:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	613a      	str	r2, [r7, #16]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	4413      	add	r3, r2
 8007430:	7fba      	ldrb	r2, [r7, #30]
 8007432:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007434:	e7a1      	b.n	800737a <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	441a      	add	r2, r3
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8007440:	7fbb      	ldrb	r3, [r7, #30]
 8007442:	2b20      	cmp	r3, #32
 8007444:	d801      	bhi.n	800744a <create_name+0x11a>
 8007446:	2304      	movs	r3, #4
 8007448:	e000      	b.n	800744c <create_name+0x11c>
 800744a:	2300      	movs	r3, #0
 800744c:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <create_name+0x128>
 8007454:	2306      	movs	r3, #6
 8007456:	e023      	b.n	80074a0 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	2be5      	cmp	r3, #229	; 0xe5
 800745e:	d102      	bne.n	8007466 <create_name+0x136>
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2205      	movs	r2, #5
 8007464:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	2b08      	cmp	r3, #8
 800746a:	d102      	bne.n	8007472 <create_name+0x142>
 800746c:	7ffb      	ldrb	r3, [r7, #31]
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8007472:	7ffb      	ldrb	r3, [r7, #31]
 8007474:	f003 0303 	and.w	r3, r3, #3
 8007478:	2b01      	cmp	r3, #1
 800747a:	d103      	bne.n	8007484 <create_name+0x154>
 800747c:	7fbb      	ldrb	r3, [r7, #30]
 800747e:	f043 0310 	orr.w	r3, r3, #16
 8007482:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8007484:	7ffb      	ldrb	r3, [r7, #31]
 8007486:	f003 030c 	and.w	r3, r3, #12
 800748a:	2b04      	cmp	r3, #4
 800748c:	d103      	bne.n	8007496 <create_name+0x166>
 800748e:	7fbb      	ldrb	r3, [r7, #30]
 8007490:	f043 0308 	orr.w	r3, r3, #8
 8007494:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	330b      	adds	r3, #11
 800749a:	7fba      	ldrb	r2, [r7, #30]
 800749c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800749e:	2300      	movs	r3, #0
#endif
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3720      	adds	r7, #32
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	0800d760 	.word	0x0800d760
 80074ac:	0800d6ec 	.word	0x0800d6ec

080074b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b2f      	cmp	r3, #47	; 0x2f
 80074c0:	d003      	beq.n	80074ca <follow_path+0x1a>
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2b5c      	cmp	r3, #92	; 0x5c
 80074c8:	d102      	bne.n	80074d0 <follow_path+0x20>
		path++;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	3301      	adds	r3, #1
 80074ce:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	2b1f      	cmp	r3, #31
 80074de:	d80a      	bhi.n	80074f6 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 80074e0:	2100      	movs	r1, #0
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7ff fc32 	bl	8006d4c <dir_sdi>
 80074e8:	4603      	mov	r3, r0
 80074ea:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 80074f4:	e045      	b.n	8007582 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80074f6:	463b      	mov	r3, r7
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7ff ff18 	bl	8007330 <create_name>
 8007500:	4603      	mov	r3, r0
 8007502:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007504:	7bfb      	ldrb	r3, [r7, #15]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d136      	bne.n	8007578 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7ff fe88 	bl	8007220 <dir_find>
 8007510:	4603      	mov	r3, r0
 8007512:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800751a:	7adb      	ldrb	r3, [r3, #11]
 800751c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00a      	beq.n	800753a <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	2b04      	cmp	r3, #4
 8007528:	d128      	bne.n	800757c <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	f003 0304 	and.w	r3, r3, #4
 8007530:	2b00      	cmp	r3, #0
 8007532:	d123      	bne.n	800757c <follow_path+0xcc>
 8007534:	2305      	movs	r3, #5
 8007536:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8007538:	e020      	b.n	800757c <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800753a:	7bbb      	ldrb	r3, [r7, #14]
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	2b00      	cmp	r3, #0
 8007542:	d11d      	bne.n	8007580 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800754a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	330b      	adds	r3, #11
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	f003 0310 	and.w	r3, r3, #16
 8007556:	2b00      	cmp	r3, #0
 8007558:	d102      	bne.n	8007560 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800755a:	2305      	movs	r3, #5
 800755c:	73fb      	strb	r3, [r7, #15]
 800755e:	e010      	b.n	8007582 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007566:	68b9      	ldr	r1, [r7, #8]
 8007568:	4618      	mov	r0, r3
 800756a:	f7ff fe04 	bl	8007176 <ld_clust>
 800756e:	4602      	mov	r2, r0
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007576:	e7be      	b.n	80074f6 <follow_path+0x46>
			if (res != FR_OK) break;
 8007578:	bf00      	nop
 800757a:	e002      	b.n	8007582 <follow_path+0xd2>
				break;
 800757c:	bf00      	nop
 800757e:	e000      	b.n	8007582 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007580:	bf00      	nop
		}
	}

	return res;
 8007582:	7bfb      	ldrb	r3, [r7, #15]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800758c:	b480      	push	{r7}
 800758e:	b087      	sub	sp, #28
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007594:	f04f 33ff 	mov.w	r3, #4294967295
 8007598:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d031      	beq.n	8007606 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	617b      	str	r3, [r7, #20]
 80075a8:	e002      	b.n	80075b0 <get_ldnumber+0x24>
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	3301      	adds	r3, #1
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	2b20      	cmp	r3, #32
 80075b6:	d903      	bls.n	80075c0 <get_ldnumber+0x34>
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	2b3a      	cmp	r3, #58	; 0x3a
 80075be:	d1f4      	bne.n	80075aa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	2b3a      	cmp	r3, #58	; 0x3a
 80075c6:	d11c      	bne.n	8007602 <get_ldnumber+0x76>
			tp = *path;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	1c5a      	adds	r2, r3, #1
 80075d2:	60fa      	str	r2, [r7, #12]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	3b30      	subs	r3, #48	; 0x30
 80075d8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	2b09      	cmp	r3, #9
 80075de:	d80e      	bhi.n	80075fe <get_ldnumber+0x72>
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d10a      	bne.n	80075fe <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d107      	bne.n	80075fe <get_ldnumber+0x72>
					vol = (int)i;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	3301      	adds	r3, #1
 80075f6:	617b      	str	r3, [r7, #20]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	e002      	b.n	8007608 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007602:	2300      	movs	r3, #0
 8007604:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007606:	693b      	ldr	r3, [r7, #16]
}
 8007608:	4618      	mov	r0, r3
 800760a:	371c      	adds	r7, #28
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f04f 32ff 	mov.w	r2, #4294967295
 800762c:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7fe ff2b 	bl	800648e <move_window>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d001      	beq.n	8007642 <check_fs+0x2e>
		return 3;
 800763e:	2303      	movs	r3, #3
 8007640:	e04a      	b.n	80076d8 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007648:	3301      	adds	r3, #1
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	021b      	lsls	r3, r3, #8
 800764e:	b21a      	sxth	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007656:	b21b      	sxth	r3, r3
 8007658:	4313      	orrs	r3, r2
 800765a:	b21b      	sxth	r3, r3
 800765c:	4a20      	ldr	r2, [pc, #128]	; (80076e0 <check_fs+0xcc>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d001      	beq.n	8007666 <check_fs+0x52>
		return 2;
 8007662:	2302      	movs	r3, #2
 8007664:	e038      	b.n	80076d8 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	3336      	adds	r3, #54	; 0x36
 800766a:	3303      	adds	r3, #3
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	061a      	lsls	r2, r3, #24
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	3336      	adds	r3, #54	; 0x36
 8007674:	3302      	adds	r3, #2
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	041b      	lsls	r3, r3, #16
 800767a:	4313      	orrs	r3, r2
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	3236      	adds	r2, #54	; 0x36
 8007680:	3201      	adds	r2, #1
 8007682:	7812      	ldrb	r2, [r2, #0]
 8007684:	0212      	lsls	r2, r2, #8
 8007686:	4313      	orrs	r3, r2
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800768e:	4313      	orrs	r3, r2
 8007690:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007694:	4a13      	ldr	r2, [pc, #76]	; (80076e4 <check_fs+0xd0>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d101      	bne.n	800769e <check_fs+0x8a>
		return 0;
 800769a:	2300      	movs	r3, #0
 800769c:	e01c      	b.n	80076d8 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	3352      	adds	r3, #82	; 0x52
 80076a2:	3303      	adds	r3, #3
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	061a      	lsls	r2, r3, #24
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	3352      	adds	r3, #82	; 0x52
 80076ac:	3302      	adds	r3, #2
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	041b      	lsls	r3, r3, #16
 80076b2:	4313      	orrs	r3, r2
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	3252      	adds	r2, #82	; 0x52
 80076b8:	3201      	adds	r2, #1
 80076ba:	7812      	ldrb	r2, [r2, #0]
 80076bc:	0212      	lsls	r2, r2, #8
 80076be:	4313      	orrs	r3, r2
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80076c6:	4313      	orrs	r3, r2
 80076c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80076cc:	4a05      	ldr	r2, [pc, #20]	; (80076e4 <check_fs+0xd0>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d101      	bne.n	80076d6 <check_fs+0xc2>
		return 0;
 80076d2:	2300      	movs	r3, #0
 80076d4:	e000      	b.n	80076d8 <check_fs+0xc4>

	return 1;
 80076d6:	2301      	movs	r3, #1
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	ffffaa55 	.word	0xffffaa55
 80076e4:	00544146 	.word	0x00544146

080076e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b096      	sub	sp, #88	; 0x58
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	4613      	mov	r3, r2
 80076f4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80076fc:	68b8      	ldr	r0, [r7, #8]
 80076fe:	f7ff ff45 	bl	800758c <get_ldnumber>
 8007702:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007706:	2b00      	cmp	r3, #0
 8007708:	da01      	bge.n	800770e <find_volume+0x26>
 800770a:	230b      	movs	r3, #11
 800770c:	e2de      	b.n	8007ccc <find_volume+0x5e4>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800770e:	4ab1      	ldr	r2, [pc, #708]	; (80079d4 <find_volume+0x2ec>)
 8007710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007716:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <find_volume+0x3a>
 800771e:	230c      	movs	r3, #12
 8007720:	e2d4      	b.n	8007ccc <find_volume+0x5e4>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007726:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8007728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772a:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800772e:	2b00      	cmp	r3, #0
 8007730:	d01b      	beq.n	800776a <find_volume+0x82>
		stat = disk_status(fs->drv);
 8007732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007734:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8007738:	4618      	mov	r0, r3
 800773a:	f7fe fb8d 	bl	8005e58 <disk_status>
 800773e:	4603      	mov	r3, r0
 8007740:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007744:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10c      	bne.n	800776a <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8007750:	79fb      	ldrb	r3, [r7, #7]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d007      	beq.n	8007766 <find_volume+0x7e>
 8007756:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800775a:	f003 0304 	and.w	r3, r3, #4
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8007762:	230a      	movs	r3, #10
 8007764:	e2b2      	b.n	8007ccc <find_volume+0x5e4>
			return FR_OK;				/* The file system object is valid */
 8007766:	2300      	movs	r3, #0
 8007768:	e2b0      	b.n	8007ccc <find_volume+0x5e4>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800776a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007774:	b2da      	uxtb	r2, r3
 8007776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007778:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800777c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777e:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8007782:	4618      	mov	r0, r3
 8007784:	f7fe fb82 	bl	8005e8c <disk_initialize>
 8007788:	4603      	mov	r3, r0
 800778a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800778e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800779a:	2303      	movs	r3, #3
 800779c:	e296      	b.n	8007ccc <find_volume+0x5e4>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800779e:	79fb      	ldrb	r3, [r7, #7]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d007      	beq.n	80077b4 <find_volume+0xcc>
 80077a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80077a8:	f003 0304 	and.w	r3, r3, #4
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d001      	beq.n	80077b4 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 80077b0:	230a      	movs	r3, #10
 80077b2:	e28b      	b.n	8007ccc <find_volume+0x5e4>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 80077b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b6:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80077ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077bc:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 80077c0:	461a      	mov	r2, r3
 80077c2:	2102      	movs	r1, #2
 80077c4:	f7fe fbc8 	bl	8005f58 <disk_ioctl>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10b      	bne.n	80077e6 <find_volume+0xfe>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80077ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80077d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077d8:	d305      	bcc.n	80077e6 <find_volume+0xfe>
 80077da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077dc:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80077e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077e4:	d901      	bls.n	80077ea <find_volume+0x102>
 80077e6:	2301      	movs	r3, #1
 80077e8:	e270      	b.n	8007ccc <find_volume+0x5e4>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80077ea:	2300      	movs	r3, #0
 80077ec:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80077ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80077f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077f2:	f7ff ff0f 	bl	8007614 <check_fs>
 80077f6:	4603      	mov	r3, r0
 80077f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80077fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007800:	2b01      	cmp	r3, #1
 8007802:	d155      	bne.n	80078b0 <find_volume+0x1c8>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007804:	2300      	movs	r3, #0
 8007806:	643b      	str	r3, [r7, #64]	; 0x40
 8007808:	e029      	b.n	800785e <find_volume+0x176>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800780a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800780c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800780e:	011b      	lsls	r3, r3, #4
 8007810:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007814:	4413      	add	r3, r2
 8007816:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8007818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781a:	3304      	adds	r3, #4
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d012      	beq.n	8007848 <find_volume+0x160>
 8007822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007824:	330b      	adds	r3, #11
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	061a      	lsls	r2, r3, #24
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	330a      	adds	r3, #10
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	041b      	lsls	r3, r3, #16
 8007832:	4313      	orrs	r3, r2
 8007834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007836:	3209      	adds	r2, #9
 8007838:	7812      	ldrb	r2, [r2, #0]
 800783a:	0212      	lsls	r2, r2, #8
 800783c:	4313      	orrs	r3, r2
 800783e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007840:	3208      	adds	r2, #8
 8007842:	7812      	ldrb	r2, [r2, #0]
 8007844:	431a      	orrs	r2, r3
 8007846:	e000      	b.n	800784a <find_volume+0x162>
 8007848:	2200      	movs	r2, #0
 800784a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007852:	440b      	add	r3, r1
 8007854:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800785a:	3301      	adds	r3, #1
 800785c:	643b      	str	r3, [r7, #64]	; 0x40
 800785e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007860:	2b03      	cmp	r3, #3
 8007862:	d9d2      	bls.n	800780a <find_volume+0x122>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8007864:	2300      	movs	r3, #0
 8007866:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800786a:	2b00      	cmp	r3, #0
 800786c:	d002      	beq.n	8007874 <find_volume+0x18c>
 800786e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007870:	3b01      	subs	r3, #1
 8007872:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8007874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800787c:	4413      	add	r3, r2
 800787e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007882:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8007884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007886:	2b00      	cmp	r3, #0
 8007888:	d005      	beq.n	8007896 <find_volume+0x1ae>
 800788a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800788c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800788e:	f7ff fec1 	bl	8007614 <check_fs>
 8007892:	4603      	mov	r3, r0
 8007894:	e000      	b.n	8007898 <find_volume+0x1b0>
 8007896:	2302      	movs	r3, #2
 8007898:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800789c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d005      	beq.n	80078b0 <find_volume+0x1c8>
 80078a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078a6:	3301      	adds	r3, #1
 80078a8:	643b      	str	r3, [r7, #64]	; 0x40
 80078aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078ac:	2b03      	cmp	r3, #3
 80078ae:	d9e1      	bls.n	8007874 <find_volume+0x18c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80078b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078b4:	2b03      	cmp	r3, #3
 80078b6:	d101      	bne.n	80078bc <find_volume+0x1d4>
 80078b8:	2301      	movs	r3, #1
 80078ba:	e207      	b.n	8007ccc <find_volume+0x5e4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80078bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <find_volume+0x1e0>
 80078c4:	230d      	movs	r3, #13
 80078c6:	e201      	b.n	8007ccc <find_volume+0x5e4>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80078c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ca:	7b1b      	ldrb	r3, [r3, #12]
 80078cc:	021b      	lsls	r3, r3, #8
 80078ce:	b21a      	sxth	r2, r3
 80078d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d2:	7adb      	ldrb	r3, [r3, #11]
 80078d4:	b21b      	sxth	r3, r3
 80078d6:	4313      	orrs	r3, r2
 80078d8:	b21a      	sxth	r2, r3
 80078da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078dc:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80078e0:	b21b      	sxth	r3, r3
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d001      	beq.n	80078ea <find_volume+0x202>
		return FR_NO_FILESYSTEM;
 80078e6:	230d      	movs	r3, #13
 80078e8:	e1f0      	b.n	8007ccc <find_volume+0x5e4>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80078ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ec:	7ddb      	ldrb	r3, [r3, #23]
 80078ee:	021b      	lsls	r3, r3, #8
 80078f0:	b21a      	sxth	r2, r3
 80078f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f4:	7d9b      	ldrb	r3, [r3, #22]
 80078f6:	b21b      	sxth	r3, r3
 80078f8:	4313      	orrs	r3, r2
 80078fa:	b21b      	sxth	r3, r3
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007902:	2b00      	cmp	r3, #0
 8007904:	d112      	bne.n	800792c <find_volume+0x244>
 8007906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007908:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800790c:	061a      	lsls	r2, r3, #24
 800790e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007910:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007914:	041b      	lsls	r3, r3, #16
 8007916:	4313      	orrs	r3, r2
 8007918:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800791a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800791e:	0212      	lsls	r2, r2, #8
 8007920:	4313      	orrs	r3, r2
 8007922:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007924:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007928:	4313      	orrs	r3, r2
 800792a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800792c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007930:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007936:	7c1a      	ldrb	r2, [r3, #16]
 8007938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793a:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800793e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007940:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8007944:	2b01      	cmp	r3, #1
 8007946:	d006      	beq.n	8007956 <find_volume+0x26e>
 8007948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794a:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800794e:	2b02      	cmp	r3, #2
 8007950:	d001      	beq.n	8007956 <find_volume+0x26e>
		return FR_NO_FILESYSTEM;
 8007952:	230d      	movs	r3, #13
 8007954:	e1ba      	b.n	8007ccc <find_volume+0x5e4>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007958:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800795c:	461a      	mov	r2, r3
 800795e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007960:	fb02 f303 	mul.w	r3, r2, r3
 8007964:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007968:	7b5a      	ldrb	r2, [r3, #13]
 800796a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796c:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007972:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <find_volume+0x2a8>
 800797a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797c:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8007980:	461a      	mov	r2, r3
 8007982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007984:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8007988:	3b01      	subs	r3, #1
 800798a:	4013      	ands	r3, r2
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <find_volume+0x2ac>
		return FR_NO_FILESYSTEM;
 8007990:	230d      	movs	r3, #13
 8007992:	e19b      	b.n	8007ccc <find_volume+0x5e4>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007996:	7c9b      	ldrb	r3, [r3, #18]
 8007998:	021b      	lsls	r3, r3, #8
 800799a:	b21a      	sxth	r2, r3
 800799c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799e:	7c5b      	ldrb	r3, [r3, #17]
 80079a0:	b21b      	sxth	r3, r3
 80079a2:	4313      	orrs	r3, r2
 80079a4:	b21b      	sxth	r3, r3
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079aa:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80079ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b0:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 80079b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079b6:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80079ba:	0952      	lsrs	r2, r2, #5
 80079bc:	b292      	uxth	r2, r2
 80079be:	fbb3 f1f2 	udiv	r1, r3, r2
 80079c2:	fb02 f201 	mul.w	r2, r2, r1
 80079c6:	1a9b      	subs	r3, r3, r2
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d004      	beq.n	80079d8 <find_volume+0x2f0>
		return FR_NO_FILESYSTEM;
 80079ce:	230d      	movs	r3, #13
 80079d0:	e17c      	b.n	8007ccc <find_volume+0x5e4>
 80079d2:	bf00      	nop
 80079d4:	20000248 	.word	0x20000248

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80079d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079da:	7d1b      	ldrb	r3, [r3, #20]
 80079dc:	021b      	lsls	r3, r3, #8
 80079de:	b21a      	sxth	r2, r3
 80079e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e2:	7cdb      	ldrb	r3, [r3, #19]
 80079e4:	b21b      	sxth	r3, r3
 80079e6:	4313      	orrs	r3, r2
 80079e8:	b21b      	sxth	r3, r3
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80079ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d112      	bne.n	8007a1a <find_volume+0x332>
 80079f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80079fa:	061a      	lsls	r2, r3, #24
 80079fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007a02:	041b      	lsls	r3, r3, #16
 8007a04:	4313      	orrs	r3, r2
 8007a06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a08:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8007a0c:	0212      	lsls	r2, r2, #8
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a12:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8007a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1c:	7bdb      	ldrb	r3, [r3, #15]
 8007a1e:	021b      	lsls	r3, r3, #8
 8007a20:	b21a      	sxth	r2, r3
 8007a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a24:	7b9b      	ldrb	r3, [r3, #14]
 8007a26:	b21b      	sxth	r3, r3
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	b21b      	sxth	r3, r3
 8007a2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8007a2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <find_volume+0x350>
 8007a34:	230d      	movs	r3, #13
 8007a36:	e149      	b.n	8007ccc <find_volume+0x5e4>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007a38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a3c:	4413      	add	r3, r2
 8007a3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a40:	f8b2 1408 	ldrh.w	r1, [r2, #1032]	; 0x408
 8007a44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a46:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8007a4a:	0952      	lsrs	r2, r2, #5
 8007a4c:	b292      	uxth	r2, r2
 8007a4e:	fbb1 f2f2 	udiv	r2, r1, r2
 8007a52:	b292      	uxth	r2, r2
 8007a54:	4413      	add	r3, r2
 8007a56:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007a58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d201      	bcs.n	8007a64 <find_volume+0x37c>
 8007a60:	230d      	movs	r3, #13
 8007a62:	e133      	b.n	8007ccc <find_volume+0x5e4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007a64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a6c:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8007a70:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a74:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <find_volume+0x398>
 8007a7c:	230d      	movs	r3, #13
 8007a7e:	e125      	b.n	8007ccc <find_volume+0x5e4>
	fmt = FS_FAT12;
 8007a80:	2301      	movs	r3, #1
 8007a82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d902      	bls.n	8007a96 <find_volume+0x3ae>
 8007a90:	2302      	movs	r3, #2
 8007a92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a98:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d902      	bls.n	8007aa6 <find_volume+0x3be>
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa8:	1c9a      	adds	r2, r3, #2
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aac:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	fs->volbase = bsect;								/* Volume start sector */
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ab4:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007ab8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007abc:	441a      	add	r2, r3
 8007abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac0:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
	fs->database = bsect + sysect;						/* Data start sector */
 8007ac4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac8:	441a      	add	r2, r3
 8007aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007acc:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
	if (fmt == FS_FAT32) {
 8007ad0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ad4:	2b03      	cmp	r3, #3
 8007ad6:	d121      	bne.n	8007b1c <find_volume+0x434>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ada:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <find_volume+0x3fe>
 8007ae2:	230d      	movs	r3, #13
 8007ae4:	e0f2      	b.n	8007ccc <find_volume+0x5e4>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007aec:	061a      	lsls	r2, r3, #24
 8007aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007af4:	041b      	lsls	r3, r3, #16
 8007af6:	4313      	orrs	r3, r2
 8007af8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007afa:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8007afe:	0212      	lsls	r2, r2, #8
 8007b00:	4313      	orrs	r3, r2
 8007b02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b04:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0c:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b12:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	647b      	str	r3, [r7, #68]	; 0x44
 8007b1a:	e025      	b.n	8007b68 <find_volume+0x480>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1e:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <find_volume+0x442>
 8007b26:	230d      	movs	r3, #13
 8007b28:	e0d0      	b.n	8007ccc <find_volume+0x5e4>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2c:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8007b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b32:	441a      	add	r2, r3
 8007b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b36:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007b3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d104      	bne.n	8007b4c <find_volume+0x464>
 8007b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b44:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007b48:	005b      	lsls	r3, r3, #1
 8007b4a:	e00c      	b.n	8007b66 <find_volume+0x47e>
 8007b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4e:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 8007b52:	4613      	mov	r3, r2
 8007b54:	005b      	lsls	r3, r3, #1
 8007b56:	4413      	add	r3, r2
 8007b58:	085a      	lsrs	r2, r3, #1
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007b60:	f003 0301 	and.w	r3, r3, #1
 8007b64:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007b66:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8007b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b70:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007b74:	4619      	mov	r1, r3
 8007b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b78:	440b      	add	r3, r1
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b7e:	f8b1 140a 	ldrh.w	r1, [r1, #1034]	; 0x40a
 8007b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d201      	bcs.n	8007b8e <find_volume+0x4a6>
		return FR_NO_FILESYSTEM;
 8007b8a:	230d      	movs	r3, #13
 8007b8c:	e09e      	b.n	8007ccc <find_volume+0x5e4>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b90:	f04f 32ff 	mov.w	r2, #4294967295
 8007b94:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
 8007b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9a:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8007b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba6:	2280      	movs	r2, #128	; 0x80
 8007ba8:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007bac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	d177      	bne.n	8007ca4 <find_volume+0x5bc>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007bba:	021b      	lsls	r3, r3, #8
 8007bbc:	b21a      	sxth	r2, r3
 8007bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007bc4:	b21b      	sxth	r3, r3
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	b21b      	sxth	r3, r3
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d16a      	bne.n	8007ca4 <find_volume+0x5bc>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007bd6:	f7fe fc5a 	bl	800648e <move_window>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d161      	bne.n	8007ca4 <find_volume+0x5bc>
	{
		fs->fsi_flag = 0;
 8007be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bea:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8007bee:	021b      	lsls	r3, r3, #8
 8007bf0:	b21a      	sxth	r2, r3
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf4:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007bf8:	b21b      	sxth	r3, r3
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	b21b      	sxth	r3, r3
 8007bfe:	4a35      	ldr	r2, [pc, #212]	; (8007cd4 <find_volume+0x5ec>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d14f      	bne.n	8007ca4 <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c06:	78db      	ldrb	r3, [r3, #3]
 8007c08:	061a      	lsls	r2, r3, #24
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0c:	789b      	ldrb	r3, [r3, #2]
 8007c0e:	041b      	lsls	r3, r3, #16
 8007c10:	4313      	orrs	r3, r2
 8007c12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c14:	7852      	ldrb	r2, [r2, #1]
 8007c16:	0212      	lsls	r2, r2, #8
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c1c:	7812      	ldrb	r2, [r2, #0]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	4a2d      	ldr	r2, [pc, #180]	; (8007cd8 <find_volume+0x5f0>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d13e      	bne.n	8007ca4 <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8007c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c28:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8007c2c:	061a      	lsls	r2, r3, #24
 8007c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c30:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8007c34:	041b      	lsls	r3, r3, #16
 8007c36:	4313      	orrs	r3, r2
 8007c38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c3a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8007c3e:	0212      	lsls	r2, r2, #8
 8007c40:	4313      	orrs	r3, r2
 8007c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c44:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	4a24      	ldr	r2, [pc, #144]	; (8007cdc <find_volume+0x5f4>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d129      	bne.n	8007ca4 <find_volume+0x5bc>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c52:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8007c56:	061a      	lsls	r2, r3, #24
 8007c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8007c5e:	041b      	lsls	r3, r3, #16
 8007c60:	4313      	orrs	r3, r2
 8007c62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c64:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8007c68:	0212      	lsls	r2, r2, #8
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c6e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8007c72:	431a      	orrs	r2, r3
 8007c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c76:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7c:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8007c80:	061a      	lsls	r2, r3, #24
 8007c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c84:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8007c88:	041b      	lsls	r3, r3, #16
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c8e:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8007c92:	0212      	lsls	r2, r2, #8
 8007c94:	4313      	orrs	r3, r2
 8007c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c98:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8007c9c:	431a      	orrs	r2, r3
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007caa:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->id = ++Fsid;	/* File system mount ID */
 8007cae:	4b0c      	ldr	r3, [pc, #48]	; (8007ce0 <find_volume+0x5f8>)
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	4b0a      	ldr	r3, [pc, #40]	; (8007ce0 <find_volume+0x5f8>)
 8007cb8:	801a      	strh	r2, [r3, #0]
 8007cba:	4b09      	ldr	r3, [pc, #36]	; (8007ce0 <find_volume+0x5f8>)
 8007cbc:	881a      	ldrh	r2, [r3, #0]
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8007cc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007cc6:	f7fe fb6f 	bl	80063a8 <clear_lock>
#endif

	return FR_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3758      	adds	r7, #88	; 0x58
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	ffffaa55 	.word	0xffffaa55
 8007cd8:	41615252 	.word	0x41615252
 8007cdc:	61417272 	.word	0x61417272
 8007ce0:	2000024c 	.word	0x2000024c

08007ce4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d022      	beq.n	8007d3c <validate+0x58>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d01d      	beq.n	8007d3c <validate+0x58>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007d06:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d016      	beq.n	8007d3c <validate+0x58>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007d14:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d10c      	bne.n	8007d3c <validate+0x58>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007d28:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fe f893 	bl	8005e58 <disk_status>
 8007d32:	4603      	mov	r3, r0
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d001      	beq.n	8007d40 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8007d3c:	2309      	movs	r3, #9
 8007d3e:	e000      	b.n	8007d42 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
	...

08007d4c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b088      	sub	sp, #32
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	4613      	mov	r3, r2
 8007d58:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8007d5e:	f107 0310 	add.w	r3, r7, #16
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7ff fc12 	bl	800758c <get_ldnumber>
 8007d68:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	da01      	bge.n	8007d74 <f_mount+0x28>
 8007d70:	230b      	movs	r3, #11
 8007d72:	e02d      	b.n	8007dd0 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007d74:	4a18      	ldr	r2, [pc, #96]	; (8007dd8 <f_mount+0x8c>)
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d7c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d006      	beq.n	8007d92 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8007d84:	69b8      	ldr	r0, [r7, #24]
 8007d86:	f7fe fb0f 	bl	80063a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	}

	if (fs) {
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d003      	beq.n	8007da0 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	490d      	ldr	r1, [pc, #52]	; (8007dd8 <f_mount+0x8c>)
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d002      	beq.n	8007db6 <f_mount+0x6a>
 8007db0:	79fb      	ldrb	r3, [r7, #7]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d001      	beq.n	8007dba <f_mount+0x6e>
 8007db6:	2300      	movs	r3, #0
 8007db8:	e00a      	b.n	8007dd0 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8007dba:	f107 0108 	add.w	r1, r7, #8
 8007dbe:	f107 030c 	add.w	r3, r7, #12
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7ff fc8f 	bl	80076e8 <find_volume>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3720      	adds	r7, #32
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	20000248 	.word	0x20000248

08007ddc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	f5ad 6d8a 	sub.w	sp, sp, #1104	; 0x450
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	f107 030c 	add.w	r3, r7, #12
 8007de8:	6018      	str	r0, [r3, #0]
 8007dea:	f107 0308 	add.w	r3, r7, #8
 8007dee:	6019      	str	r1, [r3, #0]
 8007df0:	1dfb      	adds	r3, r7, #7
 8007df2:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8007df4:	f107 030c 	add.w	r3, r7, #12
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <f_open+0x26>
 8007dfe:	2309      	movs	r3, #9
 8007e00:	e1f2      	b.n	80081e8 <f_open+0x40c>
	fp->fs = 0;			/* Clear file object */
 8007e02:	f107 030c 	add.w	r3, r7, #12
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007e0e:	1dfb      	adds	r3, r7, #7
 8007e10:	1dfa      	adds	r2, r7, #7
 8007e12:	7812      	ldrb	r2, [r2, #0]
 8007e14:	f002 021f 	and.w	r2, r2, #31
 8007e18:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007e1a:	1dfb      	adds	r3, r7, #7
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	f023 0301 	bic.w	r3, r3, #1
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	f107 0108 	add.w	r1, r7, #8
 8007e28:	f107 0320 	add.w	r3, r7, #32
 8007e2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7ff fc59 	bl	80076e8 <find_volume>
 8007e36:	4603      	mov	r3, r0
 8007e38:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007e3c:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f040 81cf 	bne.w	80081e4 <f_open+0x408>
		INIT_BUF(dj);
 8007e46:	f107 0320 	add.w	r3, r7, #32
 8007e4a:	f107 0214 	add.w	r2, r7, #20
 8007e4e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
		res = follow_path(&dj, path);	/* Follow the file path */
 8007e52:	f107 0308 	add.w	r3, r7, #8
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	f107 0320 	add.w	r3, r7, #32
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7ff fb26 	bl	80074b0 <follow_path>
 8007e64:	4603      	mov	r3, r0
 8007e66:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
		dir = dj.dir;
 8007e6a:	f107 0320 	add.w	r3, r7, #32
 8007e6e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007e72:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007e76:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d11a      	bne.n	8007eb4 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 8007e7e:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d103      	bne.n	8007e8e <f_open+0xb2>
				res = FR_INVALID_NAME;
 8007e86:	2306      	movs	r3, #6
 8007e88:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
 8007e8c:	e012      	b.n	8007eb4 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007e8e:	1dfb      	adds	r3, r7, #7
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	f023 0301 	bic.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	bf14      	ite	ne
 8007e9a:	2301      	movne	r3, #1
 8007e9c:	2300      	moveq	r3, #0
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	f107 0320 	add.w	r3, r7, #32
 8007ea6:	4611      	mov	r1, r2
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fe f8ef 	bl	800608c <chk_lock>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007eb4:	1dfb      	adds	r3, r7, #7
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	f003 031c 	and.w	r3, r3, #28
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 80cc 	beq.w	800805a <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 8007ec2:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d01f      	beq.n	8007f0a <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007eca:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
 8007ece:	2b04      	cmp	r3, #4
 8007ed0:	d10e      	bne.n	8007ef0 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007ed2:	f7fe f949 	bl	8006168 <enq_lock>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d006      	beq.n	8007eea <f_open+0x10e>
 8007edc:	f107 0320 	add.w	r3, r7, #32
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7ff f9ec 	bl	80072be <dir_register>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	e000      	b.n	8007eec <f_open+0x110>
 8007eea:	2312      	movs	r3, #18
 8007eec:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007ef0:	1dfb      	adds	r3, r7, #7
 8007ef2:	1dfa      	adds	r2, r7, #7
 8007ef4:	7812      	ldrb	r2, [r2, #0]
 8007ef6:	f042 0208 	orr.w	r2, r2, #8
 8007efa:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8007efc:	f107 0320 	add.w	r3, r7, #32
 8007f00:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007f04:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 8007f08:	e014      	b.n	8007f34 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007f0a:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8007f0e:	330b      	adds	r3, #11
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	f003 0311 	and.w	r3, r3, #17
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d003      	beq.n	8007f22 <f_open+0x146>
					res = FR_DENIED;
 8007f1a:	2307      	movs	r3, #7
 8007f1c:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
 8007f20:	e008      	b.n	8007f34 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007f22:	1dfb      	adds	r3, r7, #7
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	f003 0304 	and.w	r3, r3, #4
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d002      	beq.n	8007f34 <f_open+0x158>
						res = FR_EXIST;
 8007f2e:	2308      	movs	r3, #8
 8007f30:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007f34:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f040 80af 	bne.w	800809c <f_open+0x2c0>
 8007f3e:	1dfb      	adds	r3, r7, #7
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	f003 0308 	and.w	r3, r3, #8
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f000 80a8 	beq.w	800809c <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 8007f4c:	f7fd ff26 	bl	8005d9c <get_fattime>
 8007f50:	f8c7 0444 	str.w	r0, [r7, #1092]	; 0x444
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007f54:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8007f58:	330e      	adds	r3, #14
 8007f5a:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8007f5e:	b2d2      	uxtb	r2, r2
 8007f60:	701a      	strb	r2, [r3, #0]
 8007f62:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	0a1b      	lsrs	r3, r3, #8
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8007f70:	330f      	adds	r3, #15
 8007f72:	b2d2      	uxtb	r2, r2
 8007f74:	701a      	strb	r2, [r3, #0]
 8007f76:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8007f7a:	0c1a      	lsrs	r2, r3, #16
 8007f7c:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8007f80:	3310      	adds	r3, #16
 8007f82:	b2d2      	uxtb	r2, r2
 8007f84:	701a      	strb	r2, [r3, #0]
 8007f86:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8007f8a:	0e1a      	lsrs	r2, r3, #24
 8007f8c:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8007f90:	3311      	adds	r3, #17
 8007f92:	b2d2      	uxtb	r2, r2
 8007f94:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007f96:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8007f9a:	330b      	adds	r3, #11
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007fa0:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8007fa4:	331c      	adds	r3, #28
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	701a      	strb	r2, [r3, #0]
 8007faa:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8007fae:	331d      	adds	r3, #29
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	701a      	strb	r2, [r3, #0]
 8007fb4:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8007fb8:	331e      	adds	r3, #30
 8007fba:	2200      	movs	r2, #0
 8007fbc:	701a      	strb	r2, [r3, #0]
 8007fbe:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8007fc2:	331f      	adds	r3, #31
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007fc8:	f107 0320 	add.w	r3, r7, #32
 8007fcc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007fd0:	f8d7 1448 	ldr.w	r1, [r7, #1096]	; 0x448
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7ff f8ce 	bl	8007176 <ld_clust>
 8007fda:	f8c7 0440 	str.w	r0, [r7, #1088]	; 0x440
				st_clust(dir, 0);				/* cluster = 0 */
 8007fde:	2100      	movs	r1, #0
 8007fe0:	f8d7 0448 	ldr.w	r0, [r7, #1096]	; 0x448
 8007fe4:	f7ff f8f5 	bl	80071d2 <st_clust>
				dj.fs->wflag = 1;
 8007fe8:	f107 0320 	add.w	r3, r7, #32
 8007fec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				if (cl) {						/* Remove the cluster chain if exist */
 8007ff6:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d04e      	beq.n	800809c <f_open+0x2c0>
					dw = dj.fs->winsect;
 8007ffe:	f107 0320 	add.w	r3, r7, #32
 8008002:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008006:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800800a:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
					res = remove_chain(dj.fs, cl);
 800800e:	f107 0320 	add.w	r3, r7, #32
 8008012:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008016:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 800801a:	4618      	mov	r0, r3
 800801c:	f7fe fd63 	bl	8006ae6 <remove_chain>
 8008020:	4603      	mov	r3, r0
 8008022:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
					if (res == FR_OK) {
 8008026:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
 800802a:	2b00      	cmp	r3, #0
 800802c:	d136      	bne.n	800809c <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800802e:	f107 0320 	add.w	r3, r7, #32
 8008032:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008036:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 800803a:	3a01      	subs	r2, #1
 800803c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
						res = move_window(dj.fs, dw);
 8008040:	f107 0320 	add.w	r3, r7, #32
 8008044:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008048:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 800804c:	4618      	mov	r0, r3
 800804e:	f7fe fa1e 	bl	800648e <move_window>
 8008052:	4603      	mov	r3, r0
 8008054:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
 8008058:	e020      	b.n	800809c <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800805a:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
 800805e:	2b00      	cmp	r3, #0
 8008060:	d11c      	bne.n	800809c <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8008062:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8008066:	330b      	adds	r3, #11
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	f003 0310 	and.w	r3, r3, #16
 800806e:	2b00      	cmp	r3, #0
 8008070:	d003      	beq.n	800807a <f_open+0x29e>
					res = FR_NO_FILE;
 8008072:	2304      	movs	r3, #4
 8008074:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
 8008078:	e010      	b.n	800809c <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800807a:	1dfb      	adds	r3, r7, #7
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00a      	beq.n	800809c <f_open+0x2c0>
 8008086:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800808a:	330b      	adds	r3, #11
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	2b00      	cmp	r3, #0
 8008094:	d002      	beq.n	800809c <f_open+0x2c0>
						res = FR_DENIED;
 8008096:	2307      	movs	r3, #7
 8008098:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
				}
			}
		}
		if (res == FR_OK) {
 800809c:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d13d      	bne.n	8008120 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80080a4:	1dfb      	adds	r3, r7, #7
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	f003 0308 	and.w	r3, r3, #8
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d005      	beq.n	80080bc <f_open+0x2e0>
				mode |= FA__WRITTEN;
 80080b0:	1dfb      	adds	r3, r7, #7
 80080b2:	1dfa      	adds	r2, r7, #7
 80080b4:	7812      	ldrb	r2, [r2, #0]
 80080b6:	f042 0220 	orr.w	r2, r2, #32
 80080ba:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80080bc:	f107 0320 	add.w	r3, r7, #32
 80080c0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80080c4:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 80080c8:	f107 030c 	add.w	r3, r7, #12
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
			fp->dir_ptr = dir;
 80080d2:	f107 030c 	add.w	r3, r7, #12
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 80080dc:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80080e0:	1dfb      	adds	r3, r7, #7
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	f023 0301 	bic.w	r3, r3, #1
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	bf14      	ite	ne
 80080ec:	2301      	movne	r3, #1
 80080ee:	2300      	moveq	r3, #0
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	461a      	mov	r2, r3
 80080f4:	f107 0320 	add.w	r3, r7, #32
 80080f8:	4611      	mov	r1, r2
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fe f858 	bl	80061b0 <inc_lock>
 8008100:	4602      	mov	r2, r0
 8008102:	f107 030c 	add.w	r3, r7, #12
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
			if (!fp->lockid) res = FR_INT_ERR;
 800810c:	f107 030c 	add.w	r3, r7, #12
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8008116:	2b00      	cmp	r3, #0
 8008118:	d102      	bne.n	8008120 <f_open+0x344>
 800811a:	2302      	movs	r3, #2
 800811c:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8008120:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
 8008124:	2b00      	cmp	r3, #0
 8008126:	d15d      	bne.n	80081e4 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 8008128:	f107 030c 	add.w	r3, r7, #12
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	1dfa      	adds	r2, r7, #7
 8008130:	7812      	ldrb	r2, [r2, #0]
 8008132:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
			fp->err = 0;						/* Clear error flag */
 8008136:	f107 030c 	add.w	r3, r7, #12
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8008142:	f107 0320 	add.w	r3, r7, #32
 8008146:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800814a:	f8d7 1448 	ldr.w	r1, [r7, #1096]	; 0x448
 800814e:	4618      	mov	r0, r3
 8008150:	f7ff f811 	bl	8007176 <ld_clust>
 8008154:	4602      	mov	r2, r0
 8008156:	f107 030c 	add.w	r3, r7, #12
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008160:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8008164:	331f      	adds	r3, #31
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	061a      	lsls	r2, r3, #24
 800816a:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800816e:	331e      	adds	r3, #30
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	041b      	lsls	r3, r3, #16
 8008174:	4313      	orrs	r3, r2
 8008176:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 800817a:	321d      	adds	r2, #29
 800817c:	7812      	ldrb	r2, [r2, #0]
 800817e:	0212      	lsls	r2, r2, #8
 8008180:	4313      	orrs	r3, r2
 8008182:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8008186:	321c      	adds	r2, #28
 8008188:	7812      	ldrb	r2, [r2, #0]
 800818a:	431a      	orrs	r2, r3
 800818c:	f107 030c 	add.w	r3, r7, #12
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			fp->fptr = 0;						/* File pointer */
 8008196:	f107 030c 	add.w	r3, r7, #12
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2200      	movs	r2, #0
 800819e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
			fp->dsect = 0;
 80081a2:	f107 030c 	add.w	r3, r7, #12
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80081ae:	f107 030c 	add.w	r3, r7, #12
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80081ba:	f107 0320 	add.w	r3, r7, #32
 80081be:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80081c2:	f107 030c 	add.w	r3, r7, #12
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
			fp->id = fp->fs->id;
 80081cc:	f107 030c 	add.w	r3, r7, #12
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80081d6:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80081da:	f107 030c 	add.w	r3, r7, #12
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		}
	}

	LEAVE_FF(dj.fs, res);
 80081e4:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	f507 678a 	add.w	r7, r7, #1104	; 0x450
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b08a      	sub	sp, #40	; 0x28
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	60f8      	str	r0, [r7, #12]
 80081fa:	60b9      	str	r1, [r7, #8]
 80081fc:	607a      	str	r2, [r7, #4]
 80081fe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2200      	movs	r2, #0
 8008208:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f7ff fd6a 	bl	8007ce4 <validate>
 8008210:	4603      	mov	r3, r0
 8008212:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008214:	7dfb      	ldrb	r3, [r7, #23]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d001      	beq.n	800821e <f_write+0x2c>
 800821a:	7dfb      	ldrb	r3, [r7, #23]
 800821c:	e1cc      	b.n	80085b8 <f_write+0x3c6>
	if (fp->err)							/* Check error */
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 8008224:	2b00      	cmp	r3, #0
 8008226:	d003      	beq.n	8008230 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 800822e:	e1c3      	b.n	80085b8 <f_write+0x3c6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8008236:	f003 0302 	and.w	r3, r3, #2
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800823e:	2307      	movs	r3, #7
 8008240:	e1ba      	b.n	80085b8 <f_write+0x3c6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	441a      	add	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008252:	429a      	cmp	r2, r3
 8008254:	f080 8192 	bcs.w	800857c <f_write+0x38a>
 8008258:	2300      	movs	r3, #0
 800825a:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800825c:	e18e      	b.n	800857c <f_write+0x38a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800826a:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800826e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008272:	fb02 f201 	mul.w	r2, r2, r1
 8008276:	1a9b      	subs	r3, r3, r2
 8008278:	2b00      	cmp	r3, #0
 800827a:	f040 8131 	bne.w	80084e0 <f_write+0x2ee>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800828a:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800828e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008292:	b2da      	uxtb	r2, r3
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800829a:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800829e:	3b01      	subs	r3, #1
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	4013      	ands	r3, r2
 80082a4:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80082a6:	7dbb      	ldrb	r3, [r7, #22]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d151      	bne.n	8008350 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d10f      	bne.n	80082d6 <f_write+0xe4>
					clst = fp->sclust;		/* Follow from the origin */
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80082bc:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d121      	bne.n	8008308 <f_write+0x116>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80082ca:	2100      	movs	r1, #0
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fe fc64 	bl	8006b9a <create_chain>
 80082d2:	6278      	str	r0, [r7, #36]	; 0x24
 80082d4:	e018      	b.n	8008308 <f_write+0x116>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d008      	beq.n	80082f2 <f_write+0x100>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80082e6:	4619      	mov	r1, r3
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f7fe fcf3 	bl	8006cd4 <clmt_clust>
 80082ee:	6278      	str	r0, [r7, #36]	; 0x24
 80082f0:	e00a      	b.n	8008308 <f_write+0x116>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80082fe:	4619      	mov	r1, r3
 8008300:	4610      	mov	r0, r2
 8008302:	f7fe fc4a 	bl	8006b9a <create_chain>
 8008306:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830a:	2b00      	cmp	r3, #0
 800830c:	f000 813b 	beq.w	8008586 <f_write+0x394>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008312:	2b01      	cmp	r3, #1
 8008314:	d105      	bne.n	8008322 <f_write+0x130>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2202      	movs	r2, #2
 800831a:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800831e:	2302      	movs	r3, #2
 8008320:	e14a      	b.n	80085b8 <f_write+0x3c6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008328:	d105      	bne.n	8008336 <f_write+0x144>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8008332:	2301      	movs	r3, #1
 8008334:	e140      	b.n	80085b8 <f_write+0x3c6>
				fp->clust = clst;			/* Update current cluster */
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800833a:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008344:	2b00      	cmp	r3, #0
 8008346:	d103      	bne.n	8008350 <f_write+0x15e>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800834c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8008356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800835a:	2b00      	cmp	r3, #0
 800835c:	d01d      	beq.n	800839a <f_write+0x1a8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008364:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8008368:	68f9      	ldr	r1, [r7, #12]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8008370:	2301      	movs	r3, #1
 8008372:	f7fd fdd1 	bl	8005f18 <disk_write>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d005      	beq.n	8008388 <f_write+0x196>
					ABORT(fp->fs, FR_DISK_ERR);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8008384:	2301      	movs	r3, #1
 8008386:	e117      	b.n	80085b8 <f_write+0x3c6>
				fp->flag &= ~FA__DIRTY;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800838e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008392:	b2da      	uxtb	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80083a6:	4619      	mov	r1, r3
 80083a8:	4610      	mov	r0, r2
 80083aa:	f7fe f94c 	bl	8006646 <clust2sect>
 80083ae:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d105      	bne.n	80083c2 <f_write+0x1d0>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2202      	movs	r2, #2
 80083ba:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 80083be:	2302      	movs	r3, #2
 80083c0:	e0fa      	b.n	80085b8 <f_write+0x3c6>
			sect += csect;
 80083c2:	7dbb      	ldrb	r3, [r7, #22]
 80083c4:	693a      	ldr	r2, [r7, #16]
 80083c6:	4413      	add	r3, r2
 80083c8:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80083d0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80083d4:	461a      	mov	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80083dc:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d058      	beq.n	8008496 <f_write+0x2a4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80083e4:	7dba      	ldrb	r2, [r7, #22]
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	4413      	add	r3, r2
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 80083f0:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d908      	bls.n	800840a <f_write+0x218>
					cc = fp->fs->csize - csect;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80083fe:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8008402:	461a      	mov	r2, r3
 8008404:	7dbb      	ldrb	r3, [r7, #22]
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008410:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	69b9      	ldr	r1, [r7, #24]
 800841a:	f7fd fd7d 	bl	8005f18 <disk_write>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d005      	beq.n	8008430 <f_write+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800842c:	2301      	movs	r3, #1
 800842e:	e0c3      	b.n	80085b8 <f_write+0x3c6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	69fa      	ldr	r2, [r7, #28]
 800843c:	429a      	cmp	r2, r3
 800843e:	d91f      	bls.n	8008480 <f_write+0x28e>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8008452:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8008456:	fb02 f303 	mul.w	r3, r2, r3
 800845a:	69ba      	ldr	r2, [r7, #24]
 800845c:	18d1      	adds	r1, r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008464:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008468:	461a      	mov	r2, r3
 800846a:	f7fd fd93 	bl	8005f94 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8008474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008478:	b2da      	uxtb	r2, r3
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008486:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800848a:	461a      	mov	r2, r3
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	fb02 f303 	mul.w	r3, r2, r3
 8008492:	623b      	str	r3, [r7, #32]
				continue;
 8008494:	e05c      	b.n	8008550 <f_write+0x35e>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800849c:	693a      	ldr	r2, [r7, #16]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d01a      	beq.n	80084d8 <f_write+0x2e6>
				if (fp->fptr < fp->fsize &&
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d212      	bcs.n	80084d8 <f_write+0x2e6>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80084b8:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80084bc:	68f9      	ldr	r1, [r7, #12]
 80084be:	2301      	movs	r3, #1
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	f7fd fd09 	bl	8005ed8 <disk_read>
 80084c6:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d005      	beq.n	80084d8 <f_write+0x2e6>
						ABORT(fp->fs, FR_DISK_ERR);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 80084d4:	2301      	movs	r3, #1
 80084d6:	e06f      	b.n	80085b8 <f_write+0x3c6>
			}
#endif
			fp->dsect = sect;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	693a      	ldr	r2, [r7, #16]
 80084dc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80084e6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80084ea:	4618      	mov	r0, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 80084f8:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80084fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008500:	fb02 f201 	mul.w	r2, r2, r1
 8008504:	1a9b      	subs	r3, r3, r2
 8008506:	1ac3      	subs	r3, r0, r3
 8008508:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800850a:	6a3a      	ldr	r2, [r7, #32]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	429a      	cmp	r2, r3
 8008510:	d901      	bls.n	8008516 <f_write+0x324>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8008522:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8008526:	fbb3 f1f2 	udiv	r1, r3, r2
 800852a:	fb02 f201 	mul.w	r2, r2, r1
 800852e:	1a9b      	subs	r3, r3, r2
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	4413      	add	r3, r2
 8008534:	6a3a      	ldr	r2, [r7, #32]
 8008536:	69b9      	ldr	r1, [r7, #24]
 8008538:	4618      	mov	r0, r3
 800853a:	f7fd fd2b 	bl	8005f94 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8008544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008548:	b2da      	uxtb	r2, r3
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8008550:	69ba      	ldr	r2, [r7, #24]
 8008552:	6a3b      	ldr	r3, [r7, #32]
 8008554:	4413      	add	r3, r2
 8008556:	61bb      	str	r3, [r7, #24]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	441a      	add	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	441a      	add	r2, r3
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	f47f ae6d 	bne.w	800825e <f_write+0x6c>
 8008584:	e000      	b.n	8008588 <f_write+0x396>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008586:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008594:	429a      	cmp	r2, r3
 8008596:	d905      	bls.n	80085a4 <f_write+0x3b2>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 80085aa:	f043 0320 	orr.w	r3, r3, #32
 80085ae:	b2da      	uxtb	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406

	LEAVE_FF(fp->fs, FR_OK);
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3728      	adds	r7, #40	; 0x28
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f7ff fb8b 	bl	8007ce4 <validate>
 80085ce:	4603      	mov	r3, r0
 80085d0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80085d2:	7dfb      	ldrb	r3, [r7, #23]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f040 80a8 	bne.w	800872a <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 80085e0:	f003 0320 	and.w	r3, r3, #32
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f000 80a0 	beq.w	800872a <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 80085f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d019      	beq.n	800862c <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80085fe:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8008602:	6879      	ldr	r1, [r7, #4]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800860a:	2301      	movs	r3, #1
 800860c:	f7fd fc84 	bl	8005f18 <disk_write>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d001      	beq.n	800861a <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8008616:	2301      	movs	r3, #1
 8008618:	e088      	b.n	800872c <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8008620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008624:	b2da      	uxtb	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8008638:	4619      	mov	r1, r3
 800863a:	4610      	mov	r0, r2
 800863c:	f7fd ff27 	bl	800648e <move_window>
 8008640:	4603      	mov	r3, r0
 8008642:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8008644:	7dfb      	ldrb	r3, [r7, #23]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d16f      	bne.n	800872a <f_sync+0x16a>
				dir = fp->dir_ptr;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8008650:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	330b      	adds	r3, #11
 8008656:	781a      	ldrb	r2, [r3, #0]
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	330b      	adds	r3, #11
 800865c:	f042 0220 	orr.w	r2, r2, #32
 8008660:	b2d2      	uxtb	r2, r2
 8008662:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	331c      	adds	r3, #28
 800866e:	b2d2      	uxtb	r2, r2
 8008670:	701a      	strb	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008678:	b29b      	uxth	r3, r3
 800867a:	0a1b      	lsrs	r3, r3, #8
 800867c:	b29a      	uxth	r2, r3
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	331d      	adds	r3, #29
 8008682:	b2d2      	uxtb	r2, r2
 8008684:	701a      	strb	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800868c:	0c1a      	lsrs	r2, r3, #16
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	331e      	adds	r3, #30
 8008692:	b2d2      	uxtb	r2, r2
 8008694:	701a      	strb	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800869c:	0e1a      	lsrs	r2, r3, #24
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	331f      	adds	r3, #31
 80086a2:	b2d2      	uxtb	r2, r2
 80086a4:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80086ac:	4619      	mov	r1, r3
 80086ae:	6938      	ldr	r0, [r7, #16]
 80086b0:	f7fe fd8f 	bl	80071d2 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80086b4:	f7fd fb72 	bl	8005d9c <get_fattime>
 80086b8:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	3316      	adds	r3, #22
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	b2d2      	uxtb	r2, r2
 80086c2:	701a      	strb	r2, [r3, #0]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	0a1b      	lsrs	r3, r3, #8
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	3317      	adds	r3, #23
 80086d0:	b2d2      	uxtb	r2, r2
 80086d2:	701a      	strb	r2, [r3, #0]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	0c1a      	lsrs	r2, r3, #16
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	3318      	adds	r3, #24
 80086dc:	b2d2      	uxtb	r2, r2
 80086de:	701a      	strb	r2, [r3, #0]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	0e1a      	lsrs	r2, r3, #24
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	3319      	adds	r3, #25
 80086e8:	b2d2      	uxtb	r2, r2
 80086ea:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	3312      	adds	r3, #18
 80086f0:	2200      	movs	r2, #0
 80086f2:	701a      	strb	r2, [r3, #0]
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	3313      	adds	r3, #19
 80086f8:	2200      	movs	r2, #0
 80086fa:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8008702:	f023 0320 	bic.w	r3, r3, #32
 8008706:	b2da      	uxtb	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
				fp->fs->wflag = 1;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008714:	2201      	movs	r2, #1
 8008716:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = sync_fs(fp->fs);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008720:	4618      	mov	r0, r3
 8008722:	f7fd fee2 	bl	80064ea <sync_fs>
 8008726:	4603      	mov	r3, r0
 8008728:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800872a:	7dfb      	ldrb	r3, [r7, #23]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3718      	adds	r7, #24
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f7ff ff3f 	bl	80085c0 <f_sync>
 8008742:	4603      	mov	r3, r0
 8008744:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008746:	7bfb      	ldrb	r3, [r7, #15]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d116      	bne.n	800877a <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7ff fac9 	bl	8007ce4 <validate>
 8008752:	4603      	mov	r3, r0
 8008754:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10e      	bne.n	800877a <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8008762:	4618      	mov	r0, r3
 8008764:	f7fd fddc 	bl	8006320 <dec_lock>
 8008768:	4603      	mov	r3, r0
 800876a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800876c:	7bfb      	ldrb	r3, [r7, #15]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d103      	bne.n	800877a <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800877a:	7bfb      	ldrb	r3, [r7, #15]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b090      	sub	sp, #64	; 0x40
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7ff faa8 	bl	8007ce4 <validate>
 8008794:	4603      	mov	r3, r0
 8008796:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800879a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d002      	beq.n	80087a8 <f_lseek+0x24>
 80087a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80087a6:	e274      	b.n	8008c92 <f_lseek+0x50e>
	if (fp->err)						/* Check error */
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d003      	beq.n	80087ba <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 80087b8:	e26b      	b.n	8008c92 <f_lseek+0x50e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 8100 	beq.w	80089c6 <f_lseek+0x242>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087cc:	d164      	bne.n	8008898 <f_lseek+0x114>
			tbl = fp->cltbl;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 80087d4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80087d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d8:	1d1a      	adds	r2, r3, #4
 80087da:	627a      	str	r2, [r7, #36]	; 0x24
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	617b      	str	r3, [r7, #20]
 80087e0:	2302      	movs	r3, #2
 80087e2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80087ea:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80087ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d041      	beq.n	8008876 <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80087f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f4:	613b      	str	r3, [r7, #16]
 80087f6:	2300      	movs	r3, #0
 80087f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	3302      	adds	r3, #2
 80087fe:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008802:	60fb      	str	r3, [r7, #12]
 8008804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008806:	3301      	adds	r3, #1
 8008808:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008810:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008812:	4618      	mov	r0, r3
 8008814:	f7fd ff39 	bl	800668a <get_fat>
 8008818:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800881a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881c:	2b01      	cmp	r3, #1
 800881e:	d805      	bhi.n	800882c <f_lseek+0xa8>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2202      	movs	r2, #2
 8008824:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8008828:	2302      	movs	r3, #2
 800882a:	e232      	b.n	8008c92 <f_lseek+0x50e>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800882c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008832:	d105      	bne.n	8008840 <f_lseek+0xbc>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800883c:	2301      	movs	r3, #1
 800883e:	e228      	b.n	8008c92 <f_lseek+0x50e>
					} while (cl == pcl + 1);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	3301      	adds	r3, #1
 8008844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008846:	429a      	cmp	r2, r3
 8008848:	d0da      	beq.n	8008800 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800884a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	429a      	cmp	r2, r3
 8008850:	d809      	bhi.n	8008866 <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	1d1a      	adds	r2, r3, #4
 8008856:	627a      	str	r2, [r7, #36]	; 0x24
 8008858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885e:	1d1a      	adds	r2, r3, #4
 8008860:	627a      	str	r2, [r7, #36]	; 0x24
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800886c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008872:	429a      	cmp	r2, r3
 8008874:	d3bd      	bcc.n	80087f2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800887c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800887e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8008880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	429a      	cmp	r2, r3
 8008886:	d803      	bhi.n	8008890 <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 8008888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888a:	2200      	movs	r2, #0
 800888c:	601a      	str	r2, [r3, #0]
 800888e:	e1fe      	b.n	8008c8e <f_lseek+0x50a>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008890:	2311      	movs	r3, #17
 8008892:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008896:	e1fa      	b.n	8008c8e <f_lseek+0x50a>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d903      	bls.n	80088ac <f_lseek+0x128>
				ofs = fp->fsize;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80088aa:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
			if (ofs) {
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f000 81e9 	beq.w	8008c8e <f_lseek+0x50a>
				fp->clust = clmt_clust(fp, ofs - 1);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	3b01      	subs	r3, #1
 80088c0:	4619      	mov	r1, r3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7fe fa06 	bl	8006cd4 <clmt_clust>
 80088c8:	4602      	mov	r2, r0
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
				dsc = clust2sect(fp->fs, fp->clust);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80088dc:	4619      	mov	r1, r3
 80088de:	4610      	mov	r0, r2
 80088e0:	f7fd feb1 	bl	8006646 <clust2sect>
 80088e4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d105      	bne.n	80088f8 <f_lseek+0x174>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2202      	movs	r2, #2
 80088f0:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 80088f4:	2302      	movs	r3, #2
 80088f6:	e1cc      	b.n	8008c92 <f_lseek+0x50e>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8008902:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8008906:	fbb3 f3f2 	udiv	r3, r3, r2
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8008910:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8008914:	3a01      	subs	r2, #1
 8008916:	4013      	ands	r3, r2
 8008918:	69ba      	ldr	r2, [r7, #24]
 800891a:	4413      	add	r3, r2
 800891c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800892a:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800892e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008932:	fb02 f201 	mul.w	r2, r2, r1
 8008936:	1a9b      	subs	r3, r3, r2
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 81a8 	beq.w	8008c8e <f_lseek+0x50a>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8008944:	69ba      	ldr	r2, [r7, #24]
 8008946:	429a      	cmp	r2, r3
 8008948:	f000 81a1 	beq.w	8008c8e <f_lseek+0x50a>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8008952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008956:	2b00      	cmp	r3, #0
 8008958:	d01d      	beq.n	8008996 <f_lseek+0x212>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008960:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8008964:	6879      	ldr	r1, [r7, #4]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800896c:	2301      	movs	r3, #1
 800896e:	f7fd fad3 	bl	8005f18 <disk_write>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d005      	beq.n	8008984 <f_lseek+0x200>
							ABORT(fp->fs, FR_DISK_ERR);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8008980:	2301      	movs	r3, #1
 8008982:	e186      	b.n	8008c92 <f_lseek+0x50e>
						fp->flag &= ~FA__DIRTY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800898a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800898e:	b2da      	uxtb	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800899c:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80089a0:	6879      	ldr	r1, [r7, #4]
 80089a2:	2301      	movs	r3, #1
 80089a4:	69ba      	ldr	r2, [r7, #24]
 80089a6:	f7fd fa97 	bl	8005ed8 <disk_read>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d005      	beq.n	80089bc <f_lseek+0x238>
						ABORT(fp->fs, FR_DISK_ERR);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 80089b8:	2301      	movs	r3, #1
 80089ba:	e16a      	b.n	8008c92 <f_lseek+0x50e>
#endif
					fp->dsect = dsc;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	69ba      	ldr	r2, [r7, #24]
 80089c0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 80089c4:	e163      	b.n	8008c8e <f_lseek+0x50a>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80089cc:	683a      	ldr	r2, [r7, #0]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d90a      	bls.n	80089e8 <f_lseek+0x264>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 80089d8:	f003 0302 	and.w	r3, r3, #2
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d103      	bne.n	80089e8 <f_lseek+0x264>
#endif
			) ofs = fp->fsize;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80089e6:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80089ee:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80089f0:	2300      	movs	r3, #0
 80089f2:	637b      	str	r3, [r7, #52]	; 0x34
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089f8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
		if (ofs) {
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f000 80dd 	beq.w	8008bbe <f_lseek+0x43a>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008a0a:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8008a0e:	461a      	mov	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008a16:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008a1a:	fb03 f302 	mul.w	r3, r3, r2
 8008a1e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008a20:	6a3b      	ldr	r3, [r7, #32]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d01e      	beq.n	8008a64 <f_lseek+0x2e0>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	1e5a      	subs	r2, r3, #1
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	1e59      	subs	r1, r3, #1
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d312      	bcc.n	8008a64 <f_lseek+0x2e0>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	1e5a      	subs	r2, r3, #1
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	425b      	negs	r3, r3
 8008a46:	401a      	ands	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
				ofs -= fp->fptr;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008a60:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a62:	e029      	b.n	8008ab8 <f_lseek+0x334>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008a6a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d11e      	bne.n	8008ab0 <f_lseek+0x32c>
					clst = create_chain(fp->fs, 0);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008a78:	2100      	movs	r1, #0
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fe f88d 	bl	8006b9a <create_chain>
 8008a80:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d105      	bne.n	8008a94 <f_lseek+0x310>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8008a90:	2302      	movs	r3, #2
 8008a92:	e0fe      	b.n	8008c92 <f_lseek+0x50e>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9a:	d105      	bne.n	8008aa8 <f_lseek+0x324>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e0f4      	b.n	8008c92 <f_lseek+0x50e>
					fp->sclust = clst;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008aac:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
				}
#endif
				fp->clust = clst;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ab4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
			}
			if (clst != 0) {
 8008ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d07f      	beq.n	8008bbe <f_lseek+0x43a>
				while (ofs > bcs) {						/* Cluster following loop */
 8008abe:	e047      	b.n	8008b50 <f_lseek+0x3cc>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8008ac6:	f003 0302 	and.w	r3, r3, #2
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00d      	beq.n	8008aea <f_lseek+0x366>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008ad4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fe f85f 	bl	8006b9a <create_chain>
 8008adc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8008ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10a      	bne.n	8008afa <f_lseek+0x376>
							ofs = bcs; break;
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	603b      	str	r3, [r7, #0]
 8008ae8:	e036      	b.n	8008b58 <f_lseek+0x3d4>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008af0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fd fdc9 	bl	800668a <get_fat>
 8008af8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b00:	d105      	bne.n	8008b0e <f_lseek+0x38a>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e0c1      	b.n	8008c92 <f_lseek+0x50e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8008b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d907      	bls.n	8008b24 <f_lseek+0x3a0>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008b1a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008b1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d305      	bcc.n	8008b30 <f_lseek+0x3ac>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2202      	movs	r2, #2
 8008b28:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8008b2c:	2302      	movs	r3, #2
 8008b2e:	e0b0      	b.n	8008c92 <f_lseek+0x50e>
					fp->clust = clst;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b34:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
					fp->fptr += bcs;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	441a      	add	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
					ofs -= bcs;
 8008b48:	683a      	ldr	r2, [r7, #0]
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8008b50:	683a      	ldr	r2, [r7, #0]
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d8b3      	bhi.n	8008ac0 <f_lseek+0x33c>
				}
				fp->fptr += ofs;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	441a      	add	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
				if (ofs % SS(fp->fs)) {
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008b6e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008b72:	461a      	mov	r2, r3
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b7a:	fb02 f201 	mul.w	r2, r2, r1
 8008b7e:	1a9b      	subs	r3, r3, r2
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d01c      	beq.n	8008bbe <f_lseek+0x43a>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008b8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fd fd5a 	bl	8006646 <clust2sect>
 8008b92:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8008b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d105      	bne.n	8008ba6 <f_lseek+0x422>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8008ba2:	2302      	movs	r3, #2
 8008ba4:	e075      	b.n	8008c92 <f_lseek+0x50e>
					nsect += ofs / SS(fp->fs);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008bac:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bba:	4413      	add	r3, r2
 8008bbc:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8008bca:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8008bce:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bd2:	fb02 f201 	mul.w	r2, r2, r1
 8008bd6:	1a9b      	subs	r3, r3, r2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d041      	beq.n	8008c60 <f_lseek+0x4dc>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8008be2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d03b      	beq.n	8008c60 <f_lseek+0x4dc>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8008bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d01d      	beq.n	8008c32 <f_lseek+0x4ae>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008bfc:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8008c00:	6879      	ldr	r1, [r7, #4]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8008c08:	2301      	movs	r3, #1
 8008c0a:	f7fd f985 	bl	8005f18 <disk_write>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d005      	beq.n	8008c20 <f_lseek+0x49c>
					ABORT(fp->fs, FR_DISK_ERR);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e038      	b.n	8008c92 <f_lseek+0x50e>
				fp->flag &= ~FA__DIRTY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8008c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008c38:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8008c3c:	6879      	ldr	r1, [r7, #4]
 8008c3e:	2301      	movs	r3, #1
 8008c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c42:	f7fd f949 	bl	8005ed8 <disk_read>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d005      	beq.n	8008c58 <f_lseek+0x4d4>
				ABORT(fp->fs, FR_DISK_ERR);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8008c54:	2301      	movs	r3, #1
 8008c56:	e01c      	b.n	8008c92 <f_lseek+0x50e>
#endif
			fp->dsect = nsect;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c5c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d90e      	bls.n	8008c8e <f_lseek+0x50a>
			fp->fsize = fp->fptr;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			fp->flag |= FA__WRITTEN;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8008c82:	f043 0320 	orr.w	r3, r3, #32
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8008c8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3740      	adds	r7, #64	; 0x40
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
	...

08008c9c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b087      	sub	sp, #28
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008caa:	2301      	movs	r3, #1
 8008cac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008cb2:	4b1f      	ldr	r3, [pc, #124]	; (8008d30 <FATFS_LinkDriverEx+0x94>)
 8008cb4:	7a5b      	ldrb	r3, [r3, #9]
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d831      	bhi.n	8008d20 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008cbc:	4b1c      	ldr	r3, [pc, #112]	; (8008d30 <FATFS_LinkDriverEx+0x94>)
 8008cbe:	7a5b      	ldrb	r3, [r3, #9]
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	4b1a      	ldr	r3, [pc, #104]	; (8008d30 <FATFS_LinkDriverEx+0x94>)
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008cca:	4b19      	ldr	r3, [pc, #100]	; (8008d30 <FATFS_LinkDriverEx+0x94>)
 8008ccc:	7a5b      	ldrb	r3, [r3, #9]
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	4a17      	ldr	r2, [pc, #92]	; (8008d30 <FATFS_LinkDriverEx+0x94>)
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008cda:	4b15      	ldr	r3, [pc, #84]	; (8008d30 <FATFS_LinkDriverEx+0x94>)
 8008cdc:	7a5b      	ldrb	r3, [r3, #9]
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	4b13      	ldr	r3, [pc, #76]	; (8008d30 <FATFS_LinkDriverEx+0x94>)
 8008ce4:	4413      	add	r3, r2
 8008ce6:	79fa      	ldrb	r2, [r7, #7]
 8008ce8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008cea:	4b11      	ldr	r3, [pc, #68]	; (8008d30 <FATFS_LinkDriverEx+0x94>)
 8008cec:	7a5b      	ldrb	r3, [r3, #9]
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	1c5a      	adds	r2, r3, #1
 8008cf2:	b2d1      	uxtb	r1, r2
 8008cf4:	4a0e      	ldr	r2, [pc, #56]	; (8008d30 <FATFS_LinkDriverEx+0x94>)
 8008cf6:	7251      	strb	r1, [r2, #9]
 8008cf8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008cfa:	7dbb      	ldrb	r3, [r7, #22]
 8008cfc:	3330      	adds	r3, #48	; 0x30
 8008cfe:	b2da      	uxtb	r2, r3
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	3301      	adds	r3, #1
 8008d08:	223a      	movs	r2, #58	; 0x3a
 8008d0a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	3302      	adds	r3, #2
 8008d10:	222f      	movs	r2, #47	; 0x2f
 8008d12:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	3303      	adds	r3, #3
 8008d18:	2200      	movs	r2, #0
 8008d1a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	371c      	adds	r7, #28
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	20000268 	.word	0x20000268

08008d34 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008d3e:	2200      	movs	r2, #0
 8008d40:	6839      	ldr	r1, [r7, #0]
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7ff ffaa 	bl	8008c9c <FATFS_LinkDriverEx>
 8008d48:	4603      	mov	r3, r0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
	...

08008d54 <__errno>:
 8008d54:	4b01      	ldr	r3, [pc, #4]	; (8008d5c <__errno+0x8>)
 8008d56:	6818      	ldr	r0, [r3, #0]
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	20000024 	.word	0x20000024

08008d60 <__libc_init_array>:
 8008d60:	b570      	push	{r4, r5, r6, lr}
 8008d62:	4d0d      	ldr	r5, [pc, #52]	; (8008d98 <__libc_init_array+0x38>)
 8008d64:	4c0d      	ldr	r4, [pc, #52]	; (8008d9c <__libc_init_array+0x3c>)
 8008d66:	1b64      	subs	r4, r4, r5
 8008d68:	10a4      	asrs	r4, r4, #2
 8008d6a:	2600      	movs	r6, #0
 8008d6c:	42a6      	cmp	r6, r4
 8008d6e:	d109      	bne.n	8008d84 <__libc_init_array+0x24>
 8008d70:	4d0b      	ldr	r5, [pc, #44]	; (8008da0 <__libc_init_array+0x40>)
 8008d72:	4c0c      	ldr	r4, [pc, #48]	; (8008da4 <__libc_init_array+0x44>)
 8008d74:	f004 fc5e 	bl	800d634 <_init>
 8008d78:	1b64      	subs	r4, r4, r5
 8008d7a:	10a4      	asrs	r4, r4, #2
 8008d7c:	2600      	movs	r6, #0
 8008d7e:	42a6      	cmp	r6, r4
 8008d80:	d105      	bne.n	8008d8e <__libc_init_array+0x2e>
 8008d82:	bd70      	pop	{r4, r5, r6, pc}
 8008d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d88:	4798      	blx	r3
 8008d8a:	3601      	adds	r6, #1
 8008d8c:	e7ee      	b.n	8008d6c <__libc_init_array+0xc>
 8008d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d92:	4798      	blx	r3
 8008d94:	3601      	adds	r6, #1
 8008d96:	e7f2      	b.n	8008d7e <__libc_init_array+0x1e>
 8008d98:	0800dc94 	.word	0x0800dc94
 8008d9c:	0800dc94 	.word	0x0800dc94
 8008da0:	0800dc94 	.word	0x0800dc94
 8008da4:	0800dc98 	.word	0x0800dc98

08008da8 <memset>:
 8008da8:	4402      	add	r2, r0
 8008daa:	4603      	mov	r3, r0
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d100      	bne.n	8008db2 <memset+0xa>
 8008db0:	4770      	bx	lr
 8008db2:	f803 1b01 	strb.w	r1, [r3], #1
 8008db6:	e7f9      	b.n	8008dac <memset+0x4>

08008db8 <__cvt>:
 8008db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dbc:	ec55 4b10 	vmov	r4, r5, d0
 8008dc0:	2d00      	cmp	r5, #0
 8008dc2:	460e      	mov	r6, r1
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	462b      	mov	r3, r5
 8008dc8:	bfbb      	ittet	lt
 8008dca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008dce:	461d      	movlt	r5, r3
 8008dd0:	2300      	movge	r3, #0
 8008dd2:	232d      	movlt	r3, #45	; 0x2d
 8008dd4:	700b      	strb	r3, [r1, #0]
 8008dd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008ddc:	4691      	mov	r9, r2
 8008dde:	f023 0820 	bic.w	r8, r3, #32
 8008de2:	bfbc      	itt	lt
 8008de4:	4622      	movlt	r2, r4
 8008de6:	4614      	movlt	r4, r2
 8008de8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008dec:	d005      	beq.n	8008dfa <__cvt+0x42>
 8008dee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008df2:	d100      	bne.n	8008df6 <__cvt+0x3e>
 8008df4:	3601      	adds	r6, #1
 8008df6:	2102      	movs	r1, #2
 8008df8:	e000      	b.n	8008dfc <__cvt+0x44>
 8008dfa:	2103      	movs	r1, #3
 8008dfc:	ab03      	add	r3, sp, #12
 8008dfe:	9301      	str	r3, [sp, #4]
 8008e00:	ab02      	add	r3, sp, #8
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	ec45 4b10 	vmov	d0, r4, r5
 8008e08:	4653      	mov	r3, sl
 8008e0a:	4632      	mov	r2, r6
 8008e0c:	f001 fdcc 	bl	800a9a8 <_dtoa_r>
 8008e10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008e14:	4607      	mov	r7, r0
 8008e16:	d102      	bne.n	8008e1e <__cvt+0x66>
 8008e18:	f019 0f01 	tst.w	r9, #1
 8008e1c:	d022      	beq.n	8008e64 <__cvt+0xac>
 8008e1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e22:	eb07 0906 	add.w	r9, r7, r6
 8008e26:	d110      	bne.n	8008e4a <__cvt+0x92>
 8008e28:	783b      	ldrb	r3, [r7, #0]
 8008e2a:	2b30      	cmp	r3, #48	; 0x30
 8008e2c:	d10a      	bne.n	8008e44 <__cvt+0x8c>
 8008e2e:	2200      	movs	r2, #0
 8008e30:	2300      	movs	r3, #0
 8008e32:	4620      	mov	r0, r4
 8008e34:	4629      	mov	r1, r5
 8008e36:	f7f7 fe47 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e3a:	b918      	cbnz	r0, 8008e44 <__cvt+0x8c>
 8008e3c:	f1c6 0601 	rsb	r6, r6, #1
 8008e40:	f8ca 6000 	str.w	r6, [sl]
 8008e44:	f8da 3000 	ldr.w	r3, [sl]
 8008e48:	4499      	add	r9, r3
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	4620      	mov	r0, r4
 8008e50:	4629      	mov	r1, r5
 8008e52:	f7f7 fe39 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e56:	b108      	cbz	r0, 8008e5c <__cvt+0xa4>
 8008e58:	f8cd 900c 	str.w	r9, [sp, #12]
 8008e5c:	2230      	movs	r2, #48	; 0x30
 8008e5e:	9b03      	ldr	r3, [sp, #12]
 8008e60:	454b      	cmp	r3, r9
 8008e62:	d307      	bcc.n	8008e74 <__cvt+0xbc>
 8008e64:	9b03      	ldr	r3, [sp, #12]
 8008e66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e68:	1bdb      	subs	r3, r3, r7
 8008e6a:	4638      	mov	r0, r7
 8008e6c:	6013      	str	r3, [r2, #0]
 8008e6e:	b004      	add	sp, #16
 8008e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e74:	1c59      	adds	r1, r3, #1
 8008e76:	9103      	str	r1, [sp, #12]
 8008e78:	701a      	strb	r2, [r3, #0]
 8008e7a:	e7f0      	b.n	8008e5e <__cvt+0xa6>

08008e7c <__exponent>:
 8008e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2900      	cmp	r1, #0
 8008e82:	bfb8      	it	lt
 8008e84:	4249      	neglt	r1, r1
 8008e86:	f803 2b02 	strb.w	r2, [r3], #2
 8008e8a:	bfb4      	ite	lt
 8008e8c:	222d      	movlt	r2, #45	; 0x2d
 8008e8e:	222b      	movge	r2, #43	; 0x2b
 8008e90:	2909      	cmp	r1, #9
 8008e92:	7042      	strb	r2, [r0, #1]
 8008e94:	dd2a      	ble.n	8008eec <__exponent+0x70>
 8008e96:	f10d 0407 	add.w	r4, sp, #7
 8008e9a:	46a4      	mov	ip, r4
 8008e9c:	270a      	movs	r7, #10
 8008e9e:	46a6      	mov	lr, r4
 8008ea0:	460a      	mov	r2, r1
 8008ea2:	fb91 f6f7 	sdiv	r6, r1, r7
 8008ea6:	fb07 1516 	mls	r5, r7, r6, r1
 8008eaa:	3530      	adds	r5, #48	; 0x30
 8008eac:	2a63      	cmp	r2, #99	; 0x63
 8008eae:	f104 34ff 	add.w	r4, r4, #4294967295
 8008eb2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008eb6:	4631      	mov	r1, r6
 8008eb8:	dcf1      	bgt.n	8008e9e <__exponent+0x22>
 8008eba:	3130      	adds	r1, #48	; 0x30
 8008ebc:	f1ae 0502 	sub.w	r5, lr, #2
 8008ec0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008ec4:	1c44      	adds	r4, r0, #1
 8008ec6:	4629      	mov	r1, r5
 8008ec8:	4561      	cmp	r1, ip
 8008eca:	d30a      	bcc.n	8008ee2 <__exponent+0x66>
 8008ecc:	f10d 0209 	add.w	r2, sp, #9
 8008ed0:	eba2 020e 	sub.w	r2, r2, lr
 8008ed4:	4565      	cmp	r5, ip
 8008ed6:	bf88      	it	hi
 8008ed8:	2200      	movhi	r2, #0
 8008eda:	4413      	add	r3, r2
 8008edc:	1a18      	subs	r0, r3, r0
 8008ede:	b003      	add	sp, #12
 8008ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ee2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ee6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008eea:	e7ed      	b.n	8008ec8 <__exponent+0x4c>
 8008eec:	2330      	movs	r3, #48	; 0x30
 8008eee:	3130      	adds	r1, #48	; 0x30
 8008ef0:	7083      	strb	r3, [r0, #2]
 8008ef2:	70c1      	strb	r1, [r0, #3]
 8008ef4:	1d03      	adds	r3, r0, #4
 8008ef6:	e7f1      	b.n	8008edc <__exponent+0x60>

08008ef8 <_printf_float>:
 8008ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efc:	ed2d 8b02 	vpush	{d8}
 8008f00:	b08d      	sub	sp, #52	; 0x34
 8008f02:	460c      	mov	r4, r1
 8008f04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008f08:	4616      	mov	r6, r2
 8008f0a:	461f      	mov	r7, r3
 8008f0c:	4605      	mov	r5, r0
 8008f0e:	f002 ff9b 	bl	800be48 <_localeconv_r>
 8008f12:	f8d0 a000 	ldr.w	sl, [r0]
 8008f16:	4650      	mov	r0, sl
 8008f18:	f7f7 f95a 	bl	80001d0 <strlen>
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f20:	6823      	ldr	r3, [r4, #0]
 8008f22:	9305      	str	r3, [sp, #20]
 8008f24:	f8d8 3000 	ldr.w	r3, [r8]
 8008f28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008f2c:	3307      	adds	r3, #7
 8008f2e:	f023 0307 	bic.w	r3, r3, #7
 8008f32:	f103 0208 	add.w	r2, r3, #8
 8008f36:	f8c8 2000 	str.w	r2, [r8]
 8008f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008f42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008f46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f4a:	9307      	str	r3, [sp, #28]
 8008f4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008f50:	ee08 0a10 	vmov	s16, r0
 8008f54:	4b9f      	ldr	r3, [pc, #636]	; (80091d4 <_printf_float+0x2dc>)
 8008f56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f5e:	f7f7 fde5 	bl	8000b2c <__aeabi_dcmpun>
 8008f62:	bb88      	cbnz	r0, 8008fc8 <_printf_float+0xd0>
 8008f64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f68:	4b9a      	ldr	r3, [pc, #616]	; (80091d4 <_printf_float+0x2dc>)
 8008f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f6e:	f7f7 fdbf 	bl	8000af0 <__aeabi_dcmple>
 8008f72:	bb48      	cbnz	r0, 8008fc8 <_printf_float+0xd0>
 8008f74:	2200      	movs	r2, #0
 8008f76:	2300      	movs	r3, #0
 8008f78:	4640      	mov	r0, r8
 8008f7a:	4649      	mov	r1, r9
 8008f7c:	f7f7 fdae 	bl	8000adc <__aeabi_dcmplt>
 8008f80:	b110      	cbz	r0, 8008f88 <_printf_float+0x90>
 8008f82:	232d      	movs	r3, #45	; 0x2d
 8008f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f88:	4b93      	ldr	r3, [pc, #588]	; (80091d8 <_printf_float+0x2e0>)
 8008f8a:	4894      	ldr	r0, [pc, #592]	; (80091dc <_printf_float+0x2e4>)
 8008f8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008f90:	bf94      	ite	ls
 8008f92:	4698      	movls	r8, r3
 8008f94:	4680      	movhi	r8, r0
 8008f96:	2303      	movs	r3, #3
 8008f98:	6123      	str	r3, [r4, #16]
 8008f9a:	9b05      	ldr	r3, [sp, #20]
 8008f9c:	f023 0204 	bic.w	r2, r3, #4
 8008fa0:	6022      	str	r2, [r4, #0]
 8008fa2:	f04f 0900 	mov.w	r9, #0
 8008fa6:	9700      	str	r7, [sp, #0]
 8008fa8:	4633      	mov	r3, r6
 8008faa:	aa0b      	add	r2, sp, #44	; 0x2c
 8008fac:	4621      	mov	r1, r4
 8008fae:	4628      	mov	r0, r5
 8008fb0:	f000 f9d8 	bl	8009364 <_printf_common>
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	f040 8090 	bne.w	80090da <_printf_float+0x1e2>
 8008fba:	f04f 30ff 	mov.w	r0, #4294967295
 8008fbe:	b00d      	add	sp, #52	; 0x34
 8008fc0:	ecbd 8b02 	vpop	{d8}
 8008fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc8:	4642      	mov	r2, r8
 8008fca:	464b      	mov	r3, r9
 8008fcc:	4640      	mov	r0, r8
 8008fce:	4649      	mov	r1, r9
 8008fd0:	f7f7 fdac 	bl	8000b2c <__aeabi_dcmpun>
 8008fd4:	b140      	cbz	r0, 8008fe8 <_printf_float+0xf0>
 8008fd6:	464b      	mov	r3, r9
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	bfbc      	itt	lt
 8008fdc:	232d      	movlt	r3, #45	; 0x2d
 8008fde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008fe2:	487f      	ldr	r0, [pc, #508]	; (80091e0 <_printf_float+0x2e8>)
 8008fe4:	4b7f      	ldr	r3, [pc, #508]	; (80091e4 <_printf_float+0x2ec>)
 8008fe6:	e7d1      	b.n	8008f8c <_printf_float+0x94>
 8008fe8:	6863      	ldr	r3, [r4, #4]
 8008fea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008fee:	9206      	str	r2, [sp, #24]
 8008ff0:	1c5a      	adds	r2, r3, #1
 8008ff2:	d13f      	bne.n	8009074 <_printf_float+0x17c>
 8008ff4:	2306      	movs	r3, #6
 8008ff6:	6063      	str	r3, [r4, #4]
 8008ff8:	9b05      	ldr	r3, [sp, #20]
 8008ffa:	6861      	ldr	r1, [r4, #4]
 8008ffc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009000:	2300      	movs	r3, #0
 8009002:	9303      	str	r3, [sp, #12]
 8009004:	ab0a      	add	r3, sp, #40	; 0x28
 8009006:	e9cd b301 	strd	fp, r3, [sp, #4]
 800900a:	ab09      	add	r3, sp, #36	; 0x24
 800900c:	ec49 8b10 	vmov	d0, r8, r9
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	6022      	str	r2, [r4, #0]
 8009014:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009018:	4628      	mov	r0, r5
 800901a:	f7ff fecd 	bl	8008db8 <__cvt>
 800901e:	9b06      	ldr	r3, [sp, #24]
 8009020:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009022:	2b47      	cmp	r3, #71	; 0x47
 8009024:	4680      	mov	r8, r0
 8009026:	d108      	bne.n	800903a <_printf_float+0x142>
 8009028:	1cc8      	adds	r0, r1, #3
 800902a:	db02      	blt.n	8009032 <_printf_float+0x13a>
 800902c:	6863      	ldr	r3, [r4, #4]
 800902e:	4299      	cmp	r1, r3
 8009030:	dd41      	ble.n	80090b6 <_printf_float+0x1be>
 8009032:	f1ab 0b02 	sub.w	fp, fp, #2
 8009036:	fa5f fb8b 	uxtb.w	fp, fp
 800903a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800903e:	d820      	bhi.n	8009082 <_printf_float+0x18a>
 8009040:	3901      	subs	r1, #1
 8009042:	465a      	mov	r2, fp
 8009044:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009048:	9109      	str	r1, [sp, #36]	; 0x24
 800904a:	f7ff ff17 	bl	8008e7c <__exponent>
 800904e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009050:	1813      	adds	r3, r2, r0
 8009052:	2a01      	cmp	r2, #1
 8009054:	4681      	mov	r9, r0
 8009056:	6123      	str	r3, [r4, #16]
 8009058:	dc02      	bgt.n	8009060 <_printf_float+0x168>
 800905a:	6822      	ldr	r2, [r4, #0]
 800905c:	07d2      	lsls	r2, r2, #31
 800905e:	d501      	bpl.n	8009064 <_printf_float+0x16c>
 8009060:	3301      	adds	r3, #1
 8009062:	6123      	str	r3, [r4, #16]
 8009064:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009068:	2b00      	cmp	r3, #0
 800906a:	d09c      	beq.n	8008fa6 <_printf_float+0xae>
 800906c:	232d      	movs	r3, #45	; 0x2d
 800906e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009072:	e798      	b.n	8008fa6 <_printf_float+0xae>
 8009074:	9a06      	ldr	r2, [sp, #24]
 8009076:	2a47      	cmp	r2, #71	; 0x47
 8009078:	d1be      	bne.n	8008ff8 <_printf_float+0x100>
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1bc      	bne.n	8008ff8 <_printf_float+0x100>
 800907e:	2301      	movs	r3, #1
 8009080:	e7b9      	b.n	8008ff6 <_printf_float+0xfe>
 8009082:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009086:	d118      	bne.n	80090ba <_printf_float+0x1c2>
 8009088:	2900      	cmp	r1, #0
 800908a:	6863      	ldr	r3, [r4, #4]
 800908c:	dd0b      	ble.n	80090a6 <_printf_float+0x1ae>
 800908e:	6121      	str	r1, [r4, #16]
 8009090:	b913      	cbnz	r3, 8009098 <_printf_float+0x1a0>
 8009092:	6822      	ldr	r2, [r4, #0]
 8009094:	07d0      	lsls	r0, r2, #31
 8009096:	d502      	bpl.n	800909e <_printf_float+0x1a6>
 8009098:	3301      	adds	r3, #1
 800909a:	440b      	add	r3, r1
 800909c:	6123      	str	r3, [r4, #16]
 800909e:	65a1      	str	r1, [r4, #88]	; 0x58
 80090a0:	f04f 0900 	mov.w	r9, #0
 80090a4:	e7de      	b.n	8009064 <_printf_float+0x16c>
 80090a6:	b913      	cbnz	r3, 80090ae <_printf_float+0x1b6>
 80090a8:	6822      	ldr	r2, [r4, #0]
 80090aa:	07d2      	lsls	r2, r2, #31
 80090ac:	d501      	bpl.n	80090b2 <_printf_float+0x1ba>
 80090ae:	3302      	adds	r3, #2
 80090b0:	e7f4      	b.n	800909c <_printf_float+0x1a4>
 80090b2:	2301      	movs	r3, #1
 80090b4:	e7f2      	b.n	800909c <_printf_float+0x1a4>
 80090b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80090ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090bc:	4299      	cmp	r1, r3
 80090be:	db05      	blt.n	80090cc <_printf_float+0x1d4>
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	6121      	str	r1, [r4, #16]
 80090c4:	07d8      	lsls	r0, r3, #31
 80090c6:	d5ea      	bpl.n	800909e <_printf_float+0x1a6>
 80090c8:	1c4b      	adds	r3, r1, #1
 80090ca:	e7e7      	b.n	800909c <_printf_float+0x1a4>
 80090cc:	2900      	cmp	r1, #0
 80090ce:	bfd4      	ite	le
 80090d0:	f1c1 0202 	rsble	r2, r1, #2
 80090d4:	2201      	movgt	r2, #1
 80090d6:	4413      	add	r3, r2
 80090d8:	e7e0      	b.n	800909c <_printf_float+0x1a4>
 80090da:	6823      	ldr	r3, [r4, #0]
 80090dc:	055a      	lsls	r2, r3, #21
 80090de:	d407      	bmi.n	80090f0 <_printf_float+0x1f8>
 80090e0:	6923      	ldr	r3, [r4, #16]
 80090e2:	4642      	mov	r2, r8
 80090e4:	4631      	mov	r1, r6
 80090e6:	4628      	mov	r0, r5
 80090e8:	47b8      	blx	r7
 80090ea:	3001      	adds	r0, #1
 80090ec:	d12c      	bne.n	8009148 <_printf_float+0x250>
 80090ee:	e764      	b.n	8008fba <_printf_float+0xc2>
 80090f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80090f4:	f240 80e0 	bls.w	80092b8 <_printf_float+0x3c0>
 80090f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090fc:	2200      	movs	r2, #0
 80090fe:	2300      	movs	r3, #0
 8009100:	f7f7 fce2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009104:	2800      	cmp	r0, #0
 8009106:	d034      	beq.n	8009172 <_printf_float+0x27a>
 8009108:	4a37      	ldr	r2, [pc, #220]	; (80091e8 <_printf_float+0x2f0>)
 800910a:	2301      	movs	r3, #1
 800910c:	4631      	mov	r1, r6
 800910e:	4628      	mov	r0, r5
 8009110:	47b8      	blx	r7
 8009112:	3001      	adds	r0, #1
 8009114:	f43f af51 	beq.w	8008fba <_printf_float+0xc2>
 8009118:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800911c:	429a      	cmp	r2, r3
 800911e:	db02      	blt.n	8009126 <_printf_float+0x22e>
 8009120:	6823      	ldr	r3, [r4, #0]
 8009122:	07d8      	lsls	r0, r3, #31
 8009124:	d510      	bpl.n	8009148 <_printf_float+0x250>
 8009126:	ee18 3a10 	vmov	r3, s16
 800912a:	4652      	mov	r2, sl
 800912c:	4631      	mov	r1, r6
 800912e:	4628      	mov	r0, r5
 8009130:	47b8      	blx	r7
 8009132:	3001      	adds	r0, #1
 8009134:	f43f af41 	beq.w	8008fba <_printf_float+0xc2>
 8009138:	f04f 0800 	mov.w	r8, #0
 800913c:	f104 091a 	add.w	r9, r4, #26
 8009140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009142:	3b01      	subs	r3, #1
 8009144:	4543      	cmp	r3, r8
 8009146:	dc09      	bgt.n	800915c <_printf_float+0x264>
 8009148:	6823      	ldr	r3, [r4, #0]
 800914a:	079b      	lsls	r3, r3, #30
 800914c:	f100 8105 	bmi.w	800935a <_printf_float+0x462>
 8009150:	68e0      	ldr	r0, [r4, #12]
 8009152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009154:	4298      	cmp	r0, r3
 8009156:	bfb8      	it	lt
 8009158:	4618      	movlt	r0, r3
 800915a:	e730      	b.n	8008fbe <_printf_float+0xc6>
 800915c:	2301      	movs	r3, #1
 800915e:	464a      	mov	r2, r9
 8009160:	4631      	mov	r1, r6
 8009162:	4628      	mov	r0, r5
 8009164:	47b8      	blx	r7
 8009166:	3001      	adds	r0, #1
 8009168:	f43f af27 	beq.w	8008fba <_printf_float+0xc2>
 800916c:	f108 0801 	add.w	r8, r8, #1
 8009170:	e7e6      	b.n	8009140 <_printf_float+0x248>
 8009172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009174:	2b00      	cmp	r3, #0
 8009176:	dc39      	bgt.n	80091ec <_printf_float+0x2f4>
 8009178:	4a1b      	ldr	r2, [pc, #108]	; (80091e8 <_printf_float+0x2f0>)
 800917a:	2301      	movs	r3, #1
 800917c:	4631      	mov	r1, r6
 800917e:	4628      	mov	r0, r5
 8009180:	47b8      	blx	r7
 8009182:	3001      	adds	r0, #1
 8009184:	f43f af19 	beq.w	8008fba <_printf_float+0xc2>
 8009188:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800918c:	4313      	orrs	r3, r2
 800918e:	d102      	bne.n	8009196 <_printf_float+0x29e>
 8009190:	6823      	ldr	r3, [r4, #0]
 8009192:	07d9      	lsls	r1, r3, #31
 8009194:	d5d8      	bpl.n	8009148 <_printf_float+0x250>
 8009196:	ee18 3a10 	vmov	r3, s16
 800919a:	4652      	mov	r2, sl
 800919c:	4631      	mov	r1, r6
 800919e:	4628      	mov	r0, r5
 80091a0:	47b8      	blx	r7
 80091a2:	3001      	adds	r0, #1
 80091a4:	f43f af09 	beq.w	8008fba <_printf_float+0xc2>
 80091a8:	f04f 0900 	mov.w	r9, #0
 80091ac:	f104 0a1a 	add.w	sl, r4, #26
 80091b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091b2:	425b      	negs	r3, r3
 80091b4:	454b      	cmp	r3, r9
 80091b6:	dc01      	bgt.n	80091bc <_printf_float+0x2c4>
 80091b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ba:	e792      	b.n	80090e2 <_printf_float+0x1ea>
 80091bc:	2301      	movs	r3, #1
 80091be:	4652      	mov	r2, sl
 80091c0:	4631      	mov	r1, r6
 80091c2:	4628      	mov	r0, r5
 80091c4:	47b8      	blx	r7
 80091c6:	3001      	adds	r0, #1
 80091c8:	f43f aef7 	beq.w	8008fba <_printf_float+0xc2>
 80091cc:	f109 0901 	add.w	r9, r9, #1
 80091d0:	e7ee      	b.n	80091b0 <_printf_float+0x2b8>
 80091d2:	bf00      	nop
 80091d4:	7fefffff 	.word	0x7fefffff
 80091d8:	0800d7e4 	.word	0x0800d7e4
 80091dc:	0800d7e8 	.word	0x0800d7e8
 80091e0:	0800d7f0 	.word	0x0800d7f0
 80091e4:	0800d7ec 	.word	0x0800d7ec
 80091e8:	0800d7f4 	.word	0x0800d7f4
 80091ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80091f0:	429a      	cmp	r2, r3
 80091f2:	bfa8      	it	ge
 80091f4:	461a      	movge	r2, r3
 80091f6:	2a00      	cmp	r2, #0
 80091f8:	4691      	mov	r9, r2
 80091fa:	dc37      	bgt.n	800926c <_printf_float+0x374>
 80091fc:	f04f 0b00 	mov.w	fp, #0
 8009200:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009204:	f104 021a 	add.w	r2, r4, #26
 8009208:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800920a:	9305      	str	r3, [sp, #20]
 800920c:	eba3 0309 	sub.w	r3, r3, r9
 8009210:	455b      	cmp	r3, fp
 8009212:	dc33      	bgt.n	800927c <_printf_float+0x384>
 8009214:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009218:	429a      	cmp	r2, r3
 800921a:	db3b      	blt.n	8009294 <_printf_float+0x39c>
 800921c:	6823      	ldr	r3, [r4, #0]
 800921e:	07da      	lsls	r2, r3, #31
 8009220:	d438      	bmi.n	8009294 <_printf_float+0x39c>
 8009222:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009224:	9b05      	ldr	r3, [sp, #20]
 8009226:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	eba2 0901 	sub.w	r9, r2, r1
 800922e:	4599      	cmp	r9, r3
 8009230:	bfa8      	it	ge
 8009232:	4699      	movge	r9, r3
 8009234:	f1b9 0f00 	cmp.w	r9, #0
 8009238:	dc35      	bgt.n	80092a6 <_printf_float+0x3ae>
 800923a:	f04f 0800 	mov.w	r8, #0
 800923e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009242:	f104 0a1a 	add.w	sl, r4, #26
 8009246:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800924a:	1a9b      	subs	r3, r3, r2
 800924c:	eba3 0309 	sub.w	r3, r3, r9
 8009250:	4543      	cmp	r3, r8
 8009252:	f77f af79 	ble.w	8009148 <_printf_float+0x250>
 8009256:	2301      	movs	r3, #1
 8009258:	4652      	mov	r2, sl
 800925a:	4631      	mov	r1, r6
 800925c:	4628      	mov	r0, r5
 800925e:	47b8      	blx	r7
 8009260:	3001      	adds	r0, #1
 8009262:	f43f aeaa 	beq.w	8008fba <_printf_float+0xc2>
 8009266:	f108 0801 	add.w	r8, r8, #1
 800926a:	e7ec      	b.n	8009246 <_printf_float+0x34e>
 800926c:	4613      	mov	r3, r2
 800926e:	4631      	mov	r1, r6
 8009270:	4642      	mov	r2, r8
 8009272:	4628      	mov	r0, r5
 8009274:	47b8      	blx	r7
 8009276:	3001      	adds	r0, #1
 8009278:	d1c0      	bne.n	80091fc <_printf_float+0x304>
 800927a:	e69e      	b.n	8008fba <_printf_float+0xc2>
 800927c:	2301      	movs	r3, #1
 800927e:	4631      	mov	r1, r6
 8009280:	4628      	mov	r0, r5
 8009282:	9205      	str	r2, [sp, #20]
 8009284:	47b8      	blx	r7
 8009286:	3001      	adds	r0, #1
 8009288:	f43f ae97 	beq.w	8008fba <_printf_float+0xc2>
 800928c:	9a05      	ldr	r2, [sp, #20]
 800928e:	f10b 0b01 	add.w	fp, fp, #1
 8009292:	e7b9      	b.n	8009208 <_printf_float+0x310>
 8009294:	ee18 3a10 	vmov	r3, s16
 8009298:	4652      	mov	r2, sl
 800929a:	4631      	mov	r1, r6
 800929c:	4628      	mov	r0, r5
 800929e:	47b8      	blx	r7
 80092a0:	3001      	adds	r0, #1
 80092a2:	d1be      	bne.n	8009222 <_printf_float+0x32a>
 80092a4:	e689      	b.n	8008fba <_printf_float+0xc2>
 80092a6:	9a05      	ldr	r2, [sp, #20]
 80092a8:	464b      	mov	r3, r9
 80092aa:	4442      	add	r2, r8
 80092ac:	4631      	mov	r1, r6
 80092ae:	4628      	mov	r0, r5
 80092b0:	47b8      	blx	r7
 80092b2:	3001      	adds	r0, #1
 80092b4:	d1c1      	bne.n	800923a <_printf_float+0x342>
 80092b6:	e680      	b.n	8008fba <_printf_float+0xc2>
 80092b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092ba:	2a01      	cmp	r2, #1
 80092bc:	dc01      	bgt.n	80092c2 <_printf_float+0x3ca>
 80092be:	07db      	lsls	r3, r3, #31
 80092c0:	d538      	bpl.n	8009334 <_printf_float+0x43c>
 80092c2:	2301      	movs	r3, #1
 80092c4:	4642      	mov	r2, r8
 80092c6:	4631      	mov	r1, r6
 80092c8:	4628      	mov	r0, r5
 80092ca:	47b8      	blx	r7
 80092cc:	3001      	adds	r0, #1
 80092ce:	f43f ae74 	beq.w	8008fba <_printf_float+0xc2>
 80092d2:	ee18 3a10 	vmov	r3, s16
 80092d6:	4652      	mov	r2, sl
 80092d8:	4631      	mov	r1, r6
 80092da:	4628      	mov	r0, r5
 80092dc:	47b8      	blx	r7
 80092de:	3001      	adds	r0, #1
 80092e0:	f43f ae6b 	beq.w	8008fba <_printf_float+0xc2>
 80092e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092e8:	2200      	movs	r2, #0
 80092ea:	2300      	movs	r3, #0
 80092ec:	f7f7 fbec 	bl	8000ac8 <__aeabi_dcmpeq>
 80092f0:	b9d8      	cbnz	r0, 800932a <_printf_float+0x432>
 80092f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092f4:	f108 0201 	add.w	r2, r8, #1
 80092f8:	3b01      	subs	r3, #1
 80092fa:	4631      	mov	r1, r6
 80092fc:	4628      	mov	r0, r5
 80092fe:	47b8      	blx	r7
 8009300:	3001      	adds	r0, #1
 8009302:	d10e      	bne.n	8009322 <_printf_float+0x42a>
 8009304:	e659      	b.n	8008fba <_printf_float+0xc2>
 8009306:	2301      	movs	r3, #1
 8009308:	4652      	mov	r2, sl
 800930a:	4631      	mov	r1, r6
 800930c:	4628      	mov	r0, r5
 800930e:	47b8      	blx	r7
 8009310:	3001      	adds	r0, #1
 8009312:	f43f ae52 	beq.w	8008fba <_printf_float+0xc2>
 8009316:	f108 0801 	add.w	r8, r8, #1
 800931a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800931c:	3b01      	subs	r3, #1
 800931e:	4543      	cmp	r3, r8
 8009320:	dcf1      	bgt.n	8009306 <_printf_float+0x40e>
 8009322:	464b      	mov	r3, r9
 8009324:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009328:	e6dc      	b.n	80090e4 <_printf_float+0x1ec>
 800932a:	f04f 0800 	mov.w	r8, #0
 800932e:	f104 0a1a 	add.w	sl, r4, #26
 8009332:	e7f2      	b.n	800931a <_printf_float+0x422>
 8009334:	2301      	movs	r3, #1
 8009336:	4642      	mov	r2, r8
 8009338:	e7df      	b.n	80092fa <_printf_float+0x402>
 800933a:	2301      	movs	r3, #1
 800933c:	464a      	mov	r2, r9
 800933e:	4631      	mov	r1, r6
 8009340:	4628      	mov	r0, r5
 8009342:	47b8      	blx	r7
 8009344:	3001      	adds	r0, #1
 8009346:	f43f ae38 	beq.w	8008fba <_printf_float+0xc2>
 800934a:	f108 0801 	add.w	r8, r8, #1
 800934e:	68e3      	ldr	r3, [r4, #12]
 8009350:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009352:	1a5b      	subs	r3, r3, r1
 8009354:	4543      	cmp	r3, r8
 8009356:	dcf0      	bgt.n	800933a <_printf_float+0x442>
 8009358:	e6fa      	b.n	8009150 <_printf_float+0x258>
 800935a:	f04f 0800 	mov.w	r8, #0
 800935e:	f104 0919 	add.w	r9, r4, #25
 8009362:	e7f4      	b.n	800934e <_printf_float+0x456>

08009364 <_printf_common>:
 8009364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009368:	4616      	mov	r6, r2
 800936a:	4699      	mov	r9, r3
 800936c:	688a      	ldr	r2, [r1, #8]
 800936e:	690b      	ldr	r3, [r1, #16]
 8009370:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009374:	4293      	cmp	r3, r2
 8009376:	bfb8      	it	lt
 8009378:	4613      	movlt	r3, r2
 800937a:	6033      	str	r3, [r6, #0]
 800937c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009380:	4607      	mov	r7, r0
 8009382:	460c      	mov	r4, r1
 8009384:	b10a      	cbz	r2, 800938a <_printf_common+0x26>
 8009386:	3301      	adds	r3, #1
 8009388:	6033      	str	r3, [r6, #0]
 800938a:	6823      	ldr	r3, [r4, #0]
 800938c:	0699      	lsls	r1, r3, #26
 800938e:	bf42      	ittt	mi
 8009390:	6833      	ldrmi	r3, [r6, #0]
 8009392:	3302      	addmi	r3, #2
 8009394:	6033      	strmi	r3, [r6, #0]
 8009396:	6825      	ldr	r5, [r4, #0]
 8009398:	f015 0506 	ands.w	r5, r5, #6
 800939c:	d106      	bne.n	80093ac <_printf_common+0x48>
 800939e:	f104 0a19 	add.w	sl, r4, #25
 80093a2:	68e3      	ldr	r3, [r4, #12]
 80093a4:	6832      	ldr	r2, [r6, #0]
 80093a6:	1a9b      	subs	r3, r3, r2
 80093a8:	42ab      	cmp	r3, r5
 80093aa:	dc26      	bgt.n	80093fa <_printf_common+0x96>
 80093ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093b0:	1e13      	subs	r3, r2, #0
 80093b2:	6822      	ldr	r2, [r4, #0]
 80093b4:	bf18      	it	ne
 80093b6:	2301      	movne	r3, #1
 80093b8:	0692      	lsls	r2, r2, #26
 80093ba:	d42b      	bmi.n	8009414 <_printf_common+0xb0>
 80093bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093c0:	4649      	mov	r1, r9
 80093c2:	4638      	mov	r0, r7
 80093c4:	47c0      	blx	r8
 80093c6:	3001      	adds	r0, #1
 80093c8:	d01e      	beq.n	8009408 <_printf_common+0xa4>
 80093ca:	6823      	ldr	r3, [r4, #0]
 80093cc:	68e5      	ldr	r5, [r4, #12]
 80093ce:	6832      	ldr	r2, [r6, #0]
 80093d0:	f003 0306 	and.w	r3, r3, #6
 80093d4:	2b04      	cmp	r3, #4
 80093d6:	bf08      	it	eq
 80093d8:	1aad      	subeq	r5, r5, r2
 80093da:	68a3      	ldr	r3, [r4, #8]
 80093dc:	6922      	ldr	r2, [r4, #16]
 80093de:	bf0c      	ite	eq
 80093e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093e4:	2500      	movne	r5, #0
 80093e6:	4293      	cmp	r3, r2
 80093e8:	bfc4      	itt	gt
 80093ea:	1a9b      	subgt	r3, r3, r2
 80093ec:	18ed      	addgt	r5, r5, r3
 80093ee:	2600      	movs	r6, #0
 80093f0:	341a      	adds	r4, #26
 80093f2:	42b5      	cmp	r5, r6
 80093f4:	d11a      	bne.n	800942c <_printf_common+0xc8>
 80093f6:	2000      	movs	r0, #0
 80093f8:	e008      	b.n	800940c <_printf_common+0xa8>
 80093fa:	2301      	movs	r3, #1
 80093fc:	4652      	mov	r2, sl
 80093fe:	4649      	mov	r1, r9
 8009400:	4638      	mov	r0, r7
 8009402:	47c0      	blx	r8
 8009404:	3001      	adds	r0, #1
 8009406:	d103      	bne.n	8009410 <_printf_common+0xac>
 8009408:	f04f 30ff 	mov.w	r0, #4294967295
 800940c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009410:	3501      	adds	r5, #1
 8009412:	e7c6      	b.n	80093a2 <_printf_common+0x3e>
 8009414:	18e1      	adds	r1, r4, r3
 8009416:	1c5a      	adds	r2, r3, #1
 8009418:	2030      	movs	r0, #48	; 0x30
 800941a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800941e:	4422      	add	r2, r4
 8009420:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009424:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009428:	3302      	adds	r3, #2
 800942a:	e7c7      	b.n	80093bc <_printf_common+0x58>
 800942c:	2301      	movs	r3, #1
 800942e:	4622      	mov	r2, r4
 8009430:	4649      	mov	r1, r9
 8009432:	4638      	mov	r0, r7
 8009434:	47c0      	blx	r8
 8009436:	3001      	adds	r0, #1
 8009438:	d0e6      	beq.n	8009408 <_printf_common+0xa4>
 800943a:	3601      	adds	r6, #1
 800943c:	e7d9      	b.n	80093f2 <_printf_common+0x8e>
	...

08009440 <_printf_i>:
 8009440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009444:	460c      	mov	r4, r1
 8009446:	4691      	mov	r9, r2
 8009448:	7e27      	ldrb	r7, [r4, #24]
 800944a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800944c:	2f78      	cmp	r7, #120	; 0x78
 800944e:	4680      	mov	r8, r0
 8009450:	469a      	mov	sl, r3
 8009452:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009456:	d807      	bhi.n	8009468 <_printf_i+0x28>
 8009458:	2f62      	cmp	r7, #98	; 0x62
 800945a:	d80a      	bhi.n	8009472 <_printf_i+0x32>
 800945c:	2f00      	cmp	r7, #0
 800945e:	f000 80d8 	beq.w	8009612 <_printf_i+0x1d2>
 8009462:	2f58      	cmp	r7, #88	; 0x58
 8009464:	f000 80a3 	beq.w	80095ae <_printf_i+0x16e>
 8009468:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800946c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009470:	e03a      	b.n	80094e8 <_printf_i+0xa8>
 8009472:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009476:	2b15      	cmp	r3, #21
 8009478:	d8f6      	bhi.n	8009468 <_printf_i+0x28>
 800947a:	a001      	add	r0, pc, #4	; (adr r0, 8009480 <_printf_i+0x40>)
 800947c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009480:	080094d9 	.word	0x080094d9
 8009484:	080094ed 	.word	0x080094ed
 8009488:	08009469 	.word	0x08009469
 800948c:	08009469 	.word	0x08009469
 8009490:	08009469 	.word	0x08009469
 8009494:	08009469 	.word	0x08009469
 8009498:	080094ed 	.word	0x080094ed
 800949c:	08009469 	.word	0x08009469
 80094a0:	08009469 	.word	0x08009469
 80094a4:	08009469 	.word	0x08009469
 80094a8:	08009469 	.word	0x08009469
 80094ac:	080095f9 	.word	0x080095f9
 80094b0:	0800951d 	.word	0x0800951d
 80094b4:	080095db 	.word	0x080095db
 80094b8:	08009469 	.word	0x08009469
 80094bc:	08009469 	.word	0x08009469
 80094c0:	0800961b 	.word	0x0800961b
 80094c4:	08009469 	.word	0x08009469
 80094c8:	0800951d 	.word	0x0800951d
 80094cc:	08009469 	.word	0x08009469
 80094d0:	08009469 	.word	0x08009469
 80094d4:	080095e3 	.word	0x080095e3
 80094d8:	680b      	ldr	r3, [r1, #0]
 80094da:	1d1a      	adds	r2, r3, #4
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	600a      	str	r2, [r1, #0]
 80094e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80094e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094e8:	2301      	movs	r3, #1
 80094ea:	e0a3      	b.n	8009634 <_printf_i+0x1f4>
 80094ec:	6825      	ldr	r5, [r4, #0]
 80094ee:	6808      	ldr	r0, [r1, #0]
 80094f0:	062e      	lsls	r6, r5, #24
 80094f2:	f100 0304 	add.w	r3, r0, #4
 80094f6:	d50a      	bpl.n	800950e <_printf_i+0xce>
 80094f8:	6805      	ldr	r5, [r0, #0]
 80094fa:	600b      	str	r3, [r1, #0]
 80094fc:	2d00      	cmp	r5, #0
 80094fe:	da03      	bge.n	8009508 <_printf_i+0xc8>
 8009500:	232d      	movs	r3, #45	; 0x2d
 8009502:	426d      	negs	r5, r5
 8009504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009508:	485e      	ldr	r0, [pc, #376]	; (8009684 <_printf_i+0x244>)
 800950a:	230a      	movs	r3, #10
 800950c:	e019      	b.n	8009542 <_printf_i+0x102>
 800950e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009512:	6805      	ldr	r5, [r0, #0]
 8009514:	600b      	str	r3, [r1, #0]
 8009516:	bf18      	it	ne
 8009518:	b22d      	sxthne	r5, r5
 800951a:	e7ef      	b.n	80094fc <_printf_i+0xbc>
 800951c:	680b      	ldr	r3, [r1, #0]
 800951e:	6825      	ldr	r5, [r4, #0]
 8009520:	1d18      	adds	r0, r3, #4
 8009522:	6008      	str	r0, [r1, #0]
 8009524:	0628      	lsls	r0, r5, #24
 8009526:	d501      	bpl.n	800952c <_printf_i+0xec>
 8009528:	681d      	ldr	r5, [r3, #0]
 800952a:	e002      	b.n	8009532 <_printf_i+0xf2>
 800952c:	0669      	lsls	r1, r5, #25
 800952e:	d5fb      	bpl.n	8009528 <_printf_i+0xe8>
 8009530:	881d      	ldrh	r5, [r3, #0]
 8009532:	4854      	ldr	r0, [pc, #336]	; (8009684 <_printf_i+0x244>)
 8009534:	2f6f      	cmp	r7, #111	; 0x6f
 8009536:	bf0c      	ite	eq
 8009538:	2308      	moveq	r3, #8
 800953a:	230a      	movne	r3, #10
 800953c:	2100      	movs	r1, #0
 800953e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009542:	6866      	ldr	r6, [r4, #4]
 8009544:	60a6      	str	r6, [r4, #8]
 8009546:	2e00      	cmp	r6, #0
 8009548:	bfa2      	ittt	ge
 800954a:	6821      	ldrge	r1, [r4, #0]
 800954c:	f021 0104 	bicge.w	r1, r1, #4
 8009550:	6021      	strge	r1, [r4, #0]
 8009552:	b90d      	cbnz	r5, 8009558 <_printf_i+0x118>
 8009554:	2e00      	cmp	r6, #0
 8009556:	d04d      	beq.n	80095f4 <_printf_i+0x1b4>
 8009558:	4616      	mov	r6, r2
 800955a:	fbb5 f1f3 	udiv	r1, r5, r3
 800955e:	fb03 5711 	mls	r7, r3, r1, r5
 8009562:	5dc7      	ldrb	r7, [r0, r7]
 8009564:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009568:	462f      	mov	r7, r5
 800956a:	42bb      	cmp	r3, r7
 800956c:	460d      	mov	r5, r1
 800956e:	d9f4      	bls.n	800955a <_printf_i+0x11a>
 8009570:	2b08      	cmp	r3, #8
 8009572:	d10b      	bne.n	800958c <_printf_i+0x14c>
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	07df      	lsls	r7, r3, #31
 8009578:	d508      	bpl.n	800958c <_printf_i+0x14c>
 800957a:	6923      	ldr	r3, [r4, #16]
 800957c:	6861      	ldr	r1, [r4, #4]
 800957e:	4299      	cmp	r1, r3
 8009580:	bfde      	ittt	le
 8009582:	2330      	movle	r3, #48	; 0x30
 8009584:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009588:	f106 36ff 	addle.w	r6, r6, #4294967295
 800958c:	1b92      	subs	r2, r2, r6
 800958e:	6122      	str	r2, [r4, #16]
 8009590:	f8cd a000 	str.w	sl, [sp]
 8009594:	464b      	mov	r3, r9
 8009596:	aa03      	add	r2, sp, #12
 8009598:	4621      	mov	r1, r4
 800959a:	4640      	mov	r0, r8
 800959c:	f7ff fee2 	bl	8009364 <_printf_common>
 80095a0:	3001      	adds	r0, #1
 80095a2:	d14c      	bne.n	800963e <_printf_i+0x1fe>
 80095a4:	f04f 30ff 	mov.w	r0, #4294967295
 80095a8:	b004      	add	sp, #16
 80095aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ae:	4835      	ldr	r0, [pc, #212]	; (8009684 <_printf_i+0x244>)
 80095b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80095b4:	6823      	ldr	r3, [r4, #0]
 80095b6:	680e      	ldr	r6, [r1, #0]
 80095b8:	061f      	lsls	r7, r3, #24
 80095ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80095be:	600e      	str	r6, [r1, #0]
 80095c0:	d514      	bpl.n	80095ec <_printf_i+0x1ac>
 80095c2:	07d9      	lsls	r1, r3, #31
 80095c4:	bf44      	itt	mi
 80095c6:	f043 0320 	orrmi.w	r3, r3, #32
 80095ca:	6023      	strmi	r3, [r4, #0]
 80095cc:	b91d      	cbnz	r5, 80095d6 <_printf_i+0x196>
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	f023 0320 	bic.w	r3, r3, #32
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	2310      	movs	r3, #16
 80095d8:	e7b0      	b.n	800953c <_printf_i+0xfc>
 80095da:	6823      	ldr	r3, [r4, #0]
 80095dc:	f043 0320 	orr.w	r3, r3, #32
 80095e0:	6023      	str	r3, [r4, #0]
 80095e2:	2378      	movs	r3, #120	; 0x78
 80095e4:	4828      	ldr	r0, [pc, #160]	; (8009688 <_printf_i+0x248>)
 80095e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095ea:	e7e3      	b.n	80095b4 <_printf_i+0x174>
 80095ec:	065e      	lsls	r6, r3, #25
 80095ee:	bf48      	it	mi
 80095f0:	b2ad      	uxthmi	r5, r5
 80095f2:	e7e6      	b.n	80095c2 <_printf_i+0x182>
 80095f4:	4616      	mov	r6, r2
 80095f6:	e7bb      	b.n	8009570 <_printf_i+0x130>
 80095f8:	680b      	ldr	r3, [r1, #0]
 80095fa:	6826      	ldr	r6, [r4, #0]
 80095fc:	6960      	ldr	r0, [r4, #20]
 80095fe:	1d1d      	adds	r5, r3, #4
 8009600:	600d      	str	r5, [r1, #0]
 8009602:	0635      	lsls	r5, r6, #24
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	d501      	bpl.n	800960c <_printf_i+0x1cc>
 8009608:	6018      	str	r0, [r3, #0]
 800960a:	e002      	b.n	8009612 <_printf_i+0x1d2>
 800960c:	0671      	lsls	r1, r6, #25
 800960e:	d5fb      	bpl.n	8009608 <_printf_i+0x1c8>
 8009610:	8018      	strh	r0, [r3, #0]
 8009612:	2300      	movs	r3, #0
 8009614:	6123      	str	r3, [r4, #16]
 8009616:	4616      	mov	r6, r2
 8009618:	e7ba      	b.n	8009590 <_printf_i+0x150>
 800961a:	680b      	ldr	r3, [r1, #0]
 800961c:	1d1a      	adds	r2, r3, #4
 800961e:	600a      	str	r2, [r1, #0]
 8009620:	681e      	ldr	r6, [r3, #0]
 8009622:	6862      	ldr	r2, [r4, #4]
 8009624:	2100      	movs	r1, #0
 8009626:	4630      	mov	r0, r6
 8009628:	f7f6 fdda 	bl	80001e0 <memchr>
 800962c:	b108      	cbz	r0, 8009632 <_printf_i+0x1f2>
 800962e:	1b80      	subs	r0, r0, r6
 8009630:	6060      	str	r0, [r4, #4]
 8009632:	6863      	ldr	r3, [r4, #4]
 8009634:	6123      	str	r3, [r4, #16]
 8009636:	2300      	movs	r3, #0
 8009638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800963c:	e7a8      	b.n	8009590 <_printf_i+0x150>
 800963e:	6923      	ldr	r3, [r4, #16]
 8009640:	4632      	mov	r2, r6
 8009642:	4649      	mov	r1, r9
 8009644:	4640      	mov	r0, r8
 8009646:	47d0      	blx	sl
 8009648:	3001      	adds	r0, #1
 800964a:	d0ab      	beq.n	80095a4 <_printf_i+0x164>
 800964c:	6823      	ldr	r3, [r4, #0]
 800964e:	079b      	lsls	r3, r3, #30
 8009650:	d413      	bmi.n	800967a <_printf_i+0x23a>
 8009652:	68e0      	ldr	r0, [r4, #12]
 8009654:	9b03      	ldr	r3, [sp, #12]
 8009656:	4298      	cmp	r0, r3
 8009658:	bfb8      	it	lt
 800965a:	4618      	movlt	r0, r3
 800965c:	e7a4      	b.n	80095a8 <_printf_i+0x168>
 800965e:	2301      	movs	r3, #1
 8009660:	4632      	mov	r2, r6
 8009662:	4649      	mov	r1, r9
 8009664:	4640      	mov	r0, r8
 8009666:	47d0      	blx	sl
 8009668:	3001      	adds	r0, #1
 800966a:	d09b      	beq.n	80095a4 <_printf_i+0x164>
 800966c:	3501      	adds	r5, #1
 800966e:	68e3      	ldr	r3, [r4, #12]
 8009670:	9903      	ldr	r1, [sp, #12]
 8009672:	1a5b      	subs	r3, r3, r1
 8009674:	42ab      	cmp	r3, r5
 8009676:	dcf2      	bgt.n	800965e <_printf_i+0x21e>
 8009678:	e7eb      	b.n	8009652 <_printf_i+0x212>
 800967a:	2500      	movs	r5, #0
 800967c:	f104 0619 	add.w	r6, r4, #25
 8009680:	e7f5      	b.n	800966e <_printf_i+0x22e>
 8009682:	bf00      	nop
 8009684:	0800d7f6 	.word	0x0800d7f6
 8009688:	0800d807 	.word	0x0800d807

0800968c <_scanf_float>:
 800968c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009690:	b087      	sub	sp, #28
 8009692:	4617      	mov	r7, r2
 8009694:	9303      	str	r3, [sp, #12]
 8009696:	688b      	ldr	r3, [r1, #8]
 8009698:	1e5a      	subs	r2, r3, #1
 800969a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800969e:	bf83      	ittte	hi
 80096a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80096a4:	195b      	addhi	r3, r3, r5
 80096a6:	9302      	strhi	r3, [sp, #8]
 80096a8:	2300      	movls	r3, #0
 80096aa:	bf86      	itte	hi
 80096ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80096b0:	608b      	strhi	r3, [r1, #8]
 80096b2:	9302      	strls	r3, [sp, #8]
 80096b4:	680b      	ldr	r3, [r1, #0]
 80096b6:	468b      	mov	fp, r1
 80096b8:	2500      	movs	r5, #0
 80096ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80096be:	f84b 3b1c 	str.w	r3, [fp], #28
 80096c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80096c6:	4680      	mov	r8, r0
 80096c8:	460c      	mov	r4, r1
 80096ca:	465e      	mov	r6, fp
 80096cc:	46aa      	mov	sl, r5
 80096ce:	46a9      	mov	r9, r5
 80096d0:	9501      	str	r5, [sp, #4]
 80096d2:	68a2      	ldr	r2, [r4, #8]
 80096d4:	b152      	cbz	r2, 80096ec <_scanf_float+0x60>
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	2b4e      	cmp	r3, #78	; 0x4e
 80096dc:	d864      	bhi.n	80097a8 <_scanf_float+0x11c>
 80096de:	2b40      	cmp	r3, #64	; 0x40
 80096e0:	d83c      	bhi.n	800975c <_scanf_float+0xd0>
 80096e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80096e6:	b2c8      	uxtb	r0, r1
 80096e8:	280e      	cmp	r0, #14
 80096ea:	d93a      	bls.n	8009762 <_scanf_float+0xd6>
 80096ec:	f1b9 0f00 	cmp.w	r9, #0
 80096f0:	d003      	beq.n	80096fa <_scanf_float+0x6e>
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096f8:	6023      	str	r3, [r4, #0]
 80096fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096fe:	f1ba 0f01 	cmp.w	sl, #1
 8009702:	f200 8113 	bhi.w	800992c <_scanf_float+0x2a0>
 8009706:	455e      	cmp	r6, fp
 8009708:	f200 8105 	bhi.w	8009916 <_scanf_float+0x28a>
 800970c:	2501      	movs	r5, #1
 800970e:	4628      	mov	r0, r5
 8009710:	b007      	add	sp, #28
 8009712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009716:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800971a:	2a0d      	cmp	r2, #13
 800971c:	d8e6      	bhi.n	80096ec <_scanf_float+0x60>
 800971e:	a101      	add	r1, pc, #4	; (adr r1, 8009724 <_scanf_float+0x98>)
 8009720:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009724:	08009863 	.word	0x08009863
 8009728:	080096ed 	.word	0x080096ed
 800972c:	080096ed 	.word	0x080096ed
 8009730:	080096ed 	.word	0x080096ed
 8009734:	080098c3 	.word	0x080098c3
 8009738:	0800989b 	.word	0x0800989b
 800973c:	080096ed 	.word	0x080096ed
 8009740:	080096ed 	.word	0x080096ed
 8009744:	08009871 	.word	0x08009871
 8009748:	080096ed 	.word	0x080096ed
 800974c:	080096ed 	.word	0x080096ed
 8009750:	080096ed 	.word	0x080096ed
 8009754:	080096ed 	.word	0x080096ed
 8009758:	08009829 	.word	0x08009829
 800975c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009760:	e7db      	b.n	800971a <_scanf_float+0x8e>
 8009762:	290e      	cmp	r1, #14
 8009764:	d8c2      	bhi.n	80096ec <_scanf_float+0x60>
 8009766:	a001      	add	r0, pc, #4	; (adr r0, 800976c <_scanf_float+0xe0>)
 8009768:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800976c:	0800981b 	.word	0x0800981b
 8009770:	080096ed 	.word	0x080096ed
 8009774:	0800981b 	.word	0x0800981b
 8009778:	080098af 	.word	0x080098af
 800977c:	080096ed 	.word	0x080096ed
 8009780:	080097c9 	.word	0x080097c9
 8009784:	08009805 	.word	0x08009805
 8009788:	08009805 	.word	0x08009805
 800978c:	08009805 	.word	0x08009805
 8009790:	08009805 	.word	0x08009805
 8009794:	08009805 	.word	0x08009805
 8009798:	08009805 	.word	0x08009805
 800979c:	08009805 	.word	0x08009805
 80097a0:	08009805 	.word	0x08009805
 80097a4:	08009805 	.word	0x08009805
 80097a8:	2b6e      	cmp	r3, #110	; 0x6e
 80097aa:	d809      	bhi.n	80097c0 <_scanf_float+0x134>
 80097ac:	2b60      	cmp	r3, #96	; 0x60
 80097ae:	d8b2      	bhi.n	8009716 <_scanf_float+0x8a>
 80097b0:	2b54      	cmp	r3, #84	; 0x54
 80097b2:	d077      	beq.n	80098a4 <_scanf_float+0x218>
 80097b4:	2b59      	cmp	r3, #89	; 0x59
 80097b6:	d199      	bne.n	80096ec <_scanf_float+0x60>
 80097b8:	2d07      	cmp	r5, #7
 80097ba:	d197      	bne.n	80096ec <_scanf_float+0x60>
 80097bc:	2508      	movs	r5, #8
 80097be:	e029      	b.n	8009814 <_scanf_float+0x188>
 80097c0:	2b74      	cmp	r3, #116	; 0x74
 80097c2:	d06f      	beq.n	80098a4 <_scanf_float+0x218>
 80097c4:	2b79      	cmp	r3, #121	; 0x79
 80097c6:	e7f6      	b.n	80097b6 <_scanf_float+0x12a>
 80097c8:	6821      	ldr	r1, [r4, #0]
 80097ca:	05c8      	lsls	r0, r1, #23
 80097cc:	d51a      	bpl.n	8009804 <_scanf_float+0x178>
 80097ce:	9b02      	ldr	r3, [sp, #8]
 80097d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80097d4:	6021      	str	r1, [r4, #0]
 80097d6:	f109 0901 	add.w	r9, r9, #1
 80097da:	b11b      	cbz	r3, 80097e4 <_scanf_float+0x158>
 80097dc:	3b01      	subs	r3, #1
 80097de:	3201      	adds	r2, #1
 80097e0:	9302      	str	r3, [sp, #8]
 80097e2:	60a2      	str	r2, [r4, #8]
 80097e4:	68a3      	ldr	r3, [r4, #8]
 80097e6:	3b01      	subs	r3, #1
 80097e8:	60a3      	str	r3, [r4, #8]
 80097ea:	6923      	ldr	r3, [r4, #16]
 80097ec:	3301      	adds	r3, #1
 80097ee:	6123      	str	r3, [r4, #16]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	3b01      	subs	r3, #1
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	607b      	str	r3, [r7, #4]
 80097f8:	f340 8084 	ble.w	8009904 <_scanf_float+0x278>
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	3301      	adds	r3, #1
 8009800:	603b      	str	r3, [r7, #0]
 8009802:	e766      	b.n	80096d2 <_scanf_float+0x46>
 8009804:	eb1a 0f05 	cmn.w	sl, r5
 8009808:	f47f af70 	bne.w	80096ec <_scanf_float+0x60>
 800980c:	6822      	ldr	r2, [r4, #0]
 800980e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009812:	6022      	str	r2, [r4, #0]
 8009814:	f806 3b01 	strb.w	r3, [r6], #1
 8009818:	e7e4      	b.n	80097e4 <_scanf_float+0x158>
 800981a:	6822      	ldr	r2, [r4, #0]
 800981c:	0610      	lsls	r0, r2, #24
 800981e:	f57f af65 	bpl.w	80096ec <_scanf_float+0x60>
 8009822:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009826:	e7f4      	b.n	8009812 <_scanf_float+0x186>
 8009828:	f1ba 0f00 	cmp.w	sl, #0
 800982c:	d10e      	bne.n	800984c <_scanf_float+0x1c0>
 800982e:	f1b9 0f00 	cmp.w	r9, #0
 8009832:	d10e      	bne.n	8009852 <_scanf_float+0x1c6>
 8009834:	6822      	ldr	r2, [r4, #0]
 8009836:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800983a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800983e:	d108      	bne.n	8009852 <_scanf_float+0x1c6>
 8009840:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009844:	6022      	str	r2, [r4, #0]
 8009846:	f04f 0a01 	mov.w	sl, #1
 800984a:	e7e3      	b.n	8009814 <_scanf_float+0x188>
 800984c:	f1ba 0f02 	cmp.w	sl, #2
 8009850:	d055      	beq.n	80098fe <_scanf_float+0x272>
 8009852:	2d01      	cmp	r5, #1
 8009854:	d002      	beq.n	800985c <_scanf_float+0x1d0>
 8009856:	2d04      	cmp	r5, #4
 8009858:	f47f af48 	bne.w	80096ec <_scanf_float+0x60>
 800985c:	3501      	adds	r5, #1
 800985e:	b2ed      	uxtb	r5, r5
 8009860:	e7d8      	b.n	8009814 <_scanf_float+0x188>
 8009862:	f1ba 0f01 	cmp.w	sl, #1
 8009866:	f47f af41 	bne.w	80096ec <_scanf_float+0x60>
 800986a:	f04f 0a02 	mov.w	sl, #2
 800986e:	e7d1      	b.n	8009814 <_scanf_float+0x188>
 8009870:	b97d      	cbnz	r5, 8009892 <_scanf_float+0x206>
 8009872:	f1b9 0f00 	cmp.w	r9, #0
 8009876:	f47f af3c 	bne.w	80096f2 <_scanf_float+0x66>
 800987a:	6822      	ldr	r2, [r4, #0]
 800987c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009880:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009884:	f47f af39 	bne.w	80096fa <_scanf_float+0x6e>
 8009888:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800988c:	6022      	str	r2, [r4, #0]
 800988e:	2501      	movs	r5, #1
 8009890:	e7c0      	b.n	8009814 <_scanf_float+0x188>
 8009892:	2d03      	cmp	r5, #3
 8009894:	d0e2      	beq.n	800985c <_scanf_float+0x1d0>
 8009896:	2d05      	cmp	r5, #5
 8009898:	e7de      	b.n	8009858 <_scanf_float+0x1cc>
 800989a:	2d02      	cmp	r5, #2
 800989c:	f47f af26 	bne.w	80096ec <_scanf_float+0x60>
 80098a0:	2503      	movs	r5, #3
 80098a2:	e7b7      	b.n	8009814 <_scanf_float+0x188>
 80098a4:	2d06      	cmp	r5, #6
 80098a6:	f47f af21 	bne.w	80096ec <_scanf_float+0x60>
 80098aa:	2507      	movs	r5, #7
 80098ac:	e7b2      	b.n	8009814 <_scanf_float+0x188>
 80098ae:	6822      	ldr	r2, [r4, #0]
 80098b0:	0591      	lsls	r1, r2, #22
 80098b2:	f57f af1b 	bpl.w	80096ec <_scanf_float+0x60>
 80098b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80098ba:	6022      	str	r2, [r4, #0]
 80098bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80098c0:	e7a8      	b.n	8009814 <_scanf_float+0x188>
 80098c2:	6822      	ldr	r2, [r4, #0]
 80098c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80098c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80098cc:	d006      	beq.n	80098dc <_scanf_float+0x250>
 80098ce:	0550      	lsls	r0, r2, #21
 80098d0:	f57f af0c 	bpl.w	80096ec <_scanf_float+0x60>
 80098d4:	f1b9 0f00 	cmp.w	r9, #0
 80098d8:	f43f af0f 	beq.w	80096fa <_scanf_float+0x6e>
 80098dc:	0591      	lsls	r1, r2, #22
 80098de:	bf58      	it	pl
 80098e0:	9901      	ldrpl	r1, [sp, #4]
 80098e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80098e6:	bf58      	it	pl
 80098e8:	eba9 0101 	subpl.w	r1, r9, r1
 80098ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80098f0:	bf58      	it	pl
 80098f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80098f6:	6022      	str	r2, [r4, #0]
 80098f8:	f04f 0900 	mov.w	r9, #0
 80098fc:	e78a      	b.n	8009814 <_scanf_float+0x188>
 80098fe:	f04f 0a03 	mov.w	sl, #3
 8009902:	e787      	b.n	8009814 <_scanf_float+0x188>
 8009904:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009908:	4639      	mov	r1, r7
 800990a:	4640      	mov	r0, r8
 800990c:	4798      	blx	r3
 800990e:	2800      	cmp	r0, #0
 8009910:	f43f aedf 	beq.w	80096d2 <_scanf_float+0x46>
 8009914:	e6ea      	b.n	80096ec <_scanf_float+0x60>
 8009916:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800991a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800991e:	463a      	mov	r2, r7
 8009920:	4640      	mov	r0, r8
 8009922:	4798      	blx	r3
 8009924:	6923      	ldr	r3, [r4, #16]
 8009926:	3b01      	subs	r3, #1
 8009928:	6123      	str	r3, [r4, #16]
 800992a:	e6ec      	b.n	8009706 <_scanf_float+0x7a>
 800992c:	1e6b      	subs	r3, r5, #1
 800992e:	2b06      	cmp	r3, #6
 8009930:	d825      	bhi.n	800997e <_scanf_float+0x2f2>
 8009932:	2d02      	cmp	r5, #2
 8009934:	d836      	bhi.n	80099a4 <_scanf_float+0x318>
 8009936:	455e      	cmp	r6, fp
 8009938:	f67f aee8 	bls.w	800970c <_scanf_float+0x80>
 800993c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009940:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009944:	463a      	mov	r2, r7
 8009946:	4640      	mov	r0, r8
 8009948:	4798      	blx	r3
 800994a:	6923      	ldr	r3, [r4, #16]
 800994c:	3b01      	subs	r3, #1
 800994e:	6123      	str	r3, [r4, #16]
 8009950:	e7f1      	b.n	8009936 <_scanf_float+0x2aa>
 8009952:	9802      	ldr	r0, [sp, #8]
 8009954:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009958:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800995c:	9002      	str	r0, [sp, #8]
 800995e:	463a      	mov	r2, r7
 8009960:	4640      	mov	r0, r8
 8009962:	4798      	blx	r3
 8009964:	6923      	ldr	r3, [r4, #16]
 8009966:	3b01      	subs	r3, #1
 8009968:	6123      	str	r3, [r4, #16]
 800996a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800996e:	fa5f fa8a 	uxtb.w	sl, sl
 8009972:	f1ba 0f02 	cmp.w	sl, #2
 8009976:	d1ec      	bne.n	8009952 <_scanf_float+0x2c6>
 8009978:	3d03      	subs	r5, #3
 800997a:	b2ed      	uxtb	r5, r5
 800997c:	1b76      	subs	r6, r6, r5
 800997e:	6823      	ldr	r3, [r4, #0]
 8009980:	05da      	lsls	r2, r3, #23
 8009982:	d52f      	bpl.n	80099e4 <_scanf_float+0x358>
 8009984:	055b      	lsls	r3, r3, #21
 8009986:	d510      	bpl.n	80099aa <_scanf_float+0x31e>
 8009988:	455e      	cmp	r6, fp
 800998a:	f67f aebf 	bls.w	800970c <_scanf_float+0x80>
 800998e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009992:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009996:	463a      	mov	r2, r7
 8009998:	4640      	mov	r0, r8
 800999a:	4798      	blx	r3
 800999c:	6923      	ldr	r3, [r4, #16]
 800999e:	3b01      	subs	r3, #1
 80099a0:	6123      	str	r3, [r4, #16]
 80099a2:	e7f1      	b.n	8009988 <_scanf_float+0x2fc>
 80099a4:	46aa      	mov	sl, r5
 80099a6:	9602      	str	r6, [sp, #8]
 80099a8:	e7df      	b.n	800996a <_scanf_float+0x2de>
 80099aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80099ae:	6923      	ldr	r3, [r4, #16]
 80099b0:	2965      	cmp	r1, #101	; 0x65
 80099b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80099b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80099ba:	6123      	str	r3, [r4, #16]
 80099bc:	d00c      	beq.n	80099d8 <_scanf_float+0x34c>
 80099be:	2945      	cmp	r1, #69	; 0x45
 80099c0:	d00a      	beq.n	80099d8 <_scanf_float+0x34c>
 80099c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099c6:	463a      	mov	r2, r7
 80099c8:	4640      	mov	r0, r8
 80099ca:	4798      	blx	r3
 80099cc:	6923      	ldr	r3, [r4, #16]
 80099ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80099d2:	3b01      	subs	r3, #1
 80099d4:	1eb5      	subs	r5, r6, #2
 80099d6:	6123      	str	r3, [r4, #16]
 80099d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099dc:	463a      	mov	r2, r7
 80099de:	4640      	mov	r0, r8
 80099e0:	4798      	blx	r3
 80099e2:	462e      	mov	r6, r5
 80099e4:	6825      	ldr	r5, [r4, #0]
 80099e6:	f015 0510 	ands.w	r5, r5, #16
 80099ea:	d158      	bne.n	8009a9e <_scanf_float+0x412>
 80099ec:	7035      	strb	r5, [r6, #0]
 80099ee:	6823      	ldr	r3, [r4, #0]
 80099f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80099f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099f8:	d11c      	bne.n	8009a34 <_scanf_float+0x3a8>
 80099fa:	9b01      	ldr	r3, [sp, #4]
 80099fc:	454b      	cmp	r3, r9
 80099fe:	eba3 0209 	sub.w	r2, r3, r9
 8009a02:	d124      	bne.n	8009a4e <_scanf_float+0x3c2>
 8009a04:	2200      	movs	r2, #0
 8009a06:	4659      	mov	r1, fp
 8009a08:	4640      	mov	r0, r8
 8009a0a:	f000 feb3 	bl	800a774 <_strtod_r>
 8009a0e:	9b03      	ldr	r3, [sp, #12]
 8009a10:	6821      	ldr	r1, [r4, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f011 0f02 	tst.w	r1, #2
 8009a18:	ec57 6b10 	vmov	r6, r7, d0
 8009a1c:	f103 0204 	add.w	r2, r3, #4
 8009a20:	d020      	beq.n	8009a64 <_scanf_float+0x3d8>
 8009a22:	9903      	ldr	r1, [sp, #12]
 8009a24:	600a      	str	r2, [r1, #0]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	e9c3 6700 	strd	r6, r7, [r3]
 8009a2c:	68e3      	ldr	r3, [r4, #12]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	60e3      	str	r3, [r4, #12]
 8009a32:	e66c      	b.n	800970e <_scanf_float+0x82>
 8009a34:	9b04      	ldr	r3, [sp, #16]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d0e4      	beq.n	8009a04 <_scanf_float+0x378>
 8009a3a:	9905      	ldr	r1, [sp, #20]
 8009a3c:	230a      	movs	r3, #10
 8009a3e:	462a      	mov	r2, r5
 8009a40:	3101      	adds	r1, #1
 8009a42:	4640      	mov	r0, r8
 8009a44:	f000 ff20 	bl	800a888 <_strtol_r>
 8009a48:	9b04      	ldr	r3, [sp, #16]
 8009a4a:	9e05      	ldr	r6, [sp, #20]
 8009a4c:	1ac2      	subs	r2, r0, r3
 8009a4e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009a52:	429e      	cmp	r6, r3
 8009a54:	bf28      	it	cs
 8009a56:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009a5a:	4912      	ldr	r1, [pc, #72]	; (8009aa4 <_scanf_float+0x418>)
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	f000 f843 	bl	8009ae8 <siprintf>
 8009a62:	e7cf      	b.n	8009a04 <_scanf_float+0x378>
 8009a64:	f011 0f04 	tst.w	r1, #4
 8009a68:	9903      	ldr	r1, [sp, #12]
 8009a6a:	600a      	str	r2, [r1, #0]
 8009a6c:	d1db      	bne.n	8009a26 <_scanf_float+0x39a>
 8009a6e:	f8d3 8000 	ldr.w	r8, [r3]
 8009a72:	ee10 2a10 	vmov	r2, s0
 8009a76:	ee10 0a10 	vmov	r0, s0
 8009a7a:	463b      	mov	r3, r7
 8009a7c:	4639      	mov	r1, r7
 8009a7e:	f7f7 f855 	bl	8000b2c <__aeabi_dcmpun>
 8009a82:	b128      	cbz	r0, 8009a90 <_scanf_float+0x404>
 8009a84:	4808      	ldr	r0, [pc, #32]	; (8009aa8 <_scanf_float+0x41c>)
 8009a86:	f000 f829 	bl	8009adc <nanf>
 8009a8a:	ed88 0a00 	vstr	s0, [r8]
 8009a8e:	e7cd      	b.n	8009a2c <_scanf_float+0x3a0>
 8009a90:	4630      	mov	r0, r6
 8009a92:	4639      	mov	r1, r7
 8009a94:	f7f7 f8a8 	bl	8000be8 <__aeabi_d2f>
 8009a98:	f8c8 0000 	str.w	r0, [r8]
 8009a9c:	e7c6      	b.n	8009a2c <_scanf_float+0x3a0>
 8009a9e:	2500      	movs	r5, #0
 8009aa0:	e635      	b.n	800970e <_scanf_float+0x82>
 8009aa2:	bf00      	nop
 8009aa4:	0800d818 	.word	0x0800d818
 8009aa8:	0800dc90 	.word	0x0800dc90

08009aac <iprintf>:
 8009aac:	b40f      	push	{r0, r1, r2, r3}
 8009aae:	4b0a      	ldr	r3, [pc, #40]	; (8009ad8 <iprintf+0x2c>)
 8009ab0:	b513      	push	{r0, r1, r4, lr}
 8009ab2:	681c      	ldr	r4, [r3, #0]
 8009ab4:	b124      	cbz	r4, 8009ac0 <iprintf+0x14>
 8009ab6:	69a3      	ldr	r3, [r4, #24]
 8009ab8:	b913      	cbnz	r3, 8009ac0 <iprintf+0x14>
 8009aba:	4620      	mov	r0, r4
 8009abc:	f001 fdb8 	bl	800b630 <__sinit>
 8009ac0:	ab05      	add	r3, sp, #20
 8009ac2:	9a04      	ldr	r2, [sp, #16]
 8009ac4:	68a1      	ldr	r1, [r4, #8]
 8009ac6:	9301      	str	r3, [sp, #4]
 8009ac8:	4620      	mov	r0, r4
 8009aca:	f003 f8e7 	bl	800cc9c <_vfiprintf_r>
 8009ace:	b002      	add	sp, #8
 8009ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ad4:	b004      	add	sp, #16
 8009ad6:	4770      	bx	lr
 8009ad8:	20000024 	.word	0x20000024

08009adc <nanf>:
 8009adc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009ae4 <nanf+0x8>
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	7fc00000 	.word	0x7fc00000

08009ae8 <siprintf>:
 8009ae8:	b40e      	push	{r1, r2, r3}
 8009aea:	b500      	push	{lr}
 8009aec:	b09c      	sub	sp, #112	; 0x70
 8009aee:	ab1d      	add	r3, sp, #116	; 0x74
 8009af0:	9002      	str	r0, [sp, #8]
 8009af2:	9006      	str	r0, [sp, #24]
 8009af4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009af8:	4809      	ldr	r0, [pc, #36]	; (8009b20 <siprintf+0x38>)
 8009afa:	9107      	str	r1, [sp, #28]
 8009afc:	9104      	str	r1, [sp, #16]
 8009afe:	4909      	ldr	r1, [pc, #36]	; (8009b24 <siprintf+0x3c>)
 8009b00:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b04:	9105      	str	r1, [sp, #20]
 8009b06:	6800      	ldr	r0, [r0, #0]
 8009b08:	9301      	str	r3, [sp, #4]
 8009b0a:	a902      	add	r1, sp, #8
 8009b0c:	f002 ff9c 	bl	800ca48 <_svfiprintf_r>
 8009b10:	9b02      	ldr	r3, [sp, #8]
 8009b12:	2200      	movs	r2, #0
 8009b14:	701a      	strb	r2, [r3, #0]
 8009b16:	b01c      	add	sp, #112	; 0x70
 8009b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b1c:	b003      	add	sp, #12
 8009b1e:	4770      	bx	lr
 8009b20:	20000024 	.word	0x20000024
 8009b24:	ffff0208 	.word	0xffff0208

08009b28 <sulp>:
 8009b28:	b570      	push	{r4, r5, r6, lr}
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	460d      	mov	r5, r1
 8009b2e:	ec45 4b10 	vmov	d0, r4, r5
 8009b32:	4616      	mov	r6, r2
 8009b34:	f002 fd24 	bl	800c580 <__ulp>
 8009b38:	ec51 0b10 	vmov	r0, r1, d0
 8009b3c:	b17e      	cbz	r6, 8009b5e <sulp+0x36>
 8009b3e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009b42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	dd09      	ble.n	8009b5e <sulp+0x36>
 8009b4a:	051b      	lsls	r3, r3, #20
 8009b4c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009b50:	2400      	movs	r4, #0
 8009b52:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009b56:	4622      	mov	r2, r4
 8009b58:	462b      	mov	r3, r5
 8009b5a:	f7f6 fd4d 	bl	80005f8 <__aeabi_dmul>
 8009b5e:	bd70      	pop	{r4, r5, r6, pc}

08009b60 <_strtod_l>:
 8009b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b64:	b0a3      	sub	sp, #140	; 0x8c
 8009b66:	461f      	mov	r7, r3
 8009b68:	2300      	movs	r3, #0
 8009b6a:	931e      	str	r3, [sp, #120]	; 0x78
 8009b6c:	4ba4      	ldr	r3, [pc, #656]	; (8009e00 <_strtod_l+0x2a0>)
 8009b6e:	9219      	str	r2, [sp, #100]	; 0x64
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	9307      	str	r3, [sp, #28]
 8009b74:	4604      	mov	r4, r0
 8009b76:	4618      	mov	r0, r3
 8009b78:	4688      	mov	r8, r1
 8009b7a:	f7f6 fb29 	bl	80001d0 <strlen>
 8009b7e:	f04f 0a00 	mov.w	sl, #0
 8009b82:	4605      	mov	r5, r0
 8009b84:	f04f 0b00 	mov.w	fp, #0
 8009b88:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009b8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b8e:	781a      	ldrb	r2, [r3, #0]
 8009b90:	2a2b      	cmp	r2, #43	; 0x2b
 8009b92:	d04c      	beq.n	8009c2e <_strtod_l+0xce>
 8009b94:	d839      	bhi.n	8009c0a <_strtod_l+0xaa>
 8009b96:	2a0d      	cmp	r2, #13
 8009b98:	d832      	bhi.n	8009c00 <_strtod_l+0xa0>
 8009b9a:	2a08      	cmp	r2, #8
 8009b9c:	d832      	bhi.n	8009c04 <_strtod_l+0xa4>
 8009b9e:	2a00      	cmp	r2, #0
 8009ba0:	d03c      	beq.n	8009c1c <_strtod_l+0xbc>
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	930e      	str	r3, [sp, #56]	; 0x38
 8009ba6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009ba8:	7833      	ldrb	r3, [r6, #0]
 8009baa:	2b30      	cmp	r3, #48	; 0x30
 8009bac:	f040 80b4 	bne.w	8009d18 <_strtod_l+0x1b8>
 8009bb0:	7873      	ldrb	r3, [r6, #1]
 8009bb2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009bb6:	2b58      	cmp	r3, #88	; 0x58
 8009bb8:	d16c      	bne.n	8009c94 <_strtod_l+0x134>
 8009bba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bbc:	9301      	str	r3, [sp, #4]
 8009bbe:	ab1e      	add	r3, sp, #120	; 0x78
 8009bc0:	9702      	str	r7, [sp, #8]
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	4a8f      	ldr	r2, [pc, #572]	; (8009e04 <_strtod_l+0x2a4>)
 8009bc6:	ab1f      	add	r3, sp, #124	; 0x7c
 8009bc8:	a91d      	add	r1, sp, #116	; 0x74
 8009bca:	4620      	mov	r0, r4
 8009bcc:	f001 fe34 	bl	800b838 <__gethex>
 8009bd0:	f010 0707 	ands.w	r7, r0, #7
 8009bd4:	4605      	mov	r5, r0
 8009bd6:	d005      	beq.n	8009be4 <_strtod_l+0x84>
 8009bd8:	2f06      	cmp	r7, #6
 8009bda:	d12a      	bne.n	8009c32 <_strtod_l+0xd2>
 8009bdc:	3601      	adds	r6, #1
 8009bde:	2300      	movs	r3, #0
 8009be0:	961d      	str	r6, [sp, #116]	; 0x74
 8009be2:	930e      	str	r3, [sp, #56]	; 0x38
 8009be4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	f040 8596 	bne.w	800a718 <_strtod_l+0xbb8>
 8009bec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bee:	b1db      	cbz	r3, 8009c28 <_strtod_l+0xc8>
 8009bf0:	4652      	mov	r2, sl
 8009bf2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009bf6:	ec43 2b10 	vmov	d0, r2, r3
 8009bfa:	b023      	add	sp, #140	; 0x8c
 8009bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c00:	2a20      	cmp	r2, #32
 8009c02:	d1ce      	bne.n	8009ba2 <_strtod_l+0x42>
 8009c04:	3301      	adds	r3, #1
 8009c06:	931d      	str	r3, [sp, #116]	; 0x74
 8009c08:	e7c0      	b.n	8009b8c <_strtod_l+0x2c>
 8009c0a:	2a2d      	cmp	r2, #45	; 0x2d
 8009c0c:	d1c9      	bne.n	8009ba2 <_strtod_l+0x42>
 8009c0e:	2201      	movs	r2, #1
 8009c10:	920e      	str	r2, [sp, #56]	; 0x38
 8009c12:	1c5a      	adds	r2, r3, #1
 8009c14:	921d      	str	r2, [sp, #116]	; 0x74
 8009c16:	785b      	ldrb	r3, [r3, #1]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1c4      	bne.n	8009ba6 <_strtod_l+0x46>
 8009c1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c1e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f040 8576 	bne.w	800a714 <_strtod_l+0xbb4>
 8009c28:	4652      	mov	r2, sl
 8009c2a:	465b      	mov	r3, fp
 8009c2c:	e7e3      	b.n	8009bf6 <_strtod_l+0x96>
 8009c2e:	2200      	movs	r2, #0
 8009c30:	e7ee      	b.n	8009c10 <_strtod_l+0xb0>
 8009c32:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009c34:	b13a      	cbz	r2, 8009c46 <_strtod_l+0xe6>
 8009c36:	2135      	movs	r1, #53	; 0x35
 8009c38:	a820      	add	r0, sp, #128	; 0x80
 8009c3a:	f002 fdac 	bl	800c796 <__copybits>
 8009c3e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009c40:	4620      	mov	r0, r4
 8009c42:	f002 f971 	bl	800bf28 <_Bfree>
 8009c46:	3f01      	subs	r7, #1
 8009c48:	2f05      	cmp	r7, #5
 8009c4a:	d807      	bhi.n	8009c5c <_strtod_l+0xfc>
 8009c4c:	e8df f007 	tbb	[pc, r7]
 8009c50:	1d180b0e 	.word	0x1d180b0e
 8009c54:	030e      	.short	0x030e
 8009c56:	f04f 0b00 	mov.w	fp, #0
 8009c5a:	46da      	mov	sl, fp
 8009c5c:	0728      	lsls	r0, r5, #28
 8009c5e:	d5c1      	bpl.n	8009be4 <_strtod_l+0x84>
 8009c60:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009c64:	e7be      	b.n	8009be4 <_strtod_l+0x84>
 8009c66:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8009c6a:	e7f7      	b.n	8009c5c <_strtod_l+0xfc>
 8009c6c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009c70:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009c72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009c76:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009c7a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009c7e:	e7ed      	b.n	8009c5c <_strtod_l+0xfc>
 8009c80:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009e08 <_strtod_l+0x2a8>
 8009c84:	f04f 0a00 	mov.w	sl, #0
 8009c88:	e7e8      	b.n	8009c5c <_strtod_l+0xfc>
 8009c8a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009c8e:	f04f 3aff 	mov.w	sl, #4294967295
 8009c92:	e7e3      	b.n	8009c5c <_strtod_l+0xfc>
 8009c94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c96:	1c5a      	adds	r2, r3, #1
 8009c98:	921d      	str	r2, [sp, #116]	; 0x74
 8009c9a:	785b      	ldrb	r3, [r3, #1]
 8009c9c:	2b30      	cmp	r3, #48	; 0x30
 8009c9e:	d0f9      	beq.n	8009c94 <_strtod_l+0x134>
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d09f      	beq.n	8009be4 <_strtod_l+0x84>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	f04f 0900 	mov.w	r9, #0
 8009caa:	9304      	str	r3, [sp, #16]
 8009cac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009cae:	930a      	str	r3, [sp, #40]	; 0x28
 8009cb0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009cb4:	464f      	mov	r7, r9
 8009cb6:	220a      	movs	r2, #10
 8009cb8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009cba:	7806      	ldrb	r6, [r0, #0]
 8009cbc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009cc0:	b2d9      	uxtb	r1, r3
 8009cc2:	2909      	cmp	r1, #9
 8009cc4:	d92a      	bls.n	8009d1c <_strtod_l+0x1bc>
 8009cc6:	9907      	ldr	r1, [sp, #28]
 8009cc8:	462a      	mov	r2, r5
 8009cca:	f003 f974 	bl	800cfb6 <strncmp>
 8009cce:	b398      	cbz	r0, 8009d38 <_strtod_l+0x1d8>
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	4633      	mov	r3, r6
 8009cd4:	463d      	mov	r5, r7
 8009cd6:	9007      	str	r0, [sp, #28]
 8009cd8:	4602      	mov	r2, r0
 8009cda:	2b65      	cmp	r3, #101	; 0x65
 8009cdc:	d001      	beq.n	8009ce2 <_strtod_l+0x182>
 8009cde:	2b45      	cmp	r3, #69	; 0x45
 8009ce0:	d118      	bne.n	8009d14 <_strtod_l+0x1b4>
 8009ce2:	b91d      	cbnz	r5, 8009cec <_strtod_l+0x18c>
 8009ce4:	9b04      	ldr	r3, [sp, #16]
 8009ce6:	4303      	orrs	r3, r0
 8009ce8:	d098      	beq.n	8009c1c <_strtod_l+0xbc>
 8009cea:	2500      	movs	r5, #0
 8009cec:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009cf0:	f108 0301 	add.w	r3, r8, #1
 8009cf4:	931d      	str	r3, [sp, #116]	; 0x74
 8009cf6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009cfa:	2b2b      	cmp	r3, #43	; 0x2b
 8009cfc:	d075      	beq.n	8009dea <_strtod_l+0x28a>
 8009cfe:	2b2d      	cmp	r3, #45	; 0x2d
 8009d00:	d07b      	beq.n	8009dfa <_strtod_l+0x29a>
 8009d02:	f04f 0c00 	mov.w	ip, #0
 8009d06:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009d0a:	2909      	cmp	r1, #9
 8009d0c:	f240 8082 	bls.w	8009e14 <_strtod_l+0x2b4>
 8009d10:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009d14:	2600      	movs	r6, #0
 8009d16:	e09d      	b.n	8009e54 <_strtod_l+0x2f4>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	e7c4      	b.n	8009ca6 <_strtod_l+0x146>
 8009d1c:	2f08      	cmp	r7, #8
 8009d1e:	bfd8      	it	le
 8009d20:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009d22:	f100 0001 	add.w	r0, r0, #1
 8009d26:	bfda      	itte	le
 8009d28:	fb02 3301 	mlale	r3, r2, r1, r3
 8009d2c:	9309      	strle	r3, [sp, #36]	; 0x24
 8009d2e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009d32:	3701      	adds	r7, #1
 8009d34:	901d      	str	r0, [sp, #116]	; 0x74
 8009d36:	e7bf      	b.n	8009cb8 <_strtod_l+0x158>
 8009d38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d3a:	195a      	adds	r2, r3, r5
 8009d3c:	921d      	str	r2, [sp, #116]	; 0x74
 8009d3e:	5d5b      	ldrb	r3, [r3, r5]
 8009d40:	2f00      	cmp	r7, #0
 8009d42:	d037      	beq.n	8009db4 <_strtod_l+0x254>
 8009d44:	9007      	str	r0, [sp, #28]
 8009d46:	463d      	mov	r5, r7
 8009d48:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009d4c:	2a09      	cmp	r2, #9
 8009d4e:	d912      	bls.n	8009d76 <_strtod_l+0x216>
 8009d50:	2201      	movs	r2, #1
 8009d52:	e7c2      	b.n	8009cda <_strtod_l+0x17a>
 8009d54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d56:	1c5a      	adds	r2, r3, #1
 8009d58:	921d      	str	r2, [sp, #116]	; 0x74
 8009d5a:	785b      	ldrb	r3, [r3, #1]
 8009d5c:	3001      	adds	r0, #1
 8009d5e:	2b30      	cmp	r3, #48	; 0x30
 8009d60:	d0f8      	beq.n	8009d54 <_strtod_l+0x1f4>
 8009d62:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009d66:	2a08      	cmp	r2, #8
 8009d68:	f200 84db 	bhi.w	800a722 <_strtod_l+0xbc2>
 8009d6c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009d6e:	9007      	str	r0, [sp, #28]
 8009d70:	2000      	movs	r0, #0
 8009d72:	920a      	str	r2, [sp, #40]	; 0x28
 8009d74:	4605      	mov	r5, r0
 8009d76:	3b30      	subs	r3, #48	; 0x30
 8009d78:	f100 0201 	add.w	r2, r0, #1
 8009d7c:	d014      	beq.n	8009da8 <_strtod_l+0x248>
 8009d7e:	9907      	ldr	r1, [sp, #28]
 8009d80:	4411      	add	r1, r2
 8009d82:	9107      	str	r1, [sp, #28]
 8009d84:	462a      	mov	r2, r5
 8009d86:	eb00 0e05 	add.w	lr, r0, r5
 8009d8a:	210a      	movs	r1, #10
 8009d8c:	4572      	cmp	r2, lr
 8009d8e:	d113      	bne.n	8009db8 <_strtod_l+0x258>
 8009d90:	182a      	adds	r2, r5, r0
 8009d92:	2a08      	cmp	r2, #8
 8009d94:	f105 0501 	add.w	r5, r5, #1
 8009d98:	4405      	add	r5, r0
 8009d9a:	dc1c      	bgt.n	8009dd6 <_strtod_l+0x276>
 8009d9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d9e:	220a      	movs	r2, #10
 8009da0:	fb02 3301 	mla	r3, r2, r1, r3
 8009da4:	9309      	str	r3, [sp, #36]	; 0x24
 8009da6:	2200      	movs	r2, #0
 8009da8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009daa:	1c59      	adds	r1, r3, #1
 8009dac:	911d      	str	r1, [sp, #116]	; 0x74
 8009dae:	785b      	ldrb	r3, [r3, #1]
 8009db0:	4610      	mov	r0, r2
 8009db2:	e7c9      	b.n	8009d48 <_strtod_l+0x1e8>
 8009db4:	4638      	mov	r0, r7
 8009db6:	e7d2      	b.n	8009d5e <_strtod_l+0x1fe>
 8009db8:	2a08      	cmp	r2, #8
 8009dba:	dc04      	bgt.n	8009dc6 <_strtod_l+0x266>
 8009dbc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009dbe:	434e      	muls	r6, r1
 8009dc0:	9609      	str	r6, [sp, #36]	; 0x24
 8009dc2:	3201      	adds	r2, #1
 8009dc4:	e7e2      	b.n	8009d8c <_strtod_l+0x22c>
 8009dc6:	f102 0c01 	add.w	ip, r2, #1
 8009dca:	f1bc 0f10 	cmp.w	ip, #16
 8009dce:	bfd8      	it	le
 8009dd0:	fb01 f909 	mulle.w	r9, r1, r9
 8009dd4:	e7f5      	b.n	8009dc2 <_strtod_l+0x262>
 8009dd6:	2d10      	cmp	r5, #16
 8009dd8:	bfdc      	itt	le
 8009dda:	220a      	movle	r2, #10
 8009ddc:	fb02 3909 	mlale	r9, r2, r9, r3
 8009de0:	e7e1      	b.n	8009da6 <_strtod_l+0x246>
 8009de2:	2300      	movs	r3, #0
 8009de4:	9307      	str	r3, [sp, #28]
 8009de6:	2201      	movs	r2, #1
 8009de8:	e77c      	b.n	8009ce4 <_strtod_l+0x184>
 8009dea:	f04f 0c00 	mov.w	ip, #0
 8009dee:	f108 0302 	add.w	r3, r8, #2
 8009df2:	931d      	str	r3, [sp, #116]	; 0x74
 8009df4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009df8:	e785      	b.n	8009d06 <_strtod_l+0x1a6>
 8009dfa:	f04f 0c01 	mov.w	ip, #1
 8009dfe:	e7f6      	b.n	8009dee <_strtod_l+0x28e>
 8009e00:	0800dad4 	.word	0x0800dad4
 8009e04:	0800d820 	.word	0x0800d820
 8009e08:	7ff00000 	.word	0x7ff00000
 8009e0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e0e:	1c59      	adds	r1, r3, #1
 8009e10:	911d      	str	r1, [sp, #116]	; 0x74
 8009e12:	785b      	ldrb	r3, [r3, #1]
 8009e14:	2b30      	cmp	r3, #48	; 0x30
 8009e16:	d0f9      	beq.n	8009e0c <_strtod_l+0x2ac>
 8009e18:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009e1c:	2908      	cmp	r1, #8
 8009e1e:	f63f af79 	bhi.w	8009d14 <_strtod_l+0x1b4>
 8009e22:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009e26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e28:	9308      	str	r3, [sp, #32]
 8009e2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e2c:	1c59      	adds	r1, r3, #1
 8009e2e:	911d      	str	r1, [sp, #116]	; 0x74
 8009e30:	785b      	ldrb	r3, [r3, #1]
 8009e32:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009e36:	2e09      	cmp	r6, #9
 8009e38:	d937      	bls.n	8009eaa <_strtod_l+0x34a>
 8009e3a:	9e08      	ldr	r6, [sp, #32]
 8009e3c:	1b89      	subs	r1, r1, r6
 8009e3e:	2908      	cmp	r1, #8
 8009e40:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009e44:	dc02      	bgt.n	8009e4c <_strtod_l+0x2ec>
 8009e46:	4576      	cmp	r6, lr
 8009e48:	bfa8      	it	ge
 8009e4a:	4676      	movge	r6, lr
 8009e4c:	f1bc 0f00 	cmp.w	ip, #0
 8009e50:	d000      	beq.n	8009e54 <_strtod_l+0x2f4>
 8009e52:	4276      	negs	r6, r6
 8009e54:	2d00      	cmp	r5, #0
 8009e56:	d14f      	bne.n	8009ef8 <_strtod_l+0x398>
 8009e58:	9904      	ldr	r1, [sp, #16]
 8009e5a:	4301      	orrs	r1, r0
 8009e5c:	f47f aec2 	bne.w	8009be4 <_strtod_l+0x84>
 8009e60:	2a00      	cmp	r2, #0
 8009e62:	f47f aedb 	bne.w	8009c1c <_strtod_l+0xbc>
 8009e66:	2b69      	cmp	r3, #105	; 0x69
 8009e68:	d027      	beq.n	8009eba <_strtod_l+0x35a>
 8009e6a:	dc24      	bgt.n	8009eb6 <_strtod_l+0x356>
 8009e6c:	2b49      	cmp	r3, #73	; 0x49
 8009e6e:	d024      	beq.n	8009eba <_strtod_l+0x35a>
 8009e70:	2b4e      	cmp	r3, #78	; 0x4e
 8009e72:	f47f aed3 	bne.w	8009c1c <_strtod_l+0xbc>
 8009e76:	499e      	ldr	r1, [pc, #632]	; (800a0f0 <_strtod_l+0x590>)
 8009e78:	a81d      	add	r0, sp, #116	; 0x74
 8009e7a:	f001 ff35 	bl	800bce8 <__match>
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	f43f aecc 	beq.w	8009c1c <_strtod_l+0xbc>
 8009e84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	2b28      	cmp	r3, #40	; 0x28
 8009e8a:	d12d      	bne.n	8009ee8 <_strtod_l+0x388>
 8009e8c:	4999      	ldr	r1, [pc, #612]	; (800a0f4 <_strtod_l+0x594>)
 8009e8e:	aa20      	add	r2, sp, #128	; 0x80
 8009e90:	a81d      	add	r0, sp, #116	; 0x74
 8009e92:	f001 ff3d 	bl	800bd10 <__hexnan>
 8009e96:	2805      	cmp	r0, #5
 8009e98:	d126      	bne.n	8009ee8 <_strtod_l+0x388>
 8009e9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e9c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009ea0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009ea4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009ea8:	e69c      	b.n	8009be4 <_strtod_l+0x84>
 8009eaa:	210a      	movs	r1, #10
 8009eac:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009eb0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009eb4:	e7b9      	b.n	8009e2a <_strtod_l+0x2ca>
 8009eb6:	2b6e      	cmp	r3, #110	; 0x6e
 8009eb8:	e7db      	b.n	8009e72 <_strtod_l+0x312>
 8009eba:	498f      	ldr	r1, [pc, #572]	; (800a0f8 <_strtod_l+0x598>)
 8009ebc:	a81d      	add	r0, sp, #116	; 0x74
 8009ebe:	f001 ff13 	bl	800bce8 <__match>
 8009ec2:	2800      	cmp	r0, #0
 8009ec4:	f43f aeaa 	beq.w	8009c1c <_strtod_l+0xbc>
 8009ec8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009eca:	498c      	ldr	r1, [pc, #560]	; (800a0fc <_strtod_l+0x59c>)
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	a81d      	add	r0, sp, #116	; 0x74
 8009ed0:	931d      	str	r3, [sp, #116]	; 0x74
 8009ed2:	f001 ff09 	bl	800bce8 <__match>
 8009ed6:	b910      	cbnz	r0, 8009ede <_strtod_l+0x37e>
 8009ed8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009eda:	3301      	adds	r3, #1
 8009edc:	931d      	str	r3, [sp, #116]	; 0x74
 8009ede:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800a10c <_strtod_l+0x5ac>
 8009ee2:	f04f 0a00 	mov.w	sl, #0
 8009ee6:	e67d      	b.n	8009be4 <_strtod_l+0x84>
 8009ee8:	4885      	ldr	r0, [pc, #532]	; (800a100 <_strtod_l+0x5a0>)
 8009eea:	f003 f809 	bl	800cf00 <nan>
 8009eee:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009ef2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009ef6:	e675      	b.n	8009be4 <_strtod_l+0x84>
 8009ef8:	9b07      	ldr	r3, [sp, #28]
 8009efa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009efc:	1af3      	subs	r3, r6, r3
 8009efe:	2f00      	cmp	r7, #0
 8009f00:	bf08      	it	eq
 8009f02:	462f      	moveq	r7, r5
 8009f04:	2d10      	cmp	r5, #16
 8009f06:	9308      	str	r3, [sp, #32]
 8009f08:	46a8      	mov	r8, r5
 8009f0a:	bfa8      	it	ge
 8009f0c:	f04f 0810 	movge.w	r8, #16
 8009f10:	f7f6 faf8 	bl	8000504 <__aeabi_ui2d>
 8009f14:	2d09      	cmp	r5, #9
 8009f16:	4682      	mov	sl, r0
 8009f18:	468b      	mov	fp, r1
 8009f1a:	dd13      	ble.n	8009f44 <_strtod_l+0x3e4>
 8009f1c:	4b79      	ldr	r3, [pc, #484]	; (800a104 <_strtod_l+0x5a4>)
 8009f1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009f22:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009f26:	f7f6 fb67 	bl	80005f8 <__aeabi_dmul>
 8009f2a:	4682      	mov	sl, r0
 8009f2c:	4648      	mov	r0, r9
 8009f2e:	468b      	mov	fp, r1
 8009f30:	f7f6 fae8 	bl	8000504 <__aeabi_ui2d>
 8009f34:	4602      	mov	r2, r0
 8009f36:	460b      	mov	r3, r1
 8009f38:	4650      	mov	r0, sl
 8009f3a:	4659      	mov	r1, fp
 8009f3c:	f7f6 f9a6 	bl	800028c <__adddf3>
 8009f40:	4682      	mov	sl, r0
 8009f42:	468b      	mov	fp, r1
 8009f44:	2d0f      	cmp	r5, #15
 8009f46:	dc38      	bgt.n	8009fba <_strtod_l+0x45a>
 8009f48:	9b08      	ldr	r3, [sp, #32]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f43f ae4a 	beq.w	8009be4 <_strtod_l+0x84>
 8009f50:	dd24      	ble.n	8009f9c <_strtod_l+0x43c>
 8009f52:	2b16      	cmp	r3, #22
 8009f54:	dc0b      	bgt.n	8009f6e <_strtod_l+0x40e>
 8009f56:	4d6b      	ldr	r5, [pc, #428]	; (800a104 <_strtod_l+0x5a4>)
 8009f58:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8009f5c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009f60:	4652      	mov	r2, sl
 8009f62:	465b      	mov	r3, fp
 8009f64:	f7f6 fb48 	bl	80005f8 <__aeabi_dmul>
 8009f68:	4682      	mov	sl, r0
 8009f6a:	468b      	mov	fp, r1
 8009f6c:	e63a      	b.n	8009be4 <_strtod_l+0x84>
 8009f6e:	9a08      	ldr	r2, [sp, #32]
 8009f70:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009f74:	4293      	cmp	r3, r2
 8009f76:	db20      	blt.n	8009fba <_strtod_l+0x45a>
 8009f78:	4c62      	ldr	r4, [pc, #392]	; (800a104 <_strtod_l+0x5a4>)
 8009f7a:	f1c5 050f 	rsb	r5, r5, #15
 8009f7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009f82:	4652      	mov	r2, sl
 8009f84:	465b      	mov	r3, fp
 8009f86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f8a:	f7f6 fb35 	bl	80005f8 <__aeabi_dmul>
 8009f8e:	9b08      	ldr	r3, [sp, #32]
 8009f90:	1b5d      	subs	r5, r3, r5
 8009f92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009f96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009f9a:	e7e3      	b.n	8009f64 <_strtod_l+0x404>
 8009f9c:	9b08      	ldr	r3, [sp, #32]
 8009f9e:	3316      	adds	r3, #22
 8009fa0:	db0b      	blt.n	8009fba <_strtod_l+0x45a>
 8009fa2:	9b07      	ldr	r3, [sp, #28]
 8009fa4:	4a57      	ldr	r2, [pc, #348]	; (800a104 <_strtod_l+0x5a4>)
 8009fa6:	1b9e      	subs	r6, r3, r6
 8009fa8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009fac:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009fb0:	4650      	mov	r0, sl
 8009fb2:	4659      	mov	r1, fp
 8009fb4:	f7f6 fc4a 	bl	800084c <__aeabi_ddiv>
 8009fb8:	e7d6      	b.n	8009f68 <_strtod_l+0x408>
 8009fba:	9b08      	ldr	r3, [sp, #32]
 8009fbc:	eba5 0808 	sub.w	r8, r5, r8
 8009fc0:	4498      	add	r8, r3
 8009fc2:	f1b8 0f00 	cmp.w	r8, #0
 8009fc6:	dd71      	ble.n	800a0ac <_strtod_l+0x54c>
 8009fc8:	f018 030f 	ands.w	r3, r8, #15
 8009fcc:	d00a      	beq.n	8009fe4 <_strtod_l+0x484>
 8009fce:	494d      	ldr	r1, [pc, #308]	; (800a104 <_strtod_l+0x5a4>)
 8009fd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009fd4:	4652      	mov	r2, sl
 8009fd6:	465b      	mov	r3, fp
 8009fd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fdc:	f7f6 fb0c 	bl	80005f8 <__aeabi_dmul>
 8009fe0:	4682      	mov	sl, r0
 8009fe2:	468b      	mov	fp, r1
 8009fe4:	f038 080f 	bics.w	r8, r8, #15
 8009fe8:	d04d      	beq.n	800a086 <_strtod_l+0x526>
 8009fea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009fee:	dd22      	ble.n	800a036 <_strtod_l+0x4d6>
 8009ff0:	2500      	movs	r5, #0
 8009ff2:	462e      	mov	r6, r5
 8009ff4:	9509      	str	r5, [sp, #36]	; 0x24
 8009ff6:	9507      	str	r5, [sp, #28]
 8009ff8:	2322      	movs	r3, #34	; 0x22
 8009ffa:	f8df b110 	ldr.w	fp, [pc, #272]	; 800a10c <_strtod_l+0x5ac>
 8009ffe:	6023      	str	r3, [r4, #0]
 800a000:	f04f 0a00 	mov.w	sl, #0
 800a004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a006:	2b00      	cmp	r3, #0
 800a008:	f43f adec 	beq.w	8009be4 <_strtod_l+0x84>
 800a00c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a00e:	4620      	mov	r0, r4
 800a010:	f001 ff8a 	bl	800bf28 <_Bfree>
 800a014:	9907      	ldr	r1, [sp, #28]
 800a016:	4620      	mov	r0, r4
 800a018:	f001 ff86 	bl	800bf28 <_Bfree>
 800a01c:	4631      	mov	r1, r6
 800a01e:	4620      	mov	r0, r4
 800a020:	f001 ff82 	bl	800bf28 <_Bfree>
 800a024:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a026:	4620      	mov	r0, r4
 800a028:	f001 ff7e 	bl	800bf28 <_Bfree>
 800a02c:	4629      	mov	r1, r5
 800a02e:	4620      	mov	r0, r4
 800a030:	f001 ff7a 	bl	800bf28 <_Bfree>
 800a034:	e5d6      	b.n	8009be4 <_strtod_l+0x84>
 800a036:	2300      	movs	r3, #0
 800a038:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a03c:	4650      	mov	r0, sl
 800a03e:	4659      	mov	r1, fp
 800a040:	4699      	mov	r9, r3
 800a042:	f1b8 0f01 	cmp.w	r8, #1
 800a046:	dc21      	bgt.n	800a08c <_strtod_l+0x52c>
 800a048:	b10b      	cbz	r3, 800a04e <_strtod_l+0x4ee>
 800a04a:	4682      	mov	sl, r0
 800a04c:	468b      	mov	fp, r1
 800a04e:	4b2e      	ldr	r3, [pc, #184]	; (800a108 <_strtod_l+0x5a8>)
 800a050:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a054:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a058:	4652      	mov	r2, sl
 800a05a:	465b      	mov	r3, fp
 800a05c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a060:	f7f6 faca 	bl	80005f8 <__aeabi_dmul>
 800a064:	4b29      	ldr	r3, [pc, #164]	; (800a10c <_strtod_l+0x5ac>)
 800a066:	460a      	mov	r2, r1
 800a068:	400b      	ands	r3, r1
 800a06a:	4929      	ldr	r1, [pc, #164]	; (800a110 <_strtod_l+0x5b0>)
 800a06c:	428b      	cmp	r3, r1
 800a06e:	4682      	mov	sl, r0
 800a070:	d8be      	bhi.n	8009ff0 <_strtod_l+0x490>
 800a072:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a076:	428b      	cmp	r3, r1
 800a078:	bf86      	itte	hi
 800a07a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800a114 <_strtod_l+0x5b4>
 800a07e:	f04f 3aff 	movhi.w	sl, #4294967295
 800a082:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a086:	2300      	movs	r3, #0
 800a088:	9304      	str	r3, [sp, #16]
 800a08a:	e081      	b.n	800a190 <_strtod_l+0x630>
 800a08c:	f018 0f01 	tst.w	r8, #1
 800a090:	d007      	beq.n	800a0a2 <_strtod_l+0x542>
 800a092:	4b1d      	ldr	r3, [pc, #116]	; (800a108 <_strtod_l+0x5a8>)
 800a094:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09c:	f7f6 faac 	bl	80005f8 <__aeabi_dmul>
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	f109 0901 	add.w	r9, r9, #1
 800a0a6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a0aa:	e7ca      	b.n	800a042 <_strtod_l+0x4e2>
 800a0ac:	d0eb      	beq.n	800a086 <_strtod_l+0x526>
 800a0ae:	f1c8 0800 	rsb	r8, r8, #0
 800a0b2:	f018 020f 	ands.w	r2, r8, #15
 800a0b6:	d00a      	beq.n	800a0ce <_strtod_l+0x56e>
 800a0b8:	4b12      	ldr	r3, [pc, #72]	; (800a104 <_strtod_l+0x5a4>)
 800a0ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0be:	4650      	mov	r0, sl
 800a0c0:	4659      	mov	r1, fp
 800a0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c6:	f7f6 fbc1 	bl	800084c <__aeabi_ddiv>
 800a0ca:	4682      	mov	sl, r0
 800a0cc:	468b      	mov	fp, r1
 800a0ce:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a0d2:	d0d8      	beq.n	800a086 <_strtod_l+0x526>
 800a0d4:	f1b8 0f1f 	cmp.w	r8, #31
 800a0d8:	dd1e      	ble.n	800a118 <_strtod_l+0x5b8>
 800a0da:	2500      	movs	r5, #0
 800a0dc:	462e      	mov	r6, r5
 800a0de:	9509      	str	r5, [sp, #36]	; 0x24
 800a0e0:	9507      	str	r5, [sp, #28]
 800a0e2:	2322      	movs	r3, #34	; 0x22
 800a0e4:	f04f 0a00 	mov.w	sl, #0
 800a0e8:	f04f 0b00 	mov.w	fp, #0
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	e789      	b.n	800a004 <_strtod_l+0x4a4>
 800a0f0:	0800d7f1 	.word	0x0800d7f1
 800a0f4:	0800d834 	.word	0x0800d834
 800a0f8:	0800d7e9 	.word	0x0800d7e9
 800a0fc:	0800d974 	.word	0x0800d974
 800a100:	0800dc90 	.word	0x0800dc90
 800a104:	0800db70 	.word	0x0800db70
 800a108:	0800db48 	.word	0x0800db48
 800a10c:	7ff00000 	.word	0x7ff00000
 800a110:	7ca00000 	.word	0x7ca00000
 800a114:	7fefffff 	.word	0x7fefffff
 800a118:	f018 0310 	ands.w	r3, r8, #16
 800a11c:	bf18      	it	ne
 800a11e:	236a      	movne	r3, #106	; 0x6a
 800a120:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800a4d8 <_strtod_l+0x978>
 800a124:	9304      	str	r3, [sp, #16]
 800a126:	4650      	mov	r0, sl
 800a128:	4659      	mov	r1, fp
 800a12a:	2300      	movs	r3, #0
 800a12c:	f018 0f01 	tst.w	r8, #1
 800a130:	d004      	beq.n	800a13c <_strtod_l+0x5dc>
 800a132:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a136:	f7f6 fa5f 	bl	80005f8 <__aeabi_dmul>
 800a13a:	2301      	movs	r3, #1
 800a13c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a140:	f109 0908 	add.w	r9, r9, #8
 800a144:	d1f2      	bne.n	800a12c <_strtod_l+0x5cc>
 800a146:	b10b      	cbz	r3, 800a14c <_strtod_l+0x5ec>
 800a148:	4682      	mov	sl, r0
 800a14a:	468b      	mov	fp, r1
 800a14c:	9b04      	ldr	r3, [sp, #16]
 800a14e:	b1bb      	cbz	r3, 800a180 <_strtod_l+0x620>
 800a150:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a154:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a158:	2b00      	cmp	r3, #0
 800a15a:	4659      	mov	r1, fp
 800a15c:	dd10      	ble.n	800a180 <_strtod_l+0x620>
 800a15e:	2b1f      	cmp	r3, #31
 800a160:	f340 8128 	ble.w	800a3b4 <_strtod_l+0x854>
 800a164:	2b34      	cmp	r3, #52	; 0x34
 800a166:	bfde      	ittt	le
 800a168:	3b20      	suble	r3, #32
 800a16a:	f04f 32ff 	movle.w	r2, #4294967295
 800a16e:	fa02 f303 	lslle.w	r3, r2, r3
 800a172:	f04f 0a00 	mov.w	sl, #0
 800a176:	bfcc      	ite	gt
 800a178:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a17c:	ea03 0b01 	andle.w	fp, r3, r1
 800a180:	2200      	movs	r2, #0
 800a182:	2300      	movs	r3, #0
 800a184:	4650      	mov	r0, sl
 800a186:	4659      	mov	r1, fp
 800a188:	f7f6 fc9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a18c:	2800      	cmp	r0, #0
 800a18e:	d1a4      	bne.n	800a0da <_strtod_l+0x57a>
 800a190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a192:	9300      	str	r3, [sp, #0]
 800a194:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a196:	462b      	mov	r3, r5
 800a198:	463a      	mov	r2, r7
 800a19a:	4620      	mov	r0, r4
 800a19c:	f001 ff30 	bl	800c000 <__s2b>
 800a1a0:	9009      	str	r0, [sp, #36]	; 0x24
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	f43f af24 	beq.w	8009ff0 <_strtod_l+0x490>
 800a1a8:	9b07      	ldr	r3, [sp, #28]
 800a1aa:	1b9e      	subs	r6, r3, r6
 800a1ac:	9b08      	ldr	r3, [sp, #32]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	bfb4      	ite	lt
 800a1b2:	4633      	movlt	r3, r6
 800a1b4:	2300      	movge	r3, #0
 800a1b6:	9310      	str	r3, [sp, #64]	; 0x40
 800a1b8:	9b08      	ldr	r3, [sp, #32]
 800a1ba:	2500      	movs	r5, #0
 800a1bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a1c0:	9318      	str	r3, [sp, #96]	; 0x60
 800a1c2:	462e      	mov	r6, r5
 800a1c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	6859      	ldr	r1, [r3, #4]
 800a1ca:	f001 fe6d 	bl	800bea8 <_Balloc>
 800a1ce:	9007      	str	r0, [sp, #28]
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	f43f af11 	beq.w	8009ff8 <_strtod_l+0x498>
 800a1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d8:	691a      	ldr	r2, [r3, #16]
 800a1da:	3202      	adds	r2, #2
 800a1dc:	f103 010c 	add.w	r1, r3, #12
 800a1e0:	0092      	lsls	r2, r2, #2
 800a1e2:	300c      	adds	r0, #12
 800a1e4:	f001 fe52 	bl	800be8c <memcpy>
 800a1e8:	ec4b ab10 	vmov	d0, sl, fp
 800a1ec:	aa20      	add	r2, sp, #128	; 0x80
 800a1ee:	a91f      	add	r1, sp, #124	; 0x7c
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a1f6:	f002 fa3f 	bl	800c678 <__d2b>
 800a1fa:	901e      	str	r0, [sp, #120]	; 0x78
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	f43f aefb 	beq.w	8009ff8 <_strtod_l+0x498>
 800a202:	2101      	movs	r1, #1
 800a204:	4620      	mov	r0, r4
 800a206:	f001 ff95 	bl	800c134 <__i2b>
 800a20a:	4606      	mov	r6, r0
 800a20c:	2800      	cmp	r0, #0
 800a20e:	f43f aef3 	beq.w	8009ff8 <_strtod_l+0x498>
 800a212:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a214:	9904      	ldr	r1, [sp, #16]
 800a216:	2b00      	cmp	r3, #0
 800a218:	bfab      	itete	ge
 800a21a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800a21c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800a21e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800a220:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800a224:	bfac      	ite	ge
 800a226:	eb03 0902 	addge.w	r9, r3, r2
 800a22a:	1ad7      	sublt	r7, r2, r3
 800a22c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a22e:	eba3 0801 	sub.w	r8, r3, r1
 800a232:	4490      	add	r8, r2
 800a234:	4ba3      	ldr	r3, [pc, #652]	; (800a4c4 <_strtod_l+0x964>)
 800a236:	f108 38ff 	add.w	r8, r8, #4294967295
 800a23a:	4598      	cmp	r8, r3
 800a23c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a240:	f280 80cc 	bge.w	800a3dc <_strtod_l+0x87c>
 800a244:	eba3 0308 	sub.w	r3, r3, r8
 800a248:	2b1f      	cmp	r3, #31
 800a24a:	eba2 0203 	sub.w	r2, r2, r3
 800a24e:	f04f 0101 	mov.w	r1, #1
 800a252:	f300 80b6 	bgt.w	800a3c2 <_strtod_l+0x862>
 800a256:	fa01 f303 	lsl.w	r3, r1, r3
 800a25a:	9311      	str	r3, [sp, #68]	; 0x44
 800a25c:	2300      	movs	r3, #0
 800a25e:	930c      	str	r3, [sp, #48]	; 0x30
 800a260:	eb09 0802 	add.w	r8, r9, r2
 800a264:	9b04      	ldr	r3, [sp, #16]
 800a266:	45c1      	cmp	r9, r8
 800a268:	4417      	add	r7, r2
 800a26a:	441f      	add	r7, r3
 800a26c:	464b      	mov	r3, r9
 800a26e:	bfa8      	it	ge
 800a270:	4643      	movge	r3, r8
 800a272:	42bb      	cmp	r3, r7
 800a274:	bfa8      	it	ge
 800a276:	463b      	movge	r3, r7
 800a278:	2b00      	cmp	r3, #0
 800a27a:	bfc2      	ittt	gt
 800a27c:	eba8 0803 	subgt.w	r8, r8, r3
 800a280:	1aff      	subgt	r7, r7, r3
 800a282:	eba9 0903 	subgt.w	r9, r9, r3
 800a286:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a288:	2b00      	cmp	r3, #0
 800a28a:	dd17      	ble.n	800a2bc <_strtod_l+0x75c>
 800a28c:	4631      	mov	r1, r6
 800a28e:	461a      	mov	r2, r3
 800a290:	4620      	mov	r0, r4
 800a292:	f002 f80b 	bl	800c2ac <__pow5mult>
 800a296:	4606      	mov	r6, r0
 800a298:	2800      	cmp	r0, #0
 800a29a:	f43f aead 	beq.w	8009ff8 <_strtod_l+0x498>
 800a29e:	4601      	mov	r1, r0
 800a2a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	f001 ff5c 	bl	800c160 <__multiply>
 800a2a8:	900f      	str	r0, [sp, #60]	; 0x3c
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	f43f aea4 	beq.w	8009ff8 <_strtod_l+0x498>
 800a2b0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	f001 fe38 	bl	800bf28 <_Bfree>
 800a2b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2ba:	931e      	str	r3, [sp, #120]	; 0x78
 800a2bc:	f1b8 0f00 	cmp.w	r8, #0
 800a2c0:	f300 8091 	bgt.w	800a3e6 <_strtod_l+0x886>
 800a2c4:	9b08      	ldr	r3, [sp, #32]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	dd08      	ble.n	800a2dc <_strtod_l+0x77c>
 800a2ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a2cc:	9907      	ldr	r1, [sp, #28]
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	f001 ffec 	bl	800c2ac <__pow5mult>
 800a2d4:	9007      	str	r0, [sp, #28]
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	f43f ae8e 	beq.w	8009ff8 <_strtod_l+0x498>
 800a2dc:	2f00      	cmp	r7, #0
 800a2de:	dd08      	ble.n	800a2f2 <_strtod_l+0x792>
 800a2e0:	9907      	ldr	r1, [sp, #28]
 800a2e2:	463a      	mov	r2, r7
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	f002 f83b 	bl	800c360 <__lshift>
 800a2ea:	9007      	str	r0, [sp, #28]
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	f43f ae83 	beq.w	8009ff8 <_strtod_l+0x498>
 800a2f2:	f1b9 0f00 	cmp.w	r9, #0
 800a2f6:	dd08      	ble.n	800a30a <_strtod_l+0x7aa>
 800a2f8:	4631      	mov	r1, r6
 800a2fa:	464a      	mov	r2, r9
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	f002 f82f 	bl	800c360 <__lshift>
 800a302:	4606      	mov	r6, r0
 800a304:	2800      	cmp	r0, #0
 800a306:	f43f ae77 	beq.w	8009ff8 <_strtod_l+0x498>
 800a30a:	9a07      	ldr	r2, [sp, #28]
 800a30c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a30e:	4620      	mov	r0, r4
 800a310:	f002 f8ae 	bl	800c470 <__mdiff>
 800a314:	4605      	mov	r5, r0
 800a316:	2800      	cmp	r0, #0
 800a318:	f43f ae6e 	beq.w	8009ff8 <_strtod_l+0x498>
 800a31c:	68c3      	ldr	r3, [r0, #12]
 800a31e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a320:	2300      	movs	r3, #0
 800a322:	60c3      	str	r3, [r0, #12]
 800a324:	4631      	mov	r1, r6
 800a326:	f002 f887 	bl	800c438 <__mcmp>
 800a32a:	2800      	cmp	r0, #0
 800a32c:	da65      	bge.n	800a3fa <_strtod_l+0x89a>
 800a32e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a330:	ea53 030a 	orrs.w	r3, r3, sl
 800a334:	f040 8087 	bne.w	800a446 <_strtod_l+0x8e6>
 800a338:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	f040 8082 	bne.w	800a446 <_strtod_l+0x8e6>
 800a342:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a346:	0d1b      	lsrs	r3, r3, #20
 800a348:	051b      	lsls	r3, r3, #20
 800a34a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a34e:	d97a      	bls.n	800a446 <_strtod_l+0x8e6>
 800a350:	696b      	ldr	r3, [r5, #20]
 800a352:	b913      	cbnz	r3, 800a35a <_strtod_l+0x7fa>
 800a354:	692b      	ldr	r3, [r5, #16]
 800a356:	2b01      	cmp	r3, #1
 800a358:	dd75      	ble.n	800a446 <_strtod_l+0x8e6>
 800a35a:	4629      	mov	r1, r5
 800a35c:	2201      	movs	r2, #1
 800a35e:	4620      	mov	r0, r4
 800a360:	f001 fffe 	bl	800c360 <__lshift>
 800a364:	4631      	mov	r1, r6
 800a366:	4605      	mov	r5, r0
 800a368:	f002 f866 	bl	800c438 <__mcmp>
 800a36c:	2800      	cmp	r0, #0
 800a36e:	dd6a      	ble.n	800a446 <_strtod_l+0x8e6>
 800a370:	9904      	ldr	r1, [sp, #16]
 800a372:	4a55      	ldr	r2, [pc, #340]	; (800a4c8 <_strtod_l+0x968>)
 800a374:	465b      	mov	r3, fp
 800a376:	2900      	cmp	r1, #0
 800a378:	f000 8085 	beq.w	800a486 <_strtod_l+0x926>
 800a37c:	ea02 010b 	and.w	r1, r2, fp
 800a380:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a384:	dc7f      	bgt.n	800a486 <_strtod_l+0x926>
 800a386:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a38a:	f77f aeaa 	ble.w	800a0e2 <_strtod_l+0x582>
 800a38e:	4a4f      	ldr	r2, [pc, #316]	; (800a4cc <_strtod_l+0x96c>)
 800a390:	2300      	movs	r3, #0
 800a392:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800a396:	4650      	mov	r0, sl
 800a398:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a39c:	4659      	mov	r1, fp
 800a39e:	f7f6 f92b 	bl	80005f8 <__aeabi_dmul>
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	4303      	orrs	r3, r0
 800a3a6:	bf08      	it	eq
 800a3a8:	2322      	moveq	r3, #34	; 0x22
 800a3aa:	4682      	mov	sl, r0
 800a3ac:	468b      	mov	fp, r1
 800a3ae:	bf08      	it	eq
 800a3b0:	6023      	streq	r3, [r4, #0]
 800a3b2:	e62b      	b.n	800a00c <_strtod_l+0x4ac>
 800a3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a3bc:	ea03 0a0a 	and.w	sl, r3, sl
 800a3c0:	e6de      	b.n	800a180 <_strtod_l+0x620>
 800a3c2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a3c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a3ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a3ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a3d2:	fa01 f308 	lsl.w	r3, r1, r8
 800a3d6:	930c      	str	r3, [sp, #48]	; 0x30
 800a3d8:	9111      	str	r1, [sp, #68]	; 0x44
 800a3da:	e741      	b.n	800a260 <_strtod_l+0x700>
 800a3dc:	2300      	movs	r3, #0
 800a3de:	930c      	str	r3, [sp, #48]	; 0x30
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	9311      	str	r3, [sp, #68]	; 0x44
 800a3e4:	e73c      	b.n	800a260 <_strtod_l+0x700>
 800a3e6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a3e8:	4642      	mov	r2, r8
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	f001 ffb8 	bl	800c360 <__lshift>
 800a3f0:	901e      	str	r0, [sp, #120]	; 0x78
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	f47f af66 	bne.w	800a2c4 <_strtod_l+0x764>
 800a3f8:	e5fe      	b.n	8009ff8 <_strtod_l+0x498>
 800a3fa:	465f      	mov	r7, fp
 800a3fc:	d16e      	bne.n	800a4dc <_strtod_l+0x97c>
 800a3fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a400:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a404:	b342      	cbz	r2, 800a458 <_strtod_l+0x8f8>
 800a406:	4a32      	ldr	r2, [pc, #200]	; (800a4d0 <_strtod_l+0x970>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d128      	bne.n	800a45e <_strtod_l+0x8fe>
 800a40c:	9b04      	ldr	r3, [sp, #16]
 800a40e:	4650      	mov	r0, sl
 800a410:	b1eb      	cbz	r3, 800a44e <_strtod_l+0x8ee>
 800a412:	4a2d      	ldr	r2, [pc, #180]	; (800a4c8 <_strtod_l+0x968>)
 800a414:	403a      	ands	r2, r7
 800a416:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a41a:	f04f 31ff 	mov.w	r1, #4294967295
 800a41e:	d819      	bhi.n	800a454 <_strtod_l+0x8f4>
 800a420:	0d12      	lsrs	r2, r2, #20
 800a422:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a426:	fa01 f303 	lsl.w	r3, r1, r3
 800a42a:	4298      	cmp	r0, r3
 800a42c:	d117      	bne.n	800a45e <_strtod_l+0x8fe>
 800a42e:	4b29      	ldr	r3, [pc, #164]	; (800a4d4 <_strtod_l+0x974>)
 800a430:	429f      	cmp	r7, r3
 800a432:	d102      	bne.n	800a43a <_strtod_l+0x8da>
 800a434:	3001      	adds	r0, #1
 800a436:	f43f addf 	beq.w	8009ff8 <_strtod_l+0x498>
 800a43a:	4b23      	ldr	r3, [pc, #140]	; (800a4c8 <_strtod_l+0x968>)
 800a43c:	403b      	ands	r3, r7
 800a43e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a442:	f04f 0a00 	mov.w	sl, #0
 800a446:	9b04      	ldr	r3, [sp, #16]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1a0      	bne.n	800a38e <_strtod_l+0x82e>
 800a44c:	e5de      	b.n	800a00c <_strtod_l+0x4ac>
 800a44e:	f04f 33ff 	mov.w	r3, #4294967295
 800a452:	e7ea      	b.n	800a42a <_strtod_l+0x8ca>
 800a454:	460b      	mov	r3, r1
 800a456:	e7e8      	b.n	800a42a <_strtod_l+0x8ca>
 800a458:	ea53 030a 	orrs.w	r3, r3, sl
 800a45c:	d088      	beq.n	800a370 <_strtod_l+0x810>
 800a45e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a460:	b1db      	cbz	r3, 800a49a <_strtod_l+0x93a>
 800a462:	423b      	tst	r3, r7
 800a464:	d0ef      	beq.n	800a446 <_strtod_l+0x8e6>
 800a466:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a468:	9a04      	ldr	r2, [sp, #16]
 800a46a:	4650      	mov	r0, sl
 800a46c:	4659      	mov	r1, fp
 800a46e:	b1c3      	cbz	r3, 800a4a2 <_strtod_l+0x942>
 800a470:	f7ff fb5a 	bl	8009b28 <sulp>
 800a474:	4602      	mov	r2, r0
 800a476:	460b      	mov	r3, r1
 800a478:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a47c:	f7f5 ff06 	bl	800028c <__adddf3>
 800a480:	4682      	mov	sl, r0
 800a482:	468b      	mov	fp, r1
 800a484:	e7df      	b.n	800a446 <_strtod_l+0x8e6>
 800a486:	4013      	ands	r3, r2
 800a488:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a48c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a490:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a494:	f04f 3aff 	mov.w	sl, #4294967295
 800a498:	e7d5      	b.n	800a446 <_strtod_l+0x8e6>
 800a49a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a49c:	ea13 0f0a 	tst.w	r3, sl
 800a4a0:	e7e0      	b.n	800a464 <_strtod_l+0x904>
 800a4a2:	f7ff fb41 	bl	8009b28 <sulp>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a4ae:	f7f5 feeb 	bl	8000288 <__aeabi_dsub>
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	4682      	mov	sl, r0
 800a4b8:	468b      	mov	fp, r1
 800a4ba:	f7f6 fb05 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d0c1      	beq.n	800a446 <_strtod_l+0x8e6>
 800a4c2:	e60e      	b.n	800a0e2 <_strtod_l+0x582>
 800a4c4:	fffffc02 	.word	0xfffffc02
 800a4c8:	7ff00000 	.word	0x7ff00000
 800a4cc:	39500000 	.word	0x39500000
 800a4d0:	000fffff 	.word	0x000fffff
 800a4d4:	7fefffff 	.word	0x7fefffff
 800a4d8:	0800d848 	.word	0x0800d848
 800a4dc:	4631      	mov	r1, r6
 800a4de:	4628      	mov	r0, r5
 800a4e0:	f002 f926 	bl	800c730 <__ratio>
 800a4e4:	ec59 8b10 	vmov	r8, r9, d0
 800a4e8:	ee10 0a10 	vmov	r0, s0
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a4f2:	4649      	mov	r1, r9
 800a4f4:	f7f6 fafc 	bl	8000af0 <__aeabi_dcmple>
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	d07c      	beq.n	800a5f6 <_strtod_l+0xa96>
 800a4fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d04c      	beq.n	800a59c <_strtod_l+0xa3c>
 800a502:	4b95      	ldr	r3, [pc, #596]	; (800a758 <_strtod_l+0xbf8>)
 800a504:	2200      	movs	r2, #0
 800a506:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a50a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a758 <_strtod_l+0xbf8>
 800a50e:	f04f 0800 	mov.w	r8, #0
 800a512:	4b92      	ldr	r3, [pc, #584]	; (800a75c <_strtod_l+0xbfc>)
 800a514:	403b      	ands	r3, r7
 800a516:	9311      	str	r3, [sp, #68]	; 0x44
 800a518:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a51a:	4b91      	ldr	r3, [pc, #580]	; (800a760 <_strtod_l+0xc00>)
 800a51c:	429a      	cmp	r2, r3
 800a51e:	f040 80b2 	bne.w	800a686 <_strtod_l+0xb26>
 800a522:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a526:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a52a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a52e:	ec4b ab10 	vmov	d0, sl, fp
 800a532:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800a536:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a53a:	f002 f821 	bl	800c580 <__ulp>
 800a53e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a542:	ec53 2b10 	vmov	r2, r3, d0
 800a546:	f7f6 f857 	bl	80005f8 <__aeabi_dmul>
 800a54a:	4652      	mov	r2, sl
 800a54c:	465b      	mov	r3, fp
 800a54e:	f7f5 fe9d 	bl	800028c <__adddf3>
 800a552:	460b      	mov	r3, r1
 800a554:	4981      	ldr	r1, [pc, #516]	; (800a75c <_strtod_l+0xbfc>)
 800a556:	4a83      	ldr	r2, [pc, #524]	; (800a764 <_strtod_l+0xc04>)
 800a558:	4019      	ands	r1, r3
 800a55a:	4291      	cmp	r1, r2
 800a55c:	4682      	mov	sl, r0
 800a55e:	d95e      	bls.n	800a61e <_strtod_l+0xabe>
 800a560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a562:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a566:	4293      	cmp	r3, r2
 800a568:	d103      	bne.n	800a572 <_strtod_l+0xa12>
 800a56a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a56c:	3301      	adds	r3, #1
 800a56e:	f43f ad43 	beq.w	8009ff8 <_strtod_l+0x498>
 800a572:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a770 <_strtod_l+0xc10>
 800a576:	f04f 3aff 	mov.w	sl, #4294967295
 800a57a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a57c:	4620      	mov	r0, r4
 800a57e:	f001 fcd3 	bl	800bf28 <_Bfree>
 800a582:	9907      	ldr	r1, [sp, #28]
 800a584:	4620      	mov	r0, r4
 800a586:	f001 fccf 	bl	800bf28 <_Bfree>
 800a58a:	4631      	mov	r1, r6
 800a58c:	4620      	mov	r0, r4
 800a58e:	f001 fccb 	bl	800bf28 <_Bfree>
 800a592:	4629      	mov	r1, r5
 800a594:	4620      	mov	r0, r4
 800a596:	f001 fcc7 	bl	800bf28 <_Bfree>
 800a59a:	e613      	b.n	800a1c4 <_strtod_l+0x664>
 800a59c:	f1ba 0f00 	cmp.w	sl, #0
 800a5a0:	d11b      	bne.n	800a5da <_strtod_l+0xa7a>
 800a5a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5a6:	b9f3      	cbnz	r3, 800a5e6 <_strtod_l+0xa86>
 800a5a8:	4b6b      	ldr	r3, [pc, #428]	; (800a758 <_strtod_l+0xbf8>)
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	4640      	mov	r0, r8
 800a5ae:	4649      	mov	r1, r9
 800a5b0:	f7f6 fa94 	bl	8000adc <__aeabi_dcmplt>
 800a5b4:	b9d0      	cbnz	r0, 800a5ec <_strtod_l+0xa8c>
 800a5b6:	4640      	mov	r0, r8
 800a5b8:	4649      	mov	r1, r9
 800a5ba:	4b6b      	ldr	r3, [pc, #428]	; (800a768 <_strtod_l+0xc08>)
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f7f6 f81b 	bl	80005f8 <__aeabi_dmul>
 800a5c2:	4680      	mov	r8, r0
 800a5c4:	4689      	mov	r9, r1
 800a5c6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a5ca:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800a5ce:	931b      	str	r3, [sp, #108]	; 0x6c
 800a5d0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a5d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a5d8:	e79b      	b.n	800a512 <_strtod_l+0x9b2>
 800a5da:	f1ba 0f01 	cmp.w	sl, #1
 800a5de:	d102      	bne.n	800a5e6 <_strtod_l+0xa86>
 800a5e0:	2f00      	cmp	r7, #0
 800a5e2:	f43f ad7e 	beq.w	800a0e2 <_strtod_l+0x582>
 800a5e6:	4b61      	ldr	r3, [pc, #388]	; (800a76c <_strtod_l+0xc0c>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	e78c      	b.n	800a506 <_strtod_l+0x9a6>
 800a5ec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a768 <_strtod_l+0xc08>
 800a5f0:	f04f 0800 	mov.w	r8, #0
 800a5f4:	e7e7      	b.n	800a5c6 <_strtod_l+0xa66>
 800a5f6:	4b5c      	ldr	r3, [pc, #368]	; (800a768 <_strtod_l+0xc08>)
 800a5f8:	4640      	mov	r0, r8
 800a5fa:	4649      	mov	r1, r9
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f7f5 fffb 	bl	80005f8 <__aeabi_dmul>
 800a602:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a604:	4680      	mov	r8, r0
 800a606:	4689      	mov	r9, r1
 800a608:	b933      	cbnz	r3, 800a618 <_strtod_l+0xab8>
 800a60a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a60e:	9012      	str	r0, [sp, #72]	; 0x48
 800a610:	9313      	str	r3, [sp, #76]	; 0x4c
 800a612:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a616:	e7dd      	b.n	800a5d4 <_strtod_l+0xa74>
 800a618:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800a61c:	e7f9      	b.n	800a612 <_strtod_l+0xab2>
 800a61e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a622:	9b04      	ldr	r3, [sp, #16]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1a8      	bne.n	800a57a <_strtod_l+0xa1a>
 800a628:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a62c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a62e:	0d1b      	lsrs	r3, r3, #20
 800a630:	051b      	lsls	r3, r3, #20
 800a632:	429a      	cmp	r2, r3
 800a634:	d1a1      	bne.n	800a57a <_strtod_l+0xa1a>
 800a636:	4640      	mov	r0, r8
 800a638:	4649      	mov	r1, r9
 800a63a:	f7f6 fb25 	bl	8000c88 <__aeabi_d2lz>
 800a63e:	f7f5 ffad 	bl	800059c <__aeabi_l2d>
 800a642:	4602      	mov	r2, r0
 800a644:	460b      	mov	r3, r1
 800a646:	4640      	mov	r0, r8
 800a648:	4649      	mov	r1, r9
 800a64a:	f7f5 fe1d 	bl	8000288 <__aeabi_dsub>
 800a64e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a650:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a654:	ea43 030a 	orr.w	r3, r3, sl
 800a658:	4313      	orrs	r3, r2
 800a65a:	4680      	mov	r8, r0
 800a65c:	4689      	mov	r9, r1
 800a65e:	d053      	beq.n	800a708 <_strtod_l+0xba8>
 800a660:	a335      	add	r3, pc, #212	; (adr r3, 800a738 <_strtod_l+0xbd8>)
 800a662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a666:	f7f6 fa39 	bl	8000adc <__aeabi_dcmplt>
 800a66a:	2800      	cmp	r0, #0
 800a66c:	f47f acce 	bne.w	800a00c <_strtod_l+0x4ac>
 800a670:	a333      	add	r3, pc, #204	; (adr r3, 800a740 <_strtod_l+0xbe0>)
 800a672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a676:	4640      	mov	r0, r8
 800a678:	4649      	mov	r1, r9
 800a67a:	f7f6 fa4d 	bl	8000b18 <__aeabi_dcmpgt>
 800a67e:	2800      	cmp	r0, #0
 800a680:	f43f af7b 	beq.w	800a57a <_strtod_l+0xa1a>
 800a684:	e4c2      	b.n	800a00c <_strtod_l+0x4ac>
 800a686:	9b04      	ldr	r3, [sp, #16]
 800a688:	b333      	cbz	r3, 800a6d8 <_strtod_l+0xb78>
 800a68a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a68c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a690:	d822      	bhi.n	800a6d8 <_strtod_l+0xb78>
 800a692:	a32d      	add	r3, pc, #180	; (adr r3, 800a748 <_strtod_l+0xbe8>)
 800a694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a698:	4640      	mov	r0, r8
 800a69a:	4649      	mov	r1, r9
 800a69c:	f7f6 fa28 	bl	8000af0 <__aeabi_dcmple>
 800a6a0:	b1a0      	cbz	r0, 800a6cc <_strtod_l+0xb6c>
 800a6a2:	4649      	mov	r1, r9
 800a6a4:	4640      	mov	r0, r8
 800a6a6:	f7f6 fa7f 	bl	8000ba8 <__aeabi_d2uiz>
 800a6aa:	2801      	cmp	r0, #1
 800a6ac:	bf38      	it	cc
 800a6ae:	2001      	movcc	r0, #1
 800a6b0:	f7f5 ff28 	bl	8000504 <__aeabi_ui2d>
 800a6b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6b6:	4680      	mov	r8, r0
 800a6b8:	4689      	mov	r9, r1
 800a6ba:	bb13      	cbnz	r3, 800a702 <_strtod_l+0xba2>
 800a6bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6c0:	9014      	str	r0, [sp, #80]	; 0x50
 800a6c2:	9315      	str	r3, [sp, #84]	; 0x54
 800a6c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a6c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a6cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a6d0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a6d4:	1a9b      	subs	r3, r3, r2
 800a6d6:	930d      	str	r3, [sp, #52]	; 0x34
 800a6d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6dc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a6e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a6e4:	f001 ff4c 	bl	800c580 <__ulp>
 800a6e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6ec:	ec53 2b10 	vmov	r2, r3, d0
 800a6f0:	f7f5 ff82 	bl	80005f8 <__aeabi_dmul>
 800a6f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a6f8:	f7f5 fdc8 	bl	800028c <__adddf3>
 800a6fc:	4682      	mov	sl, r0
 800a6fe:	468b      	mov	fp, r1
 800a700:	e78f      	b.n	800a622 <_strtod_l+0xac2>
 800a702:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800a706:	e7dd      	b.n	800a6c4 <_strtod_l+0xb64>
 800a708:	a311      	add	r3, pc, #68	; (adr r3, 800a750 <_strtod_l+0xbf0>)
 800a70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70e:	f7f6 f9e5 	bl	8000adc <__aeabi_dcmplt>
 800a712:	e7b4      	b.n	800a67e <_strtod_l+0xb1e>
 800a714:	2300      	movs	r3, #0
 800a716:	930e      	str	r3, [sp, #56]	; 0x38
 800a718:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a71a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a71c:	6013      	str	r3, [r2, #0]
 800a71e:	f7ff ba65 	b.w	8009bec <_strtod_l+0x8c>
 800a722:	2b65      	cmp	r3, #101	; 0x65
 800a724:	f43f ab5d 	beq.w	8009de2 <_strtod_l+0x282>
 800a728:	2b45      	cmp	r3, #69	; 0x45
 800a72a:	f43f ab5a 	beq.w	8009de2 <_strtod_l+0x282>
 800a72e:	2201      	movs	r2, #1
 800a730:	f7ff bb92 	b.w	8009e58 <_strtod_l+0x2f8>
 800a734:	f3af 8000 	nop.w
 800a738:	94a03595 	.word	0x94a03595
 800a73c:	3fdfffff 	.word	0x3fdfffff
 800a740:	35afe535 	.word	0x35afe535
 800a744:	3fe00000 	.word	0x3fe00000
 800a748:	ffc00000 	.word	0xffc00000
 800a74c:	41dfffff 	.word	0x41dfffff
 800a750:	94a03595 	.word	0x94a03595
 800a754:	3fcfffff 	.word	0x3fcfffff
 800a758:	3ff00000 	.word	0x3ff00000
 800a75c:	7ff00000 	.word	0x7ff00000
 800a760:	7fe00000 	.word	0x7fe00000
 800a764:	7c9fffff 	.word	0x7c9fffff
 800a768:	3fe00000 	.word	0x3fe00000
 800a76c:	bff00000 	.word	0xbff00000
 800a770:	7fefffff 	.word	0x7fefffff

0800a774 <_strtod_r>:
 800a774:	4b01      	ldr	r3, [pc, #4]	; (800a77c <_strtod_r+0x8>)
 800a776:	f7ff b9f3 	b.w	8009b60 <_strtod_l>
 800a77a:	bf00      	nop
 800a77c:	2000008c 	.word	0x2000008c

0800a780 <_strtol_l.isra.0>:
 800a780:	2b01      	cmp	r3, #1
 800a782:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a786:	d001      	beq.n	800a78c <_strtol_l.isra.0+0xc>
 800a788:	2b24      	cmp	r3, #36	; 0x24
 800a78a:	d906      	bls.n	800a79a <_strtol_l.isra.0+0x1a>
 800a78c:	f7fe fae2 	bl	8008d54 <__errno>
 800a790:	2316      	movs	r3, #22
 800a792:	6003      	str	r3, [r0, #0]
 800a794:	2000      	movs	r0, #0
 800a796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a79a:	4f3a      	ldr	r7, [pc, #232]	; (800a884 <_strtol_l.isra.0+0x104>)
 800a79c:	468e      	mov	lr, r1
 800a79e:	4676      	mov	r6, lr
 800a7a0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a7a4:	5de5      	ldrb	r5, [r4, r7]
 800a7a6:	f015 0508 	ands.w	r5, r5, #8
 800a7aa:	d1f8      	bne.n	800a79e <_strtol_l.isra.0+0x1e>
 800a7ac:	2c2d      	cmp	r4, #45	; 0x2d
 800a7ae:	d134      	bne.n	800a81a <_strtol_l.isra.0+0x9a>
 800a7b0:	f89e 4000 	ldrb.w	r4, [lr]
 800a7b4:	f04f 0801 	mov.w	r8, #1
 800a7b8:	f106 0e02 	add.w	lr, r6, #2
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d05c      	beq.n	800a87a <_strtol_l.isra.0+0xfa>
 800a7c0:	2b10      	cmp	r3, #16
 800a7c2:	d10c      	bne.n	800a7de <_strtol_l.isra.0+0x5e>
 800a7c4:	2c30      	cmp	r4, #48	; 0x30
 800a7c6:	d10a      	bne.n	800a7de <_strtol_l.isra.0+0x5e>
 800a7c8:	f89e 4000 	ldrb.w	r4, [lr]
 800a7cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a7d0:	2c58      	cmp	r4, #88	; 0x58
 800a7d2:	d14d      	bne.n	800a870 <_strtol_l.isra.0+0xf0>
 800a7d4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a7d8:	2310      	movs	r3, #16
 800a7da:	f10e 0e02 	add.w	lr, lr, #2
 800a7de:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a7e2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a7e6:	2600      	movs	r6, #0
 800a7e8:	fbbc f9f3 	udiv	r9, ip, r3
 800a7ec:	4635      	mov	r5, r6
 800a7ee:	fb03 ca19 	mls	sl, r3, r9, ip
 800a7f2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a7f6:	2f09      	cmp	r7, #9
 800a7f8:	d818      	bhi.n	800a82c <_strtol_l.isra.0+0xac>
 800a7fa:	463c      	mov	r4, r7
 800a7fc:	42a3      	cmp	r3, r4
 800a7fe:	dd24      	ble.n	800a84a <_strtol_l.isra.0+0xca>
 800a800:	2e00      	cmp	r6, #0
 800a802:	db1f      	blt.n	800a844 <_strtol_l.isra.0+0xc4>
 800a804:	45a9      	cmp	r9, r5
 800a806:	d31d      	bcc.n	800a844 <_strtol_l.isra.0+0xc4>
 800a808:	d101      	bne.n	800a80e <_strtol_l.isra.0+0x8e>
 800a80a:	45a2      	cmp	sl, r4
 800a80c:	db1a      	blt.n	800a844 <_strtol_l.isra.0+0xc4>
 800a80e:	fb05 4503 	mla	r5, r5, r3, r4
 800a812:	2601      	movs	r6, #1
 800a814:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a818:	e7eb      	b.n	800a7f2 <_strtol_l.isra.0+0x72>
 800a81a:	2c2b      	cmp	r4, #43	; 0x2b
 800a81c:	bf08      	it	eq
 800a81e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a822:	46a8      	mov	r8, r5
 800a824:	bf08      	it	eq
 800a826:	f106 0e02 	addeq.w	lr, r6, #2
 800a82a:	e7c7      	b.n	800a7bc <_strtol_l.isra.0+0x3c>
 800a82c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a830:	2f19      	cmp	r7, #25
 800a832:	d801      	bhi.n	800a838 <_strtol_l.isra.0+0xb8>
 800a834:	3c37      	subs	r4, #55	; 0x37
 800a836:	e7e1      	b.n	800a7fc <_strtol_l.isra.0+0x7c>
 800a838:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a83c:	2f19      	cmp	r7, #25
 800a83e:	d804      	bhi.n	800a84a <_strtol_l.isra.0+0xca>
 800a840:	3c57      	subs	r4, #87	; 0x57
 800a842:	e7db      	b.n	800a7fc <_strtol_l.isra.0+0x7c>
 800a844:	f04f 36ff 	mov.w	r6, #4294967295
 800a848:	e7e4      	b.n	800a814 <_strtol_l.isra.0+0x94>
 800a84a:	2e00      	cmp	r6, #0
 800a84c:	da05      	bge.n	800a85a <_strtol_l.isra.0+0xda>
 800a84e:	2322      	movs	r3, #34	; 0x22
 800a850:	6003      	str	r3, [r0, #0]
 800a852:	4665      	mov	r5, ip
 800a854:	b942      	cbnz	r2, 800a868 <_strtol_l.isra.0+0xe8>
 800a856:	4628      	mov	r0, r5
 800a858:	e79d      	b.n	800a796 <_strtol_l.isra.0+0x16>
 800a85a:	f1b8 0f00 	cmp.w	r8, #0
 800a85e:	d000      	beq.n	800a862 <_strtol_l.isra.0+0xe2>
 800a860:	426d      	negs	r5, r5
 800a862:	2a00      	cmp	r2, #0
 800a864:	d0f7      	beq.n	800a856 <_strtol_l.isra.0+0xd6>
 800a866:	b10e      	cbz	r6, 800a86c <_strtol_l.isra.0+0xec>
 800a868:	f10e 31ff 	add.w	r1, lr, #4294967295
 800a86c:	6011      	str	r1, [r2, #0]
 800a86e:	e7f2      	b.n	800a856 <_strtol_l.isra.0+0xd6>
 800a870:	2430      	movs	r4, #48	; 0x30
 800a872:	2b00      	cmp	r3, #0
 800a874:	d1b3      	bne.n	800a7de <_strtol_l.isra.0+0x5e>
 800a876:	2308      	movs	r3, #8
 800a878:	e7b1      	b.n	800a7de <_strtol_l.isra.0+0x5e>
 800a87a:	2c30      	cmp	r4, #48	; 0x30
 800a87c:	d0a4      	beq.n	800a7c8 <_strtol_l.isra.0+0x48>
 800a87e:	230a      	movs	r3, #10
 800a880:	e7ad      	b.n	800a7de <_strtol_l.isra.0+0x5e>
 800a882:	bf00      	nop
 800a884:	0800d871 	.word	0x0800d871

0800a888 <_strtol_r>:
 800a888:	f7ff bf7a 	b.w	800a780 <_strtol_l.isra.0>

0800a88c <quorem>:
 800a88c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a890:	6903      	ldr	r3, [r0, #16]
 800a892:	690c      	ldr	r4, [r1, #16]
 800a894:	42a3      	cmp	r3, r4
 800a896:	4607      	mov	r7, r0
 800a898:	f2c0 8081 	blt.w	800a99e <quorem+0x112>
 800a89c:	3c01      	subs	r4, #1
 800a89e:	f101 0814 	add.w	r8, r1, #20
 800a8a2:	f100 0514 	add.w	r5, r0, #20
 800a8a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8aa:	9301      	str	r3, [sp, #4]
 800a8ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a8b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a8bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a8c0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a8c4:	d331      	bcc.n	800a92a <quorem+0x9e>
 800a8c6:	f04f 0e00 	mov.w	lr, #0
 800a8ca:	4640      	mov	r0, r8
 800a8cc:	46ac      	mov	ip, r5
 800a8ce:	46f2      	mov	sl, lr
 800a8d0:	f850 2b04 	ldr.w	r2, [r0], #4
 800a8d4:	b293      	uxth	r3, r2
 800a8d6:	fb06 e303 	mla	r3, r6, r3, lr
 800a8da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	ebaa 0303 	sub.w	r3, sl, r3
 800a8e4:	0c12      	lsrs	r2, r2, #16
 800a8e6:	f8dc a000 	ldr.w	sl, [ip]
 800a8ea:	fb06 e202 	mla	r2, r6, r2, lr
 800a8ee:	fa13 f38a 	uxtah	r3, r3, sl
 800a8f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a8f6:	fa1f fa82 	uxth.w	sl, r2
 800a8fa:	f8dc 2000 	ldr.w	r2, [ip]
 800a8fe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a902:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a906:	b29b      	uxth	r3, r3
 800a908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a90c:	4581      	cmp	r9, r0
 800a90e:	f84c 3b04 	str.w	r3, [ip], #4
 800a912:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a916:	d2db      	bcs.n	800a8d0 <quorem+0x44>
 800a918:	f855 300b 	ldr.w	r3, [r5, fp]
 800a91c:	b92b      	cbnz	r3, 800a92a <quorem+0x9e>
 800a91e:	9b01      	ldr	r3, [sp, #4]
 800a920:	3b04      	subs	r3, #4
 800a922:	429d      	cmp	r5, r3
 800a924:	461a      	mov	r2, r3
 800a926:	d32e      	bcc.n	800a986 <quorem+0xfa>
 800a928:	613c      	str	r4, [r7, #16]
 800a92a:	4638      	mov	r0, r7
 800a92c:	f001 fd84 	bl	800c438 <__mcmp>
 800a930:	2800      	cmp	r0, #0
 800a932:	db24      	blt.n	800a97e <quorem+0xf2>
 800a934:	3601      	adds	r6, #1
 800a936:	4628      	mov	r0, r5
 800a938:	f04f 0c00 	mov.w	ip, #0
 800a93c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a940:	f8d0 e000 	ldr.w	lr, [r0]
 800a944:	b293      	uxth	r3, r2
 800a946:	ebac 0303 	sub.w	r3, ip, r3
 800a94a:	0c12      	lsrs	r2, r2, #16
 800a94c:	fa13 f38e 	uxtah	r3, r3, lr
 800a950:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a954:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a958:	b29b      	uxth	r3, r3
 800a95a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a95e:	45c1      	cmp	r9, r8
 800a960:	f840 3b04 	str.w	r3, [r0], #4
 800a964:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a968:	d2e8      	bcs.n	800a93c <quorem+0xb0>
 800a96a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a96e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a972:	b922      	cbnz	r2, 800a97e <quorem+0xf2>
 800a974:	3b04      	subs	r3, #4
 800a976:	429d      	cmp	r5, r3
 800a978:	461a      	mov	r2, r3
 800a97a:	d30a      	bcc.n	800a992 <quorem+0x106>
 800a97c:	613c      	str	r4, [r7, #16]
 800a97e:	4630      	mov	r0, r6
 800a980:	b003      	add	sp, #12
 800a982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a986:	6812      	ldr	r2, [r2, #0]
 800a988:	3b04      	subs	r3, #4
 800a98a:	2a00      	cmp	r2, #0
 800a98c:	d1cc      	bne.n	800a928 <quorem+0x9c>
 800a98e:	3c01      	subs	r4, #1
 800a990:	e7c7      	b.n	800a922 <quorem+0x96>
 800a992:	6812      	ldr	r2, [r2, #0]
 800a994:	3b04      	subs	r3, #4
 800a996:	2a00      	cmp	r2, #0
 800a998:	d1f0      	bne.n	800a97c <quorem+0xf0>
 800a99a:	3c01      	subs	r4, #1
 800a99c:	e7eb      	b.n	800a976 <quorem+0xea>
 800a99e:	2000      	movs	r0, #0
 800a9a0:	e7ee      	b.n	800a980 <quorem+0xf4>
 800a9a2:	0000      	movs	r0, r0
 800a9a4:	0000      	movs	r0, r0
	...

0800a9a8 <_dtoa_r>:
 800a9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ac:	ed2d 8b02 	vpush	{d8}
 800a9b0:	ec57 6b10 	vmov	r6, r7, d0
 800a9b4:	b095      	sub	sp, #84	; 0x54
 800a9b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a9b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a9bc:	9105      	str	r1, [sp, #20]
 800a9be:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	9209      	str	r2, [sp, #36]	; 0x24
 800a9c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9c8:	b975      	cbnz	r5, 800a9e8 <_dtoa_r+0x40>
 800a9ca:	2010      	movs	r0, #16
 800a9cc:	f001 fa44 	bl	800be58 <malloc>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	6260      	str	r0, [r4, #36]	; 0x24
 800a9d4:	b920      	cbnz	r0, 800a9e0 <_dtoa_r+0x38>
 800a9d6:	4bb2      	ldr	r3, [pc, #712]	; (800aca0 <_dtoa_r+0x2f8>)
 800a9d8:	21ea      	movs	r1, #234	; 0xea
 800a9da:	48b2      	ldr	r0, [pc, #712]	; (800aca4 <_dtoa_r+0x2fc>)
 800a9dc:	f002 fbde 	bl	800d19c <__assert_func>
 800a9e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a9e4:	6005      	str	r5, [r0, #0]
 800a9e6:	60c5      	str	r5, [r0, #12]
 800a9e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9ea:	6819      	ldr	r1, [r3, #0]
 800a9ec:	b151      	cbz	r1, 800aa04 <_dtoa_r+0x5c>
 800a9ee:	685a      	ldr	r2, [r3, #4]
 800a9f0:	604a      	str	r2, [r1, #4]
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	4093      	lsls	r3, r2
 800a9f6:	608b      	str	r3, [r1, #8]
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	f001 fa95 	bl	800bf28 <_Bfree>
 800a9fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa00:	2200      	movs	r2, #0
 800aa02:	601a      	str	r2, [r3, #0]
 800aa04:	1e3b      	subs	r3, r7, #0
 800aa06:	bfb9      	ittee	lt
 800aa08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aa0c:	9303      	strlt	r3, [sp, #12]
 800aa0e:	2300      	movge	r3, #0
 800aa10:	f8c8 3000 	strge.w	r3, [r8]
 800aa14:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800aa18:	4ba3      	ldr	r3, [pc, #652]	; (800aca8 <_dtoa_r+0x300>)
 800aa1a:	bfbc      	itt	lt
 800aa1c:	2201      	movlt	r2, #1
 800aa1e:	f8c8 2000 	strlt.w	r2, [r8]
 800aa22:	ea33 0309 	bics.w	r3, r3, r9
 800aa26:	d11b      	bne.n	800aa60 <_dtoa_r+0xb8>
 800aa28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aa2a:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa2e:	6013      	str	r3, [r2, #0]
 800aa30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa34:	4333      	orrs	r3, r6
 800aa36:	f000 857a 	beq.w	800b52e <_dtoa_r+0xb86>
 800aa3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa3c:	b963      	cbnz	r3, 800aa58 <_dtoa_r+0xb0>
 800aa3e:	4b9b      	ldr	r3, [pc, #620]	; (800acac <_dtoa_r+0x304>)
 800aa40:	e024      	b.n	800aa8c <_dtoa_r+0xe4>
 800aa42:	4b9b      	ldr	r3, [pc, #620]	; (800acb0 <_dtoa_r+0x308>)
 800aa44:	9300      	str	r3, [sp, #0]
 800aa46:	3308      	adds	r3, #8
 800aa48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aa4a:	6013      	str	r3, [r2, #0]
 800aa4c:	9800      	ldr	r0, [sp, #0]
 800aa4e:	b015      	add	sp, #84	; 0x54
 800aa50:	ecbd 8b02 	vpop	{d8}
 800aa54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa58:	4b94      	ldr	r3, [pc, #592]	; (800acac <_dtoa_r+0x304>)
 800aa5a:	9300      	str	r3, [sp, #0]
 800aa5c:	3303      	adds	r3, #3
 800aa5e:	e7f3      	b.n	800aa48 <_dtoa_r+0xa0>
 800aa60:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa64:	2200      	movs	r2, #0
 800aa66:	ec51 0b17 	vmov	r0, r1, d7
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800aa70:	f7f6 f82a 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa74:	4680      	mov	r8, r0
 800aa76:	b158      	cbz	r0, 800aa90 <_dtoa_r+0xe8>
 800aa78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	6013      	str	r3, [r2, #0]
 800aa7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f000 8551 	beq.w	800b528 <_dtoa_r+0xb80>
 800aa86:	488b      	ldr	r0, [pc, #556]	; (800acb4 <_dtoa_r+0x30c>)
 800aa88:	6018      	str	r0, [r3, #0]
 800aa8a:	1e43      	subs	r3, r0, #1
 800aa8c:	9300      	str	r3, [sp, #0]
 800aa8e:	e7dd      	b.n	800aa4c <_dtoa_r+0xa4>
 800aa90:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800aa94:	aa12      	add	r2, sp, #72	; 0x48
 800aa96:	a913      	add	r1, sp, #76	; 0x4c
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f001 fded 	bl	800c678 <__d2b>
 800aa9e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aaa2:	4683      	mov	fp, r0
 800aaa4:	2d00      	cmp	r5, #0
 800aaa6:	d07c      	beq.n	800aba2 <_dtoa_r+0x1fa>
 800aaa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaaa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800aaae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aab2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800aab6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800aaba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800aabe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aac2:	4b7d      	ldr	r3, [pc, #500]	; (800acb8 <_dtoa_r+0x310>)
 800aac4:	2200      	movs	r2, #0
 800aac6:	4630      	mov	r0, r6
 800aac8:	4639      	mov	r1, r7
 800aaca:	f7f5 fbdd 	bl	8000288 <__aeabi_dsub>
 800aace:	a36e      	add	r3, pc, #440	; (adr r3, 800ac88 <_dtoa_r+0x2e0>)
 800aad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad4:	f7f5 fd90 	bl	80005f8 <__aeabi_dmul>
 800aad8:	a36d      	add	r3, pc, #436	; (adr r3, 800ac90 <_dtoa_r+0x2e8>)
 800aada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aade:	f7f5 fbd5 	bl	800028c <__adddf3>
 800aae2:	4606      	mov	r6, r0
 800aae4:	4628      	mov	r0, r5
 800aae6:	460f      	mov	r7, r1
 800aae8:	f7f5 fd1c 	bl	8000524 <__aeabi_i2d>
 800aaec:	a36a      	add	r3, pc, #424	; (adr r3, 800ac98 <_dtoa_r+0x2f0>)
 800aaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf2:	f7f5 fd81 	bl	80005f8 <__aeabi_dmul>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	460b      	mov	r3, r1
 800aafa:	4630      	mov	r0, r6
 800aafc:	4639      	mov	r1, r7
 800aafe:	f7f5 fbc5 	bl	800028c <__adddf3>
 800ab02:	4606      	mov	r6, r0
 800ab04:	460f      	mov	r7, r1
 800ab06:	f7f6 f827 	bl	8000b58 <__aeabi_d2iz>
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	4682      	mov	sl, r0
 800ab0e:	2300      	movs	r3, #0
 800ab10:	4630      	mov	r0, r6
 800ab12:	4639      	mov	r1, r7
 800ab14:	f7f5 ffe2 	bl	8000adc <__aeabi_dcmplt>
 800ab18:	b148      	cbz	r0, 800ab2e <_dtoa_r+0x186>
 800ab1a:	4650      	mov	r0, sl
 800ab1c:	f7f5 fd02 	bl	8000524 <__aeabi_i2d>
 800ab20:	4632      	mov	r2, r6
 800ab22:	463b      	mov	r3, r7
 800ab24:	f7f5 ffd0 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab28:	b908      	cbnz	r0, 800ab2e <_dtoa_r+0x186>
 800ab2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab2e:	f1ba 0f16 	cmp.w	sl, #22
 800ab32:	d854      	bhi.n	800abde <_dtoa_r+0x236>
 800ab34:	4b61      	ldr	r3, [pc, #388]	; (800acbc <_dtoa_r+0x314>)
 800ab36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ab42:	f7f5 ffcb 	bl	8000adc <__aeabi_dcmplt>
 800ab46:	2800      	cmp	r0, #0
 800ab48:	d04b      	beq.n	800abe2 <_dtoa_r+0x23a>
 800ab4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab4e:	2300      	movs	r3, #0
 800ab50:	930e      	str	r3, [sp, #56]	; 0x38
 800ab52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab54:	1b5d      	subs	r5, r3, r5
 800ab56:	1e6b      	subs	r3, r5, #1
 800ab58:	9304      	str	r3, [sp, #16]
 800ab5a:	bf43      	ittte	mi
 800ab5c:	2300      	movmi	r3, #0
 800ab5e:	f1c5 0801 	rsbmi	r8, r5, #1
 800ab62:	9304      	strmi	r3, [sp, #16]
 800ab64:	f04f 0800 	movpl.w	r8, #0
 800ab68:	f1ba 0f00 	cmp.w	sl, #0
 800ab6c:	db3b      	blt.n	800abe6 <_dtoa_r+0x23e>
 800ab6e:	9b04      	ldr	r3, [sp, #16]
 800ab70:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ab74:	4453      	add	r3, sl
 800ab76:	9304      	str	r3, [sp, #16]
 800ab78:	2300      	movs	r3, #0
 800ab7a:	9306      	str	r3, [sp, #24]
 800ab7c:	9b05      	ldr	r3, [sp, #20]
 800ab7e:	2b09      	cmp	r3, #9
 800ab80:	d869      	bhi.n	800ac56 <_dtoa_r+0x2ae>
 800ab82:	2b05      	cmp	r3, #5
 800ab84:	bfc4      	itt	gt
 800ab86:	3b04      	subgt	r3, #4
 800ab88:	9305      	strgt	r3, [sp, #20]
 800ab8a:	9b05      	ldr	r3, [sp, #20]
 800ab8c:	f1a3 0302 	sub.w	r3, r3, #2
 800ab90:	bfcc      	ite	gt
 800ab92:	2500      	movgt	r5, #0
 800ab94:	2501      	movle	r5, #1
 800ab96:	2b03      	cmp	r3, #3
 800ab98:	d869      	bhi.n	800ac6e <_dtoa_r+0x2c6>
 800ab9a:	e8df f003 	tbb	[pc, r3]
 800ab9e:	4e2c      	.short	0x4e2c
 800aba0:	5a4c      	.short	0x5a4c
 800aba2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800aba6:	441d      	add	r5, r3
 800aba8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800abac:	2b20      	cmp	r3, #32
 800abae:	bfc1      	itttt	gt
 800abb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800abb4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800abb8:	fa09 f303 	lslgt.w	r3, r9, r3
 800abbc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800abc0:	bfda      	itte	le
 800abc2:	f1c3 0320 	rsble	r3, r3, #32
 800abc6:	fa06 f003 	lslle.w	r0, r6, r3
 800abca:	4318      	orrgt	r0, r3
 800abcc:	f7f5 fc9a 	bl	8000504 <__aeabi_ui2d>
 800abd0:	2301      	movs	r3, #1
 800abd2:	4606      	mov	r6, r0
 800abd4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800abd8:	3d01      	subs	r5, #1
 800abda:	9310      	str	r3, [sp, #64]	; 0x40
 800abdc:	e771      	b.n	800aac2 <_dtoa_r+0x11a>
 800abde:	2301      	movs	r3, #1
 800abe0:	e7b6      	b.n	800ab50 <_dtoa_r+0x1a8>
 800abe2:	900e      	str	r0, [sp, #56]	; 0x38
 800abe4:	e7b5      	b.n	800ab52 <_dtoa_r+0x1aa>
 800abe6:	f1ca 0300 	rsb	r3, sl, #0
 800abea:	9306      	str	r3, [sp, #24]
 800abec:	2300      	movs	r3, #0
 800abee:	eba8 080a 	sub.w	r8, r8, sl
 800abf2:	930d      	str	r3, [sp, #52]	; 0x34
 800abf4:	e7c2      	b.n	800ab7c <_dtoa_r+0x1d4>
 800abf6:	2300      	movs	r3, #0
 800abf8:	9308      	str	r3, [sp, #32]
 800abfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	dc39      	bgt.n	800ac74 <_dtoa_r+0x2cc>
 800ac00:	f04f 0901 	mov.w	r9, #1
 800ac04:	f8cd 9004 	str.w	r9, [sp, #4]
 800ac08:	464b      	mov	r3, r9
 800ac0a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ac0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ac10:	2200      	movs	r2, #0
 800ac12:	6042      	str	r2, [r0, #4]
 800ac14:	2204      	movs	r2, #4
 800ac16:	f102 0614 	add.w	r6, r2, #20
 800ac1a:	429e      	cmp	r6, r3
 800ac1c:	6841      	ldr	r1, [r0, #4]
 800ac1e:	d92f      	bls.n	800ac80 <_dtoa_r+0x2d8>
 800ac20:	4620      	mov	r0, r4
 800ac22:	f001 f941 	bl	800bea8 <_Balloc>
 800ac26:	9000      	str	r0, [sp, #0]
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d14b      	bne.n	800acc4 <_dtoa_r+0x31c>
 800ac2c:	4b24      	ldr	r3, [pc, #144]	; (800acc0 <_dtoa_r+0x318>)
 800ac2e:	4602      	mov	r2, r0
 800ac30:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ac34:	e6d1      	b.n	800a9da <_dtoa_r+0x32>
 800ac36:	2301      	movs	r3, #1
 800ac38:	e7de      	b.n	800abf8 <_dtoa_r+0x250>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	9308      	str	r3, [sp, #32]
 800ac3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac40:	eb0a 0903 	add.w	r9, sl, r3
 800ac44:	f109 0301 	add.w	r3, r9, #1
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	9301      	str	r3, [sp, #4]
 800ac4c:	bfb8      	it	lt
 800ac4e:	2301      	movlt	r3, #1
 800ac50:	e7dd      	b.n	800ac0e <_dtoa_r+0x266>
 800ac52:	2301      	movs	r3, #1
 800ac54:	e7f2      	b.n	800ac3c <_dtoa_r+0x294>
 800ac56:	2501      	movs	r5, #1
 800ac58:	2300      	movs	r3, #0
 800ac5a:	9305      	str	r3, [sp, #20]
 800ac5c:	9508      	str	r5, [sp, #32]
 800ac5e:	f04f 39ff 	mov.w	r9, #4294967295
 800ac62:	2200      	movs	r2, #0
 800ac64:	f8cd 9004 	str.w	r9, [sp, #4]
 800ac68:	2312      	movs	r3, #18
 800ac6a:	9209      	str	r2, [sp, #36]	; 0x24
 800ac6c:	e7cf      	b.n	800ac0e <_dtoa_r+0x266>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	9308      	str	r3, [sp, #32]
 800ac72:	e7f4      	b.n	800ac5e <_dtoa_r+0x2b6>
 800ac74:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ac78:	f8cd 9004 	str.w	r9, [sp, #4]
 800ac7c:	464b      	mov	r3, r9
 800ac7e:	e7c6      	b.n	800ac0e <_dtoa_r+0x266>
 800ac80:	3101      	adds	r1, #1
 800ac82:	6041      	str	r1, [r0, #4]
 800ac84:	0052      	lsls	r2, r2, #1
 800ac86:	e7c6      	b.n	800ac16 <_dtoa_r+0x26e>
 800ac88:	636f4361 	.word	0x636f4361
 800ac8c:	3fd287a7 	.word	0x3fd287a7
 800ac90:	8b60c8b3 	.word	0x8b60c8b3
 800ac94:	3fc68a28 	.word	0x3fc68a28
 800ac98:	509f79fb 	.word	0x509f79fb
 800ac9c:	3fd34413 	.word	0x3fd34413
 800aca0:	0800d97e 	.word	0x0800d97e
 800aca4:	0800d995 	.word	0x0800d995
 800aca8:	7ff00000 	.word	0x7ff00000
 800acac:	0800d97a 	.word	0x0800d97a
 800acb0:	0800d971 	.word	0x0800d971
 800acb4:	0800d7f5 	.word	0x0800d7f5
 800acb8:	3ff80000 	.word	0x3ff80000
 800acbc:	0800db70 	.word	0x0800db70
 800acc0:	0800d9f4 	.word	0x0800d9f4
 800acc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acc6:	9a00      	ldr	r2, [sp, #0]
 800acc8:	601a      	str	r2, [r3, #0]
 800acca:	9b01      	ldr	r3, [sp, #4]
 800accc:	2b0e      	cmp	r3, #14
 800acce:	f200 80ad 	bhi.w	800ae2c <_dtoa_r+0x484>
 800acd2:	2d00      	cmp	r5, #0
 800acd4:	f000 80aa 	beq.w	800ae2c <_dtoa_r+0x484>
 800acd8:	f1ba 0f00 	cmp.w	sl, #0
 800acdc:	dd36      	ble.n	800ad4c <_dtoa_r+0x3a4>
 800acde:	4ac3      	ldr	r2, [pc, #780]	; (800afec <_dtoa_r+0x644>)
 800ace0:	f00a 030f 	and.w	r3, sl, #15
 800ace4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ace8:	ed93 7b00 	vldr	d7, [r3]
 800acec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800acf0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800acf4:	eeb0 8a47 	vmov.f32	s16, s14
 800acf8:	eef0 8a67 	vmov.f32	s17, s15
 800acfc:	d016      	beq.n	800ad2c <_dtoa_r+0x384>
 800acfe:	4bbc      	ldr	r3, [pc, #752]	; (800aff0 <_dtoa_r+0x648>)
 800ad00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad08:	f7f5 fda0 	bl	800084c <__aeabi_ddiv>
 800ad0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad10:	f007 070f 	and.w	r7, r7, #15
 800ad14:	2503      	movs	r5, #3
 800ad16:	4eb6      	ldr	r6, [pc, #728]	; (800aff0 <_dtoa_r+0x648>)
 800ad18:	b957      	cbnz	r7, 800ad30 <_dtoa_r+0x388>
 800ad1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad1e:	ec53 2b18 	vmov	r2, r3, d8
 800ad22:	f7f5 fd93 	bl	800084c <__aeabi_ddiv>
 800ad26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad2a:	e029      	b.n	800ad80 <_dtoa_r+0x3d8>
 800ad2c:	2502      	movs	r5, #2
 800ad2e:	e7f2      	b.n	800ad16 <_dtoa_r+0x36e>
 800ad30:	07f9      	lsls	r1, r7, #31
 800ad32:	d508      	bpl.n	800ad46 <_dtoa_r+0x39e>
 800ad34:	ec51 0b18 	vmov	r0, r1, d8
 800ad38:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad3c:	f7f5 fc5c 	bl	80005f8 <__aeabi_dmul>
 800ad40:	ec41 0b18 	vmov	d8, r0, r1
 800ad44:	3501      	adds	r5, #1
 800ad46:	107f      	asrs	r7, r7, #1
 800ad48:	3608      	adds	r6, #8
 800ad4a:	e7e5      	b.n	800ad18 <_dtoa_r+0x370>
 800ad4c:	f000 80a6 	beq.w	800ae9c <_dtoa_r+0x4f4>
 800ad50:	f1ca 0600 	rsb	r6, sl, #0
 800ad54:	4ba5      	ldr	r3, [pc, #660]	; (800afec <_dtoa_r+0x644>)
 800ad56:	4fa6      	ldr	r7, [pc, #664]	; (800aff0 <_dtoa_r+0x648>)
 800ad58:	f006 020f 	and.w	r2, r6, #15
 800ad5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad68:	f7f5 fc46 	bl	80005f8 <__aeabi_dmul>
 800ad6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad70:	1136      	asrs	r6, r6, #4
 800ad72:	2300      	movs	r3, #0
 800ad74:	2502      	movs	r5, #2
 800ad76:	2e00      	cmp	r6, #0
 800ad78:	f040 8085 	bne.w	800ae86 <_dtoa_r+0x4de>
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d1d2      	bne.n	800ad26 <_dtoa_r+0x37e>
 800ad80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f000 808c 	beq.w	800aea0 <_dtoa_r+0x4f8>
 800ad88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ad8c:	4b99      	ldr	r3, [pc, #612]	; (800aff4 <_dtoa_r+0x64c>)
 800ad8e:	2200      	movs	r2, #0
 800ad90:	4630      	mov	r0, r6
 800ad92:	4639      	mov	r1, r7
 800ad94:	f7f5 fea2 	bl	8000adc <__aeabi_dcmplt>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	f000 8081 	beq.w	800aea0 <_dtoa_r+0x4f8>
 800ad9e:	9b01      	ldr	r3, [sp, #4]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d07d      	beq.n	800aea0 <_dtoa_r+0x4f8>
 800ada4:	f1b9 0f00 	cmp.w	r9, #0
 800ada8:	dd3c      	ble.n	800ae24 <_dtoa_r+0x47c>
 800adaa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800adae:	9307      	str	r3, [sp, #28]
 800adb0:	2200      	movs	r2, #0
 800adb2:	4b91      	ldr	r3, [pc, #580]	; (800aff8 <_dtoa_r+0x650>)
 800adb4:	4630      	mov	r0, r6
 800adb6:	4639      	mov	r1, r7
 800adb8:	f7f5 fc1e 	bl	80005f8 <__aeabi_dmul>
 800adbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adc0:	3501      	adds	r5, #1
 800adc2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800adc6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800adca:	4628      	mov	r0, r5
 800adcc:	f7f5 fbaa 	bl	8000524 <__aeabi_i2d>
 800add0:	4632      	mov	r2, r6
 800add2:	463b      	mov	r3, r7
 800add4:	f7f5 fc10 	bl	80005f8 <__aeabi_dmul>
 800add8:	4b88      	ldr	r3, [pc, #544]	; (800affc <_dtoa_r+0x654>)
 800adda:	2200      	movs	r2, #0
 800addc:	f7f5 fa56 	bl	800028c <__adddf3>
 800ade0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ade4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ade8:	9303      	str	r3, [sp, #12]
 800adea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adec:	2b00      	cmp	r3, #0
 800adee:	d15c      	bne.n	800aeaa <_dtoa_r+0x502>
 800adf0:	4b83      	ldr	r3, [pc, #524]	; (800b000 <_dtoa_r+0x658>)
 800adf2:	2200      	movs	r2, #0
 800adf4:	4630      	mov	r0, r6
 800adf6:	4639      	mov	r1, r7
 800adf8:	f7f5 fa46 	bl	8000288 <__aeabi_dsub>
 800adfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae00:	4606      	mov	r6, r0
 800ae02:	460f      	mov	r7, r1
 800ae04:	f7f5 fe88 	bl	8000b18 <__aeabi_dcmpgt>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	f040 8296 	bne.w	800b33a <_dtoa_r+0x992>
 800ae0e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ae12:	4630      	mov	r0, r6
 800ae14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae18:	4639      	mov	r1, r7
 800ae1a:	f7f5 fe5f 	bl	8000adc <__aeabi_dcmplt>
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	f040 8288 	bne.w	800b334 <_dtoa_r+0x98c>
 800ae24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ae28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	f2c0 8158 	blt.w	800b0e4 <_dtoa_r+0x73c>
 800ae34:	f1ba 0f0e 	cmp.w	sl, #14
 800ae38:	f300 8154 	bgt.w	800b0e4 <_dtoa_r+0x73c>
 800ae3c:	4b6b      	ldr	r3, [pc, #428]	; (800afec <_dtoa_r+0x644>)
 800ae3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ae42:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	f280 80e3 	bge.w	800b014 <_dtoa_r+0x66c>
 800ae4e:	9b01      	ldr	r3, [sp, #4]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f300 80df 	bgt.w	800b014 <_dtoa_r+0x66c>
 800ae56:	f040 826d 	bne.w	800b334 <_dtoa_r+0x98c>
 800ae5a:	4b69      	ldr	r3, [pc, #420]	; (800b000 <_dtoa_r+0x658>)
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	4640      	mov	r0, r8
 800ae60:	4649      	mov	r1, r9
 800ae62:	f7f5 fbc9 	bl	80005f8 <__aeabi_dmul>
 800ae66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae6a:	f7f5 fe4b 	bl	8000b04 <__aeabi_dcmpge>
 800ae6e:	9e01      	ldr	r6, [sp, #4]
 800ae70:	4637      	mov	r7, r6
 800ae72:	2800      	cmp	r0, #0
 800ae74:	f040 8243 	bne.w	800b2fe <_dtoa_r+0x956>
 800ae78:	9d00      	ldr	r5, [sp, #0]
 800ae7a:	2331      	movs	r3, #49	; 0x31
 800ae7c:	f805 3b01 	strb.w	r3, [r5], #1
 800ae80:	f10a 0a01 	add.w	sl, sl, #1
 800ae84:	e23f      	b.n	800b306 <_dtoa_r+0x95e>
 800ae86:	07f2      	lsls	r2, r6, #31
 800ae88:	d505      	bpl.n	800ae96 <_dtoa_r+0x4ee>
 800ae8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae8e:	f7f5 fbb3 	bl	80005f8 <__aeabi_dmul>
 800ae92:	3501      	adds	r5, #1
 800ae94:	2301      	movs	r3, #1
 800ae96:	1076      	asrs	r6, r6, #1
 800ae98:	3708      	adds	r7, #8
 800ae9a:	e76c      	b.n	800ad76 <_dtoa_r+0x3ce>
 800ae9c:	2502      	movs	r5, #2
 800ae9e:	e76f      	b.n	800ad80 <_dtoa_r+0x3d8>
 800aea0:	9b01      	ldr	r3, [sp, #4]
 800aea2:	f8cd a01c 	str.w	sl, [sp, #28]
 800aea6:	930c      	str	r3, [sp, #48]	; 0x30
 800aea8:	e78d      	b.n	800adc6 <_dtoa_r+0x41e>
 800aeaa:	9900      	ldr	r1, [sp, #0]
 800aeac:	980c      	ldr	r0, [sp, #48]	; 0x30
 800aeae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aeb0:	4b4e      	ldr	r3, [pc, #312]	; (800afec <_dtoa_r+0x644>)
 800aeb2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aeb6:	4401      	add	r1, r0
 800aeb8:	9102      	str	r1, [sp, #8]
 800aeba:	9908      	ldr	r1, [sp, #32]
 800aebc:	eeb0 8a47 	vmov.f32	s16, s14
 800aec0:	eef0 8a67 	vmov.f32	s17, s15
 800aec4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aec8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aecc:	2900      	cmp	r1, #0
 800aece:	d045      	beq.n	800af5c <_dtoa_r+0x5b4>
 800aed0:	494c      	ldr	r1, [pc, #304]	; (800b004 <_dtoa_r+0x65c>)
 800aed2:	2000      	movs	r0, #0
 800aed4:	f7f5 fcba 	bl	800084c <__aeabi_ddiv>
 800aed8:	ec53 2b18 	vmov	r2, r3, d8
 800aedc:	f7f5 f9d4 	bl	8000288 <__aeabi_dsub>
 800aee0:	9d00      	ldr	r5, [sp, #0]
 800aee2:	ec41 0b18 	vmov	d8, r0, r1
 800aee6:	4639      	mov	r1, r7
 800aee8:	4630      	mov	r0, r6
 800aeea:	f7f5 fe35 	bl	8000b58 <__aeabi_d2iz>
 800aeee:	900c      	str	r0, [sp, #48]	; 0x30
 800aef0:	f7f5 fb18 	bl	8000524 <__aeabi_i2d>
 800aef4:	4602      	mov	r2, r0
 800aef6:	460b      	mov	r3, r1
 800aef8:	4630      	mov	r0, r6
 800aefa:	4639      	mov	r1, r7
 800aefc:	f7f5 f9c4 	bl	8000288 <__aeabi_dsub>
 800af00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af02:	3330      	adds	r3, #48	; 0x30
 800af04:	f805 3b01 	strb.w	r3, [r5], #1
 800af08:	ec53 2b18 	vmov	r2, r3, d8
 800af0c:	4606      	mov	r6, r0
 800af0e:	460f      	mov	r7, r1
 800af10:	f7f5 fde4 	bl	8000adc <__aeabi_dcmplt>
 800af14:	2800      	cmp	r0, #0
 800af16:	d165      	bne.n	800afe4 <_dtoa_r+0x63c>
 800af18:	4632      	mov	r2, r6
 800af1a:	463b      	mov	r3, r7
 800af1c:	4935      	ldr	r1, [pc, #212]	; (800aff4 <_dtoa_r+0x64c>)
 800af1e:	2000      	movs	r0, #0
 800af20:	f7f5 f9b2 	bl	8000288 <__aeabi_dsub>
 800af24:	ec53 2b18 	vmov	r2, r3, d8
 800af28:	f7f5 fdd8 	bl	8000adc <__aeabi_dcmplt>
 800af2c:	2800      	cmp	r0, #0
 800af2e:	f040 80b9 	bne.w	800b0a4 <_dtoa_r+0x6fc>
 800af32:	9b02      	ldr	r3, [sp, #8]
 800af34:	429d      	cmp	r5, r3
 800af36:	f43f af75 	beq.w	800ae24 <_dtoa_r+0x47c>
 800af3a:	4b2f      	ldr	r3, [pc, #188]	; (800aff8 <_dtoa_r+0x650>)
 800af3c:	ec51 0b18 	vmov	r0, r1, d8
 800af40:	2200      	movs	r2, #0
 800af42:	f7f5 fb59 	bl	80005f8 <__aeabi_dmul>
 800af46:	4b2c      	ldr	r3, [pc, #176]	; (800aff8 <_dtoa_r+0x650>)
 800af48:	ec41 0b18 	vmov	d8, r0, r1
 800af4c:	2200      	movs	r2, #0
 800af4e:	4630      	mov	r0, r6
 800af50:	4639      	mov	r1, r7
 800af52:	f7f5 fb51 	bl	80005f8 <__aeabi_dmul>
 800af56:	4606      	mov	r6, r0
 800af58:	460f      	mov	r7, r1
 800af5a:	e7c4      	b.n	800aee6 <_dtoa_r+0x53e>
 800af5c:	ec51 0b17 	vmov	r0, r1, d7
 800af60:	f7f5 fb4a 	bl	80005f8 <__aeabi_dmul>
 800af64:	9b02      	ldr	r3, [sp, #8]
 800af66:	9d00      	ldr	r5, [sp, #0]
 800af68:	930c      	str	r3, [sp, #48]	; 0x30
 800af6a:	ec41 0b18 	vmov	d8, r0, r1
 800af6e:	4639      	mov	r1, r7
 800af70:	4630      	mov	r0, r6
 800af72:	f7f5 fdf1 	bl	8000b58 <__aeabi_d2iz>
 800af76:	9011      	str	r0, [sp, #68]	; 0x44
 800af78:	f7f5 fad4 	bl	8000524 <__aeabi_i2d>
 800af7c:	4602      	mov	r2, r0
 800af7e:	460b      	mov	r3, r1
 800af80:	4630      	mov	r0, r6
 800af82:	4639      	mov	r1, r7
 800af84:	f7f5 f980 	bl	8000288 <__aeabi_dsub>
 800af88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af8a:	3330      	adds	r3, #48	; 0x30
 800af8c:	f805 3b01 	strb.w	r3, [r5], #1
 800af90:	9b02      	ldr	r3, [sp, #8]
 800af92:	429d      	cmp	r5, r3
 800af94:	4606      	mov	r6, r0
 800af96:	460f      	mov	r7, r1
 800af98:	f04f 0200 	mov.w	r2, #0
 800af9c:	d134      	bne.n	800b008 <_dtoa_r+0x660>
 800af9e:	4b19      	ldr	r3, [pc, #100]	; (800b004 <_dtoa_r+0x65c>)
 800afa0:	ec51 0b18 	vmov	r0, r1, d8
 800afa4:	f7f5 f972 	bl	800028c <__adddf3>
 800afa8:	4602      	mov	r2, r0
 800afaa:	460b      	mov	r3, r1
 800afac:	4630      	mov	r0, r6
 800afae:	4639      	mov	r1, r7
 800afb0:	f7f5 fdb2 	bl	8000b18 <__aeabi_dcmpgt>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	d175      	bne.n	800b0a4 <_dtoa_r+0x6fc>
 800afb8:	ec53 2b18 	vmov	r2, r3, d8
 800afbc:	4911      	ldr	r1, [pc, #68]	; (800b004 <_dtoa_r+0x65c>)
 800afbe:	2000      	movs	r0, #0
 800afc0:	f7f5 f962 	bl	8000288 <__aeabi_dsub>
 800afc4:	4602      	mov	r2, r0
 800afc6:	460b      	mov	r3, r1
 800afc8:	4630      	mov	r0, r6
 800afca:	4639      	mov	r1, r7
 800afcc:	f7f5 fd86 	bl	8000adc <__aeabi_dcmplt>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	f43f af27 	beq.w	800ae24 <_dtoa_r+0x47c>
 800afd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800afd8:	1e6b      	subs	r3, r5, #1
 800afda:	930c      	str	r3, [sp, #48]	; 0x30
 800afdc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800afe0:	2b30      	cmp	r3, #48	; 0x30
 800afe2:	d0f8      	beq.n	800afd6 <_dtoa_r+0x62e>
 800afe4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800afe8:	e04a      	b.n	800b080 <_dtoa_r+0x6d8>
 800afea:	bf00      	nop
 800afec:	0800db70 	.word	0x0800db70
 800aff0:	0800db48 	.word	0x0800db48
 800aff4:	3ff00000 	.word	0x3ff00000
 800aff8:	40240000 	.word	0x40240000
 800affc:	401c0000 	.word	0x401c0000
 800b000:	40140000 	.word	0x40140000
 800b004:	3fe00000 	.word	0x3fe00000
 800b008:	4baf      	ldr	r3, [pc, #700]	; (800b2c8 <_dtoa_r+0x920>)
 800b00a:	f7f5 faf5 	bl	80005f8 <__aeabi_dmul>
 800b00e:	4606      	mov	r6, r0
 800b010:	460f      	mov	r7, r1
 800b012:	e7ac      	b.n	800af6e <_dtoa_r+0x5c6>
 800b014:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b018:	9d00      	ldr	r5, [sp, #0]
 800b01a:	4642      	mov	r2, r8
 800b01c:	464b      	mov	r3, r9
 800b01e:	4630      	mov	r0, r6
 800b020:	4639      	mov	r1, r7
 800b022:	f7f5 fc13 	bl	800084c <__aeabi_ddiv>
 800b026:	f7f5 fd97 	bl	8000b58 <__aeabi_d2iz>
 800b02a:	9002      	str	r0, [sp, #8]
 800b02c:	f7f5 fa7a 	bl	8000524 <__aeabi_i2d>
 800b030:	4642      	mov	r2, r8
 800b032:	464b      	mov	r3, r9
 800b034:	f7f5 fae0 	bl	80005f8 <__aeabi_dmul>
 800b038:	4602      	mov	r2, r0
 800b03a:	460b      	mov	r3, r1
 800b03c:	4630      	mov	r0, r6
 800b03e:	4639      	mov	r1, r7
 800b040:	f7f5 f922 	bl	8000288 <__aeabi_dsub>
 800b044:	9e02      	ldr	r6, [sp, #8]
 800b046:	9f01      	ldr	r7, [sp, #4]
 800b048:	3630      	adds	r6, #48	; 0x30
 800b04a:	f805 6b01 	strb.w	r6, [r5], #1
 800b04e:	9e00      	ldr	r6, [sp, #0]
 800b050:	1bae      	subs	r6, r5, r6
 800b052:	42b7      	cmp	r7, r6
 800b054:	4602      	mov	r2, r0
 800b056:	460b      	mov	r3, r1
 800b058:	d137      	bne.n	800b0ca <_dtoa_r+0x722>
 800b05a:	f7f5 f917 	bl	800028c <__adddf3>
 800b05e:	4642      	mov	r2, r8
 800b060:	464b      	mov	r3, r9
 800b062:	4606      	mov	r6, r0
 800b064:	460f      	mov	r7, r1
 800b066:	f7f5 fd57 	bl	8000b18 <__aeabi_dcmpgt>
 800b06a:	b9c8      	cbnz	r0, 800b0a0 <_dtoa_r+0x6f8>
 800b06c:	4642      	mov	r2, r8
 800b06e:	464b      	mov	r3, r9
 800b070:	4630      	mov	r0, r6
 800b072:	4639      	mov	r1, r7
 800b074:	f7f5 fd28 	bl	8000ac8 <__aeabi_dcmpeq>
 800b078:	b110      	cbz	r0, 800b080 <_dtoa_r+0x6d8>
 800b07a:	9b02      	ldr	r3, [sp, #8]
 800b07c:	07d9      	lsls	r1, r3, #31
 800b07e:	d40f      	bmi.n	800b0a0 <_dtoa_r+0x6f8>
 800b080:	4620      	mov	r0, r4
 800b082:	4659      	mov	r1, fp
 800b084:	f000 ff50 	bl	800bf28 <_Bfree>
 800b088:	2300      	movs	r3, #0
 800b08a:	702b      	strb	r3, [r5, #0]
 800b08c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b08e:	f10a 0001 	add.w	r0, sl, #1
 800b092:	6018      	str	r0, [r3, #0]
 800b094:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b096:	2b00      	cmp	r3, #0
 800b098:	f43f acd8 	beq.w	800aa4c <_dtoa_r+0xa4>
 800b09c:	601d      	str	r5, [r3, #0]
 800b09e:	e4d5      	b.n	800aa4c <_dtoa_r+0xa4>
 800b0a0:	f8cd a01c 	str.w	sl, [sp, #28]
 800b0a4:	462b      	mov	r3, r5
 800b0a6:	461d      	mov	r5, r3
 800b0a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0ac:	2a39      	cmp	r2, #57	; 0x39
 800b0ae:	d108      	bne.n	800b0c2 <_dtoa_r+0x71a>
 800b0b0:	9a00      	ldr	r2, [sp, #0]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d1f7      	bne.n	800b0a6 <_dtoa_r+0x6fe>
 800b0b6:	9a07      	ldr	r2, [sp, #28]
 800b0b8:	9900      	ldr	r1, [sp, #0]
 800b0ba:	3201      	adds	r2, #1
 800b0bc:	9207      	str	r2, [sp, #28]
 800b0be:	2230      	movs	r2, #48	; 0x30
 800b0c0:	700a      	strb	r2, [r1, #0]
 800b0c2:	781a      	ldrb	r2, [r3, #0]
 800b0c4:	3201      	adds	r2, #1
 800b0c6:	701a      	strb	r2, [r3, #0]
 800b0c8:	e78c      	b.n	800afe4 <_dtoa_r+0x63c>
 800b0ca:	4b7f      	ldr	r3, [pc, #508]	; (800b2c8 <_dtoa_r+0x920>)
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f7f5 fa93 	bl	80005f8 <__aeabi_dmul>
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	4606      	mov	r6, r0
 800b0d8:	460f      	mov	r7, r1
 800b0da:	f7f5 fcf5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	d09b      	beq.n	800b01a <_dtoa_r+0x672>
 800b0e2:	e7cd      	b.n	800b080 <_dtoa_r+0x6d8>
 800b0e4:	9a08      	ldr	r2, [sp, #32]
 800b0e6:	2a00      	cmp	r2, #0
 800b0e8:	f000 80c4 	beq.w	800b274 <_dtoa_r+0x8cc>
 800b0ec:	9a05      	ldr	r2, [sp, #20]
 800b0ee:	2a01      	cmp	r2, #1
 800b0f0:	f300 80a8 	bgt.w	800b244 <_dtoa_r+0x89c>
 800b0f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b0f6:	2a00      	cmp	r2, #0
 800b0f8:	f000 80a0 	beq.w	800b23c <_dtoa_r+0x894>
 800b0fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b100:	9e06      	ldr	r6, [sp, #24]
 800b102:	4645      	mov	r5, r8
 800b104:	9a04      	ldr	r2, [sp, #16]
 800b106:	2101      	movs	r1, #1
 800b108:	441a      	add	r2, r3
 800b10a:	4620      	mov	r0, r4
 800b10c:	4498      	add	r8, r3
 800b10e:	9204      	str	r2, [sp, #16]
 800b110:	f001 f810 	bl	800c134 <__i2b>
 800b114:	4607      	mov	r7, r0
 800b116:	2d00      	cmp	r5, #0
 800b118:	dd0b      	ble.n	800b132 <_dtoa_r+0x78a>
 800b11a:	9b04      	ldr	r3, [sp, #16]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	dd08      	ble.n	800b132 <_dtoa_r+0x78a>
 800b120:	42ab      	cmp	r3, r5
 800b122:	9a04      	ldr	r2, [sp, #16]
 800b124:	bfa8      	it	ge
 800b126:	462b      	movge	r3, r5
 800b128:	eba8 0803 	sub.w	r8, r8, r3
 800b12c:	1aed      	subs	r5, r5, r3
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	9304      	str	r3, [sp, #16]
 800b132:	9b06      	ldr	r3, [sp, #24]
 800b134:	b1fb      	cbz	r3, 800b176 <_dtoa_r+0x7ce>
 800b136:	9b08      	ldr	r3, [sp, #32]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f000 809f 	beq.w	800b27c <_dtoa_r+0x8d4>
 800b13e:	2e00      	cmp	r6, #0
 800b140:	dd11      	ble.n	800b166 <_dtoa_r+0x7be>
 800b142:	4639      	mov	r1, r7
 800b144:	4632      	mov	r2, r6
 800b146:	4620      	mov	r0, r4
 800b148:	f001 f8b0 	bl	800c2ac <__pow5mult>
 800b14c:	465a      	mov	r2, fp
 800b14e:	4601      	mov	r1, r0
 800b150:	4607      	mov	r7, r0
 800b152:	4620      	mov	r0, r4
 800b154:	f001 f804 	bl	800c160 <__multiply>
 800b158:	4659      	mov	r1, fp
 800b15a:	9007      	str	r0, [sp, #28]
 800b15c:	4620      	mov	r0, r4
 800b15e:	f000 fee3 	bl	800bf28 <_Bfree>
 800b162:	9b07      	ldr	r3, [sp, #28]
 800b164:	469b      	mov	fp, r3
 800b166:	9b06      	ldr	r3, [sp, #24]
 800b168:	1b9a      	subs	r2, r3, r6
 800b16a:	d004      	beq.n	800b176 <_dtoa_r+0x7ce>
 800b16c:	4659      	mov	r1, fp
 800b16e:	4620      	mov	r0, r4
 800b170:	f001 f89c 	bl	800c2ac <__pow5mult>
 800b174:	4683      	mov	fp, r0
 800b176:	2101      	movs	r1, #1
 800b178:	4620      	mov	r0, r4
 800b17a:	f000 ffdb 	bl	800c134 <__i2b>
 800b17e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b180:	2b00      	cmp	r3, #0
 800b182:	4606      	mov	r6, r0
 800b184:	dd7c      	ble.n	800b280 <_dtoa_r+0x8d8>
 800b186:	461a      	mov	r2, r3
 800b188:	4601      	mov	r1, r0
 800b18a:	4620      	mov	r0, r4
 800b18c:	f001 f88e 	bl	800c2ac <__pow5mult>
 800b190:	9b05      	ldr	r3, [sp, #20]
 800b192:	2b01      	cmp	r3, #1
 800b194:	4606      	mov	r6, r0
 800b196:	dd76      	ble.n	800b286 <_dtoa_r+0x8de>
 800b198:	2300      	movs	r3, #0
 800b19a:	9306      	str	r3, [sp, #24]
 800b19c:	6933      	ldr	r3, [r6, #16]
 800b19e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b1a2:	6918      	ldr	r0, [r3, #16]
 800b1a4:	f000 ff76 	bl	800c094 <__hi0bits>
 800b1a8:	f1c0 0020 	rsb	r0, r0, #32
 800b1ac:	9b04      	ldr	r3, [sp, #16]
 800b1ae:	4418      	add	r0, r3
 800b1b0:	f010 001f 	ands.w	r0, r0, #31
 800b1b4:	f000 8086 	beq.w	800b2c4 <_dtoa_r+0x91c>
 800b1b8:	f1c0 0320 	rsb	r3, r0, #32
 800b1bc:	2b04      	cmp	r3, #4
 800b1be:	dd7f      	ble.n	800b2c0 <_dtoa_r+0x918>
 800b1c0:	f1c0 001c 	rsb	r0, r0, #28
 800b1c4:	9b04      	ldr	r3, [sp, #16]
 800b1c6:	4403      	add	r3, r0
 800b1c8:	4480      	add	r8, r0
 800b1ca:	4405      	add	r5, r0
 800b1cc:	9304      	str	r3, [sp, #16]
 800b1ce:	f1b8 0f00 	cmp.w	r8, #0
 800b1d2:	dd05      	ble.n	800b1e0 <_dtoa_r+0x838>
 800b1d4:	4659      	mov	r1, fp
 800b1d6:	4642      	mov	r2, r8
 800b1d8:	4620      	mov	r0, r4
 800b1da:	f001 f8c1 	bl	800c360 <__lshift>
 800b1de:	4683      	mov	fp, r0
 800b1e0:	9b04      	ldr	r3, [sp, #16]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	dd05      	ble.n	800b1f2 <_dtoa_r+0x84a>
 800b1e6:	4631      	mov	r1, r6
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	f001 f8b8 	bl	800c360 <__lshift>
 800b1f0:	4606      	mov	r6, r0
 800b1f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d069      	beq.n	800b2cc <_dtoa_r+0x924>
 800b1f8:	4631      	mov	r1, r6
 800b1fa:	4658      	mov	r0, fp
 800b1fc:	f001 f91c 	bl	800c438 <__mcmp>
 800b200:	2800      	cmp	r0, #0
 800b202:	da63      	bge.n	800b2cc <_dtoa_r+0x924>
 800b204:	2300      	movs	r3, #0
 800b206:	4659      	mov	r1, fp
 800b208:	220a      	movs	r2, #10
 800b20a:	4620      	mov	r0, r4
 800b20c:	f000 feae 	bl	800bf6c <__multadd>
 800b210:	9b08      	ldr	r3, [sp, #32]
 800b212:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b216:	4683      	mov	fp, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	f000 818f 	beq.w	800b53c <_dtoa_r+0xb94>
 800b21e:	4639      	mov	r1, r7
 800b220:	2300      	movs	r3, #0
 800b222:	220a      	movs	r2, #10
 800b224:	4620      	mov	r0, r4
 800b226:	f000 fea1 	bl	800bf6c <__multadd>
 800b22a:	f1b9 0f00 	cmp.w	r9, #0
 800b22e:	4607      	mov	r7, r0
 800b230:	f300 808e 	bgt.w	800b350 <_dtoa_r+0x9a8>
 800b234:	9b05      	ldr	r3, [sp, #20]
 800b236:	2b02      	cmp	r3, #2
 800b238:	dc50      	bgt.n	800b2dc <_dtoa_r+0x934>
 800b23a:	e089      	b.n	800b350 <_dtoa_r+0x9a8>
 800b23c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b23e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b242:	e75d      	b.n	800b100 <_dtoa_r+0x758>
 800b244:	9b01      	ldr	r3, [sp, #4]
 800b246:	1e5e      	subs	r6, r3, #1
 800b248:	9b06      	ldr	r3, [sp, #24]
 800b24a:	42b3      	cmp	r3, r6
 800b24c:	bfbf      	itttt	lt
 800b24e:	9b06      	ldrlt	r3, [sp, #24]
 800b250:	9606      	strlt	r6, [sp, #24]
 800b252:	1af2      	sublt	r2, r6, r3
 800b254:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b256:	bfb6      	itet	lt
 800b258:	189b      	addlt	r3, r3, r2
 800b25a:	1b9e      	subge	r6, r3, r6
 800b25c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b25e:	9b01      	ldr	r3, [sp, #4]
 800b260:	bfb8      	it	lt
 800b262:	2600      	movlt	r6, #0
 800b264:	2b00      	cmp	r3, #0
 800b266:	bfb5      	itete	lt
 800b268:	eba8 0503 	sublt.w	r5, r8, r3
 800b26c:	9b01      	ldrge	r3, [sp, #4]
 800b26e:	2300      	movlt	r3, #0
 800b270:	4645      	movge	r5, r8
 800b272:	e747      	b.n	800b104 <_dtoa_r+0x75c>
 800b274:	9e06      	ldr	r6, [sp, #24]
 800b276:	9f08      	ldr	r7, [sp, #32]
 800b278:	4645      	mov	r5, r8
 800b27a:	e74c      	b.n	800b116 <_dtoa_r+0x76e>
 800b27c:	9a06      	ldr	r2, [sp, #24]
 800b27e:	e775      	b.n	800b16c <_dtoa_r+0x7c4>
 800b280:	9b05      	ldr	r3, [sp, #20]
 800b282:	2b01      	cmp	r3, #1
 800b284:	dc18      	bgt.n	800b2b8 <_dtoa_r+0x910>
 800b286:	9b02      	ldr	r3, [sp, #8]
 800b288:	b9b3      	cbnz	r3, 800b2b8 <_dtoa_r+0x910>
 800b28a:	9b03      	ldr	r3, [sp, #12]
 800b28c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b290:	b9a3      	cbnz	r3, 800b2bc <_dtoa_r+0x914>
 800b292:	9b03      	ldr	r3, [sp, #12]
 800b294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b298:	0d1b      	lsrs	r3, r3, #20
 800b29a:	051b      	lsls	r3, r3, #20
 800b29c:	b12b      	cbz	r3, 800b2aa <_dtoa_r+0x902>
 800b29e:	9b04      	ldr	r3, [sp, #16]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	9304      	str	r3, [sp, #16]
 800b2a4:	f108 0801 	add.w	r8, r8, #1
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	9306      	str	r3, [sp, #24]
 800b2ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	f47f af74 	bne.w	800b19c <_dtoa_r+0x7f4>
 800b2b4:	2001      	movs	r0, #1
 800b2b6:	e779      	b.n	800b1ac <_dtoa_r+0x804>
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	e7f6      	b.n	800b2aa <_dtoa_r+0x902>
 800b2bc:	9b02      	ldr	r3, [sp, #8]
 800b2be:	e7f4      	b.n	800b2aa <_dtoa_r+0x902>
 800b2c0:	d085      	beq.n	800b1ce <_dtoa_r+0x826>
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	301c      	adds	r0, #28
 800b2c6:	e77d      	b.n	800b1c4 <_dtoa_r+0x81c>
 800b2c8:	40240000 	.word	0x40240000
 800b2cc:	9b01      	ldr	r3, [sp, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	dc38      	bgt.n	800b344 <_dtoa_r+0x99c>
 800b2d2:	9b05      	ldr	r3, [sp, #20]
 800b2d4:	2b02      	cmp	r3, #2
 800b2d6:	dd35      	ble.n	800b344 <_dtoa_r+0x99c>
 800b2d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b2dc:	f1b9 0f00 	cmp.w	r9, #0
 800b2e0:	d10d      	bne.n	800b2fe <_dtoa_r+0x956>
 800b2e2:	4631      	mov	r1, r6
 800b2e4:	464b      	mov	r3, r9
 800b2e6:	2205      	movs	r2, #5
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	f000 fe3f 	bl	800bf6c <__multadd>
 800b2ee:	4601      	mov	r1, r0
 800b2f0:	4606      	mov	r6, r0
 800b2f2:	4658      	mov	r0, fp
 800b2f4:	f001 f8a0 	bl	800c438 <__mcmp>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	f73f adbd 	bgt.w	800ae78 <_dtoa_r+0x4d0>
 800b2fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b300:	9d00      	ldr	r5, [sp, #0]
 800b302:	ea6f 0a03 	mvn.w	sl, r3
 800b306:	f04f 0800 	mov.w	r8, #0
 800b30a:	4631      	mov	r1, r6
 800b30c:	4620      	mov	r0, r4
 800b30e:	f000 fe0b 	bl	800bf28 <_Bfree>
 800b312:	2f00      	cmp	r7, #0
 800b314:	f43f aeb4 	beq.w	800b080 <_dtoa_r+0x6d8>
 800b318:	f1b8 0f00 	cmp.w	r8, #0
 800b31c:	d005      	beq.n	800b32a <_dtoa_r+0x982>
 800b31e:	45b8      	cmp	r8, r7
 800b320:	d003      	beq.n	800b32a <_dtoa_r+0x982>
 800b322:	4641      	mov	r1, r8
 800b324:	4620      	mov	r0, r4
 800b326:	f000 fdff 	bl	800bf28 <_Bfree>
 800b32a:	4639      	mov	r1, r7
 800b32c:	4620      	mov	r0, r4
 800b32e:	f000 fdfb 	bl	800bf28 <_Bfree>
 800b332:	e6a5      	b.n	800b080 <_dtoa_r+0x6d8>
 800b334:	2600      	movs	r6, #0
 800b336:	4637      	mov	r7, r6
 800b338:	e7e1      	b.n	800b2fe <_dtoa_r+0x956>
 800b33a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b33c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b340:	4637      	mov	r7, r6
 800b342:	e599      	b.n	800ae78 <_dtoa_r+0x4d0>
 800b344:	9b08      	ldr	r3, [sp, #32]
 800b346:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f000 80fd 	beq.w	800b54a <_dtoa_r+0xba2>
 800b350:	2d00      	cmp	r5, #0
 800b352:	dd05      	ble.n	800b360 <_dtoa_r+0x9b8>
 800b354:	4639      	mov	r1, r7
 800b356:	462a      	mov	r2, r5
 800b358:	4620      	mov	r0, r4
 800b35a:	f001 f801 	bl	800c360 <__lshift>
 800b35e:	4607      	mov	r7, r0
 800b360:	9b06      	ldr	r3, [sp, #24]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d05c      	beq.n	800b420 <_dtoa_r+0xa78>
 800b366:	6879      	ldr	r1, [r7, #4]
 800b368:	4620      	mov	r0, r4
 800b36a:	f000 fd9d 	bl	800bea8 <_Balloc>
 800b36e:	4605      	mov	r5, r0
 800b370:	b928      	cbnz	r0, 800b37e <_dtoa_r+0x9d6>
 800b372:	4b80      	ldr	r3, [pc, #512]	; (800b574 <_dtoa_r+0xbcc>)
 800b374:	4602      	mov	r2, r0
 800b376:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b37a:	f7ff bb2e 	b.w	800a9da <_dtoa_r+0x32>
 800b37e:	693a      	ldr	r2, [r7, #16]
 800b380:	3202      	adds	r2, #2
 800b382:	0092      	lsls	r2, r2, #2
 800b384:	f107 010c 	add.w	r1, r7, #12
 800b388:	300c      	adds	r0, #12
 800b38a:	f000 fd7f 	bl	800be8c <memcpy>
 800b38e:	2201      	movs	r2, #1
 800b390:	4629      	mov	r1, r5
 800b392:	4620      	mov	r0, r4
 800b394:	f000 ffe4 	bl	800c360 <__lshift>
 800b398:	9b00      	ldr	r3, [sp, #0]
 800b39a:	3301      	adds	r3, #1
 800b39c:	9301      	str	r3, [sp, #4]
 800b39e:	9b00      	ldr	r3, [sp, #0]
 800b3a0:	444b      	add	r3, r9
 800b3a2:	9307      	str	r3, [sp, #28]
 800b3a4:	9b02      	ldr	r3, [sp, #8]
 800b3a6:	f003 0301 	and.w	r3, r3, #1
 800b3aa:	46b8      	mov	r8, r7
 800b3ac:	9306      	str	r3, [sp, #24]
 800b3ae:	4607      	mov	r7, r0
 800b3b0:	9b01      	ldr	r3, [sp, #4]
 800b3b2:	4631      	mov	r1, r6
 800b3b4:	3b01      	subs	r3, #1
 800b3b6:	4658      	mov	r0, fp
 800b3b8:	9302      	str	r3, [sp, #8]
 800b3ba:	f7ff fa67 	bl	800a88c <quorem>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	3330      	adds	r3, #48	; 0x30
 800b3c2:	9004      	str	r0, [sp, #16]
 800b3c4:	4641      	mov	r1, r8
 800b3c6:	4658      	mov	r0, fp
 800b3c8:	9308      	str	r3, [sp, #32]
 800b3ca:	f001 f835 	bl	800c438 <__mcmp>
 800b3ce:	463a      	mov	r2, r7
 800b3d0:	4681      	mov	r9, r0
 800b3d2:	4631      	mov	r1, r6
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	f001 f84b 	bl	800c470 <__mdiff>
 800b3da:	68c2      	ldr	r2, [r0, #12]
 800b3dc:	9b08      	ldr	r3, [sp, #32]
 800b3de:	4605      	mov	r5, r0
 800b3e0:	bb02      	cbnz	r2, 800b424 <_dtoa_r+0xa7c>
 800b3e2:	4601      	mov	r1, r0
 800b3e4:	4658      	mov	r0, fp
 800b3e6:	f001 f827 	bl	800c438 <__mcmp>
 800b3ea:	9b08      	ldr	r3, [sp, #32]
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	4629      	mov	r1, r5
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b3f6:	f000 fd97 	bl	800bf28 <_Bfree>
 800b3fa:	9b05      	ldr	r3, [sp, #20]
 800b3fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3fe:	9d01      	ldr	r5, [sp, #4]
 800b400:	ea43 0102 	orr.w	r1, r3, r2
 800b404:	9b06      	ldr	r3, [sp, #24]
 800b406:	430b      	orrs	r3, r1
 800b408:	9b08      	ldr	r3, [sp, #32]
 800b40a:	d10d      	bne.n	800b428 <_dtoa_r+0xa80>
 800b40c:	2b39      	cmp	r3, #57	; 0x39
 800b40e:	d029      	beq.n	800b464 <_dtoa_r+0xabc>
 800b410:	f1b9 0f00 	cmp.w	r9, #0
 800b414:	dd01      	ble.n	800b41a <_dtoa_r+0xa72>
 800b416:	9b04      	ldr	r3, [sp, #16]
 800b418:	3331      	adds	r3, #49	; 0x31
 800b41a:	9a02      	ldr	r2, [sp, #8]
 800b41c:	7013      	strb	r3, [r2, #0]
 800b41e:	e774      	b.n	800b30a <_dtoa_r+0x962>
 800b420:	4638      	mov	r0, r7
 800b422:	e7b9      	b.n	800b398 <_dtoa_r+0x9f0>
 800b424:	2201      	movs	r2, #1
 800b426:	e7e2      	b.n	800b3ee <_dtoa_r+0xa46>
 800b428:	f1b9 0f00 	cmp.w	r9, #0
 800b42c:	db06      	blt.n	800b43c <_dtoa_r+0xa94>
 800b42e:	9905      	ldr	r1, [sp, #20]
 800b430:	ea41 0909 	orr.w	r9, r1, r9
 800b434:	9906      	ldr	r1, [sp, #24]
 800b436:	ea59 0101 	orrs.w	r1, r9, r1
 800b43a:	d120      	bne.n	800b47e <_dtoa_r+0xad6>
 800b43c:	2a00      	cmp	r2, #0
 800b43e:	ddec      	ble.n	800b41a <_dtoa_r+0xa72>
 800b440:	4659      	mov	r1, fp
 800b442:	2201      	movs	r2, #1
 800b444:	4620      	mov	r0, r4
 800b446:	9301      	str	r3, [sp, #4]
 800b448:	f000 ff8a 	bl	800c360 <__lshift>
 800b44c:	4631      	mov	r1, r6
 800b44e:	4683      	mov	fp, r0
 800b450:	f000 fff2 	bl	800c438 <__mcmp>
 800b454:	2800      	cmp	r0, #0
 800b456:	9b01      	ldr	r3, [sp, #4]
 800b458:	dc02      	bgt.n	800b460 <_dtoa_r+0xab8>
 800b45a:	d1de      	bne.n	800b41a <_dtoa_r+0xa72>
 800b45c:	07da      	lsls	r2, r3, #31
 800b45e:	d5dc      	bpl.n	800b41a <_dtoa_r+0xa72>
 800b460:	2b39      	cmp	r3, #57	; 0x39
 800b462:	d1d8      	bne.n	800b416 <_dtoa_r+0xa6e>
 800b464:	9a02      	ldr	r2, [sp, #8]
 800b466:	2339      	movs	r3, #57	; 0x39
 800b468:	7013      	strb	r3, [r2, #0]
 800b46a:	462b      	mov	r3, r5
 800b46c:	461d      	mov	r5, r3
 800b46e:	3b01      	subs	r3, #1
 800b470:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b474:	2a39      	cmp	r2, #57	; 0x39
 800b476:	d050      	beq.n	800b51a <_dtoa_r+0xb72>
 800b478:	3201      	adds	r2, #1
 800b47a:	701a      	strb	r2, [r3, #0]
 800b47c:	e745      	b.n	800b30a <_dtoa_r+0x962>
 800b47e:	2a00      	cmp	r2, #0
 800b480:	dd03      	ble.n	800b48a <_dtoa_r+0xae2>
 800b482:	2b39      	cmp	r3, #57	; 0x39
 800b484:	d0ee      	beq.n	800b464 <_dtoa_r+0xabc>
 800b486:	3301      	adds	r3, #1
 800b488:	e7c7      	b.n	800b41a <_dtoa_r+0xa72>
 800b48a:	9a01      	ldr	r2, [sp, #4]
 800b48c:	9907      	ldr	r1, [sp, #28]
 800b48e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b492:	428a      	cmp	r2, r1
 800b494:	d02a      	beq.n	800b4ec <_dtoa_r+0xb44>
 800b496:	4659      	mov	r1, fp
 800b498:	2300      	movs	r3, #0
 800b49a:	220a      	movs	r2, #10
 800b49c:	4620      	mov	r0, r4
 800b49e:	f000 fd65 	bl	800bf6c <__multadd>
 800b4a2:	45b8      	cmp	r8, r7
 800b4a4:	4683      	mov	fp, r0
 800b4a6:	f04f 0300 	mov.w	r3, #0
 800b4aa:	f04f 020a 	mov.w	r2, #10
 800b4ae:	4641      	mov	r1, r8
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	d107      	bne.n	800b4c4 <_dtoa_r+0xb1c>
 800b4b4:	f000 fd5a 	bl	800bf6c <__multadd>
 800b4b8:	4680      	mov	r8, r0
 800b4ba:	4607      	mov	r7, r0
 800b4bc:	9b01      	ldr	r3, [sp, #4]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	9301      	str	r3, [sp, #4]
 800b4c2:	e775      	b.n	800b3b0 <_dtoa_r+0xa08>
 800b4c4:	f000 fd52 	bl	800bf6c <__multadd>
 800b4c8:	4639      	mov	r1, r7
 800b4ca:	4680      	mov	r8, r0
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	220a      	movs	r2, #10
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f000 fd4b 	bl	800bf6c <__multadd>
 800b4d6:	4607      	mov	r7, r0
 800b4d8:	e7f0      	b.n	800b4bc <_dtoa_r+0xb14>
 800b4da:	f1b9 0f00 	cmp.w	r9, #0
 800b4de:	9a00      	ldr	r2, [sp, #0]
 800b4e0:	bfcc      	ite	gt
 800b4e2:	464d      	movgt	r5, r9
 800b4e4:	2501      	movle	r5, #1
 800b4e6:	4415      	add	r5, r2
 800b4e8:	f04f 0800 	mov.w	r8, #0
 800b4ec:	4659      	mov	r1, fp
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	9301      	str	r3, [sp, #4]
 800b4f4:	f000 ff34 	bl	800c360 <__lshift>
 800b4f8:	4631      	mov	r1, r6
 800b4fa:	4683      	mov	fp, r0
 800b4fc:	f000 ff9c 	bl	800c438 <__mcmp>
 800b500:	2800      	cmp	r0, #0
 800b502:	dcb2      	bgt.n	800b46a <_dtoa_r+0xac2>
 800b504:	d102      	bne.n	800b50c <_dtoa_r+0xb64>
 800b506:	9b01      	ldr	r3, [sp, #4]
 800b508:	07db      	lsls	r3, r3, #31
 800b50a:	d4ae      	bmi.n	800b46a <_dtoa_r+0xac2>
 800b50c:	462b      	mov	r3, r5
 800b50e:	461d      	mov	r5, r3
 800b510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b514:	2a30      	cmp	r2, #48	; 0x30
 800b516:	d0fa      	beq.n	800b50e <_dtoa_r+0xb66>
 800b518:	e6f7      	b.n	800b30a <_dtoa_r+0x962>
 800b51a:	9a00      	ldr	r2, [sp, #0]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d1a5      	bne.n	800b46c <_dtoa_r+0xac4>
 800b520:	f10a 0a01 	add.w	sl, sl, #1
 800b524:	2331      	movs	r3, #49	; 0x31
 800b526:	e779      	b.n	800b41c <_dtoa_r+0xa74>
 800b528:	4b13      	ldr	r3, [pc, #76]	; (800b578 <_dtoa_r+0xbd0>)
 800b52a:	f7ff baaf 	b.w	800aa8c <_dtoa_r+0xe4>
 800b52e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b530:	2b00      	cmp	r3, #0
 800b532:	f47f aa86 	bne.w	800aa42 <_dtoa_r+0x9a>
 800b536:	4b11      	ldr	r3, [pc, #68]	; (800b57c <_dtoa_r+0xbd4>)
 800b538:	f7ff baa8 	b.w	800aa8c <_dtoa_r+0xe4>
 800b53c:	f1b9 0f00 	cmp.w	r9, #0
 800b540:	dc03      	bgt.n	800b54a <_dtoa_r+0xba2>
 800b542:	9b05      	ldr	r3, [sp, #20]
 800b544:	2b02      	cmp	r3, #2
 800b546:	f73f aec9 	bgt.w	800b2dc <_dtoa_r+0x934>
 800b54a:	9d00      	ldr	r5, [sp, #0]
 800b54c:	4631      	mov	r1, r6
 800b54e:	4658      	mov	r0, fp
 800b550:	f7ff f99c 	bl	800a88c <quorem>
 800b554:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b558:	f805 3b01 	strb.w	r3, [r5], #1
 800b55c:	9a00      	ldr	r2, [sp, #0]
 800b55e:	1aaa      	subs	r2, r5, r2
 800b560:	4591      	cmp	r9, r2
 800b562:	ddba      	ble.n	800b4da <_dtoa_r+0xb32>
 800b564:	4659      	mov	r1, fp
 800b566:	2300      	movs	r3, #0
 800b568:	220a      	movs	r2, #10
 800b56a:	4620      	mov	r0, r4
 800b56c:	f000 fcfe 	bl	800bf6c <__multadd>
 800b570:	4683      	mov	fp, r0
 800b572:	e7eb      	b.n	800b54c <_dtoa_r+0xba4>
 800b574:	0800d9f4 	.word	0x0800d9f4
 800b578:	0800d7f4 	.word	0x0800d7f4
 800b57c:	0800d971 	.word	0x0800d971

0800b580 <std>:
 800b580:	2300      	movs	r3, #0
 800b582:	b510      	push	{r4, lr}
 800b584:	4604      	mov	r4, r0
 800b586:	e9c0 3300 	strd	r3, r3, [r0]
 800b58a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b58e:	6083      	str	r3, [r0, #8]
 800b590:	8181      	strh	r1, [r0, #12]
 800b592:	6643      	str	r3, [r0, #100]	; 0x64
 800b594:	81c2      	strh	r2, [r0, #14]
 800b596:	6183      	str	r3, [r0, #24]
 800b598:	4619      	mov	r1, r3
 800b59a:	2208      	movs	r2, #8
 800b59c:	305c      	adds	r0, #92	; 0x5c
 800b59e:	f7fd fc03 	bl	8008da8 <memset>
 800b5a2:	4b05      	ldr	r3, [pc, #20]	; (800b5b8 <std+0x38>)
 800b5a4:	6263      	str	r3, [r4, #36]	; 0x24
 800b5a6:	4b05      	ldr	r3, [pc, #20]	; (800b5bc <std+0x3c>)
 800b5a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b5aa:	4b05      	ldr	r3, [pc, #20]	; (800b5c0 <std+0x40>)
 800b5ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b5ae:	4b05      	ldr	r3, [pc, #20]	; (800b5c4 <std+0x44>)
 800b5b0:	6224      	str	r4, [r4, #32]
 800b5b2:	6323      	str	r3, [r4, #48]	; 0x30
 800b5b4:	bd10      	pop	{r4, pc}
 800b5b6:	bf00      	nop
 800b5b8:	0800cf31 	.word	0x0800cf31
 800b5bc:	0800cf53 	.word	0x0800cf53
 800b5c0:	0800cf8b 	.word	0x0800cf8b
 800b5c4:	0800cfaf 	.word	0x0800cfaf

0800b5c8 <_cleanup_r>:
 800b5c8:	4901      	ldr	r1, [pc, #4]	; (800b5d0 <_cleanup_r+0x8>)
 800b5ca:	f000 b8af 	b.w	800b72c <_fwalk_reent>
 800b5ce:	bf00      	nop
 800b5d0:	0800d305 	.word	0x0800d305

0800b5d4 <__sfmoreglue>:
 800b5d4:	b570      	push	{r4, r5, r6, lr}
 800b5d6:	1e4a      	subs	r2, r1, #1
 800b5d8:	2568      	movs	r5, #104	; 0x68
 800b5da:	4355      	muls	r5, r2
 800b5dc:	460e      	mov	r6, r1
 800b5de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b5e2:	f001 f97b 	bl	800c8dc <_malloc_r>
 800b5e6:	4604      	mov	r4, r0
 800b5e8:	b140      	cbz	r0, 800b5fc <__sfmoreglue+0x28>
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	e9c0 1600 	strd	r1, r6, [r0]
 800b5f0:	300c      	adds	r0, #12
 800b5f2:	60a0      	str	r0, [r4, #8]
 800b5f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b5f8:	f7fd fbd6 	bl	8008da8 <memset>
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	bd70      	pop	{r4, r5, r6, pc}

0800b600 <__sfp_lock_acquire>:
 800b600:	4801      	ldr	r0, [pc, #4]	; (800b608 <__sfp_lock_acquire+0x8>)
 800b602:	f000 bc26 	b.w	800be52 <__retarget_lock_acquire_recursive>
 800b606:	bf00      	nop
 800b608:	20001510 	.word	0x20001510

0800b60c <__sfp_lock_release>:
 800b60c:	4801      	ldr	r0, [pc, #4]	; (800b614 <__sfp_lock_release+0x8>)
 800b60e:	f000 bc21 	b.w	800be54 <__retarget_lock_release_recursive>
 800b612:	bf00      	nop
 800b614:	20001510 	.word	0x20001510

0800b618 <__sinit_lock_acquire>:
 800b618:	4801      	ldr	r0, [pc, #4]	; (800b620 <__sinit_lock_acquire+0x8>)
 800b61a:	f000 bc1a 	b.w	800be52 <__retarget_lock_acquire_recursive>
 800b61e:	bf00      	nop
 800b620:	2000150b 	.word	0x2000150b

0800b624 <__sinit_lock_release>:
 800b624:	4801      	ldr	r0, [pc, #4]	; (800b62c <__sinit_lock_release+0x8>)
 800b626:	f000 bc15 	b.w	800be54 <__retarget_lock_release_recursive>
 800b62a:	bf00      	nop
 800b62c:	2000150b 	.word	0x2000150b

0800b630 <__sinit>:
 800b630:	b510      	push	{r4, lr}
 800b632:	4604      	mov	r4, r0
 800b634:	f7ff fff0 	bl	800b618 <__sinit_lock_acquire>
 800b638:	69a3      	ldr	r3, [r4, #24]
 800b63a:	b11b      	cbz	r3, 800b644 <__sinit+0x14>
 800b63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b640:	f7ff bff0 	b.w	800b624 <__sinit_lock_release>
 800b644:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b648:	6523      	str	r3, [r4, #80]	; 0x50
 800b64a:	4b13      	ldr	r3, [pc, #76]	; (800b698 <__sinit+0x68>)
 800b64c:	4a13      	ldr	r2, [pc, #76]	; (800b69c <__sinit+0x6c>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	62a2      	str	r2, [r4, #40]	; 0x28
 800b652:	42a3      	cmp	r3, r4
 800b654:	bf04      	itt	eq
 800b656:	2301      	moveq	r3, #1
 800b658:	61a3      	streq	r3, [r4, #24]
 800b65a:	4620      	mov	r0, r4
 800b65c:	f000 f820 	bl	800b6a0 <__sfp>
 800b660:	6060      	str	r0, [r4, #4]
 800b662:	4620      	mov	r0, r4
 800b664:	f000 f81c 	bl	800b6a0 <__sfp>
 800b668:	60a0      	str	r0, [r4, #8]
 800b66a:	4620      	mov	r0, r4
 800b66c:	f000 f818 	bl	800b6a0 <__sfp>
 800b670:	2200      	movs	r2, #0
 800b672:	60e0      	str	r0, [r4, #12]
 800b674:	2104      	movs	r1, #4
 800b676:	6860      	ldr	r0, [r4, #4]
 800b678:	f7ff ff82 	bl	800b580 <std>
 800b67c:	68a0      	ldr	r0, [r4, #8]
 800b67e:	2201      	movs	r2, #1
 800b680:	2109      	movs	r1, #9
 800b682:	f7ff ff7d 	bl	800b580 <std>
 800b686:	68e0      	ldr	r0, [r4, #12]
 800b688:	2202      	movs	r2, #2
 800b68a:	2112      	movs	r1, #18
 800b68c:	f7ff ff78 	bl	800b580 <std>
 800b690:	2301      	movs	r3, #1
 800b692:	61a3      	str	r3, [r4, #24]
 800b694:	e7d2      	b.n	800b63c <__sinit+0xc>
 800b696:	bf00      	nop
 800b698:	0800d7e0 	.word	0x0800d7e0
 800b69c:	0800b5c9 	.word	0x0800b5c9

0800b6a0 <__sfp>:
 800b6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6a2:	4607      	mov	r7, r0
 800b6a4:	f7ff ffac 	bl	800b600 <__sfp_lock_acquire>
 800b6a8:	4b1e      	ldr	r3, [pc, #120]	; (800b724 <__sfp+0x84>)
 800b6aa:	681e      	ldr	r6, [r3, #0]
 800b6ac:	69b3      	ldr	r3, [r6, #24]
 800b6ae:	b913      	cbnz	r3, 800b6b6 <__sfp+0x16>
 800b6b0:	4630      	mov	r0, r6
 800b6b2:	f7ff ffbd 	bl	800b630 <__sinit>
 800b6b6:	3648      	adds	r6, #72	; 0x48
 800b6b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b6bc:	3b01      	subs	r3, #1
 800b6be:	d503      	bpl.n	800b6c8 <__sfp+0x28>
 800b6c0:	6833      	ldr	r3, [r6, #0]
 800b6c2:	b30b      	cbz	r3, 800b708 <__sfp+0x68>
 800b6c4:	6836      	ldr	r6, [r6, #0]
 800b6c6:	e7f7      	b.n	800b6b8 <__sfp+0x18>
 800b6c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b6cc:	b9d5      	cbnz	r5, 800b704 <__sfp+0x64>
 800b6ce:	4b16      	ldr	r3, [pc, #88]	; (800b728 <__sfp+0x88>)
 800b6d0:	60e3      	str	r3, [r4, #12]
 800b6d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b6d6:	6665      	str	r5, [r4, #100]	; 0x64
 800b6d8:	f000 fbba 	bl	800be50 <__retarget_lock_init_recursive>
 800b6dc:	f7ff ff96 	bl	800b60c <__sfp_lock_release>
 800b6e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b6e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b6e8:	6025      	str	r5, [r4, #0]
 800b6ea:	61a5      	str	r5, [r4, #24]
 800b6ec:	2208      	movs	r2, #8
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b6f4:	f7fd fb58 	bl	8008da8 <memset>
 800b6f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b6fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b700:	4620      	mov	r0, r4
 800b702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b704:	3468      	adds	r4, #104	; 0x68
 800b706:	e7d9      	b.n	800b6bc <__sfp+0x1c>
 800b708:	2104      	movs	r1, #4
 800b70a:	4638      	mov	r0, r7
 800b70c:	f7ff ff62 	bl	800b5d4 <__sfmoreglue>
 800b710:	4604      	mov	r4, r0
 800b712:	6030      	str	r0, [r6, #0]
 800b714:	2800      	cmp	r0, #0
 800b716:	d1d5      	bne.n	800b6c4 <__sfp+0x24>
 800b718:	f7ff ff78 	bl	800b60c <__sfp_lock_release>
 800b71c:	230c      	movs	r3, #12
 800b71e:	603b      	str	r3, [r7, #0]
 800b720:	e7ee      	b.n	800b700 <__sfp+0x60>
 800b722:	bf00      	nop
 800b724:	0800d7e0 	.word	0x0800d7e0
 800b728:	ffff0001 	.word	0xffff0001

0800b72c <_fwalk_reent>:
 800b72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b730:	4606      	mov	r6, r0
 800b732:	4688      	mov	r8, r1
 800b734:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b738:	2700      	movs	r7, #0
 800b73a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b73e:	f1b9 0901 	subs.w	r9, r9, #1
 800b742:	d505      	bpl.n	800b750 <_fwalk_reent+0x24>
 800b744:	6824      	ldr	r4, [r4, #0]
 800b746:	2c00      	cmp	r4, #0
 800b748:	d1f7      	bne.n	800b73a <_fwalk_reent+0xe>
 800b74a:	4638      	mov	r0, r7
 800b74c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b750:	89ab      	ldrh	r3, [r5, #12]
 800b752:	2b01      	cmp	r3, #1
 800b754:	d907      	bls.n	800b766 <_fwalk_reent+0x3a>
 800b756:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b75a:	3301      	adds	r3, #1
 800b75c:	d003      	beq.n	800b766 <_fwalk_reent+0x3a>
 800b75e:	4629      	mov	r1, r5
 800b760:	4630      	mov	r0, r6
 800b762:	47c0      	blx	r8
 800b764:	4307      	orrs	r7, r0
 800b766:	3568      	adds	r5, #104	; 0x68
 800b768:	e7e9      	b.n	800b73e <_fwalk_reent+0x12>

0800b76a <rshift>:
 800b76a:	6903      	ldr	r3, [r0, #16]
 800b76c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b774:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b778:	f100 0414 	add.w	r4, r0, #20
 800b77c:	dd45      	ble.n	800b80a <rshift+0xa0>
 800b77e:	f011 011f 	ands.w	r1, r1, #31
 800b782:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b786:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b78a:	d10c      	bne.n	800b7a6 <rshift+0x3c>
 800b78c:	f100 0710 	add.w	r7, r0, #16
 800b790:	4629      	mov	r1, r5
 800b792:	42b1      	cmp	r1, r6
 800b794:	d334      	bcc.n	800b800 <rshift+0x96>
 800b796:	1a9b      	subs	r3, r3, r2
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	1eea      	subs	r2, r5, #3
 800b79c:	4296      	cmp	r6, r2
 800b79e:	bf38      	it	cc
 800b7a0:	2300      	movcc	r3, #0
 800b7a2:	4423      	add	r3, r4
 800b7a4:	e015      	b.n	800b7d2 <rshift+0x68>
 800b7a6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b7aa:	f1c1 0820 	rsb	r8, r1, #32
 800b7ae:	40cf      	lsrs	r7, r1
 800b7b0:	f105 0e04 	add.w	lr, r5, #4
 800b7b4:	46a1      	mov	r9, r4
 800b7b6:	4576      	cmp	r6, lr
 800b7b8:	46f4      	mov	ip, lr
 800b7ba:	d815      	bhi.n	800b7e8 <rshift+0x7e>
 800b7bc:	1a9b      	subs	r3, r3, r2
 800b7be:	009a      	lsls	r2, r3, #2
 800b7c0:	3a04      	subs	r2, #4
 800b7c2:	3501      	adds	r5, #1
 800b7c4:	42ae      	cmp	r6, r5
 800b7c6:	bf38      	it	cc
 800b7c8:	2200      	movcc	r2, #0
 800b7ca:	18a3      	adds	r3, r4, r2
 800b7cc:	50a7      	str	r7, [r4, r2]
 800b7ce:	b107      	cbz	r7, 800b7d2 <rshift+0x68>
 800b7d0:	3304      	adds	r3, #4
 800b7d2:	1b1a      	subs	r2, r3, r4
 800b7d4:	42a3      	cmp	r3, r4
 800b7d6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b7da:	bf08      	it	eq
 800b7dc:	2300      	moveq	r3, #0
 800b7de:	6102      	str	r2, [r0, #16]
 800b7e0:	bf08      	it	eq
 800b7e2:	6143      	streq	r3, [r0, #20]
 800b7e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7e8:	f8dc c000 	ldr.w	ip, [ip]
 800b7ec:	fa0c fc08 	lsl.w	ip, ip, r8
 800b7f0:	ea4c 0707 	orr.w	r7, ip, r7
 800b7f4:	f849 7b04 	str.w	r7, [r9], #4
 800b7f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b7fc:	40cf      	lsrs	r7, r1
 800b7fe:	e7da      	b.n	800b7b6 <rshift+0x4c>
 800b800:	f851 cb04 	ldr.w	ip, [r1], #4
 800b804:	f847 cf04 	str.w	ip, [r7, #4]!
 800b808:	e7c3      	b.n	800b792 <rshift+0x28>
 800b80a:	4623      	mov	r3, r4
 800b80c:	e7e1      	b.n	800b7d2 <rshift+0x68>

0800b80e <__hexdig_fun>:
 800b80e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b812:	2b09      	cmp	r3, #9
 800b814:	d802      	bhi.n	800b81c <__hexdig_fun+0xe>
 800b816:	3820      	subs	r0, #32
 800b818:	b2c0      	uxtb	r0, r0
 800b81a:	4770      	bx	lr
 800b81c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b820:	2b05      	cmp	r3, #5
 800b822:	d801      	bhi.n	800b828 <__hexdig_fun+0x1a>
 800b824:	3847      	subs	r0, #71	; 0x47
 800b826:	e7f7      	b.n	800b818 <__hexdig_fun+0xa>
 800b828:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b82c:	2b05      	cmp	r3, #5
 800b82e:	d801      	bhi.n	800b834 <__hexdig_fun+0x26>
 800b830:	3827      	subs	r0, #39	; 0x27
 800b832:	e7f1      	b.n	800b818 <__hexdig_fun+0xa>
 800b834:	2000      	movs	r0, #0
 800b836:	4770      	bx	lr

0800b838 <__gethex>:
 800b838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b83c:	ed2d 8b02 	vpush	{d8}
 800b840:	b089      	sub	sp, #36	; 0x24
 800b842:	ee08 0a10 	vmov	s16, r0
 800b846:	9304      	str	r3, [sp, #16]
 800b848:	4bbc      	ldr	r3, [pc, #752]	; (800bb3c <__gethex+0x304>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	9301      	str	r3, [sp, #4]
 800b84e:	4618      	mov	r0, r3
 800b850:	468b      	mov	fp, r1
 800b852:	4690      	mov	r8, r2
 800b854:	f7f4 fcbc 	bl	80001d0 <strlen>
 800b858:	9b01      	ldr	r3, [sp, #4]
 800b85a:	f8db 2000 	ldr.w	r2, [fp]
 800b85e:	4403      	add	r3, r0
 800b860:	4682      	mov	sl, r0
 800b862:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b866:	9305      	str	r3, [sp, #20]
 800b868:	1c93      	adds	r3, r2, #2
 800b86a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b86e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b872:	32fe      	adds	r2, #254	; 0xfe
 800b874:	18d1      	adds	r1, r2, r3
 800b876:	461f      	mov	r7, r3
 800b878:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b87c:	9100      	str	r1, [sp, #0]
 800b87e:	2830      	cmp	r0, #48	; 0x30
 800b880:	d0f8      	beq.n	800b874 <__gethex+0x3c>
 800b882:	f7ff ffc4 	bl	800b80e <__hexdig_fun>
 800b886:	4604      	mov	r4, r0
 800b888:	2800      	cmp	r0, #0
 800b88a:	d13a      	bne.n	800b902 <__gethex+0xca>
 800b88c:	9901      	ldr	r1, [sp, #4]
 800b88e:	4652      	mov	r2, sl
 800b890:	4638      	mov	r0, r7
 800b892:	f001 fb90 	bl	800cfb6 <strncmp>
 800b896:	4605      	mov	r5, r0
 800b898:	2800      	cmp	r0, #0
 800b89a:	d168      	bne.n	800b96e <__gethex+0x136>
 800b89c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b8a0:	eb07 060a 	add.w	r6, r7, sl
 800b8a4:	f7ff ffb3 	bl	800b80e <__hexdig_fun>
 800b8a8:	2800      	cmp	r0, #0
 800b8aa:	d062      	beq.n	800b972 <__gethex+0x13a>
 800b8ac:	4633      	mov	r3, r6
 800b8ae:	7818      	ldrb	r0, [r3, #0]
 800b8b0:	2830      	cmp	r0, #48	; 0x30
 800b8b2:	461f      	mov	r7, r3
 800b8b4:	f103 0301 	add.w	r3, r3, #1
 800b8b8:	d0f9      	beq.n	800b8ae <__gethex+0x76>
 800b8ba:	f7ff ffa8 	bl	800b80e <__hexdig_fun>
 800b8be:	2301      	movs	r3, #1
 800b8c0:	fab0 f480 	clz	r4, r0
 800b8c4:	0964      	lsrs	r4, r4, #5
 800b8c6:	4635      	mov	r5, r6
 800b8c8:	9300      	str	r3, [sp, #0]
 800b8ca:	463a      	mov	r2, r7
 800b8cc:	4616      	mov	r6, r2
 800b8ce:	3201      	adds	r2, #1
 800b8d0:	7830      	ldrb	r0, [r6, #0]
 800b8d2:	f7ff ff9c 	bl	800b80e <__hexdig_fun>
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	d1f8      	bne.n	800b8cc <__gethex+0x94>
 800b8da:	9901      	ldr	r1, [sp, #4]
 800b8dc:	4652      	mov	r2, sl
 800b8de:	4630      	mov	r0, r6
 800b8e0:	f001 fb69 	bl	800cfb6 <strncmp>
 800b8e4:	b980      	cbnz	r0, 800b908 <__gethex+0xd0>
 800b8e6:	b94d      	cbnz	r5, 800b8fc <__gethex+0xc4>
 800b8e8:	eb06 050a 	add.w	r5, r6, sl
 800b8ec:	462a      	mov	r2, r5
 800b8ee:	4616      	mov	r6, r2
 800b8f0:	3201      	adds	r2, #1
 800b8f2:	7830      	ldrb	r0, [r6, #0]
 800b8f4:	f7ff ff8b 	bl	800b80e <__hexdig_fun>
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	d1f8      	bne.n	800b8ee <__gethex+0xb6>
 800b8fc:	1bad      	subs	r5, r5, r6
 800b8fe:	00ad      	lsls	r5, r5, #2
 800b900:	e004      	b.n	800b90c <__gethex+0xd4>
 800b902:	2400      	movs	r4, #0
 800b904:	4625      	mov	r5, r4
 800b906:	e7e0      	b.n	800b8ca <__gethex+0x92>
 800b908:	2d00      	cmp	r5, #0
 800b90a:	d1f7      	bne.n	800b8fc <__gethex+0xc4>
 800b90c:	7833      	ldrb	r3, [r6, #0]
 800b90e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b912:	2b50      	cmp	r3, #80	; 0x50
 800b914:	d13b      	bne.n	800b98e <__gethex+0x156>
 800b916:	7873      	ldrb	r3, [r6, #1]
 800b918:	2b2b      	cmp	r3, #43	; 0x2b
 800b91a:	d02c      	beq.n	800b976 <__gethex+0x13e>
 800b91c:	2b2d      	cmp	r3, #45	; 0x2d
 800b91e:	d02e      	beq.n	800b97e <__gethex+0x146>
 800b920:	1c71      	adds	r1, r6, #1
 800b922:	f04f 0900 	mov.w	r9, #0
 800b926:	7808      	ldrb	r0, [r1, #0]
 800b928:	f7ff ff71 	bl	800b80e <__hexdig_fun>
 800b92c:	1e43      	subs	r3, r0, #1
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	2b18      	cmp	r3, #24
 800b932:	d82c      	bhi.n	800b98e <__gethex+0x156>
 800b934:	f1a0 0210 	sub.w	r2, r0, #16
 800b938:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b93c:	f7ff ff67 	bl	800b80e <__hexdig_fun>
 800b940:	1e43      	subs	r3, r0, #1
 800b942:	b2db      	uxtb	r3, r3
 800b944:	2b18      	cmp	r3, #24
 800b946:	d91d      	bls.n	800b984 <__gethex+0x14c>
 800b948:	f1b9 0f00 	cmp.w	r9, #0
 800b94c:	d000      	beq.n	800b950 <__gethex+0x118>
 800b94e:	4252      	negs	r2, r2
 800b950:	4415      	add	r5, r2
 800b952:	f8cb 1000 	str.w	r1, [fp]
 800b956:	b1e4      	cbz	r4, 800b992 <__gethex+0x15a>
 800b958:	9b00      	ldr	r3, [sp, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	bf14      	ite	ne
 800b95e:	2700      	movne	r7, #0
 800b960:	2706      	moveq	r7, #6
 800b962:	4638      	mov	r0, r7
 800b964:	b009      	add	sp, #36	; 0x24
 800b966:	ecbd 8b02 	vpop	{d8}
 800b96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b96e:	463e      	mov	r6, r7
 800b970:	4625      	mov	r5, r4
 800b972:	2401      	movs	r4, #1
 800b974:	e7ca      	b.n	800b90c <__gethex+0xd4>
 800b976:	f04f 0900 	mov.w	r9, #0
 800b97a:	1cb1      	adds	r1, r6, #2
 800b97c:	e7d3      	b.n	800b926 <__gethex+0xee>
 800b97e:	f04f 0901 	mov.w	r9, #1
 800b982:	e7fa      	b.n	800b97a <__gethex+0x142>
 800b984:	230a      	movs	r3, #10
 800b986:	fb03 0202 	mla	r2, r3, r2, r0
 800b98a:	3a10      	subs	r2, #16
 800b98c:	e7d4      	b.n	800b938 <__gethex+0x100>
 800b98e:	4631      	mov	r1, r6
 800b990:	e7df      	b.n	800b952 <__gethex+0x11a>
 800b992:	1bf3      	subs	r3, r6, r7
 800b994:	3b01      	subs	r3, #1
 800b996:	4621      	mov	r1, r4
 800b998:	2b07      	cmp	r3, #7
 800b99a:	dc0b      	bgt.n	800b9b4 <__gethex+0x17c>
 800b99c:	ee18 0a10 	vmov	r0, s16
 800b9a0:	f000 fa82 	bl	800bea8 <_Balloc>
 800b9a4:	4604      	mov	r4, r0
 800b9a6:	b940      	cbnz	r0, 800b9ba <__gethex+0x182>
 800b9a8:	4b65      	ldr	r3, [pc, #404]	; (800bb40 <__gethex+0x308>)
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	21de      	movs	r1, #222	; 0xde
 800b9ae:	4865      	ldr	r0, [pc, #404]	; (800bb44 <__gethex+0x30c>)
 800b9b0:	f001 fbf4 	bl	800d19c <__assert_func>
 800b9b4:	3101      	adds	r1, #1
 800b9b6:	105b      	asrs	r3, r3, #1
 800b9b8:	e7ee      	b.n	800b998 <__gethex+0x160>
 800b9ba:	f100 0914 	add.w	r9, r0, #20
 800b9be:	f04f 0b00 	mov.w	fp, #0
 800b9c2:	f1ca 0301 	rsb	r3, sl, #1
 800b9c6:	f8cd 9008 	str.w	r9, [sp, #8]
 800b9ca:	f8cd b000 	str.w	fp, [sp]
 800b9ce:	9306      	str	r3, [sp, #24]
 800b9d0:	42b7      	cmp	r7, r6
 800b9d2:	d340      	bcc.n	800ba56 <__gethex+0x21e>
 800b9d4:	9802      	ldr	r0, [sp, #8]
 800b9d6:	9b00      	ldr	r3, [sp, #0]
 800b9d8:	f840 3b04 	str.w	r3, [r0], #4
 800b9dc:	eba0 0009 	sub.w	r0, r0, r9
 800b9e0:	1080      	asrs	r0, r0, #2
 800b9e2:	0146      	lsls	r6, r0, #5
 800b9e4:	6120      	str	r0, [r4, #16]
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f000 fb54 	bl	800c094 <__hi0bits>
 800b9ec:	1a30      	subs	r0, r6, r0
 800b9ee:	f8d8 6000 	ldr.w	r6, [r8]
 800b9f2:	42b0      	cmp	r0, r6
 800b9f4:	dd63      	ble.n	800babe <__gethex+0x286>
 800b9f6:	1b87      	subs	r7, r0, r6
 800b9f8:	4639      	mov	r1, r7
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	f000 feee 	bl	800c7dc <__any_on>
 800ba00:	4682      	mov	sl, r0
 800ba02:	b1a8      	cbz	r0, 800ba30 <__gethex+0x1f8>
 800ba04:	1e7b      	subs	r3, r7, #1
 800ba06:	1159      	asrs	r1, r3, #5
 800ba08:	f003 021f 	and.w	r2, r3, #31
 800ba0c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ba10:	f04f 0a01 	mov.w	sl, #1
 800ba14:	fa0a f202 	lsl.w	r2, sl, r2
 800ba18:	420a      	tst	r2, r1
 800ba1a:	d009      	beq.n	800ba30 <__gethex+0x1f8>
 800ba1c:	4553      	cmp	r3, sl
 800ba1e:	dd05      	ble.n	800ba2c <__gethex+0x1f4>
 800ba20:	1eb9      	subs	r1, r7, #2
 800ba22:	4620      	mov	r0, r4
 800ba24:	f000 feda 	bl	800c7dc <__any_on>
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	d145      	bne.n	800bab8 <__gethex+0x280>
 800ba2c:	f04f 0a02 	mov.w	sl, #2
 800ba30:	4639      	mov	r1, r7
 800ba32:	4620      	mov	r0, r4
 800ba34:	f7ff fe99 	bl	800b76a <rshift>
 800ba38:	443d      	add	r5, r7
 800ba3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ba3e:	42ab      	cmp	r3, r5
 800ba40:	da4c      	bge.n	800badc <__gethex+0x2a4>
 800ba42:	ee18 0a10 	vmov	r0, s16
 800ba46:	4621      	mov	r1, r4
 800ba48:	f000 fa6e 	bl	800bf28 <_Bfree>
 800ba4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ba4e:	2300      	movs	r3, #0
 800ba50:	6013      	str	r3, [r2, #0]
 800ba52:	27a3      	movs	r7, #163	; 0xa3
 800ba54:	e785      	b.n	800b962 <__gethex+0x12a>
 800ba56:	1e73      	subs	r3, r6, #1
 800ba58:	9a05      	ldr	r2, [sp, #20]
 800ba5a:	9303      	str	r3, [sp, #12]
 800ba5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d019      	beq.n	800ba98 <__gethex+0x260>
 800ba64:	f1bb 0f20 	cmp.w	fp, #32
 800ba68:	d107      	bne.n	800ba7a <__gethex+0x242>
 800ba6a:	9b02      	ldr	r3, [sp, #8]
 800ba6c:	9a00      	ldr	r2, [sp, #0]
 800ba6e:	f843 2b04 	str.w	r2, [r3], #4
 800ba72:	9302      	str	r3, [sp, #8]
 800ba74:	2300      	movs	r3, #0
 800ba76:	9300      	str	r3, [sp, #0]
 800ba78:	469b      	mov	fp, r3
 800ba7a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ba7e:	f7ff fec6 	bl	800b80e <__hexdig_fun>
 800ba82:	9b00      	ldr	r3, [sp, #0]
 800ba84:	f000 000f 	and.w	r0, r0, #15
 800ba88:	fa00 f00b 	lsl.w	r0, r0, fp
 800ba8c:	4303      	orrs	r3, r0
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	f10b 0b04 	add.w	fp, fp, #4
 800ba94:	9b03      	ldr	r3, [sp, #12]
 800ba96:	e00d      	b.n	800bab4 <__gethex+0x27c>
 800ba98:	9b03      	ldr	r3, [sp, #12]
 800ba9a:	9a06      	ldr	r2, [sp, #24]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	42bb      	cmp	r3, r7
 800baa0:	d3e0      	bcc.n	800ba64 <__gethex+0x22c>
 800baa2:	4618      	mov	r0, r3
 800baa4:	9901      	ldr	r1, [sp, #4]
 800baa6:	9307      	str	r3, [sp, #28]
 800baa8:	4652      	mov	r2, sl
 800baaa:	f001 fa84 	bl	800cfb6 <strncmp>
 800baae:	9b07      	ldr	r3, [sp, #28]
 800bab0:	2800      	cmp	r0, #0
 800bab2:	d1d7      	bne.n	800ba64 <__gethex+0x22c>
 800bab4:	461e      	mov	r6, r3
 800bab6:	e78b      	b.n	800b9d0 <__gethex+0x198>
 800bab8:	f04f 0a03 	mov.w	sl, #3
 800babc:	e7b8      	b.n	800ba30 <__gethex+0x1f8>
 800babe:	da0a      	bge.n	800bad6 <__gethex+0x29e>
 800bac0:	1a37      	subs	r7, r6, r0
 800bac2:	4621      	mov	r1, r4
 800bac4:	ee18 0a10 	vmov	r0, s16
 800bac8:	463a      	mov	r2, r7
 800baca:	f000 fc49 	bl	800c360 <__lshift>
 800bace:	1bed      	subs	r5, r5, r7
 800bad0:	4604      	mov	r4, r0
 800bad2:	f100 0914 	add.w	r9, r0, #20
 800bad6:	f04f 0a00 	mov.w	sl, #0
 800bada:	e7ae      	b.n	800ba3a <__gethex+0x202>
 800badc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bae0:	42a8      	cmp	r0, r5
 800bae2:	dd72      	ble.n	800bbca <__gethex+0x392>
 800bae4:	1b45      	subs	r5, r0, r5
 800bae6:	42ae      	cmp	r6, r5
 800bae8:	dc36      	bgt.n	800bb58 <__gethex+0x320>
 800baea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800baee:	2b02      	cmp	r3, #2
 800baf0:	d02a      	beq.n	800bb48 <__gethex+0x310>
 800baf2:	2b03      	cmp	r3, #3
 800baf4:	d02c      	beq.n	800bb50 <__gethex+0x318>
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d115      	bne.n	800bb26 <__gethex+0x2ee>
 800bafa:	42ae      	cmp	r6, r5
 800bafc:	d113      	bne.n	800bb26 <__gethex+0x2ee>
 800bafe:	2e01      	cmp	r6, #1
 800bb00:	d10b      	bne.n	800bb1a <__gethex+0x2e2>
 800bb02:	9a04      	ldr	r2, [sp, #16]
 800bb04:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bb08:	6013      	str	r3, [r2, #0]
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	6123      	str	r3, [r4, #16]
 800bb0e:	f8c9 3000 	str.w	r3, [r9]
 800bb12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bb14:	2762      	movs	r7, #98	; 0x62
 800bb16:	601c      	str	r4, [r3, #0]
 800bb18:	e723      	b.n	800b962 <__gethex+0x12a>
 800bb1a:	1e71      	subs	r1, r6, #1
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	f000 fe5d 	bl	800c7dc <__any_on>
 800bb22:	2800      	cmp	r0, #0
 800bb24:	d1ed      	bne.n	800bb02 <__gethex+0x2ca>
 800bb26:	ee18 0a10 	vmov	r0, s16
 800bb2a:	4621      	mov	r1, r4
 800bb2c:	f000 f9fc 	bl	800bf28 <_Bfree>
 800bb30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb32:	2300      	movs	r3, #0
 800bb34:	6013      	str	r3, [r2, #0]
 800bb36:	2750      	movs	r7, #80	; 0x50
 800bb38:	e713      	b.n	800b962 <__gethex+0x12a>
 800bb3a:	bf00      	nop
 800bb3c:	0800dad4 	.word	0x0800dad4
 800bb40:	0800d9f4 	.word	0x0800d9f4
 800bb44:	0800da68 	.word	0x0800da68
 800bb48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d1eb      	bne.n	800bb26 <__gethex+0x2ee>
 800bb4e:	e7d8      	b.n	800bb02 <__gethex+0x2ca>
 800bb50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d1d5      	bne.n	800bb02 <__gethex+0x2ca>
 800bb56:	e7e6      	b.n	800bb26 <__gethex+0x2ee>
 800bb58:	1e6f      	subs	r7, r5, #1
 800bb5a:	f1ba 0f00 	cmp.w	sl, #0
 800bb5e:	d131      	bne.n	800bbc4 <__gethex+0x38c>
 800bb60:	b127      	cbz	r7, 800bb6c <__gethex+0x334>
 800bb62:	4639      	mov	r1, r7
 800bb64:	4620      	mov	r0, r4
 800bb66:	f000 fe39 	bl	800c7dc <__any_on>
 800bb6a:	4682      	mov	sl, r0
 800bb6c:	117b      	asrs	r3, r7, #5
 800bb6e:	2101      	movs	r1, #1
 800bb70:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bb74:	f007 071f 	and.w	r7, r7, #31
 800bb78:	fa01 f707 	lsl.w	r7, r1, r7
 800bb7c:	421f      	tst	r7, r3
 800bb7e:	4629      	mov	r1, r5
 800bb80:	4620      	mov	r0, r4
 800bb82:	bf18      	it	ne
 800bb84:	f04a 0a02 	orrne.w	sl, sl, #2
 800bb88:	1b76      	subs	r6, r6, r5
 800bb8a:	f7ff fdee 	bl	800b76a <rshift>
 800bb8e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bb92:	2702      	movs	r7, #2
 800bb94:	f1ba 0f00 	cmp.w	sl, #0
 800bb98:	d048      	beq.n	800bc2c <__gethex+0x3f4>
 800bb9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bb9e:	2b02      	cmp	r3, #2
 800bba0:	d015      	beq.n	800bbce <__gethex+0x396>
 800bba2:	2b03      	cmp	r3, #3
 800bba4:	d017      	beq.n	800bbd6 <__gethex+0x39e>
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d109      	bne.n	800bbbe <__gethex+0x386>
 800bbaa:	f01a 0f02 	tst.w	sl, #2
 800bbae:	d006      	beq.n	800bbbe <__gethex+0x386>
 800bbb0:	f8d9 0000 	ldr.w	r0, [r9]
 800bbb4:	ea4a 0a00 	orr.w	sl, sl, r0
 800bbb8:	f01a 0f01 	tst.w	sl, #1
 800bbbc:	d10e      	bne.n	800bbdc <__gethex+0x3a4>
 800bbbe:	f047 0710 	orr.w	r7, r7, #16
 800bbc2:	e033      	b.n	800bc2c <__gethex+0x3f4>
 800bbc4:	f04f 0a01 	mov.w	sl, #1
 800bbc8:	e7d0      	b.n	800bb6c <__gethex+0x334>
 800bbca:	2701      	movs	r7, #1
 800bbcc:	e7e2      	b.n	800bb94 <__gethex+0x35c>
 800bbce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bbd0:	f1c3 0301 	rsb	r3, r3, #1
 800bbd4:	9315      	str	r3, [sp, #84]	; 0x54
 800bbd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d0f0      	beq.n	800bbbe <__gethex+0x386>
 800bbdc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bbe0:	f104 0314 	add.w	r3, r4, #20
 800bbe4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bbe8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bbec:	f04f 0c00 	mov.w	ip, #0
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbf6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bbfa:	d01c      	beq.n	800bc36 <__gethex+0x3fe>
 800bbfc:	3201      	adds	r2, #1
 800bbfe:	6002      	str	r2, [r0, #0]
 800bc00:	2f02      	cmp	r7, #2
 800bc02:	f104 0314 	add.w	r3, r4, #20
 800bc06:	d13f      	bne.n	800bc88 <__gethex+0x450>
 800bc08:	f8d8 2000 	ldr.w	r2, [r8]
 800bc0c:	3a01      	subs	r2, #1
 800bc0e:	42b2      	cmp	r2, r6
 800bc10:	d10a      	bne.n	800bc28 <__gethex+0x3f0>
 800bc12:	1171      	asrs	r1, r6, #5
 800bc14:	2201      	movs	r2, #1
 800bc16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bc1a:	f006 061f 	and.w	r6, r6, #31
 800bc1e:	fa02 f606 	lsl.w	r6, r2, r6
 800bc22:	421e      	tst	r6, r3
 800bc24:	bf18      	it	ne
 800bc26:	4617      	movne	r7, r2
 800bc28:	f047 0720 	orr.w	r7, r7, #32
 800bc2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc2e:	601c      	str	r4, [r3, #0]
 800bc30:	9b04      	ldr	r3, [sp, #16]
 800bc32:	601d      	str	r5, [r3, #0]
 800bc34:	e695      	b.n	800b962 <__gethex+0x12a>
 800bc36:	4299      	cmp	r1, r3
 800bc38:	f843 cc04 	str.w	ip, [r3, #-4]
 800bc3c:	d8d8      	bhi.n	800bbf0 <__gethex+0x3b8>
 800bc3e:	68a3      	ldr	r3, [r4, #8]
 800bc40:	459b      	cmp	fp, r3
 800bc42:	db19      	blt.n	800bc78 <__gethex+0x440>
 800bc44:	6861      	ldr	r1, [r4, #4]
 800bc46:	ee18 0a10 	vmov	r0, s16
 800bc4a:	3101      	adds	r1, #1
 800bc4c:	f000 f92c 	bl	800bea8 <_Balloc>
 800bc50:	4681      	mov	r9, r0
 800bc52:	b918      	cbnz	r0, 800bc5c <__gethex+0x424>
 800bc54:	4b1a      	ldr	r3, [pc, #104]	; (800bcc0 <__gethex+0x488>)
 800bc56:	4602      	mov	r2, r0
 800bc58:	2184      	movs	r1, #132	; 0x84
 800bc5a:	e6a8      	b.n	800b9ae <__gethex+0x176>
 800bc5c:	6922      	ldr	r2, [r4, #16]
 800bc5e:	3202      	adds	r2, #2
 800bc60:	f104 010c 	add.w	r1, r4, #12
 800bc64:	0092      	lsls	r2, r2, #2
 800bc66:	300c      	adds	r0, #12
 800bc68:	f000 f910 	bl	800be8c <memcpy>
 800bc6c:	4621      	mov	r1, r4
 800bc6e:	ee18 0a10 	vmov	r0, s16
 800bc72:	f000 f959 	bl	800bf28 <_Bfree>
 800bc76:	464c      	mov	r4, r9
 800bc78:	6923      	ldr	r3, [r4, #16]
 800bc7a:	1c5a      	adds	r2, r3, #1
 800bc7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bc80:	6122      	str	r2, [r4, #16]
 800bc82:	2201      	movs	r2, #1
 800bc84:	615a      	str	r2, [r3, #20]
 800bc86:	e7bb      	b.n	800bc00 <__gethex+0x3c8>
 800bc88:	6922      	ldr	r2, [r4, #16]
 800bc8a:	455a      	cmp	r2, fp
 800bc8c:	dd0b      	ble.n	800bca6 <__gethex+0x46e>
 800bc8e:	2101      	movs	r1, #1
 800bc90:	4620      	mov	r0, r4
 800bc92:	f7ff fd6a 	bl	800b76a <rshift>
 800bc96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc9a:	3501      	adds	r5, #1
 800bc9c:	42ab      	cmp	r3, r5
 800bc9e:	f6ff aed0 	blt.w	800ba42 <__gethex+0x20a>
 800bca2:	2701      	movs	r7, #1
 800bca4:	e7c0      	b.n	800bc28 <__gethex+0x3f0>
 800bca6:	f016 061f 	ands.w	r6, r6, #31
 800bcaa:	d0fa      	beq.n	800bca2 <__gethex+0x46a>
 800bcac:	449a      	add	sl, r3
 800bcae:	f1c6 0620 	rsb	r6, r6, #32
 800bcb2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800bcb6:	f000 f9ed 	bl	800c094 <__hi0bits>
 800bcba:	42b0      	cmp	r0, r6
 800bcbc:	dbe7      	blt.n	800bc8e <__gethex+0x456>
 800bcbe:	e7f0      	b.n	800bca2 <__gethex+0x46a>
 800bcc0:	0800d9f4 	.word	0x0800d9f4

0800bcc4 <L_shift>:
 800bcc4:	f1c2 0208 	rsb	r2, r2, #8
 800bcc8:	0092      	lsls	r2, r2, #2
 800bcca:	b570      	push	{r4, r5, r6, lr}
 800bccc:	f1c2 0620 	rsb	r6, r2, #32
 800bcd0:	6843      	ldr	r3, [r0, #4]
 800bcd2:	6804      	ldr	r4, [r0, #0]
 800bcd4:	fa03 f506 	lsl.w	r5, r3, r6
 800bcd8:	432c      	orrs	r4, r5
 800bcda:	40d3      	lsrs	r3, r2
 800bcdc:	6004      	str	r4, [r0, #0]
 800bcde:	f840 3f04 	str.w	r3, [r0, #4]!
 800bce2:	4288      	cmp	r0, r1
 800bce4:	d3f4      	bcc.n	800bcd0 <L_shift+0xc>
 800bce6:	bd70      	pop	{r4, r5, r6, pc}

0800bce8 <__match>:
 800bce8:	b530      	push	{r4, r5, lr}
 800bcea:	6803      	ldr	r3, [r0, #0]
 800bcec:	3301      	adds	r3, #1
 800bcee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcf2:	b914      	cbnz	r4, 800bcfa <__match+0x12>
 800bcf4:	6003      	str	r3, [r0, #0]
 800bcf6:	2001      	movs	r0, #1
 800bcf8:	bd30      	pop	{r4, r5, pc}
 800bcfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcfe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bd02:	2d19      	cmp	r5, #25
 800bd04:	bf98      	it	ls
 800bd06:	3220      	addls	r2, #32
 800bd08:	42a2      	cmp	r2, r4
 800bd0a:	d0f0      	beq.n	800bcee <__match+0x6>
 800bd0c:	2000      	movs	r0, #0
 800bd0e:	e7f3      	b.n	800bcf8 <__match+0x10>

0800bd10 <__hexnan>:
 800bd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd14:	680b      	ldr	r3, [r1, #0]
 800bd16:	6801      	ldr	r1, [r0, #0]
 800bd18:	115e      	asrs	r6, r3, #5
 800bd1a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bd1e:	f013 031f 	ands.w	r3, r3, #31
 800bd22:	b087      	sub	sp, #28
 800bd24:	bf18      	it	ne
 800bd26:	3604      	addne	r6, #4
 800bd28:	2500      	movs	r5, #0
 800bd2a:	1f37      	subs	r7, r6, #4
 800bd2c:	4682      	mov	sl, r0
 800bd2e:	4690      	mov	r8, r2
 800bd30:	9301      	str	r3, [sp, #4]
 800bd32:	f846 5c04 	str.w	r5, [r6, #-4]
 800bd36:	46b9      	mov	r9, r7
 800bd38:	463c      	mov	r4, r7
 800bd3a:	9502      	str	r5, [sp, #8]
 800bd3c:	46ab      	mov	fp, r5
 800bd3e:	784a      	ldrb	r2, [r1, #1]
 800bd40:	1c4b      	adds	r3, r1, #1
 800bd42:	9303      	str	r3, [sp, #12]
 800bd44:	b342      	cbz	r2, 800bd98 <__hexnan+0x88>
 800bd46:	4610      	mov	r0, r2
 800bd48:	9105      	str	r1, [sp, #20]
 800bd4a:	9204      	str	r2, [sp, #16]
 800bd4c:	f7ff fd5f 	bl	800b80e <__hexdig_fun>
 800bd50:	2800      	cmp	r0, #0
 800bd52:	d14f      	bne.n	800bdf4 <__hexnan+0xe4>
 800bd54:	9a04      	ldr	r2, [sp, #16]
 800bd56:	9905      	ldr	r1, [sp, #20]
 800bd58:	2a20      	cmp	r2, #32
 800bd5a:	d818      	bhi.n	800bd8e <__hexnan+0x7e>
 800bd5c:	9b02      	ldr	r3, [sp, #8]
 800bd5e:	459b      	cmp	fp, r3
 800bd60:	dd13      	ble.n	800bd8a <__hexnan+0x7a>
 800bd62:	454c      	cmp	r4, r9
 800bd64:	d206      	bcs.n	800bd74 <__hexnan+0x64>
 800bd66:	2d07      	cmp	r5, #7
 800bd68:	dc04      	bgt.n	800bd74 <__hexnan+0x64>
 800bd6a:	462a      	mov	r2, r5
 800bd6c:	4649      	mov	r1, r9
 800bd6e:	4620      	mov	r0, r4
 800bd70:	f7ff ffa8 	bl	800bcc4 <L_shift>
 800bd74:	4544      	cmp	r4, r8
 800bd76:	d950      	bls.n	800be1a <__hexnan+0x10a>
 800bd78:	2300      	movs	r3, #0
 800bd7a:	f1a4 0904 	sub.w	r9, r4, #4
 800bd7e:	f844 3c04 	str.w	r3, [r4, #-4]
 800bd82:	f8cd b008 	str.w	fp, [sp, #8]
 800bd86:	464c      	mov	r4, r9
 800bd88:	461d      	mov	r5, r3
 800bd8a:	9903      	ldr	r1, [sp, #12]
 800bd8c:	e7d7      	b.n	800bd3e <__hexnan+0x2e>
 800bd8e:	2a29      	cmp	r2, #41	; 0x29
 800bd90:	d156      	bne.n	800be40 <__hexnan+0x130>
 800bd92:	3102      	adds	r1, #2
 800bd94:	f8ca 1000 	str.w	r1, [sl]
 800bd98:	f1bb 0f00 	cmp.w	fp, #0
 800bd9c:	d050      	beq.n	800be40 <__hexnan+0x130>
 800bd9e:	454c      	cmp	r4, r9
 800bda0:	d206      	bcs.n	800bdb0 <__hexnan+0xa0>
 800bda2:	2d07      	cmp	r5, #7
 800bda4:	dc04      	bgt.n	800bdb0 <__hexnan+0xa0>
 800bda6:	462a      	mov	r2, r5
 800bda8:	4649      	mov	r1, r9
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f7ff ff8a 	bl	800bcc4 <L_shift>
 800bdb0:	4544      	cmp	r4, r8
 800bdb2:	d934      	bls.n	800be1e <__hexnan+0x10e>
 800bdb4:	f1a8 0204 	sub.w	r2, r8, #4
 800bdb8:	4623      	mov	r3, r4
 800bdba:	f853 1b04 	ldr.w	r1, [r3], #4
 800bdbe:	f842 1f04 	str.w	r1, [r2, #4]!
 800bdc2:	429f      	cmp	r7, r3
 800bdc4:	d2f9      	bcs.n	800bdba <__hexnan+0xaa>
 800bdc6:	1b3b      	subs	r3, r7, r4
 800bdc8:	f023 0303 	bic.w	r3, r3, #3
 800bdcc:	3304      	adds	r3, #4
 800bdce:	3401      	adds	r4, #1
 800bdd0:	3e03      	subs	r6, #3
 800bdd2:	42b4      	cmp	r4, r6
 800bdd4:	bf88      	it	hi
 800bdd6:	2304      	movhi	r3, #4
 800bdd8:	4443      	add	r3, r8
 800bdda:	2200      	movs	r2, #0
 800bddc:	f843 2b04 	str.w	r2, [r3], #4
 800bde0:	429f      	cmp	r7, r3
 800bde2:	d2fb      	bcs.n	800bddc <__hexnan+0xcc>
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	b91b      	cbnz	r3, 800bdf0 <__hexnan+0xe0>
 800bde8:	4547      	cmp	r7, r8
 800bdea:	d127      	bne.n	800be3c <__hexnan+0x12c>
 800bdec:	2301      	movs	r3, #1
 800bdee:	603b      	str	r3, [r7, #0]
 800bdf0:	2005      	movs	r0, #5
 800bdf2:	e026      	b.n	800be42 <__hexnan+0x132>
 800bdf4:	3501      	adds	r5, #1
 800bdf6:	2d08      	cmp	r5, #8
 800bdf8:	f10b 0b01 	add.w	fp, fp, #1
 800bdfc:	dd06      	ble.n	800be0c <__hexnan+0xfc>
 800bdfe:	4544      	cmp	r4, r8
 800be00:	d9c3      	bls.n	800bd8a <__hexnan+0x7a>
 800be02:	2300      	movs	r3, #0
 800be04:	f844 3c04 	str.w	r3, [r4, #-4]
 800be08:	2501      	movs	r5, #1
 800be0a:	3c04      	subs	r4, #4
 800be0c:	6822      	ldr	r2, [r4, #0]
 800be0e:	f000 000f 	and.w	r0, r0, #15
 800be12:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800be16:	6022      	str	r2, [r4, #0]
 800be18:	e7b7      	b.n	800bd8a <__hexnan+0x7a>
 800be1a:	2508      	movs	r5, #8
 800be1c:	e7b5      	b.n	800bd8a <__hexnan+0x7a>
 800be1e:	9b01      	ldr	r3, [sp, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d0df      	beq.n	800bde4 <__hexnan+0xd4>
 800be24:	f04f 32ff 	mov.w	r2, #4294967295
 800be28:	f1c3 0320 	rsb	r3, r3, #32
 800be2c:	fa22 f303 	lsr.w	r3, r2, r3
 800be30:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800be34:	401a      	ands	r2, r3
 800be36:	f846 2c04 	str.w	r2, [r6, #-4]
 800be3a:	e7d3      	b.n	800bde4 <__hexnan+0xd4>
 800be3c:	3f04      	subs	r7, #4
 800be3e:	e7d1      	b.n	800bde4 <__hexnan+0xd4>
 800be40:	2004      	movs	r0, #4
 800be42:	b007      	add	sp, #28
 800be44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be48 <_localeconv_r>:
 800be48:	4800      	ldr	r0, [pc, #0]	; (800be4c <_localeconv_r+0x4>)
 800be4a:	4770      	bx	lr
 800be4c:	2000017c 	.word	0x2000017c

0800be50 <__retarget_lock_init_recursive>:
 800be50:	4770      	bx	lr

0800be52 <__retarget_lock_acquire_recursive>:
 800be52:	4770      	bx	lr

0800be54 <__retarget_lock_release_recursive>:
 800be54:	4770      	bx	lr
	...

0800be58 <malloc>:
 800be58:	4b02      	ldr	r3, [pc, #8]	; (800be64 <malloc+0xc>)
 800be5a:	4601      	mov	r1, r0
 800be5c:	6818      	ldr	r0, [r3, #0]
 800be5e:	f000 bd3d 	b.w	800c8dc <_malloc_r>
 800be62:	bf00      	nop
 800be64:	20000024 	.word	0x20000024

0800be68 <__ascii_mbtowc>:
 800be68:	b082      	sub	sp, #8
 800be6a:	b901      	cbnz	r1, 800be6e <__ascii_mbtowc+0x6>
 800be6c:	a901      	add	r1, sp, #4
 800be6e:	b142      	cbz	r2, 800be82 <__ascii_mbtowc+0x1a>
 800be70:	b14b      	cbz	r3, 800be86 <__ascii_mbtowc+0x1e>
 800be72:	7813      	ldrb	r3, [r2, #0]
 800be74:	600b      	str	r3, [r1, #0]
 800be76:	7812      	ldrb	r2, [r2, #0]
 800be78:	1e10      	subs	r0, r2, #0
 800be7a:	bf18      	it	ne
 800be7c:	2001      	movne	r0, #1
 800be7e:	b002      	add	sp, #8
 800be80:	4770      	bx	lr
 800be82:	4610      	mov	r0, r2
 800be84:	e7fb      	b.n	800be7e <__ascii_mbtowc+0x16>
 800be86:	f06f 0001 	mvn.w	r0, #1
 800be8a:	e7f8      	b.n	800be7e <__ascii_mbtowc+0x16>

0800be8c <memcpy>:
 800be8c:	440a      	add	r2, r1
 800be8e:	4291      	cmp	r1, r2
 800be90:	f100 33ff 	add.w	r3, r0, #4294967295
 800be94:	d100      	bne.n	800be98 <memcpy+0xc>
 800be96:	4770      	bx	lr
 800be98:	b510      	push	{r4, lr}
 800be9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bea2:	4291      	cmp	r1, r2
 800bea4:	d1f9      	bne.n	800be9a <memcpy+0xe>
 800bea6:	bd10      	pop	{r4, pc}

0800bea8 <_Balloc>:
 800bea8:	b570      	push	{r4, r5, r6, lr}
 800beaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800beac:	4604      	mov	r4, r0
 800beae:	460d      	mov	r5, r1
 800beb0:	b976      	cbnz	r6, 800bed0 <_Balloc+0x28>
 800beb2:	2010      	movs	r0, #16
 800beb4:	f7ff ffd0 	bl	800be58 <malloc>
 800beb8:	4602      	mov	r2, r0
 800beba:	6260      	str	r0, [r4, #36]	; 0x24
 800bebc:	b920      	cbnz	r0, 800bec8 <_Balloc+0x20>
 800bebe:	4b18      	ldr	r3, [pc, #96]	; (800bf20 <_Balloc+0x78>)
 800bec0:	4818      	ldr	r0, [pc, #96]	; (800bf24 <_Balloc+0x7c>)
 800bec2:	2166      	movs	r1, #102	; 0x66
 800bec4:	f001 f96a 	bl	800d19c <__assert_func>
 800bec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800becc:	6006      	str	r6, [r0, #0]
 800bece:	60c6      	str	r6, [r0, #12]
 800bed0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bed2:	68f3      	ldr	r3, [r6, #12]
 800bed4:	b183      	cbz	r3, 800bef8 <_Balloc+0x50>
 800bed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bed8:	68db      	ldr	r3, [r3, #12]
 800beda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bede:	b9b8      	cbnz	r0, 800bf10 <_Balloc+0x68>
 800bee0:	2101      	movs	r1, #1
 800bee2:	fa01 f605 	lsl.w	r6, r1, r5
 800bee6:	1d72      	adds	r2, r6, #5
 800bee8:	0092      	lsls	r2, r2, #2
 800beea:	4620      	mov	r0, r4
 800beec:	f000 fc97 	bl	800c81e <_calloc_r>
 800bef0:	b160      	cbz	r0, 800bf0c <_Balloc+0x64>
 800bef2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bef6:	e00e      	b.n	800bf16 <_Balloc+0x6e>
 800bef8:	2221      	movs	r2, #33	; 0x21
 800befa:	2104      	movs	r1, #4
 800befc:	4620      	mov	r0, r4
 800befe:	f000 fc8e 	bl	800c81e <_calloc_r>
 800bf02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf04:	60f0      	str	r0, [r6, #12]
 800bf06:	68db      	ldr	r3, [r3, #12]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d1e4      	bne.n	800bed6 <_Balloc+0x2e>
 800bf0c:	2000      	movs	r0, #0
 800bf0e:	bd70      	pop	{r4, r5, r6, pc}
 800bf10:	6802      	ldr	r2, [r0, #0]
 800bf12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf16:	2300      	movs	r3, #0
 800bf18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf1c:	e7f7      	b.n	800bf0e <_Balloc+0x66>
 800bf1e:	bf00      	nop
 800bf20:	0800d97e 	.word	0x0800d97e
 800bf24:	0800dae8 	.word	0x0800dae8

0800bf28 <_Bfree>:
 800bf28:	b570      	push	{r4, r5, r6, lr}
 800bf2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf2c:	4605      	mov	r5, r0
 800bf2e:	460c      	mov	r4, r1
 800bf30:	b976      	cbnz	r6, 800bf50 <_Bfree+0x28>
 800bf32:	2010      	movs	r0, #16
 800bf34:	f7ff ff90 	bl	800be58 <malloc>
 800bf38:	4602      	mov	r2, r0
 800bf3a:	6268      	str	r0, [r5, #36]	; 0x24
 800bf3c:	b920      	cbnz	r0, 800bf48 <_Bfree+0x20>
 800bf3e:	4b09      	ldr	r3, [pc, #36]	; (800bf64 <_Bfree+0x3c>)
 800bf40:	4809      	ldr	r0, [pc, #36]	; (800bf68 <_Bfree+0x40>)
 800bf42:	218a      	movs	r1, #138	; 0x8a
 800bf44:	f001 f92a 	bl	800d19c <__assert_func>
 800bf48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf4c:	6006      	str	r6, [r0, #0]
 800bf4e:	60c6      	str	r6, [r0, #12]
 800bf50:	b13c      	cbz	r4, 800bf62 <_Bfree+0x3a>
 800bf52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf54:	6862      	ldr	r2, [r4, #4]
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf5c:	6021      	str	r1, [r4, #0]
 800bf5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf62:	bd70      	pop	{r4, r5, r6, pc}
 800bf64:	0800d97e 	.word	0x0800d97e
 800bf68:	0800dae8 	.word	0x0800dae8

0800bf6c <__multadd>:
 800bf6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf70:	690e      	ldr	r6, [r1, #16]
 800bf72:	4607      	mov	r7, r0
 800bf74:	4698      	mov	r8, r3
 800bf76:	460c      	mov	r4, r1
 800bf78:	f101 0014 	add.w	r0, r1, #20
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	6805      	ldr	r5, [r0, #0]
 800bf80:	b2a9      	uxth	r1, r5
 800bf82:	fb02 8101 	mla	r1, r2, r1, r8
 800bf86:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bf8a:	0c2d      	lsrs	r5, r5, #16
 800bf8c:	fb02 c505 	mla	r5, r2, r5, ip
 800bf90:	b289      	uxth	r1, r1
 800bf92:	3301      	adds	r3, #1
 800bf94:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bf98:	429e      	cmp	r6, r3
 800bf9a:	f840 1b04 	str.w	r1, [r0], #4
 800bf9e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bfa2:	dcec      	bgt.n	800bf7e <__multadd+0x12>
 800bfa4:	f1b8 0f00 	cmp.w	r8, #0
 800bfa8:	d022      	beq.n	800bff0 <__multadd+0x84>
 800bfaa:	68a3      	ldr	r3, [r4, #8]
 800bfac:	42b3      	cmp	r3, r6
 800bfae:	dc19      	bgt.n	800bfe4 <__multadd+0x78>
 800bfb0:	6861      	ldr	r1, [r4, #4]
 800bfb2:	4638      	mov	r0, r7
 800bfb4:	3101      	adds	r1, #1
 800bfb6:	f7ff ff77 	bl	800bea8 <_Balloc>
 800bfba:	4605      	mov	r5, r0
 800bfbc:	b928      	cbnz	r0, 800bfca <__multadd+0x5e>
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	4b0d      	ldr	r3, [pc, #52]	; (800bff8 <__multadd+0x8c>)
 800bfc2:	480e      	ldr	r0, [pc, #56]	; (800bffc <__multadd+0x90>)
 800bfc4:	21b5      	movs	r1, #181	; 0xb5
 800bfc6:	f001 f8e9 	bl	800d19c <__assert_func>
 800bfca:	6922      	ldr	r2, [r4, #16]
 800bfcc:	3202      	adds	r2, #2
 800bfce:	f104 010c 	add.w	r1, r4, #12
 800bfd2:	0092      	lsls	r2, r2, #2
 800bfd4:	300c      	adds	r0, #12
 800bfd6:	f7ff ff59 	bl	800be8c <memcpy>
 800bfda:	4621      	mov	r1, r4
 800bfdc:	4638      	mov	r0, r7
 800bfde:	f7ff ffa3 	bl	800bf28 <_Bfree>
 800bfe2:	462c      	mov	r4, r5
 800bfe4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bfe8:	3601      	adds	r6, #1
 800bfea:	f8c3 8014 	str.w	r8, [r3, #20]
 800bfee:	6126      	str	r6, [r4, #16]
 800bff0:	4620      	mov	r0, r4
 800bff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bff6:	bf00      	nop
 800bff8:	0800d9f4 	.word	0x0800d9f4
 800bffc:	0800dae8 	.word	0x0800dae8

0800c000 <__s2b>:
 800c000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c004:	460c      	mov	r4, r1
 800c006:	4615      	mov	r5, r2
 800c008:	461f      	mov	r7, r3
 800c00a:	2209      	movs	r2, #9
 800c00c:	3308      	adds	r3, #8
 800c00e:	4606      	mov	r6, r0
 800c010:	fb93 f3f2 	sdiv	r3, r3, r2
 800c014:	2100      	movs	r1, #0
 800c016:	2201      	movs	r2, #1
 800c018:	429a      	cmp	r2, r3
 800c01a:	db09      	blt.n	800c030 <__s2b+0x30>
 800c01c:	4630      	mov	r0, r6
 800c01e:	f7ff ff43 	bl	800bea8 <_Balloc>
 800c022:	b940      	cbnz	r0, 800c036 <__s2b+0x36>
 800c024:	4602      	mov	r2, r0
 800c026:	4b19      	ldr	r3, [pc, #100]	; (800c08c <__s2b+0x8c>)
 800c028:	4819      	ldr	r0, [pc, #100]	; (800c090 <__s2b+0x90>)
 800c02a:	21ce      	movs	r1, #206	; 0xce
 800c02c:	f001 f8b6 	bl	800d19c <__assert_func>
 800c030:	0052      	lsls	r2, r2, #1
 800c032:	3101      	adds	r1, #1
 800c034:	e7f0      	b.n	800c018 <__s2b+0x18>
 800c036:	9b08      	ldr	r3, [sp, #32]
 800c038:	6143      	str	r3, [r0, #20]
 800c03a:	2d09      	cmp	r5, #9
 800c03c:	f04f 0301 	mov.w	r3, #1
 800c040:	6103      	str	r3, [r0, #16]
 800c042:	dd16      	ble.n	800c072 <__s2b+0x72>
 800c044:	f104 0909 	add.w	r9, r4, #9
 800c048:	46c8      	mov	r8, r9
 800c04a:	442c      	add	r4, r5
 800c04c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c050:	4601      	mov	r1, r0
 800c052:	3b30      	subs	r3, #48	; 0x30
 800c054:	220a      	movs	r2, #10
 800c056:	4630      	mov	r0, r6
 800c058:	f7ff ff88 	bl	800bf6c <__multadd>
 800c05c:	45a0      	cmp	r8, r4
 800c05e:	d1f5      	bne.n	800c04c <__s2b+0x4c>
 800c060:	f1a5 0408 	sub.w	r4, r5, #8
 800c064:	444c      	add	r4, r9
 800c066:	1b2d      	subs	r5, r5, r4
 800c068:	1963      	adds	r3, r4, r5
 800c06a:	42bb      	cmp	r3, r7
 800c06c:	db04      	blt.n	800c078 <__s2b+0x78>
 800c06e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c072:	340a      	adds	r4, #10
 800c074:	2509      	movs	r5, #9
 800c076:	e7f6      	b.n	800c066 <__s2b+0x66>
 800c078:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c07c:	4601      	mov	r1, r0
 800c07e:	3b30      	subs	r3, #48	; 0x30
 800c080:	220a      	movs	r2, #10
 800c082:	4630      	mov	r0, r6
 800c084:	f7ff ff72 	bl	800bf6c <__multadd>
 800c088:	e7ee      	b.n	800c068 <__s2b+0x68>
 800c08a:	bf00      	nop
 800c08c:	0800d9f4 	.word	0x0800d9f4
 800c090:	0800dae8 	.word	0x0800dae8

0800c094 <__hi0bits>:
 800c094:	0c03      	lsrs	r3, r0, #16
 800c096:	041b      	lsls	r3, r3, #16
 800c098:	b9d3      	cbnz	r3, 800c0d0 <__hi0bits+0x3c>
 800c09a:	0400      	lsls	r0, r0, #16
 800c09c:	2310      	movs	r3, #16
 800c09e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c0a2:	bf04      	itt	eq
 800c0a4:	0200      	lsleq	r0, r0, #8
 800c0a6:	3308      	addeq	r3, #8
 800c0a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c0ac:	bf04      	itt	eq
 800c0ae:	0100      	lsleq	r0, r0, #4
 800c0b0:	3304      	addeq	r3, #4
 800c0b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c0b6:	bf04      	itt	eq
 800c0b8:	0080      	lsleq	r0, r0, #2
 800c0ba:	3302      	addeq	r3, #2
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	db05      	blt.n	800c0cc <__hi0bits+0x38>
 800c0c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c0c4:	f103 0301 	add.w	r3, r3, #1
 800c0c8:	bf08      	it	eq
 800c0ca:	2320      	moveq	r3, #32
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	4770      	bx	lr
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	e7e4      	b.n	800c09e <__hi0bits+0xa>

0800c0d4 <__lo0bits>:
 800c0d4:	6803      	ldr	r3, [r0, #0]
 800c0d6:	f013 0207 	ands.w	r2, r3, #7
 800c0da:	4601      	mov	r1, r0
 800c0dc:	d00b      	beq.n	800c0f6 <__lo0bits+0x22>
 800c0de:	07da      	lsls	r2, r3, #31
 800c0e0:	d424      	bmi.n	800c12c <__lo0bits+0x58>
 800c0e2:	0798      	lsls	r0, r3, #30
 800c0e4:	bf49      	itett	mi
 800c0e6:	085b      	lsrmi	r3, r3, #1
 800c0e8:	089b      	lsrpl	r3, r3, #2
 800c0ea:	2001      	movmi	r0, #1
 800c0ec:	600b      	strmi	r3, [r1, #0]
 800c0ee:	bf5c      	itt	pl
 800c0f0:	600b      	strpl	r3, [r1, #0]
 800c0f2:	2002      	movpl	r0, #2
 800c0f4:	4770      	bx	lr
 800c0f6:	b298      	uxth	r0, r3
 800c0f8:	b9b0      	cbnz	r0, 800c128 <__lo0bits+0x54>
 800c0fa:	0c1b      	lsrs	r3, r3, #16
 800c0fc:	2010      	movs	r0, #16
 800c0fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c102:	bf04      	itt	eq
 800c104:	0a1b      	lsreq	r3, r3, #8
 800c106:	3008      	addeq	r0, #8
 800c108:	071a      	lsls	r2, r3, #28
 800c10a:	bf04      	itt	eq
 800c10c:	091b      	lsreq	r3, r3, #4
 800c10e:	3004      	addeq	r0, #4
 800c110:	079a      	lsls	r2, r3, #30
 800c112:	bf04      	itt	eq
 800c114:	089b      	lsreq	r3, r3, #2
 800c116:	3002      	addeq	r0, #2
 800c118:	07da      	lsls	r2, r3, #31
 800c11a:	d403      	bmi.n	800c124 <__lo0bits+0x50>
 800c11c:	085b      	lsrs	r3, r3, #1
 800c11e:	f100 0001 	add.w	r0, r0, #1
 800c122:	d005      	beq.n	800c130 <__lo0bits+0x5c>
 800c124:	600b      	str	r3, [r1, #0]
 800c126:	4770      	bx	lr
 800c128:	4610      	mov	r0, r2
 800c12a:	e7e8      	b.n	800c0fe <__lo0bits+0x2a>
 800c12c:	2000      	movs	r0, #0
 800c12e:	4770      	bx	lr
 800c130:	2020      	movs	r0, #32
 800c132:	4770      	bx	lr

0800c134 <__i2b>:
 800c134:	b510      	push	{r4, lr}
 800c136:	460c      	mov	r4, r1
 800c138:	2101      	movs	r1, #1
 800c13a:	f7ff feb5 	bl	800bea8 <_Balloc>
 800c13e:	4602      	mov	r2, r0
 800c140:	b928      	cbnz	r0, 800c14e <__i2b+0x1a>
 800c142:	4b05      	ldr	r3, [pc, #20]	; (800c158 <__i2b+0x24>)
 800c144:	4805      	ldr	r0, [pc, #20]	; (800c15c <__i2b+0x28>)
 800c146:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c14a:	f001 f827 	bl	800d19c <__assert_func>
 800c14e:	2301      	movs	r3, #1
 800c150:	6144      	str	r4, [r0, #20]
 800c152:	6103      	str	r3, [r0, #16]
 800c154:	bd10      	pop	{r4, pc}
 800c156:	bf00      	nop
 800c158:	0800d9f4 	.word	0x0800d9f4
 800c15c:	0800dae8 	.word	0x0800dae8

0800c160 <__multiply>:
 800c160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c164:	4614      	mov	r4, r2
 800c166:	690a      	ldr	r2, [r1, #16]
 800c168:	6923      	ldr	r3, [r4, #16]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	bfb8      	it	lt
 800c16e:	460b      	movlt	r3, r1
 800c170:	460d      	mov	r5, r1
 800c172:	bfbc      	itt	lt
 800c174:	4625      	movlt	r5, r4
 800c176:	461c      	movlt	r4, r3
 800c178:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c17c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c180:	68ab      	ldr	r3, [r5, #8]
 800c182:	6869      	ldr	r1, [r5, #4]
 800c184:	eb0a 0709 	add.w	r7, sl, r9
 800c188:	42bb      	cmp	r3, r7
 800c18a:	b085      	sub	sp, #20
 800c18c:	bfb8      	it	lt
 800c18e:	3101      	addlt	r1, #1
 800c190:	f7ff fe8a 	bl	800bea8 <_Balloc>
 800c194:	b930      	cbnz	r0, 800c1a4 <__multiply+0x44>
 800c196:	4602      	mov	r2, r0
 800c198:	4b42      	ldr	r3, [pc, #264]	; (800c2a4 <__multiply+0x144>)
 800c19a:	4843      	ldr	r0, [pc, #268]	; (800c2a8 <__multiply+0x148>)
 800c19c:	f240 115d 	movw	r1, #349	; 0x15d
 800c1a0:	f000 fffc 	bl	800d19c <__assert_func>
 800c1a4:	f100 0614 	add.w	r6, r0, #20
 800c1a8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c1ac:	4633      	mov	r3, r6
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	4543      	cmp	r3, r8
 800c1b2:	d31e      	bcc.n	800c1f2 <__multiply+0x92>
 800c1b4:	f105 0c14 	add.w	ip, r5, #20
 800c1b8:	f104 0314 	add.w	r3, r4, #20
 800c1bc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c1c0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c1c4:	9202      	str	r2, [sp, #8]
 800c1c6:	ebac 0205 	sub.w	r2, ip, r5
 800c1ca:	3a15      	subs	r2, #21
 800c1cc:	f022 0203 	bic.w	r2, r2, #3
 800c1d0:	3204      	adds	r2, #4
 800c1d2:	f105 0115 	add.w	r1, r5, #21
 800c1d6:	458c      	cmp	ip, r1
 800c1d8:	bf38      	it	cc
 800c1da:	2204      	movcc	r2, #4
 800c1dc:	9201      	str	r2, [sp, #4]
 800c1de:	9a02      	ldr	r2, [sp, #8]
 800c1e0:	9303      	str	r3, [sp, #12]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d808      	bhi.n	800c1f8 <__multiply+0x98>
 800c1e6:	2f00      	cmp	r7, #0
 800c1e8:	dc55      	bgt.n	800c296 <__multiply+0x136>
 800c1ea:	6107      	str	r7, [r0, #16]
 800c1ec:	b005      	add	sp, #20
 800c1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f2:	f843 2b04 	str.w	r2, [r3], #4
 800c1f6:	e7db      	b.n	800c1b0 <__multiply+0x50>
 800c1f8:	f8b3 a000 	ldrh.w	sl, [r3]
 800c1fc:	f1ba 0f00 	cmp.w	sl, #0
 800c200:	d020      	beq.n	800c244 <__multiply+0xe4>
 800c202:	f105 0e14 	add.w	lr, r5, #20
 800c206:	46b1      	mov	r9, r6
 800c208:	2200      	movs	r2, #0
 800c20a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c20e:	f8d9 b000 	ldr.w	fp, [r9]
 800c212:	b2a1      	uxth	r1, r4
 800c214:	fa1f fb8b 	uxth.w	fp, fp
 800c218:	fb0a b101 	mla	r1, sl, r1, fp
 800c21c:	4411      	add	r1, r2
 800c21e:	f8d9 2000 	ldr.w	r2, [r9]
 800c222:	0c24      	lsrs	r4, r4, #16
 800c224:	0c12      	lsrs	r2, r2, #16
 800c226:	fb0a 2404 	mla	r4, sl, r4, r2
 800c22a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c22e:	b289      	uxth	r1, r1
 800c230:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c234:	45f4      	cmp	ip, lr
 800c236:	f849 1b04 	str.w	r1, [r9], #4
 800c23a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c23e:	d8e4      	bhi.n	800c20a <__multiply+0xaa>
 800c240:	9901      	ldr	r1, [sp, #4]
 800c242:	5072      	str	r2, [r6, r1]
 800c244:	9a03      	ldr	r2, [sp, #12]
 800c246:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c24a:	3304      	adds	r3, #4
 800c24c:	f1b9 0f00 	cmp.w	r9, #0
 800c250:	d01f      	beq.n	800c292 <__multiply+0x132>
 800c252:	6834      	ldr	r4, [r6, #0]
 800c254:	f105 0114 	add.w	r1, r5, #20
 800c258:	46b6      	mov	lr, r6
 800c25a:	f04f 0a00 	mov.w	sl, #0
 800c25e:	880a      	ldrh	r2, [r1, #0]
 800c260:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c264:	fb09 b202 	mla	r2, r9, r2, fp
 800c268:	4492      	add	sl, r2
 800c26a:	b2a4      	uxth	r4, r4
 800c26c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c270:	f84e 4b04 	str.w	r4, [lr], #4
 800c274:	f851 4b04 	ldr.w	r4, [r1], #4
 800c278:	f8be 2000 	ldrh.w	r2, [lr]
 800c27c:	0c24      	lsrs	r4, r4, #16
 800c27e:	fb09 2404 	mla	r4, r9, r4, r2
 800c282:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c286:	458c      	cmp	ip, r1
 800c288:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c28c:	d8e7      	bhi.n	800c25e <__multiply+0xfe>
 800c28e:	9a01      	ldr	r2, [sp, #4]
 800c290:	50b4      	str	r4, [r6, r2]
 800c292:	3604      	adds	r6, #4
 800c294:	e7a3      	b.n	800c1de <__multiply+0x7e>
 800c296:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d1a5      	bne.n	800c1ea <__multiply+0x8a>
 800c29e:	3f01      	subs	r7, #1
 800c2a0:	e7a1      	b.n	800c1e6 <__multiply+0x86>
 800c2a2:	bf00      	nop
 800c2a4:	0800d9f4 	.word	0x0800d9f4
 800c2a8:	0800dae8 	.word	0x0800dae8

0800c2ac <__pow5mult>:
 800c2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2b0:	4615      	mov	r5, r2
 800c2b2:	f012 0203 	ands.w	r2, r2, #3
 800c2b6:	4606      	mov	r6, r0
 800c2b8:	460f      	mov	r7, r1
 800c2ba:	d007      	beq.n	800c2cc <__pow5mult+0x20>
 800c2bc:	4c25      	ldr	r4, [pc, #148]	; (800c354 <__pow5mult+0xa8>)
 800c2be:	3a01      	subs	r2, #1
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c2c6:	f7ff fe51 	bl	800bf6c <__multadd>
 800c2ca:	4607      	mov	r7, r0
 800c2cc:	10ad      	asrs	r5, r5, #2
 800c2ce:	d03d      	beq.n	800c34c <__pow5mult+0xa0>
 800c2d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c2d2:	b97c      	cbnz	r4, 800c2f4 <__pow5mult+0x48>
 800c2d4:	2010      	movs	r0, #16
 800c2d6:	f7ff fdbf 	bl	800be58 <malloc>
 800c2da:	4602      	mov	r2, r0
 800c2dc:	6270      	str	r0, [r6, #36]	; 0x24
 800c2de:	b928      	cbnz	r0, 800c2ec <__pow5mult+0x40>
 800c2e0:	4b1d      	ldr	r3, [pc, #116]	; (800c358 <__pow5mult+0xac>)
 800c2e2:	481e      	ldr	r0, [pc, #120]	; (800c35c <__pow5mult+0xb0>)
 800c2e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c2e8:	f000 ff58 	bl	800d19c <__assert_func>
 800c2ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2f0:	6004      	str	r4, [r0, #0]
 800c2f2:	60c4      	str	r4, [r0, #12]
 800c2f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c2f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2fc:	b94c      	cbnz	r4, 800c312 <__pow5mult+0x66>
 800c2fe:	f240 2171 	movw	r1, #625	; 0x271
 800c302:	4630      	mov	r0, r6
 800c304:	f7ff ff16 	bl	800c134 <__i2b>
 800c308:	2300      	movs	r3, #0
 800c30a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c30e:	4604      	mov	r4, r0
 800c310:	6003      	str	r3, [r0, #0]
 800c312:	f04f 0900 	mov.w	r9, #0
 800c316:	07eb      	lsls	r3, r5, #31
 800c318:	d50a      	bpl.n	800c330 <__pow5mult+0x84>
 800c31a:	4639      	mov	r1, r7
 800c31c:	4622      	mov	r2, r4
 800c31e:	4630      	mov	r0, r6
 800c320:	f7ff ff1e 	bl	800c160 <__multiply>
 800c324:	4639      	mov	r1, r7
 800c326:	4680      	mov	r8, r0
 800c328:	4630      	mov	r0, r6
 800c32a:	f7ff fdfd 	bl	800bf28 <_Bfree>
 800c32e:	4647      	mov	r7, r8
 800c330:	106d      	asrs	r5, r5, #1
 800c332:	d00b      	beq.n	800c34c <__pow5mult+0xa0>
 800c334:	6820      	ldr	r0, [r4, #0]
 800c336:	b938      	cbnz	r0, 800c348 <__pow5mult+0x9c>
 800c338:	4622      	mov	r2, r4
 800c33a:	4621      	mov	r1, r4
 800c33c:	4630      	mov	r0, r6
 800c33e:	f7ff ff0f 	bl	800c160 <__multiply>
 800c342:	6020      	str	r0, [r4, #0]
 800c344:	f8c0 9000 	str.w	r9, [r0]
 800c348:	4604      	mov	r4, r0
 800c34a:	e7e4      	b.n	800c316 <__pow5mult+0x6a>
 800c34c:	4638      	mov	r0, r7
 800c34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c352:	bf00      	nop
 800c354:	0800dc38 	.word	0x0800dc38
 800c358:	0800d97e 	.word	0x0800d97e
 800c35c:	0800dae8 	.word	0x0800dae8

0800c360 <__lshift>:
 800c360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c364:	460c      	mov	r4, r1
 800c366:	6849      	ldr	r1, [r1, #4]
 800c368:	6923      	ldr	r3, [r4, #16]
 800c36a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c36e:	68a3      	ldr	r3, [r4, #8]
 800c370:	4607      	mov	r7, r0
 800c372:	4691      	mov	r9, r2
 800c374:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c378:	f108 0601 	add.w	r6, r8, #1
 800c37c:	42b3      	cmp	r3, r6
 800c37e:	db0b      	blt.n	800c398 <__lshift+0x38>
 800c380:	4638      	mov	r0, r7
 800c382:	f7ff fd91 	bl	800bea8 <_Balloc>
 800c386:	4605      	mov	r5, r0
 800c388:	b948      	cbnz	r0, 800c39e <__lshift+0x3e>
 800c38a:	4602      	mov	r2, r0
 800c38c:	4b28      	ldr	r3, [pc, #160]	; (800c430 <__lshift+0xd0>)
 800c38e:	4829      	ldr	r0, [pc, #164]	; (800c434 <__lshift+0xd4>)
 800c390:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c394:	f000 ff02 	bl	800d19c <__assert_func>
 800c398:	3101      	adds	r1, #1
 800c39a:	005b      	lsls	r3, r3, #1
 800c39c:	e7ee      	b.n	800c37c <__lshift+0x1c>
 800c39e:	2300      	movs	r3, #0
 800c3a0:	f100 0114 	add.w	r1, r0, #20
 800c3a4:	f100 0210 	add.w	r2, r0, #16
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	4553      	cmp	r3, sl
 800c3ac:	db33      	blt.n	800c416 <__lshift+0xb6>
 800c3ae:	6920      	ldr	r0, [r4, #16]
 800c3b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3b4:	f104 0314 	add.w	r3, r4, #20
 800c3b8:	f019 091f 	ands.w	r9, r9, #31
 800c3bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c3c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c3c4:	d02b      	beq.n	800c41e <__lshift+0xbe>
 800c3c6:	f1c9 0e20 	rsb	lr, r9, #32
 800c3ca:	468a      	mov	sl, r1
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	6818      	ldr	r0, [r3, #0]
 800c3d0:	fa00 f009 	lsl.w	r0, r0, r9
 800c3d4:	4302      	orrs	r2, r0
 800c3d6:	f84a 2b04 	str.w	r2, [sl], #4
 800c3da:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3de:	459c      	cmp	ip, r3
 800c3e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c3e4:	d8f3      	bhi.n	800c3ce <__lshift+0x6e>
 800c3e6:	ebac 0304 	sub.w	r3, ip, r4
 800c3ea:	3b15      	subs	r3, #21
 800c3ec:	f023 0303 	bic.w	r3, r3, #3
 800c3f0:	3304      	adds	r3, #4
 800c3f2:	f104 0015 	add.w	r0, r4, #21
 800c3f6:	4584      	cmp	ip, r0
 800c3f8:	bf38      	it	cc
 800c3fa:	2304      	movcc	r3, #4
 800c3fc:	50ca      	str	r2, [r1, r3]
 800c3fe:	b10a      	cbz	r2, 800c404 <__lshift+0xa4>
 800c400:	f108 0602 	add.w	r6, r8, #2
 800c404:	3e01      	subs	r6, #1
 800c406:	4638      	mov	r0, r7
 800c408:	612e      	str	r6, [r5, #16]
 800c40a:	4621      	mov	r1, r4
 800c40c:	f7ff fd8c 	bl	800bf28 <_Bfree>
 800c410:	4628      	mov	r0, r5
 800c412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c416:	f842 0f04 	str.w	r0, [r2, #4]!
 800c41a:	3301      	adds	r3, #1
 800c41c:	e7c5      	b.n	800c3aa <__lshift+0x4a>
 800c41e:	3904      	subs	r1, #4
 800c420:	f853 2b04 	ldr.w	r2, [r3], #4
 800c424:	f841 2f04 	str.w	r2, [r1, #4]!
 800c428:	459c      	cmp	ip, r3
 800c42a:	d8f9      	bhi.n	800c420 <__lshift+0xc0>
 800c42c:	e7ea      	b.n	800c404 <__lshift+0xa4>
 800c42e:	bf00      	nop
 800c430:	0800d9f4 	.word	0x0800d9f4
 800c434:	0800dae8 	.word	0x0800dae8

0800c438 <__mcmp>:
 800c438:	b530      	push	{r4, r5, lr}
 800c43a:	6902      	ldr	r2, [r0, #16]
 800c43c:	690c      	ldr	r4, [r1, #16]
 800c43e:	1b12      	subs	r2, r2, r4
 800c440:	d10e      	bne.n	800c460 <__mcmp+0x28>
 800c442:	f100 0314 	add.w	r3, r0, #20
 800c446:	3114      	adds	r1, #20
 800c448:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c44c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c450:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c454:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c458:	42a5      	cmp	r5, r4
 800c45a:	d003      	beq.n	800c464 <__mcmp+0x2c>
 800c45c:	d305      	bcc.n	800c46a <__mcmp+0x32>
 800c45e:	2201      	movs	r2, #1
 800c460:	4610      	mov	r0, r2
 800c462:	bd30      	pop	{r4, r5, pc}
 800c464:	4283      	cmp	r3, r0
 800c466:	d3f3      	bcc.n	800c450 <__mcmp+0x18>
 800c468:	e7fa      	b.n	800c460 <__mcmp+0x28>
 800c46a:	f04f 32ff 	mov.w	r2, #4294967295
 800c46e:	e7f7      	b.n	800c460 <__mcmp+0x28>

0800c470 <__mdiff>:
 800c470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c474:	460c      	mov	r4, r1
 800c476:	4606      	mov	r6, r0
 800c478:	4611      	mov	r1, r2
 800c47a:	4620      	mov	r0, r4
 800c47c:	4617      	mov	r7, r2
 800c47e:	f7ff ffdb 	bl	800c438 <__mcmp>
 800c482:	1e05      	subs	r5, r0, #0
 800c484:	d110      	bne.n	800c4a8 <__mdiff+0x38>
 800c486:	4629      	mov	r1, r5
 800c488:	4630      	mov	r0, r6
 800c48a:	f7ff fd0d 	bl	800bea8 <_Balloc>
 800c48e:	b930      	cbnz	r0, 800c49e <__mdiff+0x2e>
 800c490:	4b39      	ldr	r3, [pc, #228]	; (800c578 <__mdiff+0x108>)
 800c492:	4602      	mov	r2, r0
 800c494:	f240 2132 	movw	r1, #562	; 0x232
 800c498:	4838      	ldr	r0, [pc, #224]	; (800c57c <__mdiff+0x10c>)
 800c49a:	f000 fe7f 	bl	800d19c <__assert_func>
 800c49e:	2301      	movs	r3, #1
 800c4a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c4a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4a8:	bfa4      	itt	ge
 800c4aa:	463b      	movge	r3, r7
 800c4ac:	4627      	movge	r7, r4
 800c4ae:	4630      	mov	r0, r6
 800c4b0:	6879      	ldr	r1, [r7, #4]
 800c4b2:	bfa6      	itte	ge
 800c4b4:	461c      	movge	r4, r3
 800c4b6:	2500      	movge	r5, #0
 800c4b8:	2501      	movlt	r5, #1
 800c4ba:	f7ff fcf5 	bl	800bea8 <_Balloc>
 800c4be:	b920      	cbnz	r0, 800c4ca <__mdiff+0x5a>
 800c4c0:	4b2d      	ldr	r3, [pc, #180]	; (800c578 <__mdiff+0x108>)
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c4c8:	e7e6      	b.n	800c498 <__mdiff+0x28>
 800c4ca:	693e      	ldr	r6, [r7, #16]
 800c4cc:	60c5      	str	r5, [r0, #12]
 800c4ce:	6925      	ldr	r5, [r4, #16]
 800c4d0:	f107 0114 	add.w	r1, r7, #20
 800c4d4:	f104 0914 	add.w	r9, r4, #20
 800c4d8:	f100 0e14 	add.w	lr, r0, #20
 800c4dc:	f107 0210 	add.w	r2, r7, #16
 800c4e0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c4e4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c4e8:	46f2      	mov	sl, lr
 800c4ea:	2700      	movs	r7, #0
 800c4ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800c4f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c4f4:	fa1f f883 	uxth.w	r8, r3
 800c4f8:	fa17 f78b 	uxtah	r7, r7, fp
 800c4fc:	0c1b      	lsrs	r3, r3, #16
 800c4fe:	eba7 0808 	sub.w	r8, r7, r8
 800c502:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c506:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c50a:	fa1f f888 	uxth.w	r8, r8
 800c50e:	141f      	asrs	r7, r3, #16
 800c510:	454d      	cmp	r5, r9
 800c512:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c516:	f84a 3b04 	str.w	r3, [sl], #4
 800c51a:	d8e7      	bhi.n	800c4ec <__mdiff+0x7c>
 800c51c:	1b2b      	subs	r3, r5, r4
 800c51e:	3b15      	subs	r3, #21
 800c520:	f023 0303 	bic.w	r3, r3, #3
 800c524:	3304      	adds	r3, #4
 800c526:	3415      	adds	r4, #21
 800c528:	42a5      	cmp	r5, r4
 800c52a:	bf38      	it	cc
 800c52c:	2304      	movcc	r3, #4
 800c52e:	4419      	add	r1, r3
 800c530:	4473      	add	r3, lr
 800c532:	469e      	mov	lr, r3
 800c534:	460d      	mov	r5, r1
 800c536:	4565      	cmp	r5, ip
 800c538:	d30e      	bcc.n	800c558 <__mdiff+0xe8>
 800c53a:	f10c 0203 	add.w	r2, ip, #3
 800c53e:	1a52      	subs	r2, r2, r1
 800c540:	f022 0203 	bic.w	r2, r2, #3
 800c544:	3903      	subs	r1, #3
 800c546:	458c      	cmp	ip, r1
 800c548:	bf38      	it	cc
 800c54a:	2200      	movcc	r2, #0
 800c54c:	441a      	add	r2, r3
 800c54e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c552:	b17b      	cbz	r3, 800c574 <__mdiff+0x104>
 800c554:	6106      	str	r6, [r0, #16]
 800c556:	e7a5      	b.n	800c4a4 <__mdiff+0x34>
 800c558:	f855 8b04 	ldr.w	r8, [r5], #4
 800c55c:	fa17 f488 	uxtah	r4, r7, r8
 800c560:	1422      	asrs	r2, r4, #16
 800c562:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c566:	b2a4      	uxth	r4, r4
 800c568:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c56c:	f84e 4b04 	str.w	r4, [lr], #4
 800c570:	1417      	asrs	r7, r2, #16
 800c572:	e7e0      	b.n	800c536 <__mdiff+0xc6>
 800c574:	3e01      	subs	r6, #1
 800c576:	e7ea      	b.n	800c54e <__mdiff+0xde>
 800c578:	0800d9f4 	.word	0x0800d9f4
 800c57c:	0800dae8 	.word	0x0800dae8

0800c580 <__ulp>:
 800c580:	b082      	sub	sp, #8
 800c582:	ed8d 0b00 	vstr	d0, [sp]
 800c586:	9b01      	ldr	r3, [sp, #4]
 800c588:	4912      	ldr	r1, [pc, #72]	; (800c5d4 <__ulp+0x54>)
 800c58a:	4019      	ands	r1, r3
 800c58c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c590:	2900      	cmp	r1, #0
 800c592:	dd05      	ble.n	800c5a0 <__ulp+0x20>
 800c594:	2200      	movs	r2, #0
 800c596:	460b      	mov	r3, r1
 800c598:	ec43 2b10 	vmov	d0, r2, r3
 800c59c:	b002      	add	sp, #8
 800c59e:	4770      	bx	lr
 800c5a0:	4249      	negs	r1, r1
 800c5a2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c5a6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c5aa:	f04f 0200 	mov.w	r2, #0
 800c5ae:	f04f 0300 	mov.w	r3, #0
 800c5b2:	da04      	bge.n	800c5be <__ulp+0x3e>
 800c5b4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c5b8:	fa41 f300 	asr.w	r3, r1, r0
 800c5bc:	e7ec      	b.n	800c598 <__ulp+0x18>
 800c5be:	f1a0 0114 	sub.w	r1, r0, #20
 800c5c2:	291e      	cmp	r1, #30
 800c5c4:	bfda      	itte	le
 800c5c6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c5ca:	fa20 f101 	lsrle.w	r1, r0, r1
 800c5ce:	2101      	movgt	r1, #1
 800c5d0:	460a      	mov	r2, r1
 800c5d2:	e7e1      	b.n	800c598 <__ulp+0x18>
 800c5d4:	7ff00000 	.word	0x7ff00000

0800c5d8 <__b2d>:
 800c5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5da:	6905      	ldr	r5, [r0, #16]
 800c5dc:	f100 0714 	add.w	r7, r0, #20
 800c5e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c5e4:	1f2e      	subs	r6, r5, #4
 800c5e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f7ff fd52 	bl	800c094 <__hi0bits>
 800c5f0:	f1c0 0320 	rsb	r3, r0, #32
 800c5f4:	280a      	cmp	r0, #10
 800c5f6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c674 <__b2d+0x9c>
 800c5fa:	600b      	str	r3, [r1, #0]
 800c5fc:	dc14      	bgt.n	800c628 <__b2d+0x50>
 800c5fe:	f1c0 0e0b 	rsb	lr, r0, #11
 800c602:	fa24 f10e 	lsr.w	r1, r4, lr
 800c606:	42b7      	cmp	r7, r6
 800c608:	ea41 030c 	orr.w	r3, r1, ip
 800c60c:	bf34      	ite	cc
 800c60e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c612:	2100      	movcs	r1, #0
 800c614:	3015      	adds	r0, #21
 800c616:	fa04 f000 	lsl.w	r0, r4, r0
 800c61a:	fa21 f10e 	lsr.w	r1, r1, lr
 800c61e:	ea40 0201 	orr.w	r2, r0, r1
 800c622:	ec43 2b10 	vmov	d0, r2, r3
 800c626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c628:	42b7      	cmp	r7, r6
 800c62a:	bf3a      	itte	cc
 800c62c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c630:	f1a5 0608 	subcc.w	r6, r5, #8
 800c634:	2100      	movcs	r1, #0
 800c636:	380b      	subs	r0, #11
 800c638:	d017      	beq.n	800c66a <__b2d+0x92>
 800c63a:	f1c0 0c20 	rsb	ip, r0, #32
 800c63e:	fa04 f500 	lsl.w	r5, r4, r0
 800c642:	42be      	cmp	r6, r7
 800c644:	fa21 f40c 	lsr.w	r4, r1, ip
 800c648:	ea45 0504 	orr.w	r5, r5, r4
 800c64c:	bf8c      	ite	hi
 800c64e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c652:	2400      	movls	r4, #0
 800c654:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c658:	fa01 f000 	lsl.w	r0, r1, r0
 800c65c:	fa24 f40c 	lsr.w	r4, r4, ip
 800c660:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c664:	ea40 0204 	orr.w	r2, r0, r4
 800c668:	e7db      	b.n	800c622 <__b2d+0x4a>
 800c66a:	ea44 030c 	orr.w	r3, r4, ip
 800c66e:	460a      	mov	r2, r1
 800c670:	e7d7      	b.n	800c622 <__b2d+0x4a>
 800c672:	bf00      	nop
 800c674:	3ff00000 	.word	0x3ff00000

0800c678 <__d2b>:
 800c678:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c67c:	4689      	mov	r9, r1
 800c67e:	2101      	movs	r1, #1
 800c680:	ec57 6b10 	vmov	r6, r7, d0
 800c684:	4690      	mov	r8, r2
 800c686:	f7ff fc0f 	bl	800bea8 <_Balloc>
 800c68a:	4604      	mov	r4, r0
 800c68c:	b930      	cbnz	r0, 800c69c <__d2b+0x24>
 800c68e:	4602      	mov	r2, r0
 800c690:	4b25      	ldr	r3, [pc, #148]	; (800c728 <__d2b+0xb0>)
 800c692:	4826      	ldr	r0, [pc, #152]	; (800c72c <__d2b+0xb4>)
 800c694:	f240 310a 	movw	r1, #778	; 0x30a
 800c698:	f000 fd80 	bl	800d19c <__assert_func>
 800c69c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c6a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c6a4:	bb35      	cbnz	r5, 800c6f4 <__d2b+0x7c>
 800c6a6:	2e00      	cmp	r6, #0
 800c6a8:	9301      	str	r3, [sp, #4]
 800c6aa:	d028      	beq.n	800c6fe <__d2b+0x86>
 800c6ac:	4668      	mov	r0, sp
 800c6ae:	9600      	str	r6, [sp, #0]
 800c6b0:	f7ff fd10 	bl	800c0d4 <__lo0bits>
 800c6b4:	9900      	ldr	r1, [sp, #0]
 800c6b6:	b300      	cbz	r0, 800c6fa <__d2b+0x82>
 800c6b8:	9a01      	ldr	r2, [sp, #4]
 800c6ba:	f1c0 0320 	rsb	r3, r0, #32
 800c6be:	fa02 f303 	lsl.w	r3, r2, r3
 800c6c2:	430b      	orrs	r3, r1
 800c6c4:	40c2      	lsrs	r2, r0
 800c6c6:	6163      	str	r3, [r4, #20]
 800c6c8:	9201      	str	r2, [sp, #4]
 800c6ca:	9b01      	ldr	r3, [sp, #4]
 800c6cc:	61a3      	str	r3, [r4, #24]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	bf14      	ite	ne
 800c6d2:	2202      	movne	r2, #2
 800c6d4:	2201      	moveq	r2, #1
 800c6d6:	6122      	str	r2, [r4, #16]
 800c6d8:	b1d5      	cbz	r5, 800c710 <__d2b+0x98>
 800c6da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c6de:	4405      	add	r5, r0
 800c6e0:	f8c9 5000 	str.w	r5, [r9]
 800c6e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c6e8:	f8c8 0000 	str.w	r0, [r8]
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	b003      	add	sp, #12
 800c6f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6f8:	e7d5      	b.n	800c6a6 <__d2b+0x2e>
 800c6fa:	6161      	str	r1, [r4, #20]
 800c6fc:	e7e5      	b.n	800c6ca <__d2b+0x52>
 800c6fe:	a801      	add	r0, sp, #4
 800c700:	f7ff fce8 	bl	800c0d4 <__lo0bits>
 800c704:	9b01      	ldr	r3, [sp, #4]
 800c706:	6163      	str	r3, [r4, #20]
 800c708:	2201      	movs	r2, #1
 800c70a:	6122      	str	r2, [r4, #16]
 800c70c:	3020      	adds	r0, #32
 800c70e:	e7e3      	b.n	800c6d8 <__d2b+0x60>
 800c710:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c714:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c718:	f8c9 0000 	str.w	r0, [r9]
 800c71c:	6918      	ldr	r0, [r3, #16]
 800c71e:	f7ff fcb9 	bl	800c094 <__hi0bits>
 800c722:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c726:	e7df      	b.n	800c6e8 <__d2b+0x70>
 800c728:	0800d9f4 	.word	0x0800d9f4
 800c72c:	0800dae8 	.word	0x0800dae8

0800c730 <__ratio>:
 800c730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c734:	4688      	mov	r8, r1
 800c736:	4669      	mov	r1, sp
 800c738:	4681      	mov	r9, r0
 800c73a:	f7ff ff4d 	bl	800c5d8 <__b2d>
 800c73e:	a901      	add	r1, sp, #4
 800c740:	4640      	mov	r0, r8
 800c742:	ec55 4b10 	vmov	r4, r5, d0
 800c746:	f7ff ff47 	bl	800c5d8 <__b2d>
 800c74a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c74e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c752:	eba3 0c02 	sub.w	ip, r3, r2
 800c756:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c75a:	1a9b      	subs	r3, r3, r2
 800c75c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c760:	ec51 0b10 	vmov	r0, r1, d0
 800c764:	2b00      	cmp	r3, #0
 800c766:	bfd6      	itet	le
 800c768:	460a      	movle	r2, r1
 800c76a:	462a      	movgt	r2, r5
 800c76c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c770:	468b      	mov	fp, r1
 800c772:	462f      	mov	r7, r5
 800c774:	bfd4      	ite	le
 800c776:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c77a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c77e:	4620      	mov	r0, r4
 800c780:	ee10 2a10 	vmov	r2, s0
 800c784:	465b      	mov	r3, fp
 800c786:	4639      	mov	r1, r7
 800c788:	f7f4 f860 	bl	800084c <__aeabi_ddiv>
 800c78c:	ec41 0b10 	vmov	d0, r0, r1
 800c790:	b003      	add	sp, #12
 800c792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c796 <__copybits>:
 800c796:	3901      	subs	r1, #1
 800c798:	b570      	push	{r4, r5, r6, lr}
 800c79a:	1149      	asrs	r1, r1, #5
 800c79c:	6914      	ldr	r4, [r2, #16]
 800c79e:	3101      	adds	r1, #1
 800c7a0:	f102 0314 	add.w	r3, r2, #20
 800c7a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c7a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c7ac:	1f05      	subs	r5, r0, #4
 800c7ae:	42a3      	cmp	r3, r4
 800c7b0:	d30c      	bcc.n	800c7cc <__copybits+0x36>
 800c7b2:	1aa3      	subs	r3, r4, r2
 800c7b4:	3b11      	subs	r3, #17
 800c7b6:	f023 0303 	bic.w	r3, r3, #3
 800c7ba:	3211      	adds	r2, #17
 800c7bc:	42a2      	cmp	r2, r4
 800c7be:	bf88      	it	hi
 800c7c0:	2300      	movhi	r3, #0
 800c7c2:	4418      	add	r0, r3
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	4288      	cmp	r0, r1
 800c7c8:	d305      	bcc.n	800c7d6 <__copybits+0x40>
 800c7ca:	bd70      	pop	{r4, r5, r6, pc}
 800c7cc:	f853 6b04 	ldr.w	r6, [r3], #4
 800c7d0:	f845 6f04 	str.w	r6, [r5, #4]!
 800c7d4:	e7eb      	b.n	800c7ae <__copybits+0x18>
 800c7d6:	f840 3b04 	str.w	r3, [r0], #4
 800c7da:	e7f4      	b.n	800c7c6 <__copybits+0x30>

0800c7dc <__any_on>:
 800c7dc:	f100 0214 	add.w	r2, r0, #20
 800c7e0:	6900      	ldr	r0, [r0, #16]
 800c7e2:	114b      	asrs	r3, r1, #5
 800c7e4:	4298      	cmp	r0, r3
 800c7e6:	b510      	push	{r4, lr}
 800c7e8:	db11      	blt.n	800c80e <__any_on+0x32>
 800c7ea:	dd0a      	ble.n	800c802 <__any_on+0x26>
 800c7ec:	f011 011f 	ands.w	r1, r1, #31
 800c7f0:	d007      	beq.n	800c802 <__any_on+0x26>
 800c7f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c7f6:	fa24 f001 	lsr.w	r0, r4, r1
 800c7fa:	fa00 f101 	lsl.w	r1, r0, r1
 800c7fe:	428c      	cmp	r4, r1
 800c800:	d10b      	bne.n	800c81a <__any_on+0x3e>
 800c802:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c806:	4293      	cmp	r3, r2
 800c808:	d803      	bhi.n	800c812 <__any_on+0x36>
 800c80a:	2000      	movs	r0, #0
 800c80c:	bd10      	pop	{r4, pc}
 800c80e:	4603      	mov	r3, r0
 800c810:	e7f7      	b.n	800c802 <__any_on+0x26>
 800c812:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c816:	2900      	cmp	r1, #0
 800c818:	d0f5      	beq.n	800c806 <__any_on+0x2a>
 800c81a:	2001      	movs	r0, #1
 800c81c:	e7f6      	b.n	800c80c <__any_on+0x30>

0800c81e <_calloc_r>:
 800c81e:	b513      	push	{r0, r1, r4, lr}
 800c820:	434a      	muls	r2, r1
 800c822:	4611      	mov	r1, r2
 800c824:	9201      	str	r2, [sp, #4]
 800c826:	f000 f859 	bl	800c8dc <_malloc_r>
 800c82a:	4604      	mov	r4, r0
 800c82c:	b118      	cbz	r0, 800c836 <_calloc_r+0x18>
 800c82e:	9a01      	ldr	r2, [sp, #4]
 800c830:	2100      	movs	r1, #0
 800c832:	f7fc fab9 	bl	8008da8 <memset>
 800c836:	4620      	mov	r0, r4
 800c838:	b002      	add	sp, #8
 800c83a:	bd10      	pop	{r4, pc}

0800c83c <_free_r>:
 800c83c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c83e:	2900      	cmp	r1, #0
 800c840:	d048      	beq.n	800c8d4 <_free_r+0x98>
 800c842:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c846:	9001      	str	r0, [sp, #4]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	f1a1 0404 	sub.w	r4, r1, #4
 800c84e:	bfb8      	it	lt
 800c850:	18e4      	addlt	r4, r4, r3
 800c852:	f000 fe35 	bl	800d4c0 <__malloc_lock>
 800c856:	4a20      	ldr	r2, [pc, #128]	; (800c8d8 <_free_r+0x9c>)
 800c858:	9801      	ldr	r0, [sp, #4]
 800c85a:	6813      	ldr	r3, [r2, #0]
 800c85c:	4615      	mov	r5, r2
 800c85e:	b933      	cbnz	r3, 800c86e <_free_r+0x32>
 800c860:	6063      	str	r3, [r4, #4]
 800c862:	6014      	str	r4, [r2, #0]
 800c864:	b003      	add	sp, #12
 800c866:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c86a:	f000 be2f 	b.w	800d4cc <__malloc_unlock>
 800c86e:	42a3      	cmp	r3, r4
 800c870:	d90b      	bls.n	800c88a <_free_r+0x4e>
 800c872:	6821      	ldr	r1, [r4, #0]
 800c874:	1862      	adds	r2, r4, r1
 800c876:	4293      	cmp	r3, r2
 800c878:	bf04      	itt	eq
 800c87a:	681a      	ldreq	r2, [r3, #0]
 800c87c:	685b      	ldreq	r3, [r3, #4]
 800c87e:	6063      	str	r3, [r4, #4]
 800c880:	bf04      	itt	eq
 800c882:	1852      	addeq	r2, r2, r1
 800c884:	6022      	streq	r2, [r4, #0]
 800c886:	602c      	str	r4, [r5, #0]
 800c888:	e7ec      	b.n	800c864 <_free_r+0x28>
 800c88a:	461a      	mov	r2, r3
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	b10b      	cbz	r3, 800c894 <_free_r+0x58>
 800c890:	42a3      	cmp	r3, r4
 800c892:	d9fa      	bls.n	800c88a <_free_r+0x4e>
 800c894:	6811      	ldr	r1, [r2, #0]
 800c896:	1855      	adds	r5, r2, r1
 800c898:	42a5      	cmp	r5, r4
 800c89a:	d10b      	bne.n	800c8b4 <_free_r+0x78>
 800c89c:	6824      	ldr	r4, [r4, #0]
 800c89e:	4421      	add	r1, r4
 800c8a0:	1854      	adds	r4, r2, r1
 800c8a2:	42a3      	cmp	r3, r4
 800c8a4:	6011      	str	r1, [r2, #0]
 800c8a6:	d1dd      	bne.n	800c864 <_free_r+0x28>
 800c8a8:	681c      	ldr	r4, [r3, #0]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	6053      	str	r3, [r2, #4]
 800c8ae:	4421      	add	r1, r4
 800c8b0:	6011      	str	r1, [r2, #0]
 800c8b2:	e7d7      	b.n	800c864 <_free_r+0x28>
 800c8b4:	d902      	bls.n	800c8bc <_free_r+0x80>
 800c8b6:	230c      	movs	r3, #12
 800c8b8:	6003      	str	r3, [r0, #0]
 800c8ba:	e7d3      	b.n	800c864 <_free_r+0x28>
 800c8bc:	6825      	ldr	r5, [r4, #0]
 800c8be:	1961      	adds	r1, r4, r5
 800c8c0:	428b      	cmp	r3, r1
 800c8c2:	bf04      	itt	eq
 800c8c4:	6819      	ldreq	r1, [r3, #0]
 800c8c6:	685b      	ldreq	r3, [r3, #4]
 800c8c8:	6063      	str	r3, [r4, #4]
 800c8ca:	bf04      	itt	eq
 800c8cc:	1949      	addeq	r1, r1, r5
 800c8ce:	6021      	streq	r1, [r4, #0]
 800c8d0:	6054      	str	r4, [r2, #4]
 800c8d2:	e7c7      	b.n	800c864 <_free_r+0x28>
 800c8d4:	b003      	add	sp, #12
 800c8d6:	bd30      	pop	{r4, r5, pc}
 800c8d8:	20000274 	.word	0x20000274

0800c8dc <_malloc_r>:
 800c8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8de:	1ccd      	adds	r5, r1, #3
 800c8e0:	f025 0503 	bic.w	r5, r5, #3
 800c8e4:	3508      	adds	r5, #8
 800c8e6:	2d0c      	cmp	r5, #12
 800c8e8:	bf38      	it	cc
 800c8ea:	250c      	movcc	r5, #12
 800c8ec:	2d00      	cmp	r5, #0
 800c8ee:	4606      	mov	r6, r0
 800c8f0:	db01      	blt.n	800c8f6 <_malloc_r+0x1a>
 800c8f2:	42a9      	cmp	r1, r5
 800c8f4:	d903      	bls.n	800c8fe <_malloc_r+0x22>
 800c8f6:	230c      	movs	r3, #12
 800c8f8:	6033      	str	r3, [r6, #0]
 800c8fa:	2000      	movs	r0, #0
 800c8fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8fe:	f000 fddf 	bl	800d4c0 <__malloc_lock>
 800c902:	4921      	ldr	r1, [pc, #132]	; (800c988 <_malloc_r+0xac>)
 800c904:	680a      	ldr	r2, [r1, #0]
 800c906:	4614      	mov	r4, r2
 800c908:	b99c      	cbnz	r4, 800c932 <_malloc_r+0x56>
 800c90a:	4f20      	ldr	r7, [pc, #128]	; (800c98c <_malloc_r+0xb0>)
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	b923      	cbnz	r3, 800c91a <_malloc_r+0x3e>
 800c910:	4621      	mov	r1, r4
 800c912:	4630      	mov	r0, r6
 800c914:	f000 fafc 	bl	800cf10 <_sbrk_r>
 800c918:	6038      	str	r0, [r7, #0]
 800c91a:	4629      	mov	r1, r5
 800c91c:	4630      	mov	r0, r6
 800c91e:	f000 faf7 	bl	800cf10 <_sbrk_r>
 800c922:	1c43      	adds	r3, r0, #1
 800c924:	d123      	bne.n	800c96e <_malloc_r+0x92>
 800c926:	230c      	movs	r3, #12
 800c928:	6033      	str	r3, [r6, #0]
 800c92a:	4630      	mov	r0, r6
 800c92c:	f000 fdce 	bl	800d4cc <__malloc_unlock>
 800c930:	e7e3      	b.n	800c8fa <_malloc_r+0x1e>
 800c932:	6823      	ldr	r3, [r4, #0]
 800c934:	1b5b      	subs	r3, r3, r5
 800c936:	d417      	bmi.n	800c968 <_malloc_r+0x8c>
 800c938:	2b0b      	cmp	r3, #11
 800c93a:	d903      	bls.n	800c944 <_malloc_r+0x68>
 800c93c:	6023      	str	r3, [r4, #0]
 800c93e:	441c      	add	r4, r3
 800c940:	6025      	str	r5, [r4, #0]
 800c942:	e004      	b.n	800c94e <_malloc_r+0x72>
 800c944:	6863      	ldr	r3, [r4, #4]
 800c946:	42a2      	cmp	r2, r4
 800c948:	bf0c      	ite	eq
 800c94a:	600b      	streq	r3, [r1, #0]
 800c94c:	6053      	strne	r3, [r2, #4]
 800c94e:	4630      	mov	r0, r6
 800c950:	f000 fdbc 	bl	800d4cc <__malloc_unlock>
 800c954:	f104 000b 	add.w	r0, r4, #11
 800c958:	1d23      	adds	r3, r4, #4
 800c95a:	f020 0007 	bic.w	r0, r0, #7
 800c95e:	1ac2      	subs	r2, r0, r3
 800c960:	d0cc      	beq.n	800c8fc <_malloc_r+0x20>
 800c962:	1a1b      	subs	r3, r3, r0
 800c964:	50a3      	str	r3, [r4, r2]
 800c966:	e7c9      	b.n	800c8fc <_malloc_r+0x20>
 800c968:	4622      	mov	r2, r4
 800c96a:	6864      	ldr	r4, [r4, #4]
 800c96c:	e7cc      	b.n	800c908 <_malloc_r+0x2c>
 800c96e:	1cc4      	adds	r4, r0, #3
 800c970:	f024 0403 	bic.w	r4, r4, #3
 800c974:	42a0      	cmp	r0, r4
 800c976:	d0e3      	beq.n	800c940 <_malloc_r+0x64>
 800c978:	1a21      	subs	r1, r4, r0
 800c97a:	4630      	mov	r0, r6
 800c97c:	f000 fac8 	bl	800cf10 <_sbrk_r>
 800c980:	3001      	adds	r0, #1
 800c982:	d1dd      	bne.n	800c940 <_malloc_r+0x64>
 800c984:	e7cf      	b.n	800c926 <_malloc_r+0x4a>
 800c986:	bf00      	nop
 800c988:	20000274 	.word	0x20000274
 800c98c:	20000278 	.word	0x20000278

0800c990 <__ssputs_r>:
 800c990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c994:	688e      	ldr	r6, [r1, #8]
 800c996:	429e      	cmp	r6, r3
 800c998:	4682      	mov	sl, r0
 800c99a:	460c      	mov	r4, r1
 800c99c:	4690      	mov	r8, r2
 800c99e:	461f      	mov	r7, r3
 800c9a0:	d838      	bhi.n	800ca14 <__ssputs_r+0x84>
 800c9a2:	898a      	ldrh	r2, [r1, #12]
 800c9a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c9a8:	d032      	beq.n	800ca10 <__ssputs_r+0x80>
 800c9aa:	6825      	ldr	r5, [r4, #0]
 800c9ac:	6909      	ldr	r1, [r1, #16]
 800c9ae:	eba5 0901 	sub.w	r9, r5, r1
 800c9b2:	6965      	ldr	r5, [r4, #20]
 800c9b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c9b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c9bc:	3301      	adds	r3, #1
 800c9be:	444b      	add	r3, r9
 800c9c0:	106d      	asrs	r5, r5, #1
 800c9c2:	429d      	cmp	r5, r3
 800c9c4:	bf38      	it	cc
 800c9c6:	461d      	movcc	r5, r3
 800c9c8:	0553      	lsls	r3, r2, #21
 800c9ca:	d531      	bpl.n	800ca30 <__ssputs_r+0xa0>
 800c9cc:	4629      	mov	r1, r5
 800c9ce:	f7ff ff85 	bl	800c8dc <_malloc_r>
 800c9d2:	4606      	mov	r6, r0
 800c9d4:	b950      	cbnz	r0, 800c9ec <__ssputs_r+0x5c>
 800c9d6:	230c      	movs	r3, #12
 800c9d8:	f8ca 3000 	str.w	r3, [sl]
 800c9dc:	89a3      	ldrh	r3, [r4, #12]
 800c9de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9e2:	81a3      	strh	r3, [r4, #12]
 800c9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9ec:	6921      	ldr	r1, [r4, #16]
 800c9ee:	464a      	mov	r2, r9
 800c9f0:	f7ff fa4c 	bl	800be8c <memcpy>
 800c9f4:	89a3      	ldrh	r3, [r4, #12]
 800c9f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c9fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9fe:	81a3      	strh	r3, [r4, #12]
 800ca00:	6126      	str	r6, [r4, #16]
 800ca02:	6165      	str	r5, [r4, #20]
 800ca04:	444e      	add	r6, r9
 800ca06:	eba5 0509 	sub.w	r5, r5, r9
 800ca0a:	6026      	str	r6, [r4, #0]
 800ca0c:	60a5      	str	r5, [r4, #8]
 800ca0e:	463e      	mov	r6, r7
 800ca10:	42be      	cmp	r6, r7
 800ca12:	d900      	bls.n	800ca16 <__ssputs_r+0x86>
 800ca14:	463e      	mov	r6, r7
 800ca16:	4632      	mov	r2, r6
 800ca18:	6820      	ldr	r0, [r4, #0]
 800ca1a:	4641      	mov	r1, r8
 800ca1c:	f000 fd36 	bl	800d48c <memmove>
 800ca20:	68a3      	ldr	r3, [r4, #8]
 800ca22:	6822      	ldr	r2, [r4, #0]
 800ca24:	1b9b      	subs	r3, r3, r6
 800ca26:	4432      	add	r2, r6
 800ca28:	60a3      	str	r3, [r4, #8]
 800ca2a:	6022      	str	r2, [r4, #0]
 800ca2c:	2000      	movs	r0, #0
 800ca2e:	e7db      	b.n	800c9e8 <__ssputs_r+0x58>
 800ca30:	462a      	mov	r2, r5
 800ca32:	f000 fd51 	bl	800d4d8 <_realloc_r>
 800ca36:	4606      	mov	r6, r0
 800ca38:	2800      	cmp	r0, #0
 800ca3a:	d1e1      	bne.n	800ca00 <__ssputs_r+0x70>
 800ca3c:	6921      	ldr	r1, [r4, #16]
 800ca3e:	4650      	mov	r0, sl
 800ca40:	f7ff fefc 	bl	800c83c <_free_r>
 800ca44:	e7c7      	b.n	800c9d6 <__ssputs_r+0x46>
	...

0800ca48 <_svfiprintf_r>:
 800ca48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca4c:	4698      	mov	r8, r3
 800ca4e:	898b      	ldrh	r3, [r1, #12]
 800ca50:	061b      	lsls	r3, r3, #24
 800ca52:	b09d      	sub	sp, #116	; 0x74
 800ca54:	4607      	mov	r7, r0
 800ca56:	460d      	mov	r5, r1
 800ca58:	4614      	mov	r4, r2
 800ca5a:	d50e      	bpl.n	800ca7a <_svfiprintf_r+0x32>
 800ca5c:	690b      	ldr	r3, [r1, #16]
 800ca5e:	b963      	cbnz	r3, 800ca7a <_svfiprintf_r+0x32>
 800ca60:	2140      	movs	r1, #64	; 0x40
 800ca62:	f7ff ff3b 	bl	800c8dc <_malloc_r>
 800ca66:	6028      	str	r0, [r5, #0]
 800ca68:	6128      	str	r0, [r5, #16]
 800ca6a:	b920      	cbnz	r0, 800ca76 <_svfiprintf_r+0x2e>
 800ca6c:	230c      	movs	r3, #12
 800ca6e:	603b      	str	r3, [r7, #0]
 800ca70:	f04f 30ff 	mov.w	r0, #4294967295
 800ca74:	e0d1      	b.n	800cc1a <_svfiprintf_r+0x1d2>
 800ca76:	2340      	movs	r3, #64	; 0x40
 800ca78:	616b      	str	r3, [r5, #20]
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ca7e:	2320      	movs	r3, #32
 800ca80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca84:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca88:	2330      	movs	r3, #48	; 0x30
 800ca8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cc34 <_svfiprintf_r+0x1ec>
 800ca8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca92:	f04f 0901 	mov.w	r9, #1
 800ca96:	4623      	mov	r3, r4
 800ca98:	469a      	mov	sl, r3
 800ca9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca9e:	b10a      	cbz	r2, 800caa4 <_svfiprintf_r+0x5c>
 800caa0:	2a25      	cmp	r2, #37	; 0x25
 800caa2:	d1f9      	bne.n	800ca98 <_svfiprintf_r+0x50>
 800caa4:	ebba 0b04 	subs.w	fp, sl, r4
 800caa8:	d00b      	beq.n	800cac2 <_svfiprintf_r+0x7a>
 800caaa:	465b      	mov	r3, fp
 800caac:	4622      	mov	r2, r4
 800caae:	4629      	mov	r1, r5
 800cab0:	4638      	mov	r0, r7
 800cab2:	f7ff ff6d 	bl	800c990 <__ssputs_r>
 800cab6:	3001      	adds	r0, #1
 800cab8:	f000 80aa 	beq.w	800cc10 <_svfiprintf_r+0x1c8>
 800cabc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cabe:	445a      	add	r2, fp
 800cac0:	9209      	str	r2, [sp, #36]	; 0x24
 800cac2:	f89a 3000 	ldrb.w	r3, [sl]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	f000 80a2 	beq.w	800cc10 <_svfiprintf_r+0x1c8>
 800cacc:	2300      	movs	r3, #0
 800cace:	f04f 32ff 	mov.w	r2, #4294967295
 800cad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cad6:	f10a 0a01 	add.w	sl, sl, #1
 800cada:	9304      	str	r3, [sp, #16]
 800cadc:	9307      	str	r3, [sp, #28]
 800cade:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cae2:	931a      	str	r3, [sp, #104]	; 0x68
 800cae4:	4654      	mov	r4, sl
 800cae6:	2205      	movs	r2, #5
 800cae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caec:	4851      	ldr	r0, [pc, #324]	; (800cc34 <_svfiprintf_r+0x1ec>)
 800caee:	f7f3 fb77 	bl	80001e0 <memchr>
 800caf2:	9a04      	ldr	r2, [sp, #16]
 800caf4:	b9d8      	cbnz	r0, 800cb2e <_svfiprintf_r+0xe6>
 800caf6:	06d0      	lsls	r0, r2, #27
 800caf8:	bf44      	itt	mi
 800cafa:	2320      	movmi	r3, #32
 800cafc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb00:	0711      	lsls	r1, r2, #28
 800cb02:	bf44      	itt	mi
 800cb04:	232b      	movmi	r3, #43	; 0x2b
 800cb06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb0a:	f89a 3000 	ldrb.w	r3, [sl]
 800cb0e:	2b2a      	cmp	r3, #42	; 0x2a
 800cb10:	d015      	beq.n	800cb3e <_svfiprintf_r+0xf6>
 800cb12:	9a07      	ldr	r2, [sp, #28]
 800cb14:	4654      	mov	r4, sl
 800cb16:	2000      	movs	r0, #0
 800cb18:	f04f 0c0a 	mov.w	ip, #10
 800cb1c:	4621      	mov	r1, r4
 800cb1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb22:	3b30      	subs	r3, #48	; 0x30
 800cb24:	2b09      	cmp	r3, #9
 800cb26:	d94e      	bls.n	800cbc6 <_svfiprintf_r+0x17e>
 800cb28:	b1b0      	cbz	r0, 800cb58 <_svfiprintf_r+0x110>
 800cb2a:	9207      	str	r2, [sp, #28]
 800cb2c:	e014      	b.n	800cb58 <_svfiprintf_r+0x110>
 800cb2e:	eba0 0308 	sub.w	r3, r0, r8
 800cb32:	fa09 f303 	lsl.w	r3, r9, r3
 800cb36:	4313      	orrs	r3, r2
 800cb38:	9304      	str	r3, [sp, #16]
 800cb3a:	46a2      	mov	sl, r4
 800cb3c:	e7d2      	b.n	800cae4 <_svfiprintf_r+0x9c>
 800cb3e:	9b03      	ldr	r3, [sp, #12]
 800cb40:	1d19      	adds	r1, r3, #4
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	9103      	str	r1, [sp, #12]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	bfbb      	ittet	lt
 800cb4a:	425b      	neglt	r3, r3
 800cb4c:	f042 0202 	orrlt.w	r2, r2, #2
 800cb50:	9307      	strge	r3, [sp, #28]
 800cb52:	9307      	strlt	r3, [sp, #28]
 800cb54:	bfb8      	it	lt
 800cb56:	9204      	strlt	r2, [sp, #16]
 800cb58:	7823      	ldrb	r3, [r4, #0]
 800cb5a:	2b2e      	cmp	r3, #46	; 0x2e
 800cb5c:	d10c      	bne.n	800cb78 <_svfiprintf_r+0x130>
 800cb5e:	7863      	ldrb	r3, [r4, #1]
 800cb60:	2b2a      	cmp	r3, #42	; 0x2a
 800cb62:	d135      	bne.n	800cbd0 <_svfiprintf_r+0x188>
 800cb64:	9b03      	ldr	r3, [sp, #12]
 800cb66:	1d1a      	adds	r2, r3, #4
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	9203      	str	r2, [sp, #12]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	bfb8      	it	lt
 800cb70:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb74:	3402      	adds	r4, #2
 800cb76:	9305      	str	r3, [sp, #20]
 800cb78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cc44 <_svfiprintf_r+0x1fc>
 800cb7c:	7821      	ldrb	r1, [r4, #0]
 800cb7e:	2203      	movs	r2, #3
 800cb80:	4650      	mov	r0, sl
 800cb82:	f7f3 fb2d 	bl	80001e0 <memchr>
 800cb86:	b140      	cbz	r0, 800cb9a <_svfiprintf_r+0x152>
 800cb88:	2340      	movs	r3, #64	; 0x40
 800cb8a:	eba0 000a 	sub.w	r0, r0, sl
 800cb8e:	fa03 f000 	lsl.w	r0, r3, r0
 800cb92:	9b04      	ldr	r3, [sp, #16]
 800cb94:	4303      	orrs	r3, r0
 800cb96:	3401      	adds	r4, #1
 800cb98:	9304      	str	r3, [sp, #16]
 800cb9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb9e:	4826      	ldr	r0, [pc, #152]	; (800cc38 <_svfiprintf_r+0x1f0>)
 800cba0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cba4:	2206      	movs	r2, #6
 800cba6:	f7f3 fb1b 	bl	80001e0 <memchr>
 800cbaa:	2800      	cmp	r0, #0
 800cbac:	d038      	beq.n	800cc20 <_svfiprintf_r+0x1d8>
 800cbae:	4b23      	ldr	r3, [pc, #140]	; (800cc3c <_svfiprintf_r+0x1f4>)
 800cbb0:	bb1b      	cbnz	r3, 800cbfa <_svfiprintf_r+0x1b2>
 800cbb2:	9b03      	ldr	r3, [sp, #12]
 800cbb4:	3307      	adds	r3, #7
 800cbb6:	f023 0307 	bic.w	r3, r3, #7
 800cbba:	3308      	adds	r3, #8
 800cbbc:	9303      	str	r3, [sp, #12]
 800cbbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbc0:	4433      	add	r3, r6
 800cbc2:	9309      	str	r3, [sp, #36]	; 0x24
 800cbc4:	e767      	b.n	800ca96 <_svfiprintf_r+0x4e>
 800cbc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbca:	460c      	mov	r4, r1
 800cbcc:	2001      	movs	r0, #1
 800cbce:	e7a5      	b.n	800cb1c <_svfiprintf_r+0xd4>
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	3401      	adds	r4, #1
 800cbd4:	9305      	str	r3, [sp, #20]
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	f04f 0c0a 	mov.w	ip, #10
 800cbdc:	4620      	mov	r0, r4
 800cbde:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbe2:	3a30      	subs	r2, #48	; 0x30
 800cbe4:	2a09      	cmp	r2, #9
 800cbe6:	d903      	bls.n	800cbf0 <_svfiprintf_r+0x1a8>
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d0c5      	beq.n	800cb78 <_svfiprintf_r+0x130>
 800cbec:	9105      	str	r1, [sp, #20]
 800cbee:	e7c3      	b.n	800cb78 <_svfiprintf_r+0x130>
 800cbf0:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbf4:	4604      	mov	r4, r0
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	e7f0      	b.n	800cbdc <_svfiprintf_r+0x194>
 800cbfa:	ab03      	add	r3, sp, #12
 800cbfc:	9300      	str	r3, [sp, #0]
 800cbfe:	462a      	mov	r2, r5
 800cc00:	4b0f      	ldr	r3, [pc, #60]	; (800cc40 <_svfiprintf_r+0x1f8>)
 800cc02:	a904      	add	r1, sp, #16
 800cc04:	4638      	mov	r0, r7
 800cc06:	f7fc f977 	bl	8008ef8 <_printf_float>
 800cc0a:	1c42      	adds	r2, r0, #1
 800cc0c:	4606      	mov	r6, r0
 800cc0e:	d1d6      	bne.n	800cbbe <_svfiprintf_r+0x176>
 800cc10:	89ab      	ldrh	r3, [r5, #12]
 800cc12:	065b      	lsls	r3, r3, #25
 800cc14:	f53f af2c 	bmi.w	800ca70 <_svfiprintf_r+0x28>
 800cc18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc1a:	b01d      	add	sp, #116	; 0x74
 800cc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc20:	ab03      	add	r3, sp, #12
 800cc22:	9300      	str	r3, [sp, #0]
 800cc24:	462a      	mov	r2, r5
 800cc26:	4b06      	ldr	r3, [pc, #24]	; (800cc40 <_svfiprintf_r+0x1f8>)
 800cc28:	a904      	add	r1, sp, #16
 800cc2a:	4638      	mov	r0, r7
 800cc2c:	f7fc fc08 	bl	8009440 <_printf_i>
 800cc30:	e7eb      	b.n	800cc0a <_svfiprintf_r+0x1c2>
 800cc32:	bf00      	nop
 800cc34:	0800dc44 	.word	0x0800dc44
 800cc38:	0800dc4e 	.word	0x0800dc4e
 800cc3c:	08008ef9 	.word	0x08008ef9
 800cc40:	0800c991 	.word	0x0800c991
 800cc44:	0800dc4a 	.word	0x0800dc4a

0800cc48 <__sfputc_r>:
 800cc48:	6893      	ldr	r3, [r2, #8]
 800cc4a:	3b01      	subs	r3, #1
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	b410      	push	{r4}
 800cc50:	6093      	str	r3, [r2, #8]
 800cc52:	da08      	bge.n	800cc66 <__sfputc_r+0x1e>
 800cc54:	6994      	ldr	r4, [r2, #24]
 800cc56:	42a3      	cmp	r3, r4
 800cc58:	db01      	blt.n	800cc5e <__sfputc_r+0x16>
 800cc5a:	290a      	cmp	r1, #10
 800cc5c:	d103      	bne.n	800cc66 <__sfputc_r+0x1e>
 800cc5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc62:	f000 b9bb 	b.w	800cfdc <__swbuf_r>
 800cc66:	6813      	ldr	r3, [r2, #0]
 800cc68:	1c58      	adds	r0, r3, #1
 800cc6a:	6010      	str	r0, [r2, #0]
 800cc6c:	7019      	strb	r1, [r3, #0]
 800cc6e:	4608      	mov	r0, r1
 800cc70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc74:	4770      	bx	lr

0800cc76 <__sfputs_r>:
 800cc76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc78:	4606      	mov	r6, r0
 800cc7a:	460f      	mov	r7, r1
 800cc7c:	4614      	mov	r4, r2
 800cc7e:	18d5      	adds	r5, r2, r3
 800cc80:	42ac      	cmp	r4, r5
 800cc82:	d101      	bne.n	800cc88 <__sfputs_r+0x12>
 800cc84:	2000      	movs	r0, #0
 800cc86:	e007      	b.n	800cc98 <__sfputs_r+0x22>
 800cc88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc8c:	463a      	mov	r2, r7
 800cc8e:	4630      	mov	r0, r6
 800cc90:	f7ff ffda 	bl	800cc48 <__sfputc_r>
 800cc94:	1c43      	adds	r3, r0, #1
 800cc96:	d1f3      	bne.n	800cc80 <__sfputs_r+0xa>
 800cc98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc9c <_vfiprintf_r>:
 800cc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cca0:	460d      	mov	r5, r1
 800cca2:	b09d      	sub	sp, #116	; 0x74
 800cca4:	4614      	mov	r4, r2
 800cca6:	4698      	mov	r8, r3
 800cca8:	4606      	mov	r6, r0
 800ccaa:	b118      	cbz	r0, 800ccb4 <_vfiprintf_r+0x18>
 800ccac:	6983      	ldr	r3, [r0, #24]
 800ccae:	b90b      	cbnz	r3, 800ccb4 <_vfiprintf_r+0x18>
 800ccb0:	f7fe fcbe 	bl	800b630 <__sinit>
 800ccb4:	4b89      	ldr	r3, [pc, #548]	; (800cedc <_vfiprintf_r+0x240>)
 800ccb6:	429d      	cmp	r5, r3
 800ccb8:	d11b      	bne.n	800ccf2 <_vfiprintf_r+0x56>
 800ccba:	6875      	ldr	r5, [r6, #4]
 800ccbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccbe:	07d9      	lsls	r1, r3, #31
 800ccc0:	d405      	bmi.n	800ccce <_vfiprintf_r+0x32>
 800ccc2:	89ab      	ldrh	r3, [r5, #12]
 800ccc4:	059a      	lsls	r2, r3, #22
 800ccc6:	d402      	bmi.n	800ccce <_vfiprintf_r+0x32>
 800ccc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccca:	f7ff f8c2 	bl	800be52 <__retarget_lock_acquire_recursive>
 800ccce:	89ab      	ldrh	r3, [r5, #12]
 800ccd0:	071b      	lsls	r3, r3, #28
 800ccd2:	d501      	bpl.n	800ccd8 <_vfiprintf_r+0x3c>
 800ccd4:	692b      	ldr	r3, [r5, #16]
 800ccd6:	b9eb      	cbnz	r3, 800cd14 <_vfiprintf_r+0x78>
 800ccd8:	4629      	mov	r1, r5
 800ccda:	4630      	mov	r0, r6
 800ccdc:	f000 f9f0 	bl	800d0c0 <__swsetup_r>
 800cce0:	b1c0      	cbz	r0, 800cd14 <_vfiprintf_r+0x78>
 800cce2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cce4:	07dc      	lsls	r4, r3, #31
 800cce6:	d50e      	bpl.n	800cd06 <_vfiprintf_r+0x6a>
 800cce8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccec:	b01d      	add	sp, #116	; 0x74
 800ccee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf2:	4b7b      	ldr	r3, [pc, #492]	; (800cee0 <_vfiprintf_r+0x244>)
 800ccf4:	429d      	cmp	r5, r3
 800ccf6:	d101      	bne.n	800ccfc <_vfiprintf_r+0x60>
 800ccf8:	68b5      	ldr	r5, [r6, #8]
 800ccfa:	e7df      	b.n	800ccbc <_vfiprintf_r+0x20>
 800ccfc:	4b79      	ldr	r3, [pc, #484]	; (800cee4 <_vfiprintf_r+0x248>)
 800ccfe:	429d      	cmp	r5, r3
 800cd00:	bf08      	it	eq
 800cd02:	68f5      	ldreq	r5, [r6, #12]
 800cd04:	e7da      	b.n	800ccbc <_vfiprintf_r+0x20>
 800cd06:	89ab      	ldrh	r3, [r5, #12]
 800cd08:	0598      	lsls	r0, r3, #22
 800cd0a:	d4ed      	bmi.n	800cce8 <_vfiprintf_r+0x4c>
 800cd0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd0e:	f7ff f8a1 	bl	800be54 <__retarget_lock_release_recursive>
 800cd12:	e7e9      	b.n	800cce8 <_vfiprintf_r+0x4c>
 800cd14:	2300      	movs	r3, #0
 800cd16:	9309      	str	r3, [sp, #36]	; 0x24
 800cd18:	2320      	movs	r3, #32
 800cd1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd22:	2330      	movs	r3, #48	; 0x30
 800cd24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cee8 <_vfiprintf_r+0x24c>
 800cd28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd2c:	f04f 0901 	mov.w	r9, #1
 800cd30:	4623      	mov	r3, r4
 800cd32:	469a      	mov	sl, r3
 800cd34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd38:	b10a      	cbz	r2, 800cd3e <_vfiprintf_r+0xa2>
 800cd3a:	2a25      	cmp	r2, #37	; 0x25
 800cd3c:	d1f9      	bne.n	800cd32 <_vfiprintf_r+0x96>
 800cd3e:	ebba 0b04 	subs.w	fp, sl, r4
 800cd42:	d00b      	beq.n	800cd5c <_vfiprintf_r+0xc0>
 800cd44:	465b      	mov	r3, fp
 800cd46:	4622      	mov	r2, r4
 800cd48:	4629      	mov	r1, r5
 800cd4a:	4630      	mov	r0, r6
 800cd4c:	f7ff ff93 	bl	800cc76 <__sfputs_r>
 800cd50:	3001      	adds	r0, #1
 800cd52:	f000 80aa 	beq.w	800ceaa <_vfiprintf_r+0x20e>
 800cd56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd58:	445a      	add	r2, fp
 800cd5a:	9209      	str	r2, [sp, #36]	; 0x24
 800cd5c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f000 80a2 	beq.w	800ceaa <_vfiprintf_r+0x20e>
 800cd66:	2300      	movs	r3, #0
 800cd68:	f04f 32ff 	mov.w	r2, #4294967295
 800cd6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd70:	f10a 0a01 	add.w	sl, sl, #1
 800cd74:	9304      	str	r3, [sp, #16]
 800cd76:	9307      	str	r3, [sp, #28]
 800cd78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd7c:	931a      	str	r3, [sp, #104]	; 0x68
 800cd7e:	4654      	mov	r4, sl
 800cd80:	2205      	movs	r2, #5
 800cd82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd86:	4858      	ldr	r0, [pc, #352]	; (800cee8 <_vfiprintf_r+0x24c>)
 800cd88:	f7f3 fa2a 	bl	80001e0 <memchr>
 800cd8c:	9a04      	ldr	r2, [sp, #16]
 800cd8e:	b9d8      	cbnz	r0, 800cdc8 <_vfiprintf_r+0x12c>
 800cd90:	06d1      	lsls	r1, r2, #27
 800cd92:	bf44      	itt	mi
 800cd94:	2320      	movmi	r3, #32
 800cd96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd9a:	0713      	lsls	r3, r2, #28
 800cd9c:	bf44      	itt	mi
 800cd9e:	232b      	movmi	r3, #43	; 0x2b
 800cda0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cda4:	f89a 3000 	ldrb.w	r3, [sl]
 800cda8:	2b2a      	cmp	r3, #42	; 0x2a
 800cdaa:	d015      	beq.n	800cdd8 <_vfiprintf_r+0x13c>
 800cdac:	9a07      	ldr	r2, [sp, #28]
 800cdae:	4654      	mov	r4, sl
 800cdb0:	2000      	movs	r0, #0
 800cdb2:	f04f 0c0a 	mov.w	ip, #10
 800cdb6:	4621      	mov	r1, r4
 800cdb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdbc:	3b30      	subs	r3, #48	; 0x30
 800cdbe:	2b09      	cmp	r3, #9
 800cdc0:	d94e      	bls.n	800ce60 <_vfiprintf_r+0x1c4>
 800cdc2:	b1b0      	cbz	r0, 800cdf2 <_vfiprintf_r+0x156>
 800cdc4:	9207      	str	r2, [sp, #28]
 800cdc6:	e014      	b.n	800cdf2 <_vfiprintf_r+0x156>
 800cdc8:	eba0 0308 	sub.w	r3, r0, r8
 800cdcc:	fa09 f303 	lsl.w	r3, r9, r3
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	9304      	str	r3, [sp, #16]
 800cdd4:	46a2      	mov	sl, r4
 800cdd6:	e7d2      	b.n	800cd7e <_vfiprintf_r+0xe2>
 800cdd8:	9b03      	ldr	r3, [sp, #12]
 800cdda:	1d19      	adds	r1, r3, #4
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	9103      	str	r1, [sp, #12]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	bfbb      	ittet	lt
 800cde4:	425b      	neglt	r3, r3
 800cde6:	f042 0202 	orrlt.w	r2, r2, #2
 800cdea:	9307      	strge	r3, [sp, #28]
 800cdec:	9307      	strlt	r3, [sp, #28]
 800cdee:	bfb8      	it	lt
 800cdf0:	9204      	strlt	r2, [sp, #16]
 800cdf2:	7823      	ldrb	r3, [r4, #0]
 800cdf4:	2b2e      	cmp	r3, #46	; 0x2e
 800cdf6:	d10c      	bne.n	800ce12 <_vfiprintf_r+0x176>
 800cdf8:	7863      	ldrb	r3, [r4, #1]
 800cdfa:	2b2a      	cmp	r3, #42	; 0x2a
 800cdfc:	d135      	bne.n	800ce6a <_vfiprintf_r+0x1ce>
 800cdfe:	9b03      	ldr	r3, [sp, #12]
 800ce00:	1d1a      	adds	r2, r3, #4
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	9203      	str	r2, [sp, #12]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	bfb8      	it	lt
 800ce0a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce0e:	3402      	adds	r4, #2
 800ce10:	9305      	str	r3, [sp, #20]
 800ce12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cef8 <_vfiprintf_r+0x25c>
 800ce16:	7821      	ldrb	r1, [r4, #0]
 800ce18:	2203      	movs	r2, #3
 800ce1a:	4650      	mov	r0, sl
 800ce1c:	f7f3 f9e0 	bl	80001e0 <memchr>
 800ce20:	b140      	cbz	r0, 800ce34 <_vfiprintf_r+0x198>
 800ce22:	2340      	movs	r3, #64	; 0x40
 800ce24:	eba0 000a 	sub.w	r0, r0, sl
 800ce28:	fa03 f000 	lsl.w	r0, r3, r0
 800ce2c:	9b04      	ldr	r3, [sp, #16]
 800ce2e:	4303      	orrs	r3, r0
 800ce30:	3401      	adds	r4, #1
 800ce32:	9304      	str	r3, [sp, #16]
 800ce34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce38:	482c      	ldr	r0, [pc, #176]	; (800ceec <_vfiprintf_r+0x250>)
 800ce3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce3e:	2206      	movs	r2, #6
 800ce40:	f7f3 f9ce 	bl	80001e0 <memchr>
 800ce44:	2800      	cmp	r0, #0
 800ce46:	d03f      	beq.n	800cec8 <_vfiprintf_r+0x22c>
 800ce48:	4b29      	ldr	r3, [pc, #164]	; (800cef0 <_vfiprintf_r+0x254>)
 800ce4a:	bb1b      	cbnz	r3, 800ce94 <_vfiprintf_r+0x1f8>
 800ce4c:	9b03      	ldr	r3, [sp, #12]
 800ce4e:	3307      	adds	r3, #7
 800ce50:	f023 0307 	bic.w	r3, r3, #7
 800ce54:	3308      	adds	r3, #8
 800ce56:	9303      	str	r3, [sp, #12]
 800ce58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce5a:	443b      	add	r3, r7
 800ce5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce5e:	e767      	b.n	800cd30 <_vfiprintf_r+0x94>
 800ce60:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce64:	460c      	mov	r4, r1
 800ce66:	2001      	movs	r0, #1
 800ce68:	e7a5      	b.n	800cdb6 <_vfiprintf_r+0x11a>
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	3401      	adds	r4, #1
 800ce6e:	9305      	str	r3, [sp, #20]
 800ce70:	4619      	mov	r1, r3
 800ce72:	f04f 0c0a 	mov.w	ip, #10
 800ce76:	4620      	mov	r0, r4
 800ce78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce7c:	3a30      	subs	r2, #48	; 0x30
 800ce7e:	2a09      	cmp	r2, #9
 800ce80:	d903      	bls.n	800ce8a <_vfiprintf_r+0x1ee>
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d0c5      	beq.n	800ce12 <_vfiprintf_r+0x176>
 800ce86:	9105      	str	r1, [sp, #20]
 800ce88:	e7c3      	b.n	800ce12 <_vfiprintf_r+0x176>
 800ce8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce8e:	4604      	mov	r4, r0
 800ce90:	2301      	movs	r3, #1
 800ce92:	e7f0      	b.n	800ce76 <_vfiprintf_r+0x1da>
 800ce94:	ab03      	add	r3, sp, #12
 800ce96:	9300      	str	r3, [sp, #0]
 800ce98:	462a      	mov	r2, r5
 800ce9a:	4b16      	ldr	r3, [pc, #88]	; (800cef4 <_vfiprintf_r+0x258>)
 800ce9c:	a904      	add	r1, sp, #16
 800ce9e:	4630      	mov	r0, r6
 800cea0:	f7fc f82a 	bl	8008ef8 <_printf_float>
 800cea4:	4607      	mov	r7, r0
 800cea6:	1c78      	adds	r0, r7, #1
 800cea8:	d1d6      	bne.n	800ce58 <_vfiprintf_r+0x1bc>
 800ceaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ceac:	07d9      	lsls	r1, r3, #31
 800ceae:	d405      	bmi.n	800cebc <_vfiprintf_r+0x220>
 800ceb0:	89ab      	ldrh	r3, [r5, #12]
 800ceb2:	059a      	lsls	r2, r3, #22
 800ceb4:	d402      	bmi.n	800cebc <_vfiprintf_r+0x220>
 800ceb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ceb8:	f7fe ffcc 	bl	800be54 <__retarget_lock_release_recursive>
 800cebc:	89ab      	ldrh	r3, [r5, #12]
 800cebe:	065b      	lsls	r3, r3, #25
 800cec0:	f53f af12 	bmi.w	800cce8 <_vfiprintf_r+0x4c>
 800cec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cec6:	e711      	b.n	800ccec <_vfiprintf_r+0x50>
 800cec8:	ab03      	add	r3, sp, #12
 800ceca:	9300      	str	r3, [sp, #0]
 800cecc:	462a      	mov	r2, r5
 800cece:	4b09      	ldr	r3, [pc, #36]	; (800cef4 <_vfiprintf_r+0x258>)
 800ced0:	a904      	add	r1, sp, #16
 800ced2:	4630      	mov	r0, r6
 800ced4:	f7fc fab4 	bl	8009440 <_printf_i>
 800ced8:	e7e4      	b.n	800cea4 <_vfiprintf_r+0x208>
 800ceda:	bf00      	nop
 800cedc:	0800da28 	.word	0x0800da28
 800cee0:	0800da48 	.word	0x0800da48
 800cee4:	0800da08 	.word	0x0800da08
 800cee8:	0800dc44 	.word	0x0800dc44
 800ceec:	0800dc4e 	.word	0x0800dc4e
 800cef0:	08008ef9 	.word	0x08008ef9
 800cef4:	0800cc77 	.word	0x0800cc77
 800cef8:	0800dc4a 	.word	0x0800dc4a
 800cefc:	00000000 	.word	0x00000000

0800cf00 <nan>:
 800cf00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cf08 <nan+0x8>
 800cf04:	4770      	bx	lr
 800cf06:	bf00      	nop
 800cf08:	00000000 	.word	0x00000000
 800cf0c:	7ff80000 	.word	0x7ff80000

0800cf10 <_sbrk_r>:
 800cf10:	b538      	push	{r3, r4, r5, lr}
 800cf12:	4d06      	ldr	r5, [pc, #24]	; (800cf2c <_sbrk_r+0x1c>)
 800cf14:	2300      	movs	r3, #0
 800cf16:	4604      	mov	r4, r0
 800cf18:	4608      	mov	r0, r1
 800cf1a:	602b      	str	r3, [r5, #0]
 800cf1c:	f7f5 faf4 	bl	8002508 <_sbrk>
 800cf20:	1c43      	adds	r3, r0, #1
 800cf22:	d102      	bne.n	800cf2a <_sbrk_r+0x1a>
 800cf24:	682b      	ldr	r3, [r5, #0]
 800cf26:	b103      	cbz	r3, 800cf2a <_sbrk_r+0x1a>
 800cf28:	6023      	str	r3, [r4, #0]
 800cf2a:	bd38      	pop	{r3, r4, r5, pc}
 800cf2c:	20001514 	.word	0x20001514

0800cf30 <__sread>:
 800cf30:	b510      	push	{r4, lr}
 800cf32:	460c      	mov	r4, r1
 800cf34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf38:	f000 faf4 	bl	800d524 <_read_r>
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	bfab      	itete	ge
 800cf40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf42:	89a3      	ldrhlt	r3, [r4, #12]
 800cf44:	181b      	addge	r3, r3, r0
 800cf46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf4a:	bfac      	ite	ge
 800cf4c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf4e:	81a3      	strhlt	r3, [r4, #12]
 800cf50:	bd10      	pop	{r4, pc}

0800cf52 <__swrite>:
 800cf52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf56:	461f      	mov	r7, r3
 800cf58:	898b      	ldrh	r3, [r1, #12]
 800cf5a:	05db      	lsls	r3, r3, #23
 800cf5c:	4605      	mov	r5, r0
 800cf5e:	460c      	mov	r4, r1
 800cf60:	4616      	mov	r6, r2
 800cf62:	d505      	bpl.n	800cf70 <__swrite+0x1e>
 800cf64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf68:	2302      	movs	r3, #2
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f000 fa18 	bl	800d3a0 <_lseek_r>
 800cf70:	89a3      	ldrh	r3, [r4, #12]
 800cf72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf7a:	81a3      	strh	r3, [r4, #12]
 800cf7c:	4632      	mov	r2, r6
 800cf7e:	463b      	mov	r3, r7
 800cf80:	4628      	mov	r0, r5
 800cf82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf86:	f000 b889 	b.w	800d09c <_write_r>

0800cf8a <__sseek>:
 800cf8a:	b510      	push	{r4, lr}
 800cf8c:	460c      	mov	r4, r1
 800cf8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf92:	f000 fa05 	bl	800d3a0 <_lseek_r>
 800cf96:	1c43      	adds	r3, r0, #1
 800cf98:	89a3      	ldrh	r3, [r4, #12]
 800cf9a:	bf15      	itete	ne
 800cf9c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cfa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cfa6:	81a3      	strheq	r3, [r4, #12]
 800cfa8:	bf18      	it	ne
 800cfaa:	81a3      	strhne	r3, [r4, #12]
 800cfac:	bd10      	pop	{r4, pc}

0800cfae <__sclose>:
 800cfae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfb2:	f000 b911 	b.w	800d1d8 <_close_r>

0800cfb6 <strncmp>:
 800cfb6:	b510      	push	{r4, lr}
 800cfb8:	b16a      	cbz	r2, 800cfd6 <strncmp+0x20>
 800cfba:	3901      	subs	r1, #1
 800cfbc:	1884      	adds	r4, r0, r2
 800cfbe:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cfc2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d103      	bne.n	800cfd2 <strncmp+0x1c>
 800cfca:	42a0      	cmp	r0, r4
 800cfcc:	d001      	beq.n	800cfd2 <strncmp+0x1c>
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d1f5      	bne.n	800cfbe <strncmp+0x8>
 800cfd2:	1a98      	subs	r0, r3, r2
 800cfd4:	bd10      	pop	{r4, pc}
 800cfd6:	4610      	mov	r0, r2
 800cfd8:	e7fc      	b.n	800cfd4 <strncmp+0x1e>
	...

0800cfdc <__swbuf_r>:
 800cfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfde:	460e      	mov	r6, r1
 800cfe0:	4614      	mov	r4, r2
 800cfe2:	4605      	mov	r5, r0
 800cfe4:	b118      	cbz	r0, 800cfee <__swbuf_r+0x12>
 800cfe6:	6983      	ldr	r3, [r0, #24]
 800cfe8:	b90b      	cbnz	r3, 800cfee <__swbuf_r+0x12>
 800cfea:	f7fe fb21 	bl	800b630 <__sinit>
 800cfee:	4b21      	ldr	r3, [pc, #132]	; (800d074 <__swbuf_r+0x98>)
 800cff0:	429c      	cmp	r4, r3
 800cff2:	d12b      	bne.n	800d04c <__swbuf_r+0x70>
 800cff4:	686c      	ldr	r4, [r5, #4]
 800cff6:	69a3      	ldr	r3, [r4, #24]
 800cff8:	60a3      	str	r3, [r4, #8]
 800cffa:	89a3      	ldrh	r3, [r4, #12]
 800cffc:	071a      	lsls	r2, r3, #28
 800cffe:	d52f      	bpl.n	800d060 <__swbuf_r+0x84>
 800d000:	6923      	ldr	r3, [r4, #16]
 800d002:	b36b      	cbz	r3, 800d060 <__swbuf_r+0x84>
 800d004:	6923      	ldr	r3, [r4, #16]
 800d006:	6820      	ldr	r0, [r4, #0]
 800d008:	1ac0      	subs	r0, r0, r3
 800d00a:	6963      	ldr	r3, [r4, #20]
 800d00c:	b2f6      	uxtb	r6, r6
 800d00e:	4283      	cmp	r3, r0
 800d010:	4637      	mov	r7, r6
 800d012:	dc04      	bgt.n	800d01e <__swbuf_r+0x42>
 800d014:	4621      	mov	r1, r4
 800d016:	4628      	mov	r0, r5
 800d018:	f000 f974 	bl	800d304 <_fflush_r>
 800d01c:	bb30      	cbnz	r0, 800d06c <__swbuf_r+0x90>
 800d01e:	68a3      	ldr	r3, [r4, #8]
 800d020:	3b01      	subs	r3, #1
 800d022:	60a3      	str	r3, [r4, #8]
 800d024:	6823      	ldr	r3, [r4, #0]
 800d026:	1c5a      	adds	r2, r3, #1
 800d028:	6022      	str	r2, [r4, #0]
 800d02a:	701e      	strb	r6, [r3, #0]
 800d02c:	6963      	ldr	r3, [r4, #20]
 800d02e:	3001      	adds	r0, #1
 800d030:	4283      	cmp	r3, r0
 800d032:	d004      	beq.n	800d03e <__swbuf_r+0x62>
 800d034:	89a3      	ldrh	r3, [r4, #12]
 800d036:	07db      	lsls	r3, r3, #31
 800d038:	d506      	bpl.n	800d048 <__swbuf_r+0x6c>
 800d03a:	2e0a      	cmp	r6, #10
 800d03c:	d104      	bne.n	800d048 <__swbuf_r+0x6c>
 800d03e:	4621      	mov	r1, r4
 800d040:	4628      	mov	r0, r5
 800d042:	f000 f95f 	bl	800d304 <_fflush_r>
 800d046:	b988      	cbnz	r0, 800d06c <__swbuf_r+0x90>
 800d048:	4638      	mov	r0, r7
 800d04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d04c:	4b0a      	ldr	r3, [pc, #40]	; (800d078 <__swbuf_r+0x9c>)
 800d04e:	429c      	cmp	r4, r3
 800d050:	d101      	bne.n	800d056 <__swbuf_r+0x7a>
 800d052:	68ac      	ldr	r4, [r5, #8]
 800d054:	e7cf      	b.n	800cff6 <__swbuf_r+0x1a>
 800d056:	4b09      	ldr	r3, [pc, #36]	; (800d07c <__swbuf_r+0xa0>)
 800d058:	429c      	cmp	r4, r3
 800d05a:	bf08      	it	eq
 800d05c:	68ec      	ldreq	r4, [r5, #12]
 800d05e:	e7ca      	b.n	800cff6 <__swbuf_r+0x1a>
 800d060:	4621      	mov	r1, r4
 800d062:	4628      	mov	r0, r5
 800d064:	f000 f82c 	bl	800d0c0 <__swsetup_r>
 800d068:	2800      	cmp	r0, #0
 800d06a:	d0cb      	beq.n	800d004 <__swbuf_r+0x28>
 800d06c:	f04f 37ff 	mov.w	r7, #4294967295
 800d070:	e7ea      	b.n	800d048 <__swbuf_r+0x6c>
 800d072:	bf00      	nop
 800d074:	0800da28 	.word	0x0800da28
 800d078:	0800da48 	.word	0x0800da48
 800d07c:	0800da08 	.word	0x0800da08

0800d080 <__ascii_wctomb>:
 800d080:	b149      	cbz	r1, 800d096 <__ascii_wctomb+0x16>
 800d082:	2aff      	cmp	r2, #255	; 0xff
 800d084:	bf85      	ittet	hi
 800d086:	238a      	movhi	r3, #138	; 0x8a
 800d088:	6003      	strhi	r3, [r0, #0]
 800d08a:	700a      	strbls	r2, [r1, #0]
 800d08c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d090:	bf98      	it	ls
 800d092:	2001      	movls	r0, #1
 800d094:	4770      	bx	lr
 800d096:	4608      	mov	r0, r1
 800d098:	4770      	bx	lr
	...

0800d09c <_write_r>:
 800d09c:	b538      	push	{r3, r4, r5, lr}
 800d09e:	4d07      	ldr	r5, [pc, #28]	; (800d0bc <_write_r+0x20>)
 800d0a0:	4604      	mov	r4, r0
 800d0a2:	4608      	mov	r0, r1
 800d0a4:	4611      	mov	r1, r2
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	602a      	str	r2, [r5, #0]
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	f7f5 f83a 	bl	8002124 <_write>
 800d0b0:	1c43      	adds	r3, r0, #1
 800d0b2:	d102      	bne.n	800d0ba <_write_r+0x1e>
 800d0b4:	682b      	ldr	r3, [r5, #0]
 800d0b6:	b103      	cbz	r3, 800d0ba <_write_r+0x1e>
 800d0b8:	6023      	str	r3, [r4, #0]
 800d0ba:	bd38      	pop	{r3, r4, r5, pc}
 800d0bc:	20001514 	.word	0x20001514

0800d0c0 <__swsetup_r>:
 800d0c0:	4b32      	ldr	r3, [pc, #200]	; (800d18c <__swsetup_r+0xcc>)
 800d0c2:	b570      	push	{r4, r5, r6, lr}
 800d0c4:	681d      	ldr	r5, [r3, #0]
 800d0c6:	4606      	mov	r6, r0
 800d0c8:	460c      	mov	r4, r1
 800d0ca:	b125      	cbz	r5, 800d0d6 <__swsetup_r+0x16>
 800d0cc:	69ab      	ldr	r3, [r5, #24]
 800d0ce:	b913      	cbnz	r3, 800d0d6 <__swsetup_r+0x16>
 800d0d0:	4628      	mov	r0, r5
 800d0d2:	f7fe faad 	bl	800b630 <__sinit>
 800d0d6:	4b2e      	ldr	r3, [pc, #184]	; (800d190 <__swsetup_r+0xd0>)
 800d0d8:	429c      	cmp	r4, r3
 800d0da:	d10f      	bne.n	800d0fc <__swsetup_r+0x3c>
 800d0dc:	686c      	ldr	r4, [r5, #4]
 800d0de:	89a3      	ldrh	r3, [r4, #12]
 800d0e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d0e4:	0719      	lsls	r1, r3, #28
 800d0e6:	d42c      	bmi.n	800d142 <__swsetup_r+0x82>
 800d0e8:	06dd      	lsls	r5, r3, #27
 800d0ea:	d411      	bmi.n	800d110 <__swsetup_r+0x50>
 800d0ec:	2309      	movs	r3, #9
 800d0ee:	6033      	str	r3, [r6, #0]
 800d0f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d0f4:	81a3      	strh	r3, [r4, #12]
 800d0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d0fa:	e03e      	b.n	800d17a <__swsetup_r+0xba>
 800d0fc:	4b25      	ldr	r3, [pc, #148]	; (800d194 <__swsetup_r+0xd4>)
 800d0fe:	429c      	cmp	r4, r3
 800d100:	d101      	bne.n	800d106 <__swsetup_r+0x46>
 800d102:	68ac      	ldr	r4, [r5, #8]
 800d104:	e7eb      	b.n	800d0de <__swsetup_r+0x1e>
 800d106:	4b24      	ldr	r3, [pc, #144]	; (800d198 <__swsetup_r+0xd8>)
 800d108:	429c      	cmp	r4, r3
 800d10a:	bf08      	it	eq
 800d10c:	68ec      	ldreq	r4, [r5, #12]
 800d10e:	e7e6      	b.n	800d0de <__swsetup_r+0x1e>
 800d110:	0758      	lsls	r0, r3, #29
 800d112:	d512      	bpl.n	800d13a <__swsetup_r+0x7a>
 800d114:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d116:	b141      	cbz	r1, 800d12a <__swsetup_r+0x6a>
 800d118:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d11c:	4299      	cmp	r1, r3
 800d11e:	d002      	beq.n	800d126 <__swsetup_r+0x66>
 800d120:	4630      	mov	r0, r6
 800d122:	f7ff fb8b 	bl	800c83c <_free_r>
 800d126:	2300      	movs	r3, #0
 800d128:	6363      	str	r3, [r4, #52]	; 0x34
 800d12a:	89a3      	ldrh	r3, [r4, #12]
 800d12c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d130:	81a3      	strh	r3, [r4, #12]
 800d132:	2300      	movs	r3, #0
 800d134:	6063      	str	r3, [r4, #4]
 800d136:	6923      	ldr	r3, [r4, #16]
 800d138:	6023      	str	r3, [r4, #0]
 800d13a:	89a3      	ldrh	r3, [r4, #12]
 800d13c:	f043 0308 	orr.w	r3, r3, #8
 800d140:	81a3      	strh	r3, [r4, #12]
 800d142:	6923      	ldr	r3, [r4, #16]
 800d144:	b94b      	cbnz	r3, 800d15a <__swsetup_r+0x9a>
 800d146:	89a3      	ldrh	r3, [r4, #12]
 800d148:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d14c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d150:	d003      	beq.n	800d15a <__swsetup_r+0x9a>
 800d152:	4621      	mov	r1, r4
 800d154:	4630      	mov	r0, r6
 800d156:	f000 f959 	bl	800d40c <__smakebuf_r>
 800d15a:	89a0      	ldrh	r0, [r4, #12]
 800d15c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d160:	f010 0301 	ands.w	r3, r0, #1
 800d164:	d00a      	beq.n	800d17c <__swsetup_r+0xbc>
 800d166:	2300      	movs	r3, #0
 800d168:	60a3      	str	r3, [r4, #8]
 800d16a:	6963      	ldr	r3, [r4, #20]
 800d16c:	425b      	negs	r3, r3
 800d16e:	61a3      	str	r3, [r4, #24]
 800d170:	6923      	ldr	r3, [r4, #16]
 800d172:	b943      	cbnz	r3, 800d186 <__swsetup_r+0xc6>
 800d174:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d178:	d1ba      	bne.n	800d0f0 <__swsetup_r+0x30>
 800d17a:	bd70      	pop	{r4, r5, r6, pc}
 800d17c:	0781      	lsls	r1, r0, #30
 800d17e:	bf58      	it	pl
 800d180:	6963      	ldrpl	r3, [r4, #20]
 800d182:	60a3      	str	r3, [r4, #8]
 800d184:	e7f4      	b.n	800d170 <__swsetup_r+0xb0>
 800d186:	2000      	movs	r0, #0
 800d188:	e7f7      	b.n	800d17a <__swsetup_r+0xba>
 800d18a:	bf00      	nop
 800d18c:	20000024 	.word	0x20000024
 800d190:	0800da28 	.word	0x0800da28
 800d194:	0800da48 	.word	0x0800da48
 800d198:	0800da08 	.word	0x0800da08

0800d19c <__assert_func>:
 800d19c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d19e:	4614      	mov	r4, r2
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	4b09      	ldr	r3, [pc, #36]	; (800d1c8 <__assert_func+0x2c>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	4605      	mov	r5, r0
 800d1a8:	68d8      	ldr	r0, [r3, #12]
 800d1aa:	b14c      	cbz	r4, 800d1c0 <__assert_func+0x24>
 800d1ac:	4b07      	ldr	r3, [pc, #28]	; (800d1cc <__assert_func+0x30>)
 800d1ae:	9100      	str	r1, [sp, #0]
 800d1b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d1b4:	4906      	ldr	r1, [pc, #24]	; (800d1d0 <__assert_func+0x34>)
 800d1b6:	462b      	mov	r3, r5
 800d1b8:	f000 f8e0 	bl	800d37c <fiprintf>
 800d1bc:	f000 f9c4 	bl	800d548 <abort>
 800d1c0:	4b04      	ldr	r3, [pc, #16]	; (800d1d4 <__assert_func+0x38>)
 800d1c2:	461c      	mov	r4, r3
 800d1c4:	e7f3      	b.n	800d1ae <__assert_func+0x12>
 800d1c6:	bf00      	nop
 800d1c8:	20000024 	.word	0x20000024
 800d1cc:	0800dc55 	.word	0x0800dc55
 800d1d0:	0800dc62 	.word	0x0800dc62
 800d1d4:	0800dc90 	.word	0x0800dc90

0800d1d8 <_close_r>:
 800d1d8:	b538      	push	{r3, r4, r5, lr}
 800d1da:	4d06      	ldr	r5, [pc, #24]	; (800d1f4 <_close_r+0x1c>)
 800d1dc:	2300      	movs	r3, #0
 800d1de:	4604      	mov	r4, r0
 800d1e0:	4608      	mov	r0, r1
 800d1e2:	602b      	str	r3, [r5, #0]
 800d1e4:	f7f5 f95b 	bl	800249e <_close>
 800d1e8:	1c43      	adds	r3, r0, #1
 800d1ea:	d102      	bne.n	800d1f2 <_close_r+0x1a>
 800d1ec:	682b      	ldr	r3, [r5, #0]
 800d1ee:	b103      	cbz	r3, 800d1f2 <_close_r+0x1a>
 800d1f0:	6023      	str	r3, [r4, #0]
 800d1f2:	bd38      	pop	{r3, r4, r5, pc}
 800d1f4:	20001514 	.word	0x20001514

0800d1f8 <__sflush_r>:
 800d1f8:	898a      	ldrh	r2, [r1, #12]
 800d1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1fe:	4605      	mov	r5, r0
 800d200:	0710      	lsls	r0, r2, #28
 800d202:	460c      	mov	r4, r1
 800d204:	d458      	bmi.n	800d2b8 <__sflush_r+0xc0>
 800d206:	684b      	ldr	r3, [r1, #4]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	dc05      	bgt.n	800d218 <__sflush_r+0x20>
 800d20c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d20e:	2b00      	cmp	r3, #0
 800d210:	dc02      	bgt.n	800d218 <__sflush_r+0x20>
 800d212:	2000      	movs	r0, #0
 800d214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d21a:	2e00      	cmp	r6, #0
 800d21c:	d0f9      	beq.n	800d212 <__sflush_r+0x1a>
 800d21e:	2300      	movs	r3, #0
 800d220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d224:	682f      	ldr	r7, [r5, #0]
 800d226:	602b      	str	r3, [r5, #0]
 800d228:	d032      	beq.n	800d290 <__sflush_r+0x98>
 800d22a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d22c:	89a3      	ldrh	r3, [r4, #12]
 800d22e:	075a      	lsls	r2, r3, #29
 800d230:	d505      	bpl.n	800d23e <__sflush_r+0x46>
 800d232:	6863      	ldr	r3, [r4, #4]
 800d234:	1ac0      	subs	r0, r0, r3
 800d236:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d238:	b10b      	cbz	r3, 800d23e <__sflush_r+0x46>
 800d23a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d23c:	1ac0      	subs	r0, r0, r3
 800d23e:	2300      	movs	r3, #0
 800d240:	4602      	mov	r2, r0
 800d242:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d244:	6a21      	ldr	r1, [r4, #32]
 800d246:	4628      	mov	r0, r5
 800d248:	47b0      	blx	r6
 800d24a:	1c43      	adds	r3, r0, #1
 800d24c:	89a3      	ldrh	r3, [r4, #12]
 800d24e:	d106      	bne.n	800d25e <__sflush_r+0x66>
 800d250:	6829      	ldr	r1, [r5, #0]
 800d252:	291d      	cmp	r1, #29
 800d254:	d82c      	bhi.n	800d2b0 <__sflush_r+0xb8>
 800d256:	4a2a      	ldr	r2, [pc, #168]	; (800d300 <__sflush_r+0x108>)
 800d258:	40ca      	lsrs	r2, r1
 800d25a:	07d6      	lsls	r6, r2, #31
 800d25c:	d528      	bpl.n	800d2b0 <__sflush_r+0xb8>
 800d25e:	2200      	movs	r2, #0
 800d260:	6062      	str	r2, [r4, #4]
 800d262:	04d9      	lsls	r1, r3, #19
 800d264:	6922      	ldr	r2, [r4, #16]
 800d266:	6022      	str	r2, [r4, #0]
 800d268:	d504      	bpl.n	800d274 <__sflush_r+0x7c>
 800d26a:	1c42      	adds	r2, r0, #1
 800d26c:	d101      	bne.n	800d272 <__sflush_r+0x7a>
 800d26e:	682b      	ldr	r3, [r5, #0]
 800d270:	b903      	cbnz	r3, 800d274 <__sflush_r+0x7c>
 800d272:	6560      	str	r0, [r4, #84]	; 0x54
 800d274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d276:	602f      	str	r7, [r5, #0]
 800d278:	2900      	cmp	r1, #0
 800d27a:	d0ca      	beq.n	800d212 <__sflush_r+0x1a>
 800d27c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d280:	4299      	cmp	r1, r3
 800d282:	d002      	beq.n	800d28a <__sflush_r+0x92>
 800d284:	4628      	mov	r0, r5
 800d286:	f7ff fad9 	bl	800c83c <_free_r>
 800d28a:	2000      	movs	r0, #0
 800d28c:	6360      	str	r0, [r4, #52]	; 0x34
 800d28e:	e7c1      	b.n	800d214 <__sflush_r+0x1c>
 800d290:	6a21      	ldr	r1, [r4, #32]
 800d292:	2301      	movs	r3, #1
 800d294:	4628      	mov	r0, r5
 800d296:	47b0      	blx	r6
 800d298:	1c41      	adds	r1, r0, #1
 800d29a:	d1c7      	bne.n	800d22c <__sflush_r+0x34>
 800d29c:	682b      	ldr	r3, [r5, #0]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d0c4      	beq.n	800d22c <__sflush_r+0x34>
 800d2a2:	2b1d      	cmp	r3, #29
 800d2a4:	d001      	beq.n	800d2aa <__sflush_r+0xb2>
 800d2a6:	2b16      	cmp	r3, #22
 800d2a8:	d101      	bne.n	800d2ae <__sflush_r+0xb6>
 800d2aa:	602f      	str	r7, [r5, #0]
 800d2ac:	e7b1      	b.n	800d212 <__sflush_r+0x1a>
 800d2ae:	89a3      	ldrh	r3, [r4, #12]
 800d2b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2b4:	81a3      	strh	r3, [r4, #12]
 800d2b6:	e7ad      	b.n	800d214 <__sflush_r+0x1c>
 800d2b8:	690f      	ldr	r7, [r1, #16]
 800d2ba:	2f00      	cmp	r7, #0
 800d2bc:	d0a9      	beq.n	800d212 <__sflush_r+0x1a>
 800d2be:	0793      	lsls	r3, r2, #30
 800d2c0:	680e      	ldr	r6, [r1, #0]
 800d2c2:	bf08      	it	eq
 800d2c4:	694b      	ldreq	r3, [r1, #20]
 800d2c6:	600f      	str	r7, [r1, #0]
 800d2c8:	bf18      	it	ne
 800d2ca:	2300      	movne	r3, #0
 800d2cc:	eba6 0807 	sub.w	r8, r6, r7
 800d2d0:	608b      	str	r3, [r1, #8]
 800d2d2:	f1b8 0f00 	cmp.w	r8, #0
 800d2d6:	dd9c      	ble.n	800d212 <__sflush_r+0x1a>
 800d2d8:	6a21      	ldr	r1, [r4, #32]
 800d2da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d2dc:	4643      	mov	r3, r8
 800d2de:	463a      	mov	r2, r7
 800d2e0:	4628      	mov	r0, r5
 800d2e2:	47b0      	blx	r6
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	dc06      	bgt.n	800d2f6 <__sflush_r+0xfe>
 800d2e8:	89a3      	ldrh	r3, [r4, #12]
 800d2ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2ee:	81a3      	strh	r3, [r4, #12]
 800d2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f4:	e78e      	b.n	800d214 <__sflush_r+0x1c>
 800d2f6:	4407      	add	r7, r0
 800d2f8:	eba8 0800 	sub.w	r8, r8, r0
 800d2fc:	e7e9      	b.n	800d2d2 <__sflush_r+0xda>
 800d2fe:	bf00      	nop
 800d300:	20400001 	.word	0x20400001

0800d304 <_fflush_r>:
 800d304:	b538      	push	{r3, r4, r5, lr}
 800d306:	690b      	ldr	r3, [r1, #16]
 800d308:	4605      	mov	r5, r0
 800d30a:	460c      	mov	r4, r1
 800d30c:	b913      	cbnz	r3, 800d314 <_fflush_r+0x10>
 800d30e:	2500      	movs	r5, #0
 800d310:	4628      	mov	r0, r5
 800d312:	bd38      	pop	{r3, r4, r5, pc}
 800d314:	b118      	cbz	r0, 800d31e <_fflush_r+0x1a>
 800d316:	6983      	ldr	r3, [r0, #24]
 800d318:	b90b      	cbnz	r3, 800d31e <_fflush_r+0x1a>
 800d31a:	f7fe f989 	bl	800b630 <__sinit>
 800d31e:	4b14      	ldr	r3, [pc, #80]	; (800d370 <_fflush_r+0x6c>)
 800d320:	429c      	cmp	r4, r3
 800d322:	d11b      	bne.n	800d35c <_fflush_r+0x58>
 800d324:	686c      	ldr	r4, [r5, #4]
 800d326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d0ef      	beq.n	800d30e <_fflush_r+0xa>
 800d32e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d330:	07d0      	lsls	r0, r2, #31
 800d332:	d404      	bmi.n	800d33e <_fflush_r+0x3a>
 800d334:	0599      	lsls	r1, r3, #22
 800d336:	d402      	bmi.n	800d33e <_fflush_r+0x3a>
 800d338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d33a:	f7fe fd8a 	bl	800be52 <__retarget_lock_acquire_recursive>
 800d33e:	4628      	mov	r0, r5
 800d340:	4621      	mov	r1, r4
 800d342:	f7ff ff59 	bl	800d1f8 <__sflush_r>
 800d346:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d348:	07da      	lsls	r2, r3, #31
 800d34a:	4605      	mov	r5, r0
 800d34c:	d4e0      	bmi.n	800d310 <_fflush_r+0xc>
 800d34e:	89a3      	ldrh	r3, [r4, #12]
 800d350:	059b      	lsls	r3, r3, #22
 800d352:	d4dd      	bmi.n	800d310 <_fflush_r+0xc>
 800d354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d356:	f7fe fd7d 	bl	800be54 <__retarget_lock_release_recursive>
 800d35a:	e7d9      	b.n	800d310 <_fflush_r+0xc>
 800d35c:	4b05      	ldr	r3, [pc, #20]	; (800d374 <_fflush_r+0x70>)
 800d35e:	429c      	cmp	r4, r3
 800d360:	d101      	bne.n	800d366 <_fflush_r+0x62>
 800d362:	68ac      	ldr	r4, [r5, #8]
 800d364:	e7df      	b.n	800d326 <_fflush_r+0x22>
 800d366:	4b04      	ldr	r3, [pc, #16]	; (800d378 <_fflush_r+0x74>)
 800d368:	429c      	cmp	r4, r3
 800d36a:	bf08      	it	eq
 800d36c:	68ec      	ldreq	r4, [r5, #12]
 800d36e:	e7da      	b.n	800d326 <_fflush_r+0x22>
 800d370:	0800da28 	.word	0x0800da28
 800d374:	0800da48 	.word	0x0800da48
 800d378:	0800da08 	.word	0x0800da08

0800d37c <fiprintf>:
 800d37c:	b40e      	push	{r1, r2, r3}
 800d37e:	b503      	push	{r0, r1, lr}
 800d380:	4601      	mov	r1, r0
 800d382:	ab03      	add	r3, sp, #12
 800d384:	4805      	ldr	r0, [pc, #20]	; (800d39c <fiprintf+0x20>)
 800d386:	f853 2b04 	ldr.w	r2, [r3], #4
 800d38a:	6800      	ldr	r0, [r0, #0]
 800d38c:	9301      	str	r3, [sp, #4]
 800d38e:	f7ff fc85 	bl	800cc9c <_vfiprintf_r>
 800d392:	b002      	add	sp, #8
 800d394:	f85d eb04 	ldr.w	lr, [sp], #4
 800d398:	b003      	add	sp, #12
 800d39a:	4770      	bx	lr
 800d39c:	20000024 	.word	0x20000024

0800d3a0 <_lseek_r>:
 800d3a0:	b538      	push	{r3, r4, r5, lr}
 800d3a2:	4d07      	ldr	r5, [pc, #28]	; (800d3c0 <_lseek_r+0x20>)
 800d3a4:	4604      	mov	r4, r0
 800d3a6:	4608      	mov	r0, r1
 800d3a8:	4611      	mov	r1, r2
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	602a      	str	r2, [r5, #0]
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	f7f5 f89c 	bl	80024ec <_lseek>
 800d3b4:	1c43      	adds	r3, r0, #1
 800d3b6:	d102      	bne.n	800d3be <_lseek_r+0x1e>
 800d3b8:	682b      	ldr	r3, [r5, #0]
 800d3ba:	b103      	cbz	r3, 800d3be <_lseek_r+0x1e>
 800d3bc:	6023      	str	r3, [r4, #0]
 800d3be:	bd38      	pop	{r3, r4, r5, pc}
 800d3c0:	20001514 	.word	0x20001514

0800d3c4 <__swhatbuf_r>:
 800d3c4:	b570      	push	{r4, r5, r6, lr}
 800d3c6:	460e      	mov	r6, r1
 800d3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3cc:	2900      	cmp	r1, #0
 800d3ce:	b096      	sub	sp, #88	; 0x58
 800d3d0:	4614      	mov	r4, r2
 800d3d2:	461d      	mov	r5, r3
 800d3d4:	da07      	bge.n	800d3e6 <__swhatbuf_r+0x22>
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	602b      	str	r3, [r5, #0]
 800d3da:	89b3      	ldrh	r3, [r6, #12]
 800d3dc:	061a      	lsls	r2, r3, #24
 800d3de:	d410      	bmi.n	800d402 <__swhatbuf_r+0x3e>
 800d3e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3e4:	e00e      	b.n	800d404 <__swhatbuf_r+0x40>
 800d3e6:	466a      	mov	r2, sp
 800d3e8:	f000 f8b6 	bl	800d558 <_fstat_r>
 800d3ec:	2800      	cmp	r0, #0
 800d3ee:	dbf2      	blt.n	800d3d6 <__swhatbuf_r+0x12>
 800d3f0:	9a01      	ldr	r2, [sp, #4]
 800d3f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d3f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d3fa:	425a      	negs	r2, r3
 800d3fc:	415a      	adcs	r2, r3
 800d3fe:	602a      	str	r2, [r5, #0]
 800d400:	e7ee      	b.n	800d3e0 <__swhatbuf_r+0x1c>
 800d402:	2340      	movs	r3, #64	; 0x40
 800d404:	2000      	movs	r0, #0
 800d406:	6023      	str	r3, [r4, #0]
 800d408:	b016      	add	sp, #88	; 0x58
 800d40a:	bd70      	pop	{r4, r5, r6, pc}

0800d40c <__smakebuf_r>:
 800d40c:	898b      	ldrh	r3, [r1, #12]
 800d40e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d410:	079d      	lsls	r5, r3, #30
 800d412:	4606      	mov	r6, r0
 800d414:	460c      	mov	r4, r1
 800d416:	d507      	bpl.n	800d428 <__smakebuf_r+0x1c>
 800d418:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d41c:	6023      	str	r3, [r4, #0]
 800d41e:	6123      	str	r3, [r4, #16]
 800d420:	2301      	movs	r3, #1
 800d422:	6163      	str	r3, [r4, #20]
 800d424:	b002      	add	sp, #8
 800d426:	bd70      	pop	{r4, r5, r6, pc}
 800d428:	ab01      	add	r3, sp, #4
 800d42a:	466a      	mov	r2, sp
 800d42c:	f7ff ffca 	bl	800d3c4 <__swhatbuf_r>
 800d430:	9900      	ldr	r1, [sp, #0]
 800d432:	4605      	mov	r5, r0
 800d434:	4630      	mov	r0, r6
 800d436:	f7ff fa51 	bl	800c8dc <_malloc_r>
 800d43a:	b948      	cbnz	r0, 800d450 <__smakebuf_r+0x44>
 800d43c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d440:	059a      	lsls	r2, r3, #22
 800d442:	d4ef      	bmi.n	800d424 <__smakebuf_r+0x18>
 800d444:	f023 0303 	bic.w	r3, r3, #3
 800d448:	f043 0302 	orr.w	r3, r3, #2
 800d44c:	81a3      	strh	r3, [r4, #12]
 800d44e:	e7e3      	b.n	800d418 <__smakebuf_r+0xc>
 800d450:	4b0d      	ldr	r3, [pc, #52]	; (800d488 <__smakebuf_r+0x7c>)
 800d452:	62b3      	str	r3, [r6, #40]	; 0x28
 800d454:	89a3      	ldrh	r3, [r4, #12]
 800d456:	6020      	str	r0, [r4, #0]
 800d458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d45c:	81a3      	strh	r3, [r4, #12]
 800d45e:	9b00      	ldr	r3, [sp, #0]
 800d460:	6163      	str	r3, [r4, #20]
 800d462:	9b01      	ldr	r3, [sp, #4]
 800d464:	6120      	str	r0, [r4, #16]
 800d466:	b15b      	cbz	r3, 800d480 <__smakebuf_r+0x74>
 800d468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d46c:	4630      	mov	r0, r6
 800d46e:	f000 f885 	bl	800d57c <_isatty_r>
 800d472:	b128      	cbz	r0, 800d480 <__smakebuf_r+0x74>
 800d474:	89a3      	ldrh	r3, [r4, #12]
 800d476:	f023 0303 	bic.w	r3, r3, #3
 800d47a:	f043 0301 	orr.w	r3, r3, #1
 800d47e:	81a3      	strh	r3, [r4, #12]
 800d480:	89a0      	ldrh	r0, [r4, #12]
 800d482:	4305      	orrs	r5, r0
 800d484:	81a5      	strh	r5, [r4, #12]
 800d486:	e7cd      	b.n	800d424 <__smakebuf_r+0x18>
 800d488:	0800b5c9 	.word	0x0800b5c9

0800d48c <memmove>:
 800d48c:	4288      	cmp	r0, r1
 800d48e:	b510      	push	{r4, lr}
 800d490:	eb01 0402 	add.w	r4, r1, r2
 800d494:	d902      	bls.n	800d49c <memmove+0x10>
 800d496:	4284      	cmp	r4, r0
 800d498:	4623      	mov	r3, r4
 800d49a:	d807      	bhi.n	800d4ac <memmove+0x20>
 800d49c:	1e43      	subs	r3, r0, #1
 800d49e:	42a1      	cmp	r1, r4
 800d4a0:	d008      	beq.n	800d4b4 <memmove+0x28>
 800d4a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4aa:	e7f8      	b.n	800d49e <memmove+0x12>
 800d4ac:	4402      	add	r2, r0
 800d4ae:	4601      	mov	r1, r0
 800d4b0:	428a      	cmp	r2, r1
 800d4b2:	d100      	bne.n	800d4b6 <memmove+0x2a>
 800d4b4:	bd10      	pop	{r4, pc}
 800d4b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4be:	e7f7      	b.n	800d4b0 <memmove+0x24>

0800d4c0 <__malloc_lock>:
 800d4c0:	4801      	ldr	r0, [pc, #4]	; (800d4c8 <__malloc_lock+0x8>)
 800d4c2:	f7fe bcc6 	b.w	800be52 <__retarget_lock_acquire_recursive>
 800d4c6:	bf00      	nop
 800d4c8:	2000150c 	.word	0x2000150c

0800d4cc <__malloc_unlock>:
 800d4cc:	4801      	ldr	r0, [pc, #4]	; (800d4d4 <__malloc_unlock+0x8>)
 800d4ce:	f7fe bcc1 	b.w	800be54 <__retarget_lock_release_recursive>
 800d4d2:	bf00      	nop
 800d4d4:	2000150c 	.word	0x2000150c

0800d4d8 <_realloc_r>:
 800d4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4da:	4607      	mov	r7, r0
 800d4dc:	4614      	mov	r4, r2
 800d4de:	460e      	mov	r6, r1
 800d4e0:	b921      	cbnz	r1, 800d4ec <_realloc_r+0x14>
 800d4e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d4e6:	4611      	mov	r1, r2
 800d4e8:	f7ff b9f8 	b.w	800c8dc <_malloc_r>
 800d4ec:	b922      	cbnz	r2, 800d4f8 <_realloc_r+0x20>
 800d4ee:	f7ff f9a5 	bl	800c83c <_free_r>
 800d4f2:	4625      	mov	r5, r4
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4f8:	f000 f850 	bl	800d59c <_malloc_usable_size_r>
 800d4fc:	42a0      	cmp	r0, r4
 800d4fe:	d20f      	bcs.n	800d520 <_realloc_r+0x48>
 800d500:	4621      	mov	r1, r4
 800d502:	4638      	mov	r0, r7
 800d504:	f7ff f9ea 	bl	800c8dc <_malloc_r>
 800d508:	4605      	mov	r5, r0
 800d50a:	2800      	cmp	r0, #0
 800d50c:	d0f2      	beq.n	800d4f4 <_realloc_r+0x1c>
 800d50e:	4631      	mov	r1, r6
 800d510:	4622      	mov	r2, r4
 800d512:	f7fe fcbb 	bl	800be8c <memcpy>
 800d516:	4631      	mov	r1, r6
 800d518:	4638      	mov	r0, r7
 800d51a:	f7ff f98f 	bl	800c83c <_free_r>
 800d51e:	e7e9      	b.n	800d4f4 <_realloc_r+0x1c>
 800d520:	4635      	mov	r5, r6
 800d522:	e7e7      	b.n	800d4f4 <_realloc_r+0x1c>

0800d524 <_read_r>:
 800d524:	b538      	push	{r3, r4, r5, lr}
 800d526:	4d07      	ldr	r5, [pc, #28]	; (800d544 <_read_r+0x20>)
 800d528:	4604      	mov	r4, r0
 800d52a:	4608      	mov	r0, r1
 800d52c:	4611      	mov	r1, r2
 800d52e:	2200      	movs	r2, #0
 800d530:	602a      	str	r2, [r5, #0]
 800d532:	461a      	mov	r2, r3
 800d534:	f7f4 ff96 	bl	8002464 <_read>
 800d538:	1c43      	adds	r3, r0, #1
 800d53a:	d102      	bne.n	800d542 <_read_r+0x1e>
 800d53c:	682b      	ldr	r3, [r5, #0]
 800d53e:	b103      	cbz	r3, 800d542 <_read_r+0x1e>
 800d540:	6023      	str	r3, [r4, #0]
 800d542:	bd38      	pop	{r3, r4, r5, pc}
 800d544:	20001514 	.word	0x20001514

0800d548 <abort>:
 800d548:	b508      	push	{r3, lr}
 800d54a:	2006      	movs	r0, #6
 800d54c:	f000 f856 	bl	800d5fc <raise>
 800d550:	2001      	movs	r0, #1
 800d552:	f7f4 ff7d 	bl	8002450 <_exit>
	...

0800d558 <_fstat_r>:
 800d558:	b538      	push	{r3, r4, r5, lr}
 800d55a:	4d07      	ldr	r5, [pc, #28]	; (800d578 <_fstat_r+0x20>)
 800d55c:	2300      	movs	r3, #0
 800d55e:	4604      	mov	r4, r0
 800d560:	4608      	mov	r0, r1
 800d562:	4611      	mov	r1, r2
 800d564:	602b      	str	r3, [r5, #0]
 800d566:	f7f4 ffa6 	bl	80024b6 <_fstat>
 800d56a:	1c43      	adds	r3, r0, #1
 800d56c:	d102      	bne.n	800d574 <_fstat_r+0x1c>
 800d56e:	682b      	ldr	r3, [r5, #0]
 800d570:	b103      	cbz	r3, 800d574 <_fstat_r+0x1c>
 800d572:	6023      	str	r3, [r4, #0]
 800d574:	bd38      	pop	{r3, r4, r5, pc}
 800d576:	bf00      	nop
 800d578:	20001514 	.word	0x20001514

0800d57c <_isatty_r>:
 800d57c:	b538      	push	{r3, r4, r5, lr}
 800d57e:	4d06      	ldr	r5, [pc, #24]	; (800d598 <_isatty_r+0x1c>)
 800d580:	2300      	movs	r3, #0
 800d582:	4604      	mov	r4, r0
 800d584:	4608      	mov	r0, r1
 800d586:	602b      	str	r3, [r5, #0]
 800d588:	f7f4 ffa5 	bl	80024d6 <_isatty>
 800d58c:	1c43      	adds	r3, r0, #1
 800d58e:	d102      	bne.n	800d596 <_isatty_r+0x1a>
 800d590:	682b      	ldr	r3, [r5, #0]
 800d592:	b103      	cbz	r3, 800d596 <_isatty_r+0x1a>
 800d594:	6023      	str	r3, [r4, #0]
 800d596:	bd38      	pop	{r3, r4, r5, pc}
 800d598:	20001514 	.word	0x20001514

0800d59c <_malloc_usable_size_r>:
 800d59c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5a0:	1f18      	subs	r0, r3, #4
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	bfbc      	itt	lt
 800d5a6:	580b      	ldrlt	r3, [r1, r0]
 800d5a8:	18c0      	addlt	r0, r0, r3
 800d5aa:	4770      	bx	lr

0800d5ac <_raise_r>:
 800d5ac:	291f      	cmp	r1, #31
 800d5ae:	b538      	push	{r3, r4, r5, lr}
 800d5b0:	4604      	mov	r4, r0
 800d5b2:	460d      	mov	r5, r1
 800d5b4:	d904      	bls.n	800d5c0 <_raise_r+0x14>
 800d5b6:	2316      	movs	r3, #22
 800d5b8:	6003      	str	r3, [r0, #0]
 800d5ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d5be:	bd38      	pop	{r3, r4, r5, pc}
 800d5c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d5c2:	b112      	cbz	r2, 800d5ca <_raise_r+0x1e>
 800d5c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5c8:	b94b      	cbnz	r3, 800d5de <_raise_r+0x32>
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	f000 f830 	bl	800d630 <_getpid_r>
 800d5d0:	462a      	mov	r2, r5
 800d5d2:	4601      	mov	r1, r0
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5da:	f000 b817 	b.w	800d60c <_kill_r>
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d00a      	beq.n	800d5f8 <_raise_r+0x4c>
 800d5e2:	1c59      	adds	r1, r3, #1
 800d5e4:	d103      	bne.n	800d5ee <_raise_r+0x42>
 800d5e6:	2316      	movs	r3, #22
 800d5e8:	6003      	str	r3, [r0, #0]
 800d5ea:	2001      	movs	r0, #1
 800d5ec:	e7e7      	b.n	800d5be <_raise_r+0x12>
 800d5ee:	2400      	movs	r4, #0
 800d5f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d5f4:	4628      	mov	r0, r5
 800d5f6:	4798      	blx	r3
 800d5f8:	2000      	movs	r0, #0
 800d5fa:	e7e0      	b.n	800d5be <_raise_r+0x12>

0800d5fc <raise>:
 800d5fc:	4b02      	ldr	r3, [pc, #8]	; (800d608 <raise+0xc>)
 800d5fe:	4601      	mov	r1, r0
 800d600:	6818      	ldr	r0, [r3, #0]
 800d602:	f7ff bfd3 	b.w	800d5ac <_raise_r>
 800d606:	bf00      	nop
 800d608:	20000024 	.word	0x20000024

0800d60c <_kill_r>:
 800d60c:	b538      	push	{r3, r4, r5, lr}
 800d60e:	4d07      	ldr	r5, [pc, #28]	; (800d62c <_kill_r+0x20>)
 800d610:	2300      	movs	r3, #0
 800d612:	4604      	mov	r4, r0
 800d614:	4608      	mov	r0, r1
 800d616:	4611      	mov	r1, r2
 800d618:	602b      	str	r3, [r5, #0]
 800d61a:	f7f4 ff09 	bl	8002430 <_kill>
 800d61e:	1c43      	adds	r3, r0, #1
 800d620:	d102      	bne.n	800d628 <_kill_r+0x1c>
 800d622:	682b      	ldr	r3, [r5, #0]
 800d624:	b103      	cbz	r3, 800d628 <_kill_r+0x1c>
 800d626:	6023      	str	r3, [r4, #0]
 800d628:	bd38      	pop	{r3, r4, r5, pc}
 800d62a:	bf00      	nop
 800d62c:	20001514 	.word	0x20001514

0800d630 <_getpid_r>:
 800d630:	f7f4 bef6 	b.w	8002420 <_getpid>

0800d634 <_init>:
 800d634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d636:	bf00      	nop
 800d638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d63a:	bc08      	pop	{r3}
 800d63c:	469e      	mov	lr, r3
 800d63e:	4770      	bx	lr

0800d640 <_fini>:
 800d640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d642:	bf00      	nop
 800d644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d646:	bc08      	pop	{r3}
 800d648:	469e      	mov	lr, r3
 800d64a:	4770      	bx	lr
