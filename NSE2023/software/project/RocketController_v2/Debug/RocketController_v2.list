
RocketController_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  0800b028  0800b028  0001b028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5d8  0800b5d8  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800b5d8  0800b5d8  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b5d8  0800b5d8  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5d8  0800b5d8  0001b5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5dc  0800b5dc  0001b5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800b5e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          000003c8  200001f0  200001f0  000201f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200005b8  200005b8  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010ca2  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023b3  00000000  00000000  00030ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  00033278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d18  00000000  00000000  00034098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c43b  00000000  00000000  00034db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e69  00000000  00000000  000511eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a37fb  00000000  00000000  00062054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010584f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005348  00000000  00000000  001058a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b00c 	.word	0x0800b00c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800b00c 	.word	0x0800b00c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <bmpRead8>:
// 標準気圧に対する温度の勾配
#define TEMPERATURE_GRADIENT 0.0065
// 標準気圧に対する重力加速度
#define GRAVITY 9.80665

uint8_t bmpRead8(uint8_t a) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af02      	add	r7, sp, #8
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
	uint8_t r;
	HAL_I2C_Master_Transmit(bmpPort, BMP085_ADDR, &a, 1, HAL_MAX_DELAY);
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <bmpRead8+0x44>)
 8000d00:	6818      	ldr	r0, [r3, #0]
 8000d02:	23ee      	movs	r3, #238	; 0xee
 8000d04:	b299      	uxth	r1, r3
 8000d06:	1dfa      	adds	r2, r7, #7
 8000d08:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2301      	movs	r3, #1
 8000d10:	f001 fda8 	bl	8002864 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(bmpPort, BMP085_ADDR, &r, 1, HAL_MAX_DELAY);
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <bmpRead8+0x44>)
 8000d16:	6818      	ldr	r0, [r3, #0]
 8000d18:	23ee      	movs	r3, #238	; 0xee
 8000d1a:	b299      	uxth	r1, r3
 8000d1c:	f107 020f 	add.w	r2, r7, #15
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	2301      	movs	r3, #1
 8000d28:	f001 fe90 	bl	8002a4c <HAL_I2C_Master_Receive>
	return r;
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000244 	.word	0x20000244

08000d3c <bmpRead16>:
uint16_t bmpRead16(uint8_t a) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af02      	add	r7, sp, #8
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
	uint8_t retbuf[2];
	uint16_t r;
	HAL_I2C_Master_Transmit(bmpPort, BMP085_ADDR, &a, 1, HAL_MAX_DELAY);
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <bmpRead16+0x54>)
 8000d48:	6818      	ldr	r0, [r3, #0]
 8000d4a:	23ee      	movs	r3, #238	; 0xee
 8000d4c:	b299      	uxth	r1, r3
 8000d4e:	1dfa      	adds	r2, r7, #7
 8000d50:	f04f 33ff 	mov.w	r3, #4294967295
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	2301      	movs	r3, #1
 8000d58:	f001 fd84 	bl	8002864 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(bmpPort, BMP085_ADDR, retbuf, 2, HAL_MAX_DELAY);
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <bmpRead16+0x54>)
 8000d5e:	6818      	ldr	r0, [r3, #0]
 8000d60:	23ee      	movs	r3, #238	; 0xee
 8000d62:	b299      	uxth	r1, r3
 8000d64:	f107 020c 	add.w	r2, r7, #12
 8000d68:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	2302      	movs	r3, #2
 8000d70:	f001 fe6c 	bl	8002a4c <HAL_I2C_Master_Receive>
	r = retbuf[1] | (retbuf[0] << 8);
 8000d74:	7b7b      	ldrb	r3, [r7, #13]
 8000d76:	b21a      	sxth	r2, r3
 8000d78:	7b3b      	ldrb	r3, [r7, #12]
 8000d7a:	021b      	lsls	r3, r3, #8
 8000d7c:	b21b      	sxth	r3, r3
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	b21b      	sxth	r3, r3
 8000d82:	81fb      	strh	r3, [r7, #14]
	return r;
 8000d84:	89fb      	ldrh	r3, [r7, #14]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000244 	.word	0x20000244

08000d94 <bmpWrite8>:
void bmpWrite8(uint8_t a, uint8_t d) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af02      	add	r7, sp, #8
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	4613      	mov	r3, r2
 8000da2:	71bb      	strb	r3, [r7, #6]
	uint8_t tBuf[2];
	tBuf[0] = a;
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	733b      	strb	r3, [r7, #12]
	tBuf[1] = d;
 8000da8:	79bb      	ldrb	r3, [r7, #6]
 8000daa:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(bmpPort, BMP085_ADDR, tBuf, 2, HAL_MAX_DELAY);
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <bmpWrite8+0x38>)
 8000dae:	6818      	ldr	r0, [r3, #0]
 8000db0:	23ee      	movs	r3, #238	; 0xee
 8000db2:	b299      	uxth	r1, r3
 8000db4:	f107 020c 	add.w	r2, r7, #12
 8000db8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	f001 fd50 	bl	8002864 <HAL_I2C_Master_Transmit>
}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000244 	.word	0x20000244

08000dd0 <bmpBegin>:
uint8_t bmpBegin(uint8_t mode, I2C_HandleTypeDef *i2cdev) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
	bmpPort = i2cdev;
 8000ddc:	4a32      	ldr	r2, [pc, #200]	; (8000ea8 <bmpBegin+0xd8>)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	6013      	str	r3, [r2, #0]
	if (mode > BMP085_ULTRAHIGHRES)
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	d901      	bls.n	8000dec <bmpBegin+0x1c>
		mode = BMP085_ULTRAHIGHRES;
 8000de8:	2303      	movs	r3, #3
 8000dea:	71fb      	strb	r3, [r7, #7]
	oversampling = mode;
 8000dec:	4a2f      	ldr	r2, [pc, #188]	; (8000eac <bmpBegin+0xdc>)
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	7013      	strb	r3, [r2, #0]
	if (bmpRead8(0xD0) != 0x55)
 8000df2:	20d0      	movs	r0, #208	; 0xd0
 8000df4:	f7ff ff7e 	bl	8000cf4 <bmpRead8>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b55      	cmp	r3, #85	; 0x55
 8000dfc:	d001      	beq.n	8000e02 <bmpBegin+0x32>
		return 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e04d      	b.n	8000e9e <bmpBegin+0xce>
	/* read calibration data */
	ac1 = bmpRead16(BMP085_CAL_AC1);
 8000e02:	20aa      	movs	r0, #170	; 0xaa
 8000e04:	f7ff ff9a 	bl	8000d3c <bmpRead16>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b21a      	sxth	r2, r3
 8000e0c:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <bmpBegin+0xe0>)
 8000e0e:	801a      	strh	r2, [r3, #0]
	ac2 = bmpRead16(BMP085_CAL_AC2);
 8000e10:	20ac      	movs	r0, #172	; 0xac
 8000e12:	f7ff ff93 	bl	8000d3c <bmpRead16>
 8000e16:	4603      	mov	r3, r0
 8000e18:	b21a      	sxth	r2, r3
 8000e1a:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <bmpBegin+0xe4>)
 8000e1c:	801a      	strh	r2, [r3, #0]
	ac3 = bmpRead16(BMP085_CAL_AC3);
 8000e1e:	20ae      	movs	r0, #174	; 0xae
 8000e20:	f7ff ff8c 	bl	8000d3c <bmpRead16>
 8000e24:	4603      	mov	r3, r0
 8000e26:	b21a      	sxth	r2, r3
 8000e28:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <bmpBegin+0xe8>)
 8000e2a:	801a      	strh	r2, [r3, #0]
	ac4 = bmpRead16(BMP085_CAL_AC4);
 8000e2c:	20b0      	movs	r0, #176	; 0xb0
 8000e2e:	f7ff ff85 	bl	8000d3c <bmpRead16>
 8000e32:	4603      	mov	r3, r0
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <bmpBegin+0xec>)
 8000e38:	801a      	strh	r2, [r3, #0]
	ac5 = bmpRead16(BMP085_CAL_AC5);
 8000e3a:	20b2      	movs	r0, #178	; 0xb2
 8000e3c:	f7ff ff7e 	bl	8000d3c <bmpRead16>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461a      	mov	r2, r3
 8000e44:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <bmpBegin+0xf0>)
 8000e46:	801a      	strh	r2, [r3, #0]
	ac6 = bmpRead16(BMP085_CAL_AC6);
 8000e48:	20b4      	movs	r0, #180	; 0xb4
 8000e4a:	f7ff ff77 	bl	8000d3c <bmpRead16>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <bmpBegin+0xf4>)
 8000e54:	801a      	strh	r2, [r3, #0]
	b1 = bmpRead16(BMP085_CAL_B1);
 8000e56:	20b6      	movs	r0, #182	; 0xb6
 8000e58:	f7ff ff70 	bl	8000d3c <bmpRead16>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	b21a      	sxth	r2, r3
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <bmpBegin+0xf8>)
 8000e62:	801a      	strh	r2, [r3, #0]
	b2 = bmpRead16(BMP085_CAL_B2);
 8000e64:	20b8      	movs	r0, #184	; 0xb8
 8000e66:	f7ff ff69 	bl	8000d3c <bmpRead16>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	b21a      	sxth	r2, r3
 8000e6e:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <bmpBegin+0xfc>)
 8000e70:	801a      	strh	r2, [r3, #0]
	mb = bmpRead16(BMP085_CAL_MB);
 8000e72:	20ba      	movs	r0, #186	; 0xba
 8000e74:	f7ff ff62 	bl	8000d3c <bmpRead16>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	b21a      	sxth	r2, r3
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <bmpBegin+0x100>)
 8000e7e:	801a      	strh	r2, [r3, #0]
	mc = bmpRead16(BMP085_CAL_MC);
 8000e80:	20bc      	movs	r0, #188	; 0xbc
 8000e82:	f7ff ff5b 	bl	8000d3c <bmpRead16>
 8000e86:	4603      	mov	r3, r0
 8000e88:	b21a      	sxth	r2, r3
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <bmpBegin+0x104>)
 8000e8c:	801a      	strh	r2, [r3, #0]
	md = bmpRead16(BMP085_CAL_MD);
 8000e8e:	20be      	movs	r0, #190	; 0xbe
 8000e90:	f7ff ff54 	bl	8000d3c <bmpRead16>
 8000e94:	4603      	mov	r3, r0
 8000e96:	b21a      	sxth	r2, r3
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <bmpBegin+0x108>)
 8000e9a:	801a      	strh	r2, [r3, #0]
	return 1;
 8000e9c:	2301      	movs	r3, #1
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000244 	.word	0x20000244
 8000eac:	2000025a 	.word	0x2000025a
 8000eb0:	2000024c 	.word	0x2000024c
 8000eb4:	20000254 	.word	0x20000254
 8000eb8:	2000025e 	.word	0x2000025e
 8000ebc:	20000258 	.word	0x20000258
 8000ec0:	20000252 	.word	0x20000252
 8000ec4:	20000250 	.word	0x20000250
 8000ec8:	2000024e 	.word	0x2000024e
 8000ecc:	20000248 	.word	0x20000248
 8000ed0:	2000024a 	.word	0x2000024a
 8000ed4:	2000025c 	.word	0x2000025c
 8000ed8:	20000256 	.word	0x20000256

08000edc <computeB5>:
// Sensor read functions
int32_t computeB5(int32_t UT) {
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	int32_t X1 = (UT - (int32_t) ac6) * ((int32_t) ac5) >> 15;
 8000ee4:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <computeB5+0x4c>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	1a9b      	subs	r3, r3, r2
 8000eee:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <computeB5+0x50>)
 8000ef0:	8812      	ldrh	r2, [r2, #0]
 8000ef2:	fb02 f303 	mul.w	r3, r2, r3
 8000ef6:	13db      	asrs	r3, r3, #15
 8000ef8:	60fb      	str	r3, [r7, #12]
	int32_t X2 = ((int32_t) mc << 11) / (X1 + (int32_t) md);
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <computeB5+0x54>)
 8000efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f00:	02da      	lsls	r2, r3, #11
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <computeB5+0x58>)
 8000f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	440b      	add	r3, r1
 8000f0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f12:	60bb      	str	r3, [r7, #8]
	return X1 + X2;
 8000f14:	68fa      	ldr	r2, [r7, #12]
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	4413      	add	r3, r2
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000250 	.word	0x20000250
 8000f2c:	20000252 	.word	0x20000252
 8000f30:	2000025c 	.word	0x2000025c
 8000f34:	20000256 	.word	0x20000256

08000f38 <readBMPRawTemperature>:
uint16_t readBMPRawTemperature(void) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	bmpWrite8(BMP085_CONTROL, BMP085_READTEMPCMD);
 8000f3c:	212e      	movs	r1, #46	; 0x2e
 8000f3e:	20f4      	movs	r0, #244	; 0xf4
 8000f40:	f7ff ff28 	bl	8000d94 <bmpWrite8>
	HAL_Delay(5);
 8000f44:	2005      	movs	r0, #5
 8000f46:	f001 f951 	bl	80021ec <HAL_Delay>
	return bmpRead16(BMP085_TEMPDATA);
 8000f4a:	20f6      	movs	r0, #246	; 0xf6
 8000f4c:	f7ff fef6 	bl	8000d3c <bmpRead16>
 8000f50:	4603      	mov	r3, r0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <readBMPRawPressure>:
uint32_t readBMPRawPressure(void) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
	uint32_t raw;
	bmpWrite8(BMP085_CONTROL, BMP085_READPRESSURECMD + (oversampling << 6));
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <readBMPRawPressure+0x8c>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	019b      	lsls	r3, r3, #6
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	3334      	adds	r3, #52	; 0x34
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	20f4      	movs	r0, #244	; 0xf4
 8000f6e:	f7ff ff11 	bl	8000d94 <bmpWrite8>
	if (oversampling == BMP085_ULTRALOWPOWER)
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <readBMPRawPressure+0x8c>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d103      	bne.n	8000f82 <readBMPRawPressure+0x2a>
		HAL_Delay(5);
 8000f7a:	2005      	movs	r0, #5
 8000f7c:	f001 f936 	bl	80021ec <HAL_Delay>
 8000f80:	e012      	b.n	8000fa8 <readBMPRawPressure+0x50>
	else if (oversampling == BMP085_STANDARD)
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <readBMPRawPressure+0x8c>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d103      	bne.n	8000f92 <readBMPRawPressure+0x3a>
		HAL_Delay(8);
 8000f8a:	2008      	movs	r0, #8
 8000f8c:	f001 f92e 	bl	80021ec <HAL_Delay>
 8000f90:	e00a      	b.n	8000fa8 <readBMPRawPressure+0x50>
	else if (oversampling == BMP085_HIGHRES)
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <readBMPRawPressure+0x8c>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d103      	bne.n	8000fa2 <readBMPRawPressure+0x4a>
		HAL_Delay(14);
 8000f9a:	200e      	movs	r0, #14
 8000f9c:	f001 f926 	bl	80021ec <HAL_Delay>
 8000fa0:	e002      	b.n	8000fa8 <readBMPRawPressure+0x50>
	else
		HAL_Delay(26);
 8000fa2:	201a      	movs	r0, #26
 8000fa4:	f001 f922 	bl	80021ec <HAL_Delay>
	raw = bmpRead16(BMP085_PRESSUREDATA);
 8000fa8:	20f6      	movs	r0, #246	; 0xf6
 8000faa:	f7ff fec7 	bl	8000d3c <bmpRead16>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	607b      	str	r3, [r7, #4]
	raw <<= 8;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	607b      	str	r3, [r7, #4]
	raw |= bmpRead8(BMP085_PRESSUREDATA + 2);
 8000fb8:	20f8      	movs	r0, #248	; 0xf8
 8000fba:	f7ff fe9b 	bl	8000cf4 <bmpRead8>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	607b      	str	r3, [r7, #4]
	raw >>= (8 - oversampling);
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <readBMPRawPressure+0x8c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f1c3 0308 	rsb	r3, r3, #8
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd6:	607b      	str	r3, [r7, #4]
	return raw;
 8000fd8:	687b      	ldr	r3, [r7, #4]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000025a 	.word	0x2000025a

08000fe8 <readBMPTemperature>:
float readBMPTemperature(void) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
	int32_t UT, B5; // following ds convention
	float temp;
	UT = readBMPRawTemperature();
 8000fee:	f7ff ffa3 	bl	8000f38 <readBMPRawTemperature>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	60fb      	str	r3, [r7, #12]
	B5 = computeB5(UT);
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f7ff ff70 	bl	8000edc <computeB5>
 8000ffc:	60b8      	str	r0, [r7, #8]
	temp = (B5 + 8) >> 4;
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	3308      	adds	r3, #8
 8001002:	111b      	asrs	r3, r3, #4
 8001004:	ee07 3a90 	vmov	s15, r3
 8001008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800100c:	edc7 7a01 	vstr	s15, [r7, #4]
	temp /= 10;
 8001010:	ed97 7a01 	vldr	s14, [r7, #4]
 8001014:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001018:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800101c:	edc7 7a01 	vstr	s15, [r7, #4]
	return temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	ee07 3a90 	vmov	s15, r3
}
 8001026:	eeb0 0a67 	vmov.f32	s0, s15
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <readBMPPressure>:
int32_t readBMPPressure(void) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	; 0x30
 8001034:	af00      	add	r7, sp, #0
	int32_t UT, UP, B3, B5, B6, X1, X2, X3, p;
	uint32_t B4, B7;
	UT = readBMPRawTemperature();
 8001036:	f7ff ff7f 	bl	8000f38 <readBMPRawTemperature>
 800103a:	4603      	mov	r3, r0
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
	UP = readBMPRawPressure();
 800103e:	f7ff ff8b 	bl	8000f58 <readBMPRawPressure>
 8001042:	4603      	mov	r3, r0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
	B5 = computeB5(UT);
 8001046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001048:	f7ff ff48 	bl	8000edc <computeB5>
 800104c:	6238      	str	r0, [r7, #32]
	// do pressure calcs
	B6 = B5 - 4000;
 800104e:	6a3b      	ldr	r3, [r7, #32]
 8001050:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001054:	61fb      	str	r3, [r7, #28]
	X1 = ((int32_t) b2 * ((B6 * B6) >> 12)) >> 11;
 8001056:	4b45      	ldr	r3, [pc, #276]	; (800116c <readBMPPressure+0x13c>)
 8001058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800105c:	461a      	mov	r2, r3
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fb03 f303 	mul.w	r3, r3, r3
 8001064:	131b      	asrs	r3, r3, #12
 8001066:	fb03 f302 	mul.w	r3, r3, r2
 800106a:	12db      	asrs	r3, r3, #11
 800106c:	61bb      	str	r3, [r7, #24]
	X2 = ((int32_t) ac2 * B6) >> 11;
 800106e:	4b40      	ldr	r3, [pc, #256]	; (8001170 <readBMPPressure+0x140>)
 8001070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001074:	461a      	mov	r2, r3
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fb03 f302 	mul.w	r3, r3, r2
 800107c:	12db      	asrs	r3, r3, #11
 800107e:	617b      	str	r3, [r7, #20]
	X3 = X1 + X2;
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	4413      	add	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
	B3 = ((((int32_t) ac1 * 4 + X3) << oversampling) + 2) / 4;
 8001088:	4b3a      	ldr	r3, [pc, #232]	; (8001174 <readBMPPressure+0x144>)
 800108a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108e:	009a      	lsls	r2, r3, #2
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4413      	add	r3, r2
 8001094:	4a38      	ldr	r2, [pc, #224]	; (8001178 <readBMPPressure+0x148>)
 8001096:	7812      	ldrb	r2, [r2, #0]
 8001098:	4093      	lsls	r3, r2
 800109a:	3302      	adds	r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	da00      	bge.n	80010a2 <readBMPPressure+0x72>
 80010a0:	3303      	adds	r3, #3
 80010a2:	109b      	asrs	r3, r3, #2
 80010a4:	60fb      	str	r3, [r7, #12]
	X1 = ((int32_t) ac3 * B6) >> 13;
 80010a6:	4b35      	ldr	r3, [pc, #212]	; (800117c <readBMPPressure+0x14c>)
 80010a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ac:	461a      	mov	r2, r3
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fb03 f302 	mul.w	r3, r3, r2
 80010b4:	135b      	asrs	r3, r3, #13
 80010b6:	61bb      	str	r3, [r7, #24]
	X2 = ((int32_t) b1 * ((B6 * B6) >> 12)) >> 16;
 80010b8:	4b31      	ldr	r3, [pc, #196]	; (8001180 <readBMPPressure+0x150>)
 80010ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010be:	461a      	mov	r2, r3
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	fb03 f303 	mul.w	r3, r3, r3
 80010c6:	131b      	asrs	r3, r3, #12
 80010c8:	fb03 f302 	mul.w	r3, r3, r2
 80010cc:	141b      	asrs	r3, r3, #16
 80010ce:	617b      	str	r3, [r7, #20]
	X3 = ((X1 + X2) + 2) >> 2;
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	4413      	add	r3, r2
 80010d6:	3302      	adds	r3, #2
 80010d8:	109b      	asrs	r3, r3, #2
 80010da:	613b      	str	r3, [r7, #16]
	B4 = ((uint32_t) ac4 * (uint32_t) (X3 + 32768)) >> 15;
 80010dc:	4b29      	ldr	r3, [pc, #164]	; (8001184 <readBMPPressure+0x154>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80010e8:	fb03 f302 	mul.w	r3, r3, r2
 80010ec:	0bdb      	lsrs	r3, r3, #15
 80010ee:	60bb      	str	r3, [r7, #8]
	B7 = ((uint32_t) UP - B3) * (uint32_t) (50000UL >> oversampling);
 80010f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	4a20      	ldr	r2, [pc, #128]	; (8001178 <readBMPPressure+0x148>)
 80010f8:	7812      	ldrb	r2, [r2, #0]
 80010fa:	4611      	mov	r1, r2
 80010fc:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001100:	40ca      	lsrs	r2, r1
 8001102:	fb02 f303 	mul.w	r3, r2, r3
 8001106:	607b      	str	r3, [r7, #4]
	if (B7 < 0x80000000) {
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	db06      	blt.n	800111c <readBMPPressure+0xec>
		p = (B7 * 2) / B4;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	005a      	lsls	r2, r3, #1
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	fbb2 f3f3 	udiv	r3, r2, r3
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800111a:	e005      	b.n	8001128 <readBMPPressure+0xf8>
	} else {
		p = (B7 / B4) * 2;
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	fbb2 f3f3 	udiv	r3, r2, r3
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	X1 = (p >> 8) * (p >> 8);
 8001128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112a:	121b      	asrs	r3, r3, #8
 800112c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800112e:	1212      	asrs	r2, r2, #8
 8001130:	fb02 f303 	mul.w	r3, r2, r3
 8001134:	61bb      	str	r3, [r7, #24]
	X1 = (X1 * 3038) >> 16;
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	f640 32de 	movw	r2, #3038	; 0xbde
 800113c:	fb02 f303 	mul.w	r3, r2, r3
 8001140:	141b      	asrs	r3, r3, #16
 8001142:	61bb      	str	r3, [r7, #24]
	X2 = (-7357 * p) >> 16;
 8001144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001146:	4a10      	ldr	r2, [pc, #64]	; (8001188 <readBMPPressure+0x158>)
 8001148:	fb02 f303 	mul.w	r3, r2, r3
 800114c:	141b      	asrs	r3, r3, #16
 800114e:	617b      	str	r3, [r7, #20]
	p = p + ((X1 + X2 + (int32_t) 3791) >> 4);
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	4413      	add	r3, r2
 8001156:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800115a:	111b      	asrs	r3, r3, #4
 800115c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800115e:	4413      	add	r3, r2
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
	return p;
 8001162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001164:	4618      	mov	r0, r3
 8001166:	3730      	adds	r7, #48	; 0x30
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000248 	.word	0x20000248
 8001170:	20000254 	.word	0x20000254
 8001174:	2000024c 	.word	0x2000024c
 8001178:	2000025a 	.word	0x2000025a
 800117c:	2000025e 	.word	0x2000025e
 8001180:	2000024e 	.word	0x2000024e
 8001184:	20000258 	.word	0x20000258
 8001188:	ffffe343 	.word	0xffffe343
 800118c:	00000000 	.word	0x00000000

08001190 <calculateAltitude>:

double calculateAltitude(int32_t pressure, float temp) {
 8001190:	b5b0      	push	{r4, r5, r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	ed87 0a00 	vstr	s0, [r7]
    double pressureRatio = SEA_LEVEL_PRESSURE / pressure;
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff f9c1 	bl	8000524 <__aeabi_i2d>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	a127      	add	r1, pc, #156	; (adr r1, 8001244 <calculateAltitude+0xb4>)
 80011a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011ac:	f7ff fb4e 	bl	800084c <__aeabi_ddiv>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double altitude = (pow(pressureRatio, 1.0 / 5.257) - 1.0) * (temp + 273.15) / 0.0065;
 80011b8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8001228 <calculateAltitude+0x98>
 80011bc:	ed97 0b04 	vldr	d0, [r7, #16]
 80011c0:	f008 ff7c 	bl	800a0bc <pow>
 80011c4:	ec51 0b10 	vmov	r0, r1, d0
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <calculateAltitude+0xb0>)
 80011ce:	f7ff f85b 	bl	8000288 <__aeabi_dsub>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4614      	mov	r4, r2
 80011d8:	461d      	mov	r5, r3
 80011da:	6838      	ldr	r0, [r7, #0]
 80011dc:	f7ff f9b4 	bl	8000548 <__aeabi_f2d>
 80011e0:	a313      	add	r3, pc, #76	; (adr r3, 8001230 <calculateAltitude+0xa0>)
 80011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e6:	f7ff f851 	bl	800028c <__adddf3>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4620      	mov	r0, r4
 80011f0:	4629      	mov	r1, r5
 80011f2:	f7ff fa01 	bl	80005f8 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	a30e      	add	r3, pc, #56	; (adr r3, 8001238 <calculateAltitude+0xa8>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	f7ff fb22 	bl	800084c <__aeabi_ddiv>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return altitude;
 8001210:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001214:	ec43 2b17 	vmov	d7, r2, r3
}
 8001218:	eeb0 0a47 	vmov.f32	s0, s14
 800121c:	eef0 0a67 	vmov.f32	s1, s15
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bdb0      	pop	{r4, r5, r7, pc}
 8001226:	bf00      	nop
 8001228:	7dee2d4a 	.word	0x7dee2d4a
 800122c:	3fc85936 	.word	0x3fc85936
 8001230:	66666666 	.word	0x66666666
 8001234:	40711266 	.word	0x40711266
 8001238:	76c8b439 	.word	0x76c8b439
 800123c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001240:	3ff00000 	.word	0x3ff00000
 8001244:	00000000 	.word	0x00000000
 8001248:	40f8bcd0 	.word	0x40f8bcd0

0800124c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001254:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001258:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	d013      	beq.n	800128c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001264:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001268:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800126c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00b      	beq.n	800128c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001274:	e000      	b.n	8001278 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001276:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001278:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f9      	beq.n	8001276 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001282:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800128c:	687b      	ldr	r3, [r7, #4]
}
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800129c:	b5b0      	push	{r4, r5, r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012a2:	f000 ff3d 	bl	8002120 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012a6:	f000 f93b 	bl	8001520 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012aa:	f000 fa79 	bl	80017a0 <MX_GPIO_Init>
	MX_I2C1_Init();
 80012ae:	f000 f98f 	bl	80015d0 <MX_I2C1_Init>
	MX_TIM2_Init();
 80012b2:	f000 f9cd 	bl	8001650 <MX_TIM2_Init>
	MX_TIM3_Init();
 80012b6:	f000 fa25 	bl	8001704 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //initialize PWM
 80012ba:	2100      	movs	r1, #0
 80012bc:	4888      	ldr	r0, [pc, #544]	; (80014e0 <main+0x244>)
 80012be:	f003 fb05 	bl	80048cc <HAL_TIM_PWM_Start>
	//HAL_TIM_Base_Start_IT(&htim3);

	int initBMP180 = bmpBegin(1, &hi2c1);
 80012c2:	4988      	ldr	r1, [pc, #544]	; (80014e4 <main+0x248>)
 80012c4:	2001      	movs	r0, #1
 80012c6:	f7ff fd83 	bl	8000dd0 <bmpBegin>
 80012ca:	4603      	mov	r3, r0
 80012cc:	607b      	str	r3, [r7, #4]

	if (initBMP180 == 1) {
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d138      	bne.n	8001346 <main+0xaa>
		printf("successfully initialized BMP180\n");
 80012d4:	4884      	ldr	r0, [pc, #528]	; (80014e8 <main+0x24c>)
 80012d6:	f005 f941 	bl	800655c <puts>
		HAL_Delay(20);
 80012da:	2014      	movs	r0, #20
 80012dc:	f000 ff86 	bl	80021ec <HAL_Delay>
		initializeAltitudeArray(getRawAltitude());
 80012e0:	f000 fb4a 	bl	8001978 <getRawAltitude>
 80012e4:	eeb0 7a40 	vmov.f32	s14, s0
 80012e8:	eef0 7a60 	vmov.f32	s15, s1
 80012ec:	eeb0 0a47 	vmov.f32	s0, s14
 80012f0:	eef0 0a67 	vmov.f32	s1, s15
 80012f4:	f000 fb20 	bl	8001938 <initializeAltitudeArray>
		SEALEVEL_ALTITUDE = getFilteredAltitude(getRawAltitude());
 80012f8:	f000 fb3e 	bl	8001978 <getRawAltitude>
 80012fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001300:	eef0 7a60 	vmov.f32	s15, s1
 8001304:	eeb0 0a47 	vmov.f32	s0, s14
 8001308:	eef0 0a67 	vmov.f32	s1, s15
 800130c:	f000 fb68 	bl	80019e0 <getFilteredAltitude>
 8001310:	eeb0 7a40 	vmov.f32	s14, s0
 8001314:	eef0 7a60 	vmov.f32	s15, s1
 8001318:	4b74      	ldr	r3, [pc, #464]	; (80014ec <main+0x250>)
 800131a:	ed83 7b00 	vstr	d7, [r3]
		initializeAltitudeArray(getRawAltitude() - SEALEVEL_ALTITUDE);
 800131e:	f000 fb2b 	bl	8001978 <getRawAltitude>
 8001322:	ec51 0b10 	vmov	r0, r1, d0
 8001326:	4b71      	ldr	r3, [pc, #452]	; (80014ec <main+0x250>)
 8001328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132c:	f7fe ffac 	bl	8000288 <__aeabi_dsub>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	ec43 2b17 	vmov	d7, r2, r3
 8001338:	eeb0 0a47 	vmov.f32	s0, s14
 800133c:	eef0 0a67 	vmov.f32	s1, s15
 8001340:	f000 fafa 	bl	8001938 <initializeAltitudeArray>
 8001344:	e002      	b.n	800134c <main+0xb0>

	} else {
		printf("initializing BMP180 failed\n");
 8001346:	486a      	ldr	r0, [pc, #424]	; (80014f0 <main+0x254>)
 8001348:	f005 f908 	bl	800655c <puts>
	}

	//int initBMX = bmxBegin(&hi2c1);

	fpState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 800134c:	2110      	movs	r1, #16
 800134e:	4869      	ldr	r0, [pc, #420]	; (80014f4 <main+0x258>)
 8001350:	f001 f9c8 	bl	80026e4 <HAL_GPIO_ReadPin>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	4b67      	ldr	r3, [pc, #412]	; (80014f8 <main+0x25c>)
 800135a:	601a      	str	r2, [r3, #0]
	initializeFpStateArray(fpState);
 800135c:	4b66      	ldr	r3, [pc, #408]	; (80014f8 <main+0x25c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f000 facd 	bl	8001900 <initializeFpStateArray>
	servoWrite(closeAngle);
 8001366:	2350      	movs	r3, #80	; 0x50
 8001368:	4618      	mov	r0, r3
 800136a:	f000 fc71 	bl	8001c50 <servoWrite>
		/* USER CODE BEGIN 3 */
		//servoTest(85, 60, 10);
		//servoWrite(85);
		//HAL_Delay(100000);
		//update altitude
		if (initBMP180) {
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d040      	beq.n	80013f6 <main+0x15a>
			altitude = getRawAltitude() - SEALEVEL_ALTITUDE;
 8001374:	f000 fb00 	bl	8001978 <getRawAltitude>
 8001378:	ec51 0b10 	vmov	r0, r1, d0
 800137c:	4b5b      	ldr	r3, [pc, #364]	; (80014ec <main+0x250>)
 800137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001382:	f7fe ff81 	bl	8000288 <__aeabi_dsub>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	495c      	ldr	r1, [pc, #368]	; (80014fc <main+0x260>)
 800138c:	e9c1 2300 	strd	r2, r3, [r1]
			filteredAltitude = getFilteredAltitude(altitude);
 8001390:	4b5a      	ldr	r3, [pc, #360]	; (80014fc <main+0x260>)
 8001392:	ed93 7b00 	vldr	d7, [r3]
 8001396:	eeb0 0a47 	vmov.f32	s0, s14
 800139a:	eef0 0a67 	vmov.f32	s1, s15
 800139e:	f000 fb1f 	bl	80019e0 <getFilteredAltitude>
 80013a2:	eeb0 7a40 	vmov.f32	s14, s0
 80013a6:	eef0 7a60 	vmov.f32	s15, s1
 80013aa:	4b55      	ldr	r3, [pc, #340]	; (8001500 <main+0x264>)
 80013ac:	ed83 7b00 	vstr	d7, [r3]

			if (filteredAltitude > maxAltitude) {
 80013b0:	4b53      	ldr	r3, [pc, #332]	; (8001500 <main+0x264>)
 80013b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013b6:	4b53      	ldr	r3, [pc, #332]	; (8001504 <main+0x268>)
 80013b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013bc:	f7ff fbac 	bl	8000b18 <__aeabi_dcmpgt>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d005      	beq.n	80013d2 <main+0x136>
				maxAltitude = filteredAltitude;
 80013c6:	4b4e      	ldr	r3, [pc, #312]	; (8001500 <main+0x264>)
 80013c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013cc:	494d      	ldr	r1, [pc, #308]	; (8001504 <main+0x268>)
 80013ce:	e9c1 2300 	strd	r2, r3, [r1]
			}

			printf("rawAltiude= %f, fileteredAltitude = %f, maxAltitude = %f\n",
 80013d2:	4b4a      	ldr	r3, [pc, #296]	; (80014fc <main+0x260>)
 80013d4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80013d8:	4b49      	ldr	r3, [pc, #292]	; (8001500 <main+0x264>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	4949      	ldr	r1, [pc, #292]	; (8001504 <main+0x268>)
 80013e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80013e8:	e9cd 2300 	strd	r2, r3, [sp]
 80013ec:	4622      	mov	r2, r4
 80013ee:	462b      	mov	r3, r5
 80013f0:	4845      	ldr	r0, [pc, #276]	; (8001508 <main+0x26c>)
 80013f2:	f005 f82d 	bl	8006450 <iprintf>
		 printf("mag = %f, %f, %f\n", mag[0], mag[1], mag[2]);
		 }
		 */

		//update Flight Pin Value
		fpState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 80013f6:	2110      	movs	r1, #16
 80013f8:	483e      	ldr	r0, [pc, #248]	; (80014f4 <main+0x258>)
 80013fa:	f001 f973 	bl	80026e4 <HAL_GPIO_ReadPin>
 80013fe:	4603      	mov	r3, r0
 8001400:	461a      	mov	r2, r3
 8001402:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <main+0x25c>)
 8001404:	601a      	str	r2, [r3, #0]
		//printf("mode = %d, FlightPin = %d\n", mode, fpState);

		//update LED state
		indicateMode(mode);
 8001406:	4b41      	ldr	r3, [pc, #260]	; (800150c <main+0x270>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f000 fc46 	bl	8001c9c <indicateMode>

		if (mode != 0) {
 8001410:	4b3e      	ldr	r3, [pc, #248]	; (800150c <main+0x270>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00e      	beq.n	8001436 <main+0x19a>
			if (!isLaunched(fpState)) {
 8001418:	4b37      	ldr	r3, [pc, #220]	; (80014f8 <main+0x25c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fa25 	bl	800186c <isLaunched>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d106      	bne.n	8001436 <main+0x19a>
				mode = 0;
 8001428:	4b38      	ldr	r3, [pc, #224]	; (800150c <main+0x270>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
				servoWrite(closeAngle);
 800142e:	2350      	movs	r3, #80	; 0x50
 8001430:	4618      	mov	r0, r3
 8001432:	f000 fc0d 	bl	8001c50 <servoWrite>
			}
		}

		switch (mode) {
 8001436:	4b35      	ldr	r3, [pc, #212]	; (800150c <main+0x270>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d049      	beq.n	80014d2 <main+0x236>
 800143e:	2b02      	cmp	r3, #2
 8001440:	dc95      	bgt.n	800136e <main+0xd2>
 8001442:	2b00      	cmp	r3, #0
 8001444:	d002      	beq.n	800144c <main+0x1b0>
 8001446:	2b01      	cmp	r3, #1
 8001448:	d01a      	beq.n	8001480 <main+0x1e4>
 800144a:	e047      	b.n	80014dc <main+0x240>
		//mode0: standby, mode1:launched, mode2: paraOpen, mode3: lowPower
		case 0:
			if (isLaunched(fpState)) {
 800144c:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <main+0x25c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f000 fa0b 	bl	800186c <isLaunched>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d03c      	beq.n	80014d6 <main+0x23a>
				HAL_TIM_Base_Start_IT(&htim3);
 800145c:	482c      	ldr	r0, [pc, #176]	; (8001510 <main+0x274>)
 800145e:	f003 f981 	bl	8004764 <HAL_TIM_Base_Start_IT>
				startTime = HAL_GetTick();
 8001462:	f000 feb7 	bl	80021d4 <HAL_GetTick>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <main+0x278>)
 800146c:	601a      	str	r2, [r3, #0]
				printf("launched\n");
 800146e:	482a      	ldr	r0, [pc, #168]	; (8001518 <main+0x27c>)
 8001470:	f005 f874 	bl	800655c <puts>
				mode++;
 8001474:	4b25      	ldr	r3, [pc, #148]	; (800150c <main+0x270>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	4a24      	ldr	r2, [pc, #144]	; (800150c <main+0x270>)
 800147c:	6013      	str	r3, [r2, #0]
			}
			break;
 800147e:	e02a      	b.n	80014d6 <main+0x23a>
		case 1:
			timeFromLaunch = HAL_GetTick() - startTime;
 8001480:	f000 fea8 	bl	80021d4 <HAL_GetTick>
 8001484:	4603      	mov	r3, r0
 8001486:	4a23      	ldr	r2, [pc, #140]	; (8001514 <main+0x278>)
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	1a9b      	subs	r3, r3, r2
 800148c:	461a      	mov	r2, r3
 800148e:	4b23      	ldr	r3, [pc, #140]	; (800151c <main+0x280>)
 8001490:	601a      	str	r2, [r3, #0]
			//printf("timeFromLaunch = %d\n", timeFromLaunch);

			if (isTopReached(timeFromLaunch, altitude, maxAltitude)) {
 8001492:	4b22      	ldr	r3, [pc, #136]	; (800151c <main+0x280>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a19      	ldr	r2, [pc, #100]	; (80014fc <main+0x260>)
 8001498:	ed92 7b00 	vldr	d7, [r2]
 800149c:	4a19      	ldr	r2, [pc, #100]	; (8001504 <main+0x268>)
 800149e:	ed92 6b00 	vldr	d6, [r2]
 80014a2:	eeb0 1a46 	vmov.f32	s2, s12
 80014a6:	eef0 1a66 	vmov.f32	s3, s13
 80014aa:	eeb0 0a47 	vmov.f32	s0, s14
 80014ae:	eef0 0a67 	vmov.f32	s1, s15
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 fa0e 	bl	80018d4 <isTopReached>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00d      	beq.n	80014da <main+0x23e>
				servoWrite(openAngle);
 80014be:	233c      	movs	r3, #60	; 0x3c
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 fbc5 	bl	8001c50 <servoWrite>
				mode++;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <main+0x270>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	3301      	adds	r3, #1
 80014cc:	4a0f      	ldr	r2, [pc, #60]	; (800150c <main+0x270>)
 80014ce:	6013      	str	r3, [r2, #0]
			}
			break;
 80014d0:	e003      	b.n	80014da <main+0x23e>
		case 2:
			if (timeFromLaunch > 10 * 60) {
				//break;
			}
			break;
 80014d2:	bf00      	nop
 80014d4:	e74b      	b.n	800136e <main+0xd2>
			break;
 80014d6:	bf00      	nop
 80014d8:	e749      	b.n	800136e <main+0xd2>
			break;
 80014da:	bf00      	nop
		if (initBMP180) {
 80014dc:	e747      	b.n	800136e <main+0xd2>
 80014de:	bf00      	nop
 80014e0:	20000558 	.word	0x20000558
 80014e4:	20000260 	.word	0x20000260
 80014e8:	0800b028 	.word	0x0800b028
 80014ec:	20000220 	.word	0x20000220
 80014f0:	0800b048 	.word	0x0800b048
 80014f4:	48000400 	.word	0x48000400
 80014f8:	20000210 	.word	0x20000210
 80014fc:	20000228 	.word	0x20000228
 8001500:	20000230 	.word	0x20000230
 8001504:	20000000 	.word	0x20000000
 8001508:	0800b064 	.word	0x0800b064
 800150c:	2000020c 	.word	0x2000020c
 8001510:	200002b4 	.word	0x200002b4
 8001514:	20000214 	.word	0x20000214
 8001518:	0800b0a0 	.word	0x0800b0a0
 800151c:	20000218 	.word	0x20000218

08001520 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b096      	sub	sp, #88	; 0x58
 8001524:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001526:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800152a:	2228      	movs	r2, #40	; 0x28
 800152c:	2100      	movs	r1, #0
 800152e:	4618      	mov	r0, r3
 8001530:	f004 f90c 	bl	800574c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]
 8001552:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001554:	2302      	movs	r3, #2
 8001556:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001558:	2301      	movs	r3, #1
 800155a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800155c:	2310      	movs	r3, #16
 800155e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001560:	2302      	movs	r3, #2
 8001562:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001564:	2300      	movs	r3, #0
 8001566:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL11;
 8001568:	f44f 1310 	mov.w	r3, #2359296	; 0x240000
 800156c:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800156e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001572:	4618      	mov	r0, r3
 8001574:	f001 fe8a 	bl	800328c <HAL_RCC_OscConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0x62>
		Error_Handler();
 800157e:	f000 fbc1 	bl	8001d04 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001582:	230f      	movs	r3, #15
 8001584:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001586:	2302      	movs	r3, #2
 8001588:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800158e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001598:	f107 031c 	add.w	r3, r7, #28
 800159c:	2101      	movs	r1, #1
 800159e:	4618      	mov	r0, r3
 80015a0:	f002 fd7c 	bl	800409c <HAL_RCC_ClockConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <SystemClock_Config+0x8e>
		Error_Handler();
 80015aa:	f000 fbab 	bl	8001d04 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015ae:	2320      	movs	r3, #32
 80015b0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	4618      	mov	r0, r3
 80015ba:	f002 ff55 	bl	8004468 <HAL_RCCEx_PeriphCLKConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <SystemClock_Config+0xa8>
		Error_Handler();
 80015c4:	f000 fb9e 	bl	8001d04 <Error_Handler>
	}
}
 80015c8:	bf00      	nop
 80015ca:	3758      	adds	r7, #88	; 0x58
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <MX_I2C1_Init+0x74>)
 80015d6:	4a1c      	ldr	r2, [pc, #112]	; (8001648 <MX_I2C1_Init+0x78>)
 80015d8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 80015da:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <MX_I2C1_Init+0x74>)
 80015dc:	4a1b      	ldr	r2, [pc, #108]	; (800164c <MX_I2C1_Init+0x7c>)
 80015de:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <MX_I2C1_Init+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015e6:	4b17      	ldr	r3, [pc, #92]	; (8001644 <MX_I2C1_Init+0x74>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015ec:	4b15      	ldr	r3, [pc, #84]	; (8001644 <MX_I2C1_Init+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_I2C1_Init+0x74>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_I2C1_Init+0x74>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_I2C1_Init+0x74>)
 8001600:	2200      	movs	r2, #0
 8001602:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_I2C1_Init+0x74>)
 8001606:	2200      	movs	r2, #0
 8001608:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800160a:	480e      	ldr	r0, [pc, #56]	; (8001644 <MX_I2C1_Init+0x74>)
 800160c:	f001 f89a 	bl	8002744 <HAL_I2C_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_I2C1_Init+0x4a>
		Error_Handler();
 8001616:	f000 fb75 	bl	8001d04 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800161a:	2100      	movs	r1, #0
 800161c:	4809      	ldr	r0, [pc, #36]	; (8001644 <MX_I2C1_Init+0x74>)
 800161e:	f001 fd9d 	bl	800315c <HAL_I2CEx_ConfigAnalogFilter>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001628:	f000 fb6c 	bl	8001d04 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 800162c:	2100      	movs	r1, #0
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_I2C1_Init+0x74>)
 8001630:	f001 fddf 	bl	80031f2 <HAL_I2CEx_ConfigDigitalFilter>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_I2C1_Init+0x6e>
		Error_Handler();
 800163a:	f000 fb63 	bl	8001d04 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000260 	.word	0x20000260
 8001648:	40005400 	.word	0x40005400
 800164c:	2000090e 	.word	0x2000090e

08001650 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001662:	463b      	mov	r3, r7
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
 8001670:	615a      	str	r2, [r3, #20]
 8001672:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <MX_TIM2_Init+0xb0>)
 8001676:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800167a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 840;
 800167c:	4b20      	ldr	r3, [pc, #128]	; (8001700 <MX_TIM2_Init+0xb0>)
 800167e:	f44f 7252 	mov.w	r2, #840	; 0x348
 8001682:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <MX_TIM2_Init+0xb0>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 800168a:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <MX_TIM2_Init+0xb0>)
 800168c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001690:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001692:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <MX_TIM2_Init+0xb0>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <MX_TIM2_Init+0xb0>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800169e:	4818      	ldr	r0, [pc, #96]	; (8001700 <MX_TIM2_Init+0xb0>)
 80016a0:	f003 f8bc 	bl	800481c <HAL_TIM_PWM_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM2_Init+0x5e>
		Error_Handler();
 80016aa:	f000 fb2b 	bl	8001d04 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	4810      	ldr	r0, [pc, #64]	; (8001700 <MX_TIM2_Init+0xb0>)
 80016be:	f003 ffad 	bl	800561c <HAL_TIMEx_MasterConfigSynchronization>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM2_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80016c8:	f000 fb1c 	bl	8001d04 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016cc:	2360      	movs	r3, #96	; 0x60
 80016ce:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80016dc:	463b      	mov	r3, r7
 80016de:	2200      	movs	r2, #0
 80016e0:	4619      	mov	r1, r3
 80016e2:	4807      	ldr	r0, [pc, #28]	; (8001700 <MX_TIM2_Init+0xb0>)
 80016e4:	f003 f9de 	bl	8004aa4 <HAL_TIM_PWM_ConfigChannel>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM2_Init+0xa2>
			!= HAL_OK) {
		Error_Handler();
 80016ee:	f000 fb09 	bl	8001d04 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80016f2:	4803      	ldr	r0, [pc, #12]	; (8001700 <MX_TIM2_Init+0xb0>)
 80016f4:	f000 fbd0 	bl	8001e98 <HAL_TIM_MspPostInit>

}
 80016f8:	bf00      	nop
 80016fa:	3728      	adds	r7, #40	; 0x28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000558 	.word	0x20000558

08001704 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001722:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <MX_TIM3_Init+0x94>)
 8001724:	4a1d      	ldr	r2, [pc, #116]	; (800179c <MX_TIM3_Init+0x98>)
 8001726:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001728:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <MX_TIM3_Init+0x94>)
 800172a:	2200      	movs	r2, #0
 800172c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172e:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <MX_TIM3_Init+0x94>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <MX_TIM3_Init+0x94>)
 8001736:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800173a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <MX_TIM3_Init+0x94>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <MX_TIM3_Init+0x94>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001748:	4813      	ldr	r0, [pc, #76]	; (8001798 <MX_TIM3_Init+0x94>)
 800174a:	f002 ffb3 	bl	80046b4 <HAL_TIM_Base_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM3_Init+0x54>
		Error_Handler();
 8001754:	f000 fad6 	bl	8001d04 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800175c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800175e:	f107 0310 	add.w	r3, r7, #16
 8001762:	4619      	mov	r1, r3
 8001764:	480c      	ldr	r0, [pc, #48]	; (8001798 <MX_TIM3_Init+0x94>)
 8001766:	f003 fab1 	bl	8004ccc <HAL_TIM_ConfigClockSource>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM3_Init+0x70>
		Error_Handler();
 8001770:	f000 fac8 	bl	8001d04 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001774:	2300      	movs	r3, #0
 8001776:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	4619      	mov	r1, r3
 8001780:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_TIM3_Init+0x94>)
 8001782:	f003 ff4b 	bl	800561c <HAL_TIMEx_MasterConfigSynchronization>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 800178c:	f000 faba 	bl	8001d04 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	3720      	adds	r7, #32
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200002b4 	.word	0x200002b4
 800179c:	40000400 	.word	0x40000400

080017a0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017a6:	f107 030c 	add.w	r3, r7, #12
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	4b1d      	ldr	r3, [pc, #116]	; (800182c <MX_GPIO_Init+0x8c>)
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	4a1c      	ldr	r2, [pc, #112]	; (800182c <MX_GPIO_Init+0x8c>)
 80017bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c0:	6153      	str	r3, [r2, #20]
 80017c2:	4b1a      	ldr	r3, [pc, #104]	; (800182c <MX_GPIO_Init+0x8c>)
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017ce:	4b17      	ldr	r3, [pc, #92]	; (800182c <MX_GPIO_Init+0x8c>)
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	4a16      	ldr	r2, [pc, #88]	; (800182c <MX_GPIO_Init+0x8c>)
 80017d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d8:	6153      	str	r3, [r2, #20]
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <MX_GPIO_Init+0x8c>)
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2103      	movs	r1, #3
 80017ea:	4811      	ldr	r0, [pc, #68]	; (8001830 <MX_GPIO_Init+0x90>)
 80017ec:	f000 ff92 	bl	8002714 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB0 PB1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80017f0:	2303      	movs	r3, #3
 80017f2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017f8:	2302      	movs	r3, #2
 80017fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	4619      	mov	r1, r3
 8001806:	480a      	ldr	r0, [pc, #40]	; (8001830 <MX_GPIO_Init+0x90>)
 8001808:	f000 fdfa 	bl	8002400 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800180c:	2310      	movs	r3, #16
 800180e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001814:	2301      	movs	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	4619      	mov	r1, r3
 800181e:	4804      	ldr	r0, [pc, #16]	; (8001830 <MX_GPIO_Init+0x90>)
 8001820:	f000 fdee 	bl	8002400 <HAL_GPIO_Init>

}
 8001824:	bf00      	nop
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40021000 	.word	0x40021000
 8001830:	48000400 	.word	0x48000400

08001834 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	e009      	b.n	800185a <_write+0x26>
		ITM_SendChar(*ptr++);
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	60ba      	str	r2, [r7, #8]
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fcfc 	bl	800124c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	3301      	adds	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	429a      	cmp	r2, r3
 8001860:	dbf1      	blt.n	8001846 <_write+0x12>
	}
	return len;
 8001862:	687b      	ldr	r3, [r7, #4]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <isLaunched>:

int isLaunched(int FlighPinState) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

	fpStateArray[0] = FlighPinState;
 8001874:	4a15      	ldr	r2, [pc, #84]	; (80018cc <isLaunched+0x60>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6013      	str	r3, [r2, #0]

	for (int i = (SAMPLENUM - 1); i > 0; i--) {
 800187a:	2331      	movs	r3, #49	; 0x31
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	e00b      	b.n	8001898 <isLaunched+0x2c>
		fpStateArray[i] = fpStateArray[i - 1];
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3b01      	subs	r3, #1
 8001884:	4a11      	ldr	r2, [pc, #68]	; (80018cc <isLaunched+0x60>)
 8001886:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800188a:	4910      	ldr	r1, [pc, #64]	; (80018cc <isLaunched+0x60>)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = (SAMPLENUM - 1); i > 0; i--) {
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	3b01      	subs	r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	dcf0      	bgt.n	8001880 <isLaunched+0x14>
	}

	if (calcMedian(fpStateArray, SAMPLENUM, 0) == 1) { //launched
 800189e:	2200      	movs	r2, #0
 80018a0:	2132      	movs	r1, #50	; 0x32
 80018a2:	480a      	ldr	r0, [pc, #40]	; (80018cc <isLaunched+0x60>)
 80018a4:	f000 f8d0 	bl	8001a48 <calcMedian>
 80018a8:	ec51 0b10 	vmov	r0, r1, d0
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <isLaunched+0x64>)
 80018b2:	f7ff f909 	bl	8000ac8 <__aeabi_dcmpeq>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <isLaunched+0x54>
		return 1;
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <isLaunched+0x56>
	} else {
		return 0;
 80018c0:	2300      	movs	r3, #0
	}

}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000490 	.word	0x20000490
 80018d0:	3ff00000 	.word	0x3ff00000

080018d4 <isTopReached>:

int isTopReached(int time, double currentHeight, double maxHeight) {
 80018d4:	b480      	push	{r7}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6178      	str	r0, [r7, #20]
 80018dc:	ed87 0b02 	vstr	d0, [r7, #8]
 80018e0:	ed87 1b00 	vstr	d1, [r7]
	if (time > topReachTime) {
 80018e4:	f249 420c 	movw	r2, #37900	; 0x940c
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	4293      	cmp	r3, r2
 80018ec:	dd01      	ble.n	80018f2 <isTopReached+0x1e>
		return 1;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e000      	b.n	80018f4 <isTopReached+0x20>
		//}else if (maxHeight - currentHeight > refHeightDelta
		//&& time > engineBurnTime) {
		//return 1;
	} else {
		return 0;
 80018f2:	2300      	movs	r3, #0
	}
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	371c      	adds	r7, #28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <initializeFpStateArray>:

void initializeFpStateArray(int FlightPinState) {
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < SAMPLENUM; i++) {
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	e007      	b.n	800191e <initializeFpStateArray+0x1e>
		fpStateArray[i] = FlightPinState;
 800190e:	4909      	ldr	r1, [pc, #36]	; (8001934 <initializeFpStateArray+0x34>)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < SAMPLENUM; i++) {
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	3301      	adds	r3, #1
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2b31      	cmp	r3, #49	; 0x31
 8001922:	ddf4      	ble.n	800190e <initializeFpStateArray+0xe>
	}
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000490 	.word	0x20000490

08001938 <initializeAltitudeArray>:

void initializeAltitudeArray(double _altitude) {
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	ed87 0b00 	vstr	d0, [r7]
	for (int i = 0; i < SAMPLENUM; i++) {
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	e00a      	b.n	800195e <initializeAltitudeArray+0x26>
		altitudeArray[i] = _altitude;
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <initializeAltitudeArray+0x3c>)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	18d1      	adds	r1, r2, r3
 8001950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001954:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < SAMPLENUM; i++) {
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	3301      	adds	r3, #1
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b31      	cmp	r3, #49	; 0x31
 8001962:	ddf1      	ble.n	8001948 <initializeAltitudeArray+0x10>
	}
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000300 	.word	0x20000300

08001978 <getRawAltitude>:

double getRawAltitude() {
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
	double pressure = readBMPPressure();
 800197e:	f7ff fb57 	bl	8001030 <readBMPPressure>
 8001982:	4603      	mov	r3, r0
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fdcd 	bl	8000524 <__aeabi_i2d>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double temperature = readBMPTemperature();
 8001992:	f7ff fb29 	bl	8000fe8 <readBMPTemperature>
 8001996:	ee10 3a10 	vmov	r3, s0
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fdd4 	bl	8000548 <__aeabi_f2d>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double _altitude = calculateAltitude(pressure, temperature);
 80019a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019ac:	f7ff f8d4 	bl	8000b58 <__aeabi_d2iz>
 80019b0:	4604      	mov	r4, r0
 80019b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019b6:	f7ff f917 	bl	8000be8 <__aeabi_d2f>
 80019ba:	4603      	mov	r3, r0
 80019bc:	ee00 3a10 	vmov	s0, r3
 80019c0:	4620      	mov	r0, r4
 80019c2:	f7ff fbe5 	bl	8001190 <calculateAltitude>
 80019c6:	ed87 0b00 	vstr	d0, [r7]

	return _altitude;
 80019ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019ce:	ec43 2b17 	vmov	d7, r2, r3
}
 80019d2:	eeb0 0a47 	vmov.f32	s0, s14
 80019d6:	eef0 0a67 	vmov.f32	s1, s15
 80019da:	371c      	adds	r7, #28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd90      	pop	{r4, r7, pc}

080019e0 <getFilteredAltitude>:

double getFilteredAltitude(double rawAltitude) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	ed87 0b00 	vstr	d0, [r7]
	altitudeArray[0] = rawAltitude;
 80019ea:	4916      	ldr	r1, [pc, #88]	; (8001a44 <getFilteredAltitude+0x64>)
 80019ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019f0:	e9c1 2300 	strd	r2, r3, [r1]

	for (int i = (SAMPLENUM - 1); i > 0; i--) {
 80019f4:	2331      	movs	r3, #49	; 0x31
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	e00f      	b.n	8001a1a <getFilteredAltitude+0x3a>
		altitudeArray[i] = altitudeArray[i - 1];
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	4a11      	ldr	r2, [pc, #68]	; (8001a44 <getFilteredAltitude+0x64>)
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4413      	add	r3, r2
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	480e      	ldr	r0, [pc, #56]	; (8001a44 <getFilteredAltitude+0x64>)
 8001a0a:	6979      	ldr	r1, [r7, #20]
 8001a0c:	00c9      	lsls	r1, r1, #3
 8001a0e:	4401      	add	r1, r0
 8001a10:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = (SAMPLENUM - 1); i > 0; i--) {
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	dcec      	bgt.n	80019fa <getFilteredAltitude+0x1a>
	}

	double filteredAltitude = calcMedian(altitudeArray, SAMPLENUM, 1);
 8001a20:	2201      	movs	r2, #1
 8001a22:	2132      	movs	r1, #50	; 0x32
 8001a24:	4807      	ldr	r0, [pc, #28]	; (8001a44 <getFilteredAltitude+0x64>)
 8001a26:	f000 f80f 	bl	8001a48 <calcMedian>
 8001a2a:	ed87 0b02 	vstr	d0, [r7, #8]

	return filteredAltitude;
 8001a2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a32:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a36:	eeb0 0a47 	vmov.f32	s0, s14
 8001a3a:	eef0 0a67 	vmov.f32	s1, s15
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000300 	.word	0x20000300

08001a48 <calcMedian>:

double calcMedian(void *array, int n, int type) {
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b08d      	sub	sp, #52	; 0x34
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
	if (type == 0) { // If data type is int
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d16b      	bne.n	8001b32 <calcMedian+0xea>
		int *intArray = (int*) array;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	617b      	str	r3, [r7, #20]

		for (int i = 0; i < n; i++) {
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a62:	e02f      	b.n	8001ac4 <calcMedian+0x7c>
			for (int j = i + 1; j < n; j++) {
 8001a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a66:	3301      	adds	r3, #1
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a6a:	e024      	b.n	8001ab6 <calcMedian+0x6e>
				if (intArray[i] > intArray[j]) {
 8001a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	4413      	add	r3, r2
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	6979      	ldr	r1, [r7, #20]
 8001a7c:	440b      	add	r3, r1
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	dd15      	ble.n	8001ab0 <calcMedian+0x68>
					int changer = intArray[j];
 8001a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	613b      	str	r3, [r7, #16]
					intArray[j] = intArray[i];
 8001a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	441a      	add	r2, r3
 8001a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	6979      	ldr	r1, [r7, #20]
 8001a9e:	440b      	add	r3, r1
 8001aa0:	6812      	ldr	r2, [r2, #0]
 8001aa2:	601a      	str	r2, [r3, #0]
					intArray[i] = changer;
 8001aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	4413      	add	r3, r2
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	601a      	str	r2, [r3, #0]
			for (int j = i + 1; j < n; j++) {
 8001ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	dbd6      	blt.n	8001a6c <calcMedian+0x24>
		for (int i = 0; i < n; i++) {
 8001abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	dbcb      	blt.n	8001a64 <calcMedian+0x1c>
				}
			}
		}

		if (n % 2 == 0) {
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d11f      	bne.n	8001b16 <calcMedian+0xce>
			return (double) (intArray[n / 2] + intArray[n / 2 - 1]) / 2;
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	0fda      	lsrs	r2, r3, #31
 8001ada:	4413      	add	r3, r2
 8001adc:	105b      	asrs	r3, r3, #1
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	0fd9      	lsrs	r1, r3, #31
 8001aea:	440b      	add	r3, r1
 8001aec:	105b      	asrs	r3, r3, #1
 8001aee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001af2:	3b01      	subs	r3, #1
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	6979      	ldr	r1, [r7, #20]
 8001af8:	440b      	add	r3, r1
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4413      	add	r3, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fd10 	bl	8000524 <__aeabi_i2d>
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b0c:	f7fe fe9e 	bl	800084c <__aeabi_ddiv>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	e092      	b.n	8001c3c <calcMedian+0x1f4>
		} else {
			return (double) intArray[n / 2];
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	0fda      	lsrs	r2, r3, #31
 8001b1a:	4413      	add	r3, r2
 8001b1c:	105b      	asrs	r3, r3, #1
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	4413      	add	r3, r2
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fcfc 	bl	8000524 <__aeabi_i2d>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	e084      	b.n	8001c3c <calcMedian+0x1f4>
		}
	} else if (type == 1) { // If data type is float
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d17d      	bne.n	8001c34 <calcMedian+0x1ec>
		double *doubleArray = (double*) array;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	61fb      	str	r3, [r7, #28]

		for (int i = 0; i < n; i++) {
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b40:	e041      	b.n	8001bc6 <calcMedian+0x17e>
			for (int j = i + 1; j < n; j++) {
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	3301      	adds	r3, #1
 8001b46:	623b      	str	r3, [r7, #32]
 8001b48:	e036      	b.n	8001bb8 <calcMedian+0x170>
				if (doubleArray[i] > doubleArray[j]) {
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	4413      	add	r3, r2
 8001b52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b62:	f7fe ffd9 	bl	8000b18 <__aeabi_dcmpgt>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d022      	beq.n	8001bb2 <calcMedian+0x16a>
					float changer = doubleArray[j];
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	69fa      	ldr	r2, [r7, #28]
 8001b72:	4413      	add	r3, r2
 8001b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7ff f834 	bl	8000be8 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	61bb      	str	r3, [r7, #24]
					doubleArray[j] = doubleArray[i];
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	69fa      	ldr	r2, [r7, #28]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	6a3a      	ldr	r2, [r7, #32]
 8001b8e:	00d2      	lsls	r2, r2, #3
 8001b90:	69f9      	ldr	r1, [r7, #28]
 8001b92:	4411      	add	r1, r2
 8001b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b98:	e9c1 2300 	strd	r2, r3, [r1]
					doubleArray[i] = changer;
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	69fa      	ldr	r2, [r7, #28]
 8001ba2:	18d4      	adds	r4, r2, r3
 8001ba4:	69b8      	ldr	r0, [r7, #24]
 8001ba6:	f7fe fccf 	bl	8000548 <__aeabi_f2d>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	e9c4 2300 	strd	r2, r3, [r4]
			for (int j = i + 1; j < n; j++) {
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	623b      	str	r3, [r7, #32]
 8001bb8:	6a3a      	ldr	r2, [r7, #32]
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	dbc4      	blt.n	8001b4a <calcMedian+0x102>
		for (int i = 0; i < n; i++) {
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	dbb9      	blt.n	8001b42 <calcMedian+0xfa>
				}
			}
		}

		if (n % 2 == 0) {
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d123      	bne.n	8001c20 <calcMedian+0x1d8>
			return (doubleArray[n / 2] + doubleArray[n / 2 - 1]) / 2;
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	0fda      	lsrs	r2, r3, #31
 8001bdc:	4413      	add	r3, r2
 8001bde:	105b      	asrs	r3, r3, #1
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	4413      	add	r3, r2
 8001be6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	0fda      	lsrs	r2, r3, #31
 8001bee:	4413      	add	r3, r2
 8001bf0:	105b      	asrs	r3, r3, #1
 8001bf2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	69fa      	ldr	r2, [r7, #28]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c02:	f7fe fb43 	bl	800028c <__adddf3>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c16:	f7fe fe19 	bl	800084c <__aeabi_ddiv>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	e00d      	b.n	8001c3c <calcMedian+0x1f4>
		} else {
			return doubleArray[n / 2];
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	0fda      	lsrs	r2, r3, #31
 8001c24:	4413      	add	r3, r2
 8001c26:	105b      	asrs	r3, r3, #1
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	69fa      	ldr	r2, [r7, #28]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c32:	e003      	b.n	8001c3c <calcMedian+0x1f4>
		}
	} else {
		// Error or unknown data type
		return 0.0;
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	ec43 2b17 	vmov	d7, r2, r3
	}
}
 8001c40:	eeb0 0a47 	vmov.f32	s0, s14
 8001c44:	eef0 0a67 	vmov.f32	s1, s15
 8001c48:	3734      	adds	r7, #52	; 0x34
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd90      	pop	{r4, r7, pc}
	...

08001c50 <servoWrite>:

void servoWrite(int angle) {
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	// Calculate pulse value based on the angle
	int pulseValue = 25 + angle * (120 - 25) / 180;
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	015b      	lsls	r3, r3, #5
 8001c62:	1a9b      	subs	r3, r3, r2
 8001c64:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <servoWrite+0x44>)
 8001c66:	fb82 1203 	smull	r1, r2, r2, r3
 8001c6a:	441a      	add	r2, r3
 8001c6c:	11d2      	asrs	r2, r2, #7
 8001c6e:	17db      	asrs	r3, r3, #31
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	3319      	adds	r3, #25
 8001c74:	60fb      	str	r3, [r7, #12]

	// Ensure pulseValue is within valid range
	if (pulseValue > 120) {
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2b78      	cmp	r3, #120	; 0x78
 8001c7a:	dd01      	ble.n	8001c80 <servoWrite+0x30>
		pulseValue = 120;
 8001c7c:	2378      	movs	r3, #120	; 0x78
 8001c7e:	60fb      	str	r3, [r7, #12]
	}

	// Set the pulse width using TIM2 and specified channel
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulseValue);
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <servoWrite+0x48>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	b60b60b7 	.word	0xb60b60b7
 8001c98:	20000558 	.word	0x20000558

08001c9c <indicateMode>:
		HAL_Delay(2000);
		servoWrite(angleB); // 60
	}
}

void indicateMode(int _mode) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	if (_mode == 0) {
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10a      	bne.n	8001cc0 <indicateMode+0x24>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2101      	movs	r1, #1
 8001cae:	4814      	ldr	r0, [pc, #80]	; (8001d00 <indicateMode+0x64>)
 8001cb0:	f000 fd30 	bl	8002714 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2102      	movs	r1, #2
 8001cb8:	4811      	ldr	r0, [pc, #68]	; (8001d00 <indicateMode+0x64>)
 8001cba:	f000 fd2b 	bl	8002714 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
	} else if (_mode == 2) {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
	}
}
 8001cbe:	e01a      	b.n	8001cf6 <indicateMode+0x5a>
	} else if (_mode == 1) {
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d10a      	bne.n	8001cdc <indicateMode+0x40>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2101      	movs	r1, #1
 8001cca:	480d      	ldr	r0, [pc, #52]	; (8001d00 <indicateMode+0x64>)
 8001ccc:	f000 fd22 	bl	8002714 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	2102      	movs	r1, #2
 8001cd4:	480a      	ldr	r0, [pc, #40]	; (8001d00 <indicateMode+0x64>)
 8001cd6:	f000 fd1d 	bl	8002714 <HAL_GPIO_WritePin>
}
 8001cda:	e00c      	b.n	8001cf6 <indicateMode+0x5a>
	} else if (_mode == 2) {
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d109      	bne.n	8001cf6 <indicateMode+0x5a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	4806      	ldr	r0, [pc, #24]	; (8001d00 <indicateMode+0x64>)
 8001ce8:	f000 fd14 	bl	8002714 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001cec:	2201      	movs	r2, #1
 8001cee:	2102      	movs	r1, #2
 8001cf0:	4803      	ldr	r0, [pc, #12]	; (8001d00 <indicateMode+0x64>)
 8001cf2:	f000 fd0f 	bl	8002714 <HAL_GPIO_WritePin>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	48000400 	.word	0x48000400

08001d04 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d08:	b672      	cpsid	i
}
 8001d0a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d0c:	e7fe      	b.n	8001d0c <Error_Handler+0x8>
	...

08001d10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d16:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <HAL_MspInit+0x44>)
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	4a0e      	ldr	r2, [pc, #56]	; (8001d54 <HAL_MspInit+0x44>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6193      	str	r3, [r2, #24]
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <HAL_MspInit+0x44>)
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_MspInit+0x44>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	4a08      	ldr	r2, [pc, #32]	; (8001d54 <HAL_MspInit+0x44>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d38:	61d3      	str	r3, [r2, #28]
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_MspInit+0x44>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000

08001d58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a26      	ldr	r2, [pc, #152]	; (8001e10 <HAL_I2C_MspInit+0xb8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d145      	bne.n	8001e06 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <HAL_I2C_MspInit+0xbc>)
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	4a25      	ldr	r2, [pc, #148]	; (8001e14 <HAL_I2C_MspInit+0xbc>)
 8001d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d84:	6153      	str	r3, [r2, #20]
 8001d86:	4b23      	ldr	r3, [pc, #140]	; (8001e14 <HAL_I2C_MspInit+0xbc>)
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <HAL_I2C_MspInit+0xbc>)
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	4a1f      	ldr	r2, [pc, #124]	; (8001e14 <HAL_I2C_MspInit+0xbc>)
 8001d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d9c:	6153      	str	r3, [r2, #20]
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <HAL_I2C_MspInit+0xbc>)
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db0:	2312      	movs	r3, #18
 8001db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db8:	2303      	movs	r3, #3
 8001dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dca:	f000 fb19 	bl	8002400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd2:	2312      	movs	r3, #18
 8001dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dde:	2304      	movs	r3, #4
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	480b      	ldr	r0, [pc, #44]	; (8001e18 <HAL_I2C_MspInit+0xc0>)
 8001dea:	f000 fb09 	bl	8002400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <HAL_I2C_MspInit+0xbc>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	4a08      	ldr	r2, [pc, #32]	; (8001e14 <HAL_I2C_MspInit+0xbc>)
 8001df4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001df8:	61d3      	str	r3, [r2, #28]
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_I2C_MspInit+0xbc>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e06:	bf00      	nop
 8001e08:	3728      	adds	r7, #40	; 0x28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40005400 	.word	0x40005400
 8001e14:	40021000 	.word	0x40021000
 8001e18:	48000400 	.word	0x48000400

08001e1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2c:	d10b      	bne.n	8001e46 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <HAL_TIM_PWM_MspInit+0x38>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <HAL_TIM_PWM_MspInit+0x38>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	61d3      	str	r3, [r2, #28]
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_TIM_PWM_MspInit+0x38>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e46:	bf00      	nop
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000

08001e58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <HAL_TIM_Base_MspInit+0x38>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d10b      	bne.n	8001e82 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_TIM_Base_MspInit+0x3c>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	4a09      	ldr	r2, [pc, #36]	; (8001e94 <HAL_TIM_Base_MspInit+0x3c>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	61d3      	str	r3, [r2, #28]
 8001e76:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <HAL_TIM_Base_MspInit+0x3c>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40000400 	.word	0x40000400
 8001e94:	40021000 	.word	0x40021000

08001e98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb8:	d11c      	bne.n	8001ef4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	4b10      	ldr	r3, [pc, #64]	; (8001efc <HAL_TIM_MspPostInit+0x64>)
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	4a0f      	ldr	r2, [pc, #60]	; (8001efc <HAL_TIM_MspPostInit+0x64>)
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec4:	6153      	str	r3, [r2, #20]
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <HAL_TIM_MspPostInit+0x64>)
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ed2:	2320      	movs	r3, #32
 8001ed4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee6:	f107 030c 	add.w	r3, r7, #12
 8001eea:	4619      	mov	r1, r3
 8001eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef0:	f000 fa86 	bl	8002400 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ef4:	bf00      	nop
 8001ef6:	3720      	adds	r7, #32
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000

08001f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <NMI_Handler+0x4>

08001f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <HardFault_Handler+0x4>

08001f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <MemManage_Handler+0x4>

08001f12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f16:	e7fe      	b.n	8001f16 <BusFault_Handler+0x4>

08001f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <UsageFault_Handler+0x4>

08001f1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f4c:	f000 f92e 	bl	80021ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
	return 1;
 8001f58:	2301      	movs	r3, #1
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <_kill>:

int _kill(int pid, int sig)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f6e:	f003 fbc3 	bl	80056f8 <__errno>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2216      	movs	r2, #22
 8001f76:	601a      	str	r2, [r3, #0]
	return -1;
 8001f78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_exit>:

void _exit (int status)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff ffe7 	bl	8001f64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f96:	e7fe      	b.n	8001f96 <_exit+0x12>

08001f98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	e00a      	b.n	8001fc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001faa:	f3af 8000 	nop.w
 8001fae:	4601      	mov	r1, r0
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	60ba      	str	r2, [r7, #8]
 8001fb6:	b2ca      	uxtb	r2, r1
 8001fb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	dbf0      	blt.n	8001faa <_read+0x12>
	}

return len;
 8001fc8:	687b      	ldr	r3, [r7, #4]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
	return -1;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ffa:	605a      	str	r2, [r3, #4]
	return 0;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <_isatty>:

int _isatty(int file)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
	return 1;
 8002012:	2301      	movs	r3, #1
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
	return 0;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002044:	4a14      	ldr	r2, [pc, #80]	; (8002098 <_sbrk+0x5c>)
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <_sbrk+0x60>)
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <_sbrk+0x64>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d102      	bne.n	800205e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <_sbrk+0x64>)
 800205a:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <_sbrk+0x68>)
 800205c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <_sbrk+0x64>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	429a      	cmp	r2, r3
 800206a:	d207      	bcs.n	800207c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800206c:	f003 fb44 	bl	80056f8 <__errno>
 8002070:	4603      	mov	r3, r0
 8002072:	220c      	movs	r2, #12
 8002074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
 800207a:	e009      	b.n	8002090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <_sbrk+0x64>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002082:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <_sbrk+0x64>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	4a05      	ldr	r2, [pc, #20]	; (80020a0 <_sbrk+0x64>)
 800208c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800208e:	68fb      	ldr	r3, [r7, #12]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20003000 	.word	0x20003000
 800209c:	00000400 	.word	0x00000400
 80020a0:	20000238 	.word	0x20000238
 80020a4:	200005b8 	.word	0x200005b8

080020a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <SystemInit+0x20>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	4a05      	ldr	r2, [pc, #20]	; (80020c8 <SystemInit+0x20>)
 80020b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002104 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80020d0:	f7ff ffea 	bl	80020a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d4:	480c      	ldr	r0, [pc, #48]	; (8002108 <LoopForever+0x6>)
  ldr r1, =_edata
 80020d6:	490d      	ldr	r1, [pc, #52]	; (800210c <LoopForever+0xa>)
  ldr r2, =_sidata
 80020d8:	4a0d      	ldr	r2, [pc, #52]	; (8002110 <LoopForever+0xe>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020dc:	e002      	b.n	80020e4 <LoopCopyDataInit>

080020de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e2:	3304      	adds	r3, #4

080020e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e8:	d3f9      	bcc.n	80020de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ea:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020ec:	4c0a      	ldr	r4, [pc, #40]	; (8002118 <LoopForever+0x16>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f0:	e001      	b.n	80020f6 <LoopFillZerobss>

080020f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f4:	3204      	adds	r2, #4

080020f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f8:	d3fb      	bcc.n	80020f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020fa:	f003 fb03 	bl	8005704 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020fe:	f7ff f8cd 	bl	800129c <main>

08002102 <LoopForever>:

LoopForever:
    b LoopForever
 8002102:	e7fe      	b.n	8002102 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002104:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800210c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002110:	0800b5e0 	.word	0x0800b5e0
  ldr r2, =_sbss
 8002114:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002118:	200005b8 	.word	0x200005b8

0800211c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800211c:	e7fe      	b.n	800211c <ADC1_2_IRQHandler>
	...

08002120 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <HAL_Init+0x28>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a07      	ldr	r2, [pc, #28]	; (8002148 <HAL_Init+0x28>)
 800212a:	f043 0310 	orr.w	r3, r3, #16
 800212e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002130:	2003      	movs	r0, #3
 8002132:	f000 f931 	bl	8002398 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002136:	200f      	movs	r0, #15
 8002138:	f000 f808 	bl	800214c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800213c:	f7ff fde8 	bl	8001d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40022000 	.word	0x40022000

0800214c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002154:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <HAL_InitTick+0x54>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_InitTick+0x58>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4619      	mov	r1, r3
 800215e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002162:	fbb3 f3f1 	udiv	r3, r3, r1
 8002166:	fbb2 f3f3 	udiv	r3, r2, r3
 800216a:	4618      	mov	r0, r3
 800216c:	f000 f93b 	bl	80023e6 <HAL_SYSTICK_Config>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e00e      	b.n	8002198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b0f      	cmp	r3, #15
 800217e:	d80a      	bhi.n	8002196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002180:	2200      	movs	r2, #0
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	f04f 30ff 	mov.w	r0, #4294967295
 8002188:	f000 f911 	bl	80023ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800218c:	4a06      	ldr	r2, [pc, #24]	; (80021a8 <HAL_InitTick+0x5c>)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	e000      	b.n	8002198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000008 	.word	0x20000008
 80021a4:	20000010 	.word	0x20000010
 80021a8:	2000000c 	.word	0x2000000c

080021ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_IncTick+0x20>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_IncTick+0x24>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4413      	add	r3, r2
 80021bc:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <HAL_IncTick+0x24>)
 80021be:	6013      	str	r3, [r2, #0]
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	20000010 	.word	0x20000010
 80021d0:	200005a4 	.word	0x200005a4

080021d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <HAL_GetTick+0x14>)
 80021da:	681b      	ldr	r3, [r3, #0]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	200005a4 	.word	0x200005a4

080021ec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f4:	f7ff ffee 	bl	80021d4 <HAL_GetTick>
 80021f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002204:	d005      	beq.n	8002212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <HAL_Delay+0x44>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4413      	add	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002212:	bf00      	nop
 8002214:	f7ff ffde 	bl	80021d4 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	429a      	cmp	r2, r3
 8002222:	d8f7      	bhi.n	8002214 <HAL_Delay+0x28>
  {
  }
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000010 	.word	0x20000010

08002234 <__NVIC_SetPriorityGrouping>:
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <__NVIC_SetPriorityGrouping+0x44>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002250:	4013      	ands	r3, r2
 8002252:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800225c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002266:	4a04      	ldr	r2, [pc, #16]	; (8002278 <__NVIC_SetPriorityGrouping+0x44>)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	60d3      	str	r3, [r2, #12]
}
 800226c:	bf00      	nop
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <__NVIC_GetPriorityGrouping>:
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <__NVIC_GetPriorityGrouping+0x18>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	0a1b      	lsrs	r3, r3, #8
 8002286:	f003 0307 	and.w	r3, r3, #7
}
 800228a:	4618      	mov	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <__NVIC_SetPriority>:
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0a      	blt.n	80022c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	490c      	ldr	r1, [pc, #48]	; (80022e4 <__NVIC_SetPriority+0x4c>)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	0112      	lsls	r2, r2, #4
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	440b      	add	r3, r1
 80022bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022c0:	e00a      	b.n	80022d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4908      	ldr	r1, [pc, #32]	; (80022e8 <__NVIC_SetPriority+0x50>)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	3b04      	subs	r3, #4
 80022d0:	0112      	lsls	r2, r2, #4
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	440b      	add	r3, r1
 80022d6:	761a      	strb	r2, [r3, #24]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000e100 	.word	0xe000e100
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <NVIC_EncodePriority>:
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f1c3 0307 	rsb	r3, r3, #7
 8002306:	2b04      	cmp	r3, #4
 8002308:	bf28      	it	cs
 800230a:	2304      	movcs	r3, #4
 800230c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3304      	adds	r3, #4
 8002312:	2b06      	cmp	r3, #6
 8002314:	d902      	bls.n	800231c <NVIC_EncodePriority+0x30>
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3b03      	subs	r3, #3
 800231a:	e000      	b.n	800231e <NVIC_EncodePriority+0x32>
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	f04f 32ff 	mov.w	r2, #4294967295
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	401a      	ands	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002334:	f04f 31ff 	mov.w	r1, #4294967295
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43d9      	mvns	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	4313      	orrs	r3, r2
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	; 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <SysTick_Config>:
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002364:	d301      	bcc.n	800236a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002366:	2301      	movs	r3, #1
 8002368:	e00f      	b.n	800238a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <SysTick_Config+0x40>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002372:	210f      	movs	r1, #15
 8002374:	f04f 30ff 	mov.w	r0, #4294967295
 8002378:	f7ff ff8e 	bl	8002298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <SysTick_Config+0x40>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <SysTick_Config+0x40>)
 8002384:	2207      	movs	r2, #7
 8002386:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	e000e010 	.word	0xe000e010

08002398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff47 	bl	8002234 <__NVIC_SetPriorityGrouping>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c0:	f7ff ff5c 	bl	800227c <__NVIC_GetPriorityGrouping>
 80023c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	6978      	ldr	r0, [r7, #20]
 80023cc:	f7ff ff8e 	bl	80022ec <NVIC_EncodePriority>
 80023d0:	4602      	mov	r2, r0
 80023d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff5d 	bl	8002298 <__NVIC_SetPriority>
}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ffb0 	bl	8002354 <SysTick_Config>
 80023f4:	4603      	mov	r3, r0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800240e:	e14e      	b.n	80026ae <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	2101      	movs	r1, #1
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	4013      	ands	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 8140 	beq.w	80026a8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b01      	cmp	r3, #1
 8002432:	d005      	beq.n	8002440 <HAL_GPIO_Init+0x40>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d130      	bne.n	80024a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	2203      	movs	r2, #3
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4013      	ands	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002476:	2201      	movs	r2, #1
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	091b      	lsrs	r3, r3, #4
 800248c:	f003 0201 	and.w	r2, r3, #1
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d017      	beq.n	80024de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	2203      	movs	r2, #3
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d123      	bne.n	8002532 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	08da      	lsrs	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3208      	adds	r2, #8
 80024f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	220f      	movs	r2, #15
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	08da      	lsrs	r2, r3, #3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3208      	adds	r2, #8
 800252c:	6939      	ldr	r1, [r7, #16]
 800252e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	2203      	movs	r2, #3
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 0203 	and.w	r2, r3, #3
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 809a 	beq.w	80026a8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002574:	4b55      	ldr	r3, [pc, #340]	; (80026cc <HAL_GPIO_Init+0x2cc>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	4a54      	ldr	r2, [pc, #336]	; (80026cc <HAL_GPIO_Init+0x2cc>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6193      	str	r3, [r2, #24]
 8002580:	4b52      	ldr	r3, [pc, #328]	; (80026cc <HAL_GPIO_Init+0x2cc>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800258c:	4a50      	ldr	r2, [pc, #320]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	089b      	lsrs	r3, r3, #2
 8002592:	3302      	adds	r3, #2
 8002594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	220f      	movs	r2, #15
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025b6:	d013      	beq.n	80025e0 <HAL_GPIO_Init+0x1e0>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a46      	ldr	r2, [pc, #280]	; (80026d4 <HAL_GPIO_Init+0x2d4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d00d      	beq.n	80025dc <HAL_GPIO_Init+0x1dc>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a45      	ldr	r2, [pc, #276]	; (80026d8 <HAL_GPIO_Init+0x2d8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d007      	beq.n	80025d8 <HAL_GPIO_Init+0x1d8>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a44      	ldr	r2, [pc, #272]	; (80026dc <HAL_GPIO_Init+0x2dc>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d101      	bne.n	80025d4 <HAL_GPIO_Init+0x1d4>
 80025d0:	2303      	movs	r3, #3
 80025d2:	e006      	b.n	80025e2 <HAL_GPIO_Init+0x1e2>
 80025d4:	2305      	movs	r3, #5
 80025d6:	e004      	b.n	80025e2 <HAL_GPIO_Init+0x1e2>
 80025d8:	2302      	movs	r3, #2
 80025da:	e002      	b.n	80025e2 <HAL_GPIO_Init+0x1e2>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <HAL_GPIO_Init+0x1e2>
 80025e0:	2300      	movs	r3, #0
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	f002 0203 	and.w	r2, r2, #3
 80025e8:	0092      	lsls	r2, r2, #2
 80025ea:	4093      	lsls	r3, r2
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025f2:	4937      	ldr	r1, [pc, #220]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	089b      	lsrs	r3, r3, #2
 80025f8:	3302      	adds	r3, #2
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002600:	4b37      	ldr	r3, [pc, #220]	; (80026e0 <HAL_GPIO_Init+0x2e0>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	43db      	mvns	r3, r3
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002624:	4a2e      	ldr	r2, [pc, #184]	; (80026e0 <HAL_GPIO_Init+0x2e0>)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800262a:	4b2d      	ldr	r3, [pc, #180]	; (80026e0 <HAL_GPIO_Init+0x2e0>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	43db      	mvns	r3, r3
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4013      	ands	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800264e:	4a24      	ldr	r2, [pc, #144]	; (80026e0 <HAL_GPIO_Init+0x2e0>)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002654:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <HAL_GPIO_Init+0x2e0>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	43db      	mvns	r3, r3
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002678:	4a19      	ldr	r2, [pc, #100]	; (80026e0 <HAL_GPIO_Init+0x2e0>)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800267e:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <HAL_GPIO_Init+0x2e0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	43db      	mvns	r3, r3
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4013      	ands	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026a2:	4a0f      	ldr	r2, [pc, #60]	; (80026e0 <HAL_GPIO_Init+0x2e0>)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	3301      	adds	r3, #1
 80026ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	fa22 f303 	lsr.w	r3, r2, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f47f aea9 	bne.w	8002410 <HAL_GPIO_Init+0x10>
  }
}
 80026be:	bf00      	nop
 80026c0:	bf00      	nop
 80026c2:	371c      	adds	r7, #28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40010000 	.word	0x40010000
 80026d4:	48000400 	.word	0x48000400
 80026d8:	48000800 	.word	0x48000800
 80026dc:	48000c00 	.word	0x48000c00
 80026e0:	40010400 	.word	0x40010400

080026e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	887b      	ldrh	r3, [r7, #2]
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026fc:	2301      	movs	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
 8002700:	e001      	b.n	8002706 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002706:	7bfb      	ldrb	r3, [r7, #15]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	807b      	strh	r3, [r7, #2]
 8002720:	4613      	mov	r3, r2
 8002722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002724:	787b      	ldrb	r3, [r7, #1]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800272a:	887a      	ldrh	r2, [r7, #2]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002730:	e002      	b.n	8002738 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e081      	b.n	800285a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff faf4 	bl	8001d58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2224      	movs	r2, #36	; 0x24
 8002774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0201 	bic.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002794:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d107      	bne.n	80027be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	e006      	b.n	80027cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80027ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d104      	bne.n	80027de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002800:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69d9      	ldr	r1, [r3, #28]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1a      	ldr	r2, [r3, #32]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af02      	add	r7, sp, #8
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	461a      	mov	r2, r3
 8002870:	460b      	mov	r3, r1
 8002872:	817b      	strh	r3, [r7, #10]
 8002874:	4613      	mov	r3, r2
 8002876:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b20      	cmp	r3, #32
 8002882:	f040 80da 	bne.w	8002a3a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_I2C_Master_Transmit+0x30>
 8002890:	2302      	movs	r3, #2
 8002892:	e0d3      	b.n	8002a3c <HAL_I2C_Master_Transmit+0x1d8>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800289c:	f7ff fc9a 	bl	80021d4 <HAL_GetTick>
 80028a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	2319      	movs	r3, #25
 80028a8:	2201      	movs	r2, #1
 80028aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f9e6 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e0be      	b.n	8002a3c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2221      	movs	r2, #33	; 0x21
 80028c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2210      	movs	r2, #16
 80028ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	893a      	ldrh	r2, [r7, #8]
 80028de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2bff      	cmp	r3, #255	; 0xff
 80028ee:	d90e      	bls.n	800290e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	22ff      	movs	r2, #255	; 0xff
 80028f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	8979      	ldrh	r1, [r7, #10]
 80028fe:	4b51      	ldr	r3, [pc, #324]	; (8002a44 <HAL_I2C_Master_Transmit+0x1e0>)
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 fbf6 	bl	80030f8 <I2C_TransferConfig>
 800290c:	e06c      	b.n	80029e8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291c:	b2da      	uxtb	r2, r3
 800291e:	8979      	ldrh	r1, [r7, #10]
 8002920:	4b48      	ldr	r3, [pc, #288]	; (8002a44 <HAL_I2C_Master_Transmit+0x1e0>)
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 fbe5 	bl	80030f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800292e:	e05b      	b.n	80029e8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	6a39      	ldr	r1, [r7, #32]
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 f9f2 	bl	8002d1e <I2C_WaitOnTXISFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e07b      	b.n	8002a3c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	781a      	ldrb	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d034      	beq.n	80029e8 <HAL_I2C_Master_Transmit+0x184>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002982:	2b00      	cmp	r3, #0
 8002984:	d130      	bne.n	80029e8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	2200      	movs	r2, #0
 800298e:	2180      	movs	r1, #128	; 0x80
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 f975 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e04d      	b.n	8002a3c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2bff      	cmp	r3, #255	; 0xff
 80029a8:	d90e      	bls.n	80029c8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	22ff      	movs	r2, #255	; 0xff
 80029ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	8979      	ldrh	r1, [r7, #10]
 80029b8:	2300      	movs	r3, #0
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 fb99 	bl	80030f8 <I2C_TransferConfig>
 80029c6:	e00f      	b.n	80029e8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	8979      	ldrh	r1, [r7, #10]
 80029da:	2300      	movs	r3, #0
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 fb88 	bl	80030f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d19e      	bne.n	8002930 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	6a39      	ldr	r1, [r7, #32]
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 f9d8 	bl	8002dac <I2C_WaitOnSTOPFlagUntilTimeout>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e01a      	b.n	8002a3c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_I2C_Master_Transmit+0x1e4>)
 8002a1a:	400b      	ands	r3, r1
 8002a1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e000      	b.n	8002a3c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002a3a:	2302      	movs	r3, #2
  }
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	80002000 	.word	0x80002000
 8002a48:	fe00e800 	.word	0xfe00e800

08002a4c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	461a      	mov	r2, r3
 8002a58:	460b      	mov	r3, r1
 8002a5a:	817b      	strh	r3, [r7, #10]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	f040 80db 	bne.w	8002c24 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <HAL_I2C_Master_Receive+0x30>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e0d4      	b.n	8002c26 <HAL_I2C_Master_Receive+0x1da>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a84:	f7ff fba6 	bl	80021d4 <HAL_GetTick>
 8002a88:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	2319      	movs	r3, #25
 8002a90:	2201      	movs	r2, #1
 8002a92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f8f2 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0bf      	b.n	8002c26 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2222      	movs	r2, #34	; 0x22
 8002aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2210      	movs	r2, #16
 8002ab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	893a      	ldrh	r2, [r7, #8]
 8002ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2bff      	cmp	r3, #255	; 0xff
 8002ad6:	d90e      	bls.n	8002af6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	22ff      	movs	r2, #255	; 0xff
 8002adc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	8979      	ldrh	r1, [r7, #10]
 8002ae6:	4b52      	ldr	r3, [pc, #328]	; (8002c30 <HAL_I2C_Master_Receive+0x1e4>)
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 fb02 	bl	80030f8 <I2C_TransferConfig>
 8002af4:	e06d      	b.n	8002bd2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	8979      	ldrh	r1, [r7, #10]
 8002b08:	4b49      	ldr	r3, [pc, #292]	; (8002c30 <HAL_I2C_Master_Receive+0x1e4>)
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 faf1 	bl	80030f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002b16:	e05c      	b.n	8002bd2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	6a39      	ldr	r1, [r7, #32]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f989 	bl	8002e34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e07c      	b.n	8002c26 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d034      	beq.n	8002bd2 <HAL_I2C_Master_Receive+0x186>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d130      	bne.n	8002bd2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	2200      	movs	r2, #0
 8002b78:	2180      	movs	r1, #128	; 0x80
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f880 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e04d      	b.n	8002c26 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2bff      	cmp	r3, #255	; 0xff
 8002b92:	d90e      	bls.n	8002bb2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	22ff      	movs	r2, #255	; 0xff
 8002b98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	8979      	ldrh	r1, [r7, #10]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 faa4 	bl	80030f8 <I2C_TransferConfig>
 8002bb0:	e00f      	b.n	8002bd2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	8979      	ldrh	r1, [r7, #10]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 fa93 	bl	80030f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d19d      	bne.n	8002b18 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	6a39      	ldr	r1, [r7, #32]
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 f8e3 	bl	8002dac <I2C_WaitOnSTOPFlagUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e01a      	b.n	8002c26 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6859      	ldr	r1, [r3, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <HAL_I2C_Master_Receive+0x1e8>)
 8002c04:	400b      	ands	r3, r1
 8002c06:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	e000      	b.n	8002c26 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002c24:	2302      	movs	r3, #2
  }
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	80002400 	.word	0x80002400
 8002c34:	fe00e800 	.word	0xfe00e800

08002c38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d103      	bne.n	8002c56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2200      	movs	r2, #0
 8002c54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d007      	beq.n	8002c74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0201 	orr.w	r2, r2, #1
 8002c72:	619a      	str	r2, [r3, #24]
  }
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c90:	e031      	b.n	8002cf6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d02d      	beq.n	8002cf6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9a:	f7ff fa9b 	bl	80021d4 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d302      	bcc.n	8002cb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d122      	bne.n	8002cf6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699a      	ldr	r2, [r3, #24]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	bf0c      	ite	eq
 8002cc0:	2301      	moveq	r3, #1
 8002cc2:	2300      	movne	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d113      	bne.n	8002cf6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	f043 0220 	orr.w	r2, r3, #32
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e00f      	b.n	8002d16 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699a      	ldr	r2, [r3, #24]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	bf0c      	ite	eq
 8002d06:	2301      	moveq	r3, #1
 8002d08:	2300      	movne	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d0be      	beq.n	8002c92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d2a:	e033      	b.n	8002d94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	68b9      	ldr	r1, [r7, #8]
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f901 	bl	8002f38 <I2C_IsErrorOccurred>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e031      	b.n	8002da4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d46:	d025      	beq.n	8002d94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d48:	f7ff fa44 	bl	80021d4 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d302      	bcc.n	8002d5e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d11a      	bne.n	8002d94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d013      	beq.n	8002d94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d70:	f043 0220 	orr.w	r2, r3, #32
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e007      	b.n	8002da4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d1c4      	bne.n	8002d2c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002db8:	e02f      	b.n	8002e1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f8ba 	bl	8002f38 <I2C_IsErrorOccurred>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e02d      	b.n	8002e2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dce:	f7ff fa01 	bl	80021d4 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d302      	bcc.n	8002de4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d11a      	bne.n	8002e1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	d013      	beq.n	8002e1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	f043 0220 	orr.w	r2, r3, #32
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e007      	b.n	8002e2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d1c8      	bne.n	8002dba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e40:	e06b      	b.n	8002f1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f876 	bl	8002f38 <I2C_IsErrorOccurred>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e069      	b.n	8002f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	f003 0320 	and.w	r3, r3, #32
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d138      	bne.n	8002ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d105      	bne.n	8002e7e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e055      	b.n	8002f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	f003 0310 	and.w	r3, r3, #16
 8002e88:	2b10      	cmp	r3, #16
 8002e8a:	d107      	bne.n	8002e9c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2210      	movs	r2, #16
 8002e92:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2204      	movs	r2, #4
 8002e98:	645a      	str	r2, [r3, #68]	; 0x44
 8002e9a:	e002      	b.n	8002ea2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4b1f      	ldr	r3, [pc, #124]	; (8002f34 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002eb6:	400b      	ands	r3, r1
 8002eb8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e029      	b.n	8002f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed6:	f7ff f97d 	bl	80021d4 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d302      	bcc.n	8002eec <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d116      	bne.n	8002f1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d00f      	beq.n	8002f1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	f043 0220 	orr.w	r2, r3, #32
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e007      	b.n	8002f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d18c      	bne.n	8002e42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	fe00e800 	.word	0xfe00e800

08002f38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	; 0x28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d068      	beq.n	8003036 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2210      	movs	r2, #16
 8002f6a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f6c:	e049      	b.n	8003002 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f74:	d045      	beq.n	8003002 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f76:	f7ff f92d 	bl	80021d4 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d302      	bcc.n	8002f8c <I2C_IsErrorOccurred+0x54>
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d13a      	bne.n	8003002 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f96:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f9e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fae:	d121      	bne.n	8002ff4 <I2C_IsErrorOccurred+0xbc>
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fb6:	d01d      	beq.n	8002ff4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002fb8:	7cfb      	ldrb	r3, [r7, #19]
 8002fba:	2b20      	cmp	r3, #32
 8002fbc:	d01a      	beq.n	8002ff4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fcc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002fce:	f7ff f901 	bl	80021d4 <HAL_GetTick>
 8002fd2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fd4:	e00e      	b.n	8002ff4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fd6:	f7ff f8fd 	bl	80021d4 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b19      	cmp	r3, #25
 8002fe2:	d907      	bls.n	8002ff4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	f043 0320 	orr.w	r3, r3, #32
 8002fea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002ff2:	e006      	b.n	8003002 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	d1e9      	bne.n	8002fd6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	f003 0320 	and.w	r3, r3, #32
 800300c:	2b20      	cmp	r3, #32
 800300e:	d003      	beq.n	8003018 <I2C_IsErrorOccurred+0xe0>
 8003010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0aa      	beq.n	8002f6e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800301c:	2b00      	cmp	r3, #0
 800301e:	d103      	bne.n	8003028 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2220      	movs	r2, #32
 8003026:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	f043 0304 	orr.w	r3, r3, #4
 800302e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00b      	beq.n	8003060 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003058:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00b      	beq.n	8003082 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	f043 0308 	orr.w	r3, r3, #8
 8003070:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800307a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00b      	beq.n	80030a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	f043 0302 	orr.w	r3, r3, #2
 8003092:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800309c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80030a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d01c      	beq.n	80030e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f7ff fdc3 	bl	8002c38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6859      	ldr	r1, [r3, #4]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <I2C_IsErrorOccurred+0x1bc>)
 80030be:	400b      	ands	r3, r1
 80030c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	431a      	orrs	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80030e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3728      	adds	r7, #40	; 0x28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	fe00e800 	.word	0xfe00e800

080030f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	460b      	mov	r3, r1
 8003104:	817b      	strh	r3, [r7, #10]
 8003106:	4613      	mov	r3, r2
 8003108:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800310a:	897b      	ldrh	r3, [r7, #10]
 800310c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003110:	7a7b      	ldrb	r3, [r7, #9]
 8003112:	041b      	lsls	r3, r3, #16
 8003114:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003118:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	4313      	orrs	r3, r2
 8003122:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003126:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	0d5b      	lsrs	r3, r3, #21
 8003132:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003136:	4b08      	ldr	r3, [pc, #32]	; (8003158 <I2C_TransferConfig+0x60>)
 8003138:	430b      	orrs	r3, r1
 800313a:	43db      	mvns	r3, r3
 800313c:	ea02 0103 	and.w	r1, r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	430a      	orrs	r2, r1
 8003148:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800314a:	bf00      	nop
 800314c:	371c      	adds	r7, #28
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	03ff63ff 	.word	0x03ff63ff

0800315c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b20      	cmp	r3, #32
 8003170:	d138      	bne.n	80031e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800317c:	2302      	movs	r3, #2
 800317e:	e032      	b.n	80031e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2224      	movs	r2, #36	; 0x24
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0201 	bic.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6819      	ldr	r1, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	e000      	b.n	80031e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031e4:	2302      	movs	r3, #2
  }
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b085      	sub	sp, #20
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b20      	cmp	r3, #32
 8003206:	d139      	bne.n	800327c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003212:	2302      	movs	r3, #2
 8003214:	e033      	b.n	800327e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2224      	movs	r2, #36	; 0x24
 8003222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0201 	bic.w	r2, r2, #1
 8003234:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003244:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	021b      	lsls	r3, r3, #8
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4313      	orrs	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	e000      	b.n	800327e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800327c:	2302      	movs	r3, #2
  }
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003292:	af00      	add	r7, sp, #0
 8003294:	1d3b      	adds	r3, r7, #4
 8003296:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003298:	1d3b      	adds	r3, r7, #4
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d102      	bne.n	80032a6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	f000 bef4 	b.w	800408e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a6:	1d3b      	adds	r3, r7, #4
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 816a 	beq.w	800358a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032b6:	4bb3      	ldr	r3, [pc, #716]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 030c 	and.w	r3, r3, #12
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d00c      	beq.n	80032dc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032c2:	4bb0      	ldr	r3, [pc, #704]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d159      	bne.n	8003382 <HAL_RCC_OscConfig+0xf6>
 80032ce:	4bad      	ldr	r3, [pc, #692]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032da:	d152      	bne.n	8003382 <HAL_RCC_OscConfig+0xf6>
 80032dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032e0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80032e8:	fa93 f3a3 	rbit	r3, r3
 80032ec:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032f0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f4:	fab3 f383 	clz	r3, r3
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b01      	cmp	r3, #1
 8003306:	d102      	bne.n	800330e <HAL_RCC_OscConfig+0x82>
 8003308:	4b9e      	ldr	r3, [pc, #632]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	e015      	b.n	800333a <HAL_RCC_OscConfig+0xae>
 800330e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003312:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003316:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800331a:	fa93 f3a3 	rbit	r3, r3
 800331e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003322:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003326:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800332a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800332e:	fa93 f3a3 	rbit	r3, r3
 8003332:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003336:	4b93      	ldr	r3, [pc, #588]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800333e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003342:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003346:	fa92 f2a2 	rbit	r2, r2
 800334a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800334e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003352:	fab2 f282 	clz	r2, r2
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	f042 0220 	orr.w	r2, r2, #32
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	f002 021f 	and.w	r2, r2, #31
 8003362:	2101      	movs	r1, #1
 8003364:	fa01 f202 	lsl.w	r2, r1, r2
 8003368:	4013      	ands	r3, r2
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 810c 	beq.w	8003588 <HAL_RCC_OscConfig+0x2fc>
 8003370:	1d3b      	adds	r3, r7, #4
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	f040 8106 	bne.w	8003588 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	f000 be86 	b.w	800408e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003382:	1d3b      	adds	r3, r7, #4
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338c:	d106      	bne.n	800339c <HAL_RCC_OscConfig+0x110>
 800338e:	4b7d      	ldr	r3, [pc, #500]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a7c      	ldr	r2, [pc, #496]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 8003394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	e030      	b.n	80033fe <HAL_RCC_OscConfig+0x172>
 800339c:	1d3b      	adds	r3, r7, #4
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x134>
 80033a6:	4b77      	ldr	r3, [pc, #476]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a76      	ldr	r2, [pc, #472]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 80033ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	4b74      	ldr	r3, [pc, #464]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a73      	ldr	r2, [pc, #460]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 80033b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e01e      	b.n	80033fe <HAL_RCC_OscConfig+0x172>
 80033c0:	1d3b      	adds	r3, r7, #4
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033ca:	d10c      	bne.n	80033e6 <HAL_RCC_OscConfig+0x15a>
 80033cc:	4b6d      	ldr	r3, [pc, #436]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a6c      	ldr	r2, [pc, #432]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 80033d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	4b6a      	ldr	r3, [pc, #424]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a69      	ldr	r2, [pc, #420]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 80033de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	e00b      	b.n	80033fe <HAL_RCC_OscConfig+0x172>
 80033e6:	4b67      	ldr	r3, [pc, #412]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a66      	ldr	r2, [pc, #408]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 80033ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	4b64      	ldr	r3, [pc, #400]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a63      	ldr	r2, [pc, #396]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 80033f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033fe:	4b61      	ldr	r3, [pc, #388]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	f023 020f 	bic.w	r2, r3, #15
 8003406:	1d3b      	adds	r3, r7, #4
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	495d      	ldr	r1, [pc, #372]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 800340e:	4313      	orrs	r3, r2
 8003410:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003412:	1d3b      	adds	r3, r7, #4
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d059      	beq.n	80034d0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7fe feda 	bl	80021d4 <HAL_GetTick>
 8003420:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003424:	e00a      	b.n	800343c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003426:	f7fe fed5 	bl	80021d4 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d902      	bls.n	800343c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	f000 be29 	b.w	800408e <HAL_RCC_OscConfig+0xe02>
 800343c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003440:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003444:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003448:	fa93 f3a3 	rbit	r3, r3
 800344c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003450:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003454:	fab3 f383 	clz	r3, r3
 8003458:	b2db      	uxtb	r3, r3
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d102      	bne.n	800346e <HAL_RCC_OscConfig+0x1e2>
 8003468:	4b46      	ldr	r3, [pc, #280]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	e015      	b.n	800349a <HAL_RCC_OscConfig+0x20e>
 800346e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003472:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003482:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003486:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800348a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003496:	4b3b      	ldr	r3, [pc, #236]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800349e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80034a2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80034a6:	fa92 f2a2 	rbit	r2, r2
 80034aa:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80034ae:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80034b2:	fab2 f282 	clz	r2, r2
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	f042 0220 	orr.w	r2, r2, #32
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	f002 021f 	and.w	r2, r2, #31
 80034c2:	2101      	movs	r1, #1
 80034c4:	fa01 f202 	lsl.w	r2, r1, r2
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0ab      	beq.n	8003426 <HAL_RCC_OscConfig+0x19a>
 80034ce:	e05c      	b.n	800358a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d0:	f7fe fe80 	bl	80021d4 <HAL_GetTick>
 80034d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d8:	e00a      	b.n	80034f0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034da:	f7fe fe7b 	bl	80021d4 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	; 0x64
 80034e8:	d902      	bls.n	80034f0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	f000 bdcf 	b.w	800408e <HAL_RCC_OscConfig+0xe02>
 80034f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034f4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80034fc:	fa93 f3a3 	rbit	r3, r3
 8003500:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003504:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003508:	fab3 f383 	clz	r3, r3
 800350c:	b2db      	uxtb	r3, r3
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	b2db      	uxtb	r3, r3
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b01      	cmp	r3, #1
 800351a:	d102      	bne.n	8003522 <HAL_RCC_OscConfig+0x296>
 800351c:	4b19      	ldr	r3, [pc, #100]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	e015      	b.n	800354e <HAL_RCC_OscConfig+0x2c2>
 8003522:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003526:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800352e:	fa93 f3a3 	rbit	r3, r3
 8003532:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003536:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800353a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800353e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003542:	fa93 f3a3 	rbit	r3, r3
 8003546:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800354a:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <HAL_RCC_OscConfig+0x2f8>)
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003552:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003556:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800355a:	fa92 f2a2 	rbit	r2, r2
 800355e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003562:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003566:	fab2 f282 	clz	r2, r2
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	f042 0220 	orr.w	r2, r2, #32
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	f002 021f 	and.w	r2, r2, #31
 8003576:	2101      	movs	r1, #1
 8003578:	fa01 f202 	lsl.w	r2, r1, r2
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1ab      	bne.n	80034da <HAL_RCC_OscConfig+0x24e>
 8003582:	e002      	b.n	800358a <HAL_RCC_OscConfig+0x2fe>
 8003584:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800358a:	1d3b      	adds	r3, r7, #4
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 816f 	beq.w	8003878 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800359a:	4bd0      	ldr	r3, [pc, #832]	; (80038dc <HAL_RCC_OscConfig+0x650>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035a6:	4bcd      	ldr	r3, [pc, #820]	; (80038dc <HAL_RCC_OscConfig+0x650>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d16c      	bne.n	800368c <HAL_RCC_OscConfig+0x400>
 80035b2:	4bca      	ldr	r3, [pc, #808]	; (80038dc <HAL_RCC_OscConfig+0x650>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d166      	bne.n	800368c <HAL_RCC_OscConfig+0x400>
 80035be:	2302      	movs	r3, #2
 80035c0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80035c8:	fa93 f3a3 	rbit	r3, r3
 80035cc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80035d0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d4:	fab3 f383 	clz	r3, r3
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d102      	bne.n	80035ee <HAL_RCC_OscConfig+0x362>
 80035e8:	4bbc      	ldr	r3, [pc, #752]	; (80038dc <HAL_RCC_OscConfig+0x650>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	e013      	b.n	8003616 <HAL_RCC_OscConfig+0x38a>
 80035ee:	2302      	movs	r3, #2
 80035f0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80035f8:	fa93 f3a3 	rbit	r3, r3
 80035fc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003600:	2302      	movs	r3, #2
 8003602:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003606:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800360a:	fa93 f3a3 	rbit	r3, r3
 800360e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003612:	4bb2      	ldr	r3, [pc, #712]	; (80038dc <HAL_RCC_OscConfig+0x650>)
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	2202      	movs	r2, #2
 8003618:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800361c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003620:	fa92 f2a2 	rbit	r2, r2
 8003624:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003628:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800362c:	fab2 f282 	clz	r2, r2
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	f042 0220 	orr.w	r2, r2, #32
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	f002 021f 	and.w	r2, r2, #31
 800363c:	2101      	movs	r1, #1
 800363e:	fa01 f202 	lsl.w	r2, r1, r2
 8003642:	4013      	ands	r3, r2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d007      	beq.n	8003658 <HAL_RCC_OscConfig+0x3cc>
 8003648:	1d3b      	adds	r3, r7, #4
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d002      	beq.n	8003658 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	f000 bd1b 	b.w	800408e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003658:	4ba0      	ldr	r3, [pc, #640]	; (80038dc <HAL_RCC_OscConfig+0x650>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003660:	1d3b      	adds	r3, r7, #4
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	21f8      	movs	r1, #248	; 0xf8
 8003668:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003670:	fa91 f1a1 	rbit	r1, r1
 8003674:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003678:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800367c:	fab1 f181 	clz	r1, r1
 8003680:	b2c9      	uxtb	r1, r1
 8003682:	408b      	lsls	r3, r1
 8003684:	4995      	ldr	r1, [pc, #596]	; (80038dc <HAL_RCC_OscConfig+0x650>)
 8003686:	4313      	orrs	r3, r2
 8003688:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368a:	e0f5      	b.n	8003878 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800368c:	1d3b      	adds	r3, r7, #4
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8085 	beq.w	80037a2 <HAL_RCC_OscConfig+0x516>
 8003698:	2301      	movs	r3, #1
 800369a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80036a2:	fa93 f3a3 	rbit	r3, r3
 80036a6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80036aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ae:	fab3 f383 	clz	r3, r3
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	461a      	mov	r2, r3
 80036c0:	2301      	movs	r3, #1
 80036c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7fe fd86 	bl	80021d4 <HAL_GetTick>
 80036c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036cc:	e00a      	b.n	80036e4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ce:	f7fe fd81 	bl	80021d4 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d902      	bls.n	80036e4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	f000 bcd5 	b.w	800408e <HAL_RCC_OscConfig+0xe02>
 80036e4:	2302      	movs	r3, #2
 80036e6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80036ee:	fa93 f3a3 	rbit	r3, r3
 80036f2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80036f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fa:	fab3 f383 	clz	r3, r3
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	095b      	lsrs	r3, r3, #5
 8003702:	b2db      	uxtb	r3, r3
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b01      	cmp	r3, #1
 800370c:	d102      	bne.n	8003714 <HAL_RCC_OscConfig+0x488>
 800370e:	4b73      	ldr	r3, [pc, #460]	; (80038dc <HAL_RCC_OscConfig+0x650>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	e013      	b.n	800373c <HAL_RCC_OscConfig+0x4b0>
 8003714:	2302      	movs	r3, #2
 8003716:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800371e:	fa93 f3a3 	rbit	r3, r3
 8003722:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003726:	2302      	movs	r3, #2
 8003728:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800372c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003730:	fa93 f3a3 	rbit	r3, r3
 8003734:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003738:	4b68      	ldr	r3, [pc, #416]	; (80038dc <HAL_RCC_OscConfig+0x650>)
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	2202      	movs	r2, #2
 800373e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003742:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003746:	fa92 f2a2 	rbit	r2, r2
 800374a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800374e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003752:	fab2 f282 	clz	r2, r2
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	f042 0220 	orr.w	r2, r2, #32
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	f002 021f 	and.w	r2, r2, #31
 8003762:	2101      	movs	r1, #1
 8003764:	fa01 f202 	lsl.w	r2, r1, r2
 8003768:	4013      	ands	r3, r2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0af      	beq.n	80036ce <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376e:	4b5b      	ldr	r3, [pc, #364]	; (80038dc <HAL_RCC_OscConfig+0x650>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003776:	1d3b      	adds	r3, r7, #4
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	21f8      	movs	r1, #248	; 0xf8
 800377e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003782:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003786:	fa91 f1a1 	rbit	r1, r1
 800378a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800378e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003792:	fab1 f181 	clz	r1, r1
 8003796:	b2c9      	uxtb	r1, r1
 8003798:	408b      	lsls	r3, r1
 800379a:	4950      	ldr	r1, [pc, #320]	; (80038dc <HAL_RCC_OscConfig+0x650>)
 800379c:	4313      	orrs	r3, r2
 800379e:	600b      	str	r3, [r1, #0]
 80037a0:	e06a      	b.n	8003878 <HAL_RCC_OscConfig+0x5ec>
 80037a2:	2301      	movs	r3, #1
 80037a4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80037ac:	fa93 f3a3 	rbit	r3, r3
 80037b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80037b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037b8:	fab3 f383 	clz	r3, r3
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	461a      	mov	r2, r3
 80037ca:	2300      	movs	r3, #0
 80037cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ce:	f7fe fd01 	bl	80021d4 <HAL_GetTick>
 80037d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d6:	e00a      	b.n	80037ee <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037d8:	f7fe fcfc 	bl	80021d4 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d902      	bls.n	80037ee <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	f000 bc50 	b.w	800408e <HAL_RCC_OscConfig+0xe02>
 80037ee:	2302      	movs	r3, #2
 80037f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80037f8:	fa93 f3a3 	rbit	r3, r3
 80037fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003804:	fab3 f383 	clz	r3, r3
 8003808:	b2db      	uxtb	r3, r3
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	b2db      	uxtb	r3, r3
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b01      	cmp	r3, #1
 8003816:	d102      	bne.n	800381e <HAL_RCC_OscConfig+0x592>
 8003818:	4b30      	ldr	r3, [pc, #192]	; (80038dc <HAL_RCC_OscConfig+0x650>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	e013      	b.n	8003846 <HAL_RCC_OscConfig+0x5ba>
 800381e:	2302      	movs	r3, #2
 8003820:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003824:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003828:	fa93 f3a3 	rbit	r3, r3
 800382c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003830:	2302      	movs	r3, #2
 8003832:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003836:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003842:	4b26      	ldr	r3, [pc, #152]	; (80038dc <HAL_RCC_OscConfig+0x650>)
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	2202      	movs	r2, #2
 8003848:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800384c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003850:	fa92 f2a2 	rbit	r2, r2
 8003854:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003858:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800385c:	fab2 f282 	clz	r2, r2
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	f042 0220 	orr.w	r2, r2, #32
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	f002 021f 	and.w	r2, r2, #31
 800386c:	2101      	movs	r1, #1
 800386e:	fa01 f202 	lsl.w	r2, r1, r2
 8003872:	4013      	ands	r3, r2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1af      	bne.n	80037d8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003878:	1d3b      	adds	r3, r7, #4
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 80da 	beq.w	8003a3c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003888:	1d3b      	adds	r3, r7, #4
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d069      	beq.n	8003966 <HAL_RCC_OscConfig+0x6da>
 8003892:	2301      	movs	r3, #1
 8003894:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003898:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800389c:	fa93 f3a3 	rbit	r3, r3
 80038a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80038a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038a8:	fab3 f383 	clz	r3, r3
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	461a      	mov	r2, r3
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <HAL_RCC_OscConfig+0x654>)
 80038b2:	4413      	add	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	461a      	mov	r2, r3
 80038b8:	2301      	movs	r3, #1
 80038ba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038bc:	f7fe fc8a 	bl	80021d4 <HAL_GetTick>
 80038c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c4:	e00e      	b.n	80038e4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c6:	f7fe fc85 	bl	80021d4 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d906      	bls.n	80038e4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e3d9      	b.n	800408e <HAL_RCC_OscConfig+0xe02>
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000
 80038e0:	10908120 	.word	0x10908120
 80038e4:	2302      	movs	r3, #2
 80038e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80038ee:	fa93 f3a3 	rbit	r3, r3
 80038f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038f6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80038fa:	2202      	movs	r2, #2
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	fa93 f2a3 	rbit	r2, r3
 8003908:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003912:	2202      	movs	r2, #2
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	fa93 f2a3 	rbit	r2, r3
 8003920:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003924:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003926:	4ba5      	ldr	r3, [pc, #660]	; (8003bbc <HAL_RCC_OscConfig+0x930>)
 8003928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800392a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800392e:	2102      	movs	r1, #2
 8003930:	6019      	str	r1, [r3, #0]
 8003932:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	fa93 f1a3 	rbit	r1, r3
 800393c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003940:	6019      	str	r1, [r3, #0]
  return result;
 8003942:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	fab3 f383 	clz	r3, r3
 800394c:	b2db      	uxtb	r3, r3
 800394e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	2101      	movs	r1, #1
 800395a:	fa01 f303 	lsl.w	r3, r1, r3
 800395e:	4013      	ands	r3, r2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0b0      	beq.n	80038c6 <HAL_RCC_OscConfig+0x63a>
 8003964:	e06a      	b.n	8003a3c <HAL_RCC_OscConfig+0x7b0>
 8003966:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800396a:	2201      	movs	r2, #1
 800396c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	fa93 f2a3 	rbit	r2, r3
 8003978:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800397c:	601a      	str	r2, [r3, #0]
  return result;
 800397e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003982:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003984:	fab3 f383 	clz	r3, r3
 8003988:	b2db      	uxtb	r3, r3
 800398a:	461a      	mov	r2, r3
 800398c:	4b8c      	ldr	r3, [pc, #560]	; (8003bc0 <HAL_RCC_OscConfig+0x934>)
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	461a      	mov	r2, r3
 8003994:	2300      	movs	r3, #0
 8003996:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003998:	f7fe fc1c 	bl	80021d4 <HAL_GetTick>
 800399c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a0:	e009      	b.n	80039b6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a2:	f7fe fc17 	bl	80021d4 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e36b      	b.n	800408e <HAL_RCC_OscConfig+0xe02>
 80039b6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80039ba:	2202      	movs	r2, #2
 80039bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	fa93 f2a3 	rbit	r2, r3
 80039c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80039d2:	2202      	movs	r2, #2
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	fa93 f2a3 	rbit	r2, r3
 80039e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80039ea:	2202      	movs	r2, #2
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	fa93 f2a3 	rbit	r2, r3
 80039f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039fe:	4b6f      	ldr	r3, [pc, #444]	; (8003bbc <HAL_RCC_OscConfig+0x930>)
 8003a00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a02:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003a06:	2102      	movs	r1, #2
 8003a08:	6019      	str	r1, [r3, #0]
 8003a0a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	fa93 f1a3 	rbit	r1, r3
 8003a14:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003a18:	6019      	str	r1, [r3, #0]
  return result;
 8003a1a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	fab3 f383 	clz	r3, r3
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f003 031f 	and.w	r3, r3, #31
 8003a30:	2101      	movs	r1, #1
 8003a32:	fa01 f303 	lsl.w	r3, r1, r3
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1b2      	bne.n	80039a2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a3c:	1d3b      	adds	r3, r7, #4
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 8158 	beq.w	8003cfc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a52:	4b5a      	ldr	r3, [pc, #360]	; (8003bbc <HAL_RCC_OscConfig+0x930>)
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d112      	bne.n	8003a84 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a5e:	4b57      	ldr	r3, [pc, #348]	; (8003bbc <HAL_RCC_OscConfig+0x930>)
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	4a56      	ldr	r2, [pc, #344]	; (8003bbc <HAL_RCC_OscConfig+0x930>)
 8003a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a68:	61d3      	str	r3, [r2, #28]
 8003a6a:	4b54      	ldr	r3, [pc, #336]	; (8003bbc <HAL_RCC_OscConfig+0x930>)
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003a72:	f107 0308 	add.w	r3, r7, #8
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	f107 0308 	add.w	r3, r7, #8
 8003a7c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a84:	4b4f      	ldr	r3, [pc, #316]	; (8003bc4 <HAL_RCC_OscConfig+0x938>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d11a      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a90:	4b4c      	ldr	r3, [pc, #304]	; (8003bc4 <HAL_RCC_OscConfig+0x938>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a4b      	ldr	r2, [pc, #300]	; (8003bc4 <HAL_RCC_OscConfig+0x938>)
 8003a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a9c:	f7fe fb9a 	bl	80021d4 <HAL_GetTick>
 8003aa0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa4:	e009      	b.n	8003aba <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa6:	f7fe fb95 	bl	80021d4 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b64      	cmp	r3, #100	; 0x64
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e2e9      	b.n	800408e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aba:	4b42      	ldr	r3, [pc, #264]	; (8003bc4 <HAL_RCC_OscConfig+0x938>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0ef      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac6:	1d3b      	adds	r3, r7, #4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d106      	bne.n	8003ade <HAL_RCC_OscConfig+0x852>
 8003ad0:	4b3a      	ldr	r3, [pc, #232]	; (8003bbc <HAL_RCC_OscConfig+0x930>)
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	4a39      	ldr	r2, [pc, #228]	; (8003bbc <HAL_RCC_OscConfig+0x930>)
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	6213      	str	r3, [r2, #32]
 8003adc:	e02f      	b.n	8003b3e <HAL_RCC_OscConfig+0x8b2>
 8003ade:	1d3b      	adds	r3, r7, #4
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10c      	bne.n	8003b02 <HAL_RCC_OscConfig+0x876>
 8003ae8:	4b34      	ldr	r3, [pc, #208]	; (8003bbc <HAL_RCC_OscConfig+0x930>)
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	4a33      	ldr	r2, [pc, #204]	; (8003bbc <HAL_RCC_OscConfig+0x930>)
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	6213      	str	r3, [r2, #32]
 8003af4:	4b31      	ldr	r3, [pc, #196]	; (8003bbc <HAL_RCC_OscConfig+0x930>)
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	4a30      	ldr	r2, [pc, #192]	; (8003bbc <HAL_RCC_OscConfig+0x930>)
 8003afa:	f023 0304 	bic.w	r3, r3, #4
 8003afe:	6213      	str	r3, [r2, #32]
 8003b00:	e01d      	b.n	8003b3e <HAL_RCC_OscConfig+0x8b2>
 8003b02:	1d3b      	adds	r3, r7, #4
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	2b05      	cmp	r3, #5
 8003b0a:	d10c      	bne.n	8003b26 <HAL_RCC_OscConfig+0x89a>
 8003b0c:	4b2b      	ldr	r3, [pc, #172]	; (8003bbc <HAL_RCC_OscConfig+0x930>)
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	4a2a      	ldr	r2, [pc, #168]	; (8003bbc <HAL_RCC_OscConfig+0x930>)
 8003b12:	f043 0304 	orr.w	r3, r3, #4
 8003b16:	6213      	str	r3, [r2, #32]
 8003b18:	4b28      	ldr	r3, [pc, #160]	; (8003bbc <HAL_RCC_OscConfig+0x930>)
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	4a27      	ldr	r2, [pc, #156]	; (8003bbc <HAL_RCC_OscConfig+0x930>)
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	6213      	str	r3, [r2, #32]
 8003b24:	e00b      	b.n	8003b3e <HAL_RCC_OscConfig+0x8b2>
 8003b26:	4b25      	ldr	r3, [pc, #148]	; (8003bbc <HAL_RCC_OscConfig+0x930>)
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	4a24      	ldr	r2, [pc, #144]	; (8003bbc <HAL_RCC_OscConfig+0x930>)
 8003b2c:	f023 0301 	bic.w	r3, r3, #1
 8003b30:	6213      	str	r3, [r2, #32]
 8003b32:	4b22      	ldr	r3, [pc, #136]	; (8003bbc <HAL_RCC_OscConfig+0x930>)
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	4a21      	ldr	r2, [pc, #132]	; (8003bbc <HAL_RCC_OscConfig+0x930>)
 8003b38:	f023 0304 	bic.w	r3, r3, #4
 8003b3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b3e:	1d3b      	adds	r3, r7, #4
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d06b      	beq.n	8003c20 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b48:	f7fe fb44 	bl	80021d4 <HAL_GetTick>
 8003b4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b50:	e00b      	b.n	8003b6a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b52:	f7fe fb3f 	bl	80021d4 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e291      	b.n	800408e <HAL_RCC_OscConfig+0xe02>
 8003b6a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003b6e:	2202      	movs	r2, #2
 8003b70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b72:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	fa93 f2a3 	rbit	r2, r3
 8003b7c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003b86:	2202      	movs	r2, #2
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	fa93 f2a3 	rbit	r2, r3
 8003b94:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b98:	601a      	str	r2, [r3, #0]
  return result;
 8003b9a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b9e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba0:	fab3 f383 	clz	r3, r3
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f043 0302 	orr.w	r3, r3, #2
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d109      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x93c>
 8003bb4:	4b01      	ldr	r3, [pc, #4]	; (8003bbc <HAL_RCC_OscConfig+0x930>)
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	e014      	b.n	8003be4 <HAL_RCC_OscConfig+0x958>
 8003bba:	bf00      	nop
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	10908120 	.word	0x10908120
 8003bc4:	40007000 	.word	0x40007000
 8003bc8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003bcc:	2202      	movs	r2, #2
 8003bce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	fa93 f2a3 	rbit	r2, r3
 8003bda:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	4bbb      	ldr	r3, [pc, #748]	; (8003ed0 <HAL_RCC_OscConfig+0xc44>)
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003be8:	2102      	movs	r1, #2
 8003bea:	6011      	str	r1, [r2, #0]
 8003bec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003bf0:	6812      	ldr	r2, [r2, #0]
 8003bf2:	fa92 f1a2 	rbit	r1, r2
 8003bf6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003bfa:	6011      	str	r1, [r2, #0]
  return result;
 8003bfc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003c00:	6812      	ldr	r2, [r2, #0]
 8003c02:	fab2 f282 	clz	r2, r2
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	f002 021f 	and.w	r2, r2, #31
 8003c12:	2101      	movs	r1, #1
 8003c14:	fa01 f202 	lsl.w	r2, r1, r2
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d099      	beq.n	8003b52 <HAL_RCC_OscConfig+0x8c6>
 8003c1e:	e063      	b.n	8003ce8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c20:	f7fe fad8 	bl	80021d4 <HAL_GetTick>
 8003c24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c28:	e00b      	b.n	8003c42 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c2a:	f7fe fad3 	bl	80021d4 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e225      	b.n	800408e <HAL_RCC_OscConfig+0xe02>
 8003c42:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003c46:	2202      	movs	r2, #2
 8003c48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	fa93 f2a3 	rbit	r2, r3
 8003c54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003c5e:	2202      	movs	r2, #2
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	fa93 f2a3 	rbit	r2, r3
 8003c6c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003c70:	601a      	str	r2, [r3, #0]
  return result;
 8003c72:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003c76:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c78:	fab3 f383 	clz	r3, r3
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	f043 0302 	orr.w	r3, r3, #2
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d102      	bne.n	8003c92 <HAL_RCC_OscConfig+0xa06>
 8003c8c:	4b90      	ldr	r3, [pc, #576]	; (8003ed0 <HAL_RCC_OscConfig+0xc44>)
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	e00d      	b.n	8003cae <HAL_RCC_OscConfig+0xa22>
 8003c92:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003c96:	2202      	movs	r2, #2
 8003c98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	fa93 f2a3 	rbit	r2, r3
 8003ca4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	4b89      	ldr	r3, [pc, #548]	; (8003ed0 <HAL_RCC_OscConfig+0xc44>)
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003cb2:	2102      	movs	r1, #2
 8003cb4:	6011      	str	r1, [r2, #0]
 8003cb6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	fa92 f1a2 	rbit	r1, r2
 8003cc0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003cc4:	6011      	str	r1, [r2, #0]
  return result;
 8003cc6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	fab2 f282 	clz	r2, r2
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	f002 021f 	and.w	r2, r2, #31
 8003cdc:	2101      	movs	r1, #1
 8003cde:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1a0      	bne.n	8003c2a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ce8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d105      	bne.n	8003cfc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf0:	4b77      	ldr	r3, [pc, #476]	; (8003ed0 <HAL_RCC_OscConfig+0xc44>)
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	4a76      	ldr	r2, [pc, #472]	; (8003ed0 <HAL_RCC_OscConfig+0xc44>)
 8003cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cfc:	1d3b      	adds	r3, r7, #4
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 81c2 	beq.w	800408c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d08:	4b71      	ldr	r3, [pc, #452]	; (8003ed0 <HAL_RCC_OscConfig+0xc44>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 030c 	and.w	r3, r3, #12
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	f000 819c 	beq.w	800404e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d16:	1d3b      	adds	r3, r7, #4
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	f040 8114 	bne.w	8003f4a <HAL_RCC_OscConfig+0xcbe>
 8003d22:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003d26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	fa93 f2a3 	rbit	r2, r3
 8003d36:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003d3a:	601a      	str	r2, [r3, #0]
  return result;
 8003d3c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003d40:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d42:	fab3 f383 	clz	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	461a      	mov	r2, r3
 8003d54:	2300      	movs	r3, #0
 8003d56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fe fa3c 	bl	80021d4 <HAL_GetTick>
 8003d5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d60:	e009      	b.n	8003d76 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d62:	f7fe fa37 	bl	80021d4 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e18b      	b.n	800408e <HAL_RCC_OscConfig+0xe02>
 8003d76:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003d7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d80:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	fa93 f2a3 	rbit	r2, r3
 8003d8a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003d8e:	601a      	str	r2, [r3, #0]
  return result;
 8003d90:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003d94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d96:	fab3 f383 	clz	r3, r3
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	095b      	lsrs	r3, r3, #5
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d102      	bne.n	8003db0 <HAL_RCC_OscConfig+0xb24>
 8003daa:	4b49      	ldr	r3, [pc, #292]	; (8003ed0 <HAL_RCC_OscConfig+0xc44>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	e01b      	b.n	8003de8 <HAL_RCC_OscConfig+0xb5c>
 8003db0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003db4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003db8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	fa93 f2a3 	rbit	r2, r3
 8003dc4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003dce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	fa93 f2a3 	rbit	r2, r3
 8003dde:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	4b3a      	ldr	r3, [pc, #232]	; (8003ed0 <HAL_RCC_OscConfig+0xc44>)
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003dec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003df0:	6011      	str	r1, [r2, #0]
 8003df2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	fa92 f1a2 	rbit	r1, r2
 8003dfc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003e00:	6011      	str	r1, [r2, #0]
  return result;
 8003e02:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	fab2 f282 	clz	r2, r2
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	f042 0220 	orr.w	r2, r2, #32
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	f002 021f 	and.w	r2, r2, #31
 8003e18:	2101      	movs	r1, #1
 8003e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d19e      	bne.n	8003d62 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e24:	4b2a      	ldr	r3, [pc, #168]	; (8003ed0 <HAL_RCC_OscConfig+0xc44>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e2c:	1d3b      	adds	r3, r7, #4
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e32:	1d3b      	adds	r3, r7, #4
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	4925      	ldr	r1, [pc, #148]	; (8003ed0 <HAL_RCC_OscConfig+0xc44>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	604b      	str	r3, [r1, #4]
 8003e40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	fa93 f2a3 	rbit	r2, r3
 8003e54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e58:	601a      	str	r2, [r3, #0]
  return result;
 8003e5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e5e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e60:	fab3 f383 	clz	r3, r3
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e6a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	461a      	mov	r2, r3
 8003e72:	2301      	movs	r3, #1
 8003e74:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e76:	f7fe f9ad 	bl	80021d4 <HAL_GetTick>
 8003e7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e7e:	e009      	b.n	8003e94 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e80:	f7fe f9a8 	bl	80021d4 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e0fc      	b.n	800408e <HAL_RCC_OscConfig+0xe02>
 8003e94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003e98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	fa93 f2a3 	rbit	r2, r3
 8003ea8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003eac:	601a      	str	r2, [r3, #0]
  return result;
 8003eae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003eb2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eb4:	fab3 f383 	clz	r3, r3
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d105      	bne.n	8003ed4 <HAL_RCC_OscConfig+0xc48>
 8003ec8:	4b01      	ldr	r3, [pc, #4]	; (8003ed0 <HAL_RCC_OscConfig+0xc44>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	e01e      	b.n	8003f0c <HAL_RCC_OscConfig+0xc80>
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ed8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	fa93 f2a3 	rbit	r2, r3
 8003ee8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ef2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	fa93 f2a3 	rbit	r2, r3
 8003f02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	4b63      	ldr	r3, [pc, #396]	; (8004098 <HAL_RCC_OscConfig+0xe0c>)
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f14:	6011      	str	r1, [r2, #0]
 8003f16:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f1a:	6812      	ldr	r2, [r2, #0]
 8003f1c:	fa92 f1a2 	rbit	r1, r2
 8003f20:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f24:	6011      	str	r1, [r2, #0]
  return result;
 8003f26:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	fab2 f282 	clz	r2, r2
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	f042 0220 	orr.w	r2, r2, #32
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	f002 021f 	and.w	r2, r2, #31
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d09b      	beq.n	8003e80 <HAL_RCC_OscConfig+0xbf4>
 8003f48:	e0a0      	b.n	800408c <HAL_RCC_OscConfig+0xe00>
 8003f4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	fa93 f2a3 	rbit	r2, r3
 8003f5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f62:	601a      	str	r2, [r3, #0]
  return result;
 8003f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f68:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6a:	fab3 f383 	clz	r3, r3
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f80:	f7fe f928 	bl	80021d4 <HAL_GetTick>
 8003f84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f88:	e009      	b.n	8003f9e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f8a:	f7fe f923 	bl	80021d4 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e077      	b.n	800408e <HAL_RCC_OscConfig+0xe02>
 8003f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	fa93 f2a3 	rbit	r2, r3
 8003fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fb6:	601a      	str	r2, [r3, #0]
  return result;
 8003fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fbe:	fab3 f383 	clz	r3, r3
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	095b      	lsrs	r3, r3, #5
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d102      	bne.n	8003fd8 <HAL_RCC_OscConfig+0xd4c>
 8003fd2:	4b31      	ldr	r3, [pc, #196]	; (8004098 <HAL_RCC_OscConfig+0xe0c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	e01b      	b.n	8004010 <HAL_RCC_OscConfig+0xd84>
 8003fd8:	f107 0320 	add.w	r3, r7, #32
 8003fdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe2:	f107 0320 	add.w	r3, r7, #32
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	fa93 f2a3 	rbit	r2, r3
 8003fec:	f107 031c 	add.w	r3, r7, #28
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	f107 0318 	add.w	r3, r7, #24
 8003ff6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	f107 0318 	add.w	r3, r7, #24
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	fa93 f2a3 	rbit	r2, r3
 8004006:	f107 0314 	add.w	r3, r7, #20
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	4b22      	ldr	r3, [pc, #136]	; (8004098 <HAL_RCC_OscConfig+0xe0c>)
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	f107 0210 	add.w	r2, r7, #16
 8004014:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004018:	6011      	str	r1, [r2, #0]
 800401a:	f107 0210 	add.w	r2, r7, #16
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	fa92 f1a2 	rbit	r1, r2
 8004024:	f107 020c 	add.w	r2, r7, #12
 8004028:	6011      	str	r1, [r2, #0]
  return result;
 800402a:	f107 020c 	add.w	r2, r7, #12
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	fab2 f282 	clz	r2, r2
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	f042 0220 	orr.w	r2, r2, #32
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	f002 021f 	and.w	r2, r2, #31
 8004040:	2101      	movs	r1, #1
 8004042:	fa01 f202 	lsl.w	r2, r1, r2
 8004046:	4013      	ands	r3, r2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d19e      	bne.n	8003f8a <HAL_RCC_OscConfig+0xcfe>
 800404c:	e01e      	b.n	800408c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800404e:	1d3b      	adds	r3, r7, #4
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e018      	b.n	800408e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800405c:	4b0e      	ldr	r3, [pc, #56]	; (8004098 <HAL_RCC_OscConfig+0xe0c>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004064:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004068:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800406c:	1d3b      	adds	r3, r7, #4
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	429a      	cmp	r2, r3
 8004074:	d108      	bne.n	8004088 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004076:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800407a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800407e:	1d3b      	adds	r3, r7, #4
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004084:	429a      	cmp	r2, r3
 8004086:	d001      	beq.n	800408c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e000      	b.n	800408e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40021000 	.word	0x40021000

0800409c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b09e      	sub	sp, #120	; 0x78
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e162      	b.n	800437a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040b4:	4b90      	ldr	r3, [pc, #576]	; (80042f8 <HAL_RCC_ClockConfig+0x25c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d910      	bls.n	80040e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c2:	4b8d      	ldr	r3, [pc, #564]	; (80042f8 <HAL_RCC_ClockConfig+0x25c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f023 0207 	bic.w	r2, r3, #7
 80040ca:	498b      	ldr	r1, [pc, #556]	; (80042f8 <HAL_RCC_ClockConfig+0x25c>)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d2:	4b89      	ldr	r3, [pc, #548]	; (80042f8 <HAL_RCC_ClockConfig+0x25c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d001      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e14a      	b.n	800437a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d008      	beq.n	8004102 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f0:	4b82      	ldr	r3, [pc, #520]	; (80042fc <HAL_RCC_ClockConfig+0x260>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	497f      	ldr	r1, [pc, #508]	; (80042fc <HAL_RCC_ClockConfig+0x260>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 80dc 	beq.w	80042c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d13c      	bne.n	8004192 <HAL_RCC_ClockConfig+0xf6>
 8004118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800411c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004120:	fa93 f3a3 	rbit	r3, r3
 8004124:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004128:	fab3 f383 	clz	r3, r3
 800412c:	b2db      	uxtb	r3, r3
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	b2db      	uxtb	r3, r3
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b01      	cmp	r3, #1
 800413a:	d102      	bne.n	8004142 <HAL_RCC_ClockConfig+0xa6>
 800413c:	4b6f      	ldr	r3, [pc, #444]	; (80042fc <HAL_RCC_ClockConfig+0x260>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	e00f      	b.n	8004162 <HAL_RCC_ClockConfig+0xc6>
 8004142:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004146:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004148:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800414a:	fa93 f3a3 	rbit	r3, r3
 800414e:	667b      	str	r3, [r7, #100]	; 0x64
 8004150:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004154:	663b      	str	r3, [r7, #96]	; 0x60
 8004156:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004158:	fa93 f3a3 	rbit	r3, r3
 800415c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800415e:	4b67      	ldr	r3, [pc, #412]	; (80042fc <HAL_RCC_ClockConfig+0x260>)
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004166:	65ba      	str	r2, [r7, #88]	; 0x58
 8004168:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800416a:	fa92 f2a2 	rbit	r2, r2
 800416e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004170:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004172:	fab2 f282 	clz	r2, r2
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	f042 0220 	orr.w	r2, r2, #32
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	f002 021f 	and.w	r2, r2, #31
 8004182:	2101      	movs	r1, #1
 8004184:	fa01 f202 	lsl.w	r2, r1, r2
 8004188:	4013      	ands	r3, r2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d17b      	bne.n	8004286 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e0f3      	b.n	800437a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d13c      	bne.n	8004214 <HAL_RCC_ClockConfig+0x178>
 800419a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800419e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041a2:	fa93 f3a3 	rbit	r3, r3
 80041a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80041a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041aa:	fab3 f383 	clz	r3, r3
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d102      	bne.n	80041c4 <HAL_RCC_ClockConfig+0x128>
 80041be:	4b4f      	ldr	r3, [pc, #316]	; (80042fc <HAL_RCC_ClockConfig+0x260>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	e00f      	b.n	80041e4 <HAL_RCC_ClockConfig+0x148>
 80041c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041cc:	fa93 f3a3 	rbit	r3, r3
 80041d0:	647b      	str	r3, [r7, #68]	; 0x44
 80041d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041d6:	643b      	str	r3, [r7, #64]	; 0x40
 80041d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041da:	fa93 f3a3 	rbit	r3, r3
 80041de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041e0:	4b46      	ldr	r3, [pc, #280]	; (80042fc <HAL_RCC_ClockConfig+0x260>)
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80041ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041ec:	fa92 f2a2 	rbit	r2, r2
 80041f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80041f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041f4:	fab2 f282 	clz	r2, r2
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	f042 0220 	orr.w	r2, r2, #32
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	f002 021f 	and.w	r2, r2, #31
 8004204:	2101      	movs	r1, #1
 8004206:	fa01 f202 	lsl.w	r2, r1, r2
 800420a:	4013      	ands	r3, r2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d13a      	bne.n	8004286 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0b2      	b.n	800437a <HAL_RCC_ClockConfig+0x2de>
 8004214:	2302      	movs	r3, #2
 8004216:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421a:	fa93 f3a3 	rbit	r3, r3
 800421e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004222:	fab3 f383 	clz	r3, r3
 8004226:	b2db      	uxtb	r3, r3
 8004228:	095b      	lsrs	r3, r3, #5
 800422a:	b2db      	uxtb	r3, r3
 800422c:	f043 0301 	orr.w	r3, r3, #1
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b01      	cmp	r3, #1
 8004234:	d102      	bne.n	800423c <HAL_RCC_ClockConfig+0x1a0>
 8004236:	4b31      	ldr	r3, [pc, #196]	; (80042fc <HAL_RCC_ClockConfig+0x260>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	e00d      	b.n	8004258 <HAL_RCC_ClockConfig+0x1bc>
 800423c:	2302      	movs	r3, #2
 800423e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004242:	fa93 f3a3 	rbit	r3, r3
 8004246:	627b      	str	r3, [r7, #36]	; 0x24
 8004248:	2302      	movs	r3, #2
 800424a:	623b      	str	r3, [r7, #32]
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	fa93 f3a3 	rbit	r3, r3
 8004252:	61fb      	str	r3, [r7, #28]
 8004254:	4b29      	ldr	r3, [pc, #164]	; (80042fc <HAL_RCC_ClockConfig+0x260>)
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	2202      	movs	r2, #2
 800425a:	61ba      	str	r2, [r7, #24]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	fa92 f2a2 	rbit	r2, r2
 8004262:	617a      	str	r2, [r7, #20]
  return result;
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	fab2 f282 	clz	r2, r2
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	f042 0220 	orr.w	r2, r2, #32
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	f002 021f 	and.w	r2, r2, #31
 8004276:	2101      	movs	r1, #1
 8004278:	fa01 f202 	lsl.w	r2, r1, r2
 800427c:	4013      	ands	r3, r2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e079      	b.n	800437a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004286:	4b1d      	ldr	r3, [pc, #116]	; (80042fc <HAL_RCC_ClockConfig+0x260>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f023 0203 	bic.w	r2, r3, #3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	491a      	ldr	r1, [pc, #104]	; (80042fc <HAL_RCC_ClockConfig+0x260>)
 8004294:	4313      	orrs	r3, r2
 8004296:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004298:	f7fd ff9c 	bl	80021d4 <HAL_GetTick>
 800429c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429e:	e00a      	b.n	80042b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a0:	f7fd ff98 	bl	80021d4 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e061      	b.n	800437a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b6:	4b11      	ldr	r3, [pc, #68]	; (80042fc <HAL_RCC_ClockConfig+0x260>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f003 020c 	and.w	r2, r3, #12
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d1eb      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042c8:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <HAL_RCC_ClockConfig+0x25c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d214      	bcs.n	8004300 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d6:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <HAL_RCC_ClockConfig+0x25c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f023 0207 	bic.w	r2, r3, #7
 80042de:	4906      	ldr	r1, [pc, #24]	; (80042f8 <HAL_RCC_ClockConfig+0x25c>)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e6:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <HAL_RCC_ClockConfig+0x25c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d005      	beq.n	8004300 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e040      	b.n	800437a <HAL_RCC_ClockConfig+0x2de>
 80042f8:	40022000 	.word	0x40022000
 80042fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d008      	beq.n	800431e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800430c:	4b1d      	ldr	r3, [pc, #116]	; (8004384 <HAL_RCC_ClockConfig+0x2e8>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	491a      	ldr	r1, [pc, #104]	; (8004384 <HAL_RCC_ClockConfig+0x2e8>)
 800431a:	4313      	orrs	r3, r2
 800431c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d009      	beq.n	800433e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800432a:	4b16      	ldr	r3, [pc, #88]	; (8004384 <HAL_RCC_ClockConfig+0x2e8>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4912      	ldr	r1, [pc, #72]	; (8004384 <HAL_RCC_ClockConfig+0x2e8>)
 800433a:	4313      	orrs	r3, r2
 800433c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800433e:	f000 f829 	bl	8004394 <HAL_RCC_GetSysClockFreq>
 8004342:	4601      	mov	r1, r0
 8004344:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <HAL_RCC_ClockConfig+0x2e8>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800434c:	22f0      	movs	r2, #240	; 0xf0
 800434e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	fa92 f2a2 	rbit	r2, r2
 8004356:	60fa      	str	r2, [r7, #12]
  return result;
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	fab2 f282 	clz	r2, r2
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	40d3      	lsrs	r3, r2
 8004362:	4a09      	ldr	r2, [pc, #36]	; (8004388 <HAL_RCC_ClockConfig+0x2ec>)
 8004364:	5cd3      	ldrb	r3, [r2, r3]
 8004366:	fa21 f303 	lsr.w	r3, r1, r3
 800436a:	4a08      	ldr	r2, [pc, #32]	; (800438c <HAL_RCC_ClockConfig+0x2f0>)
 800436c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800436e:	4b08      	ldr	r3, [pc, #32]	; (8004390 <HAL_RCC_ClockConfig+0x2f4>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f7fd feea 	bl	800214c <HAL_InitTick>
  
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3778      	adds	r7, #120	; 0x78
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40021000 	.word	0x40021000
 8004388:	0800b0ac 	.word	0x0800b0ac
 800438c:	20000008 	.word	0x20000008
 8004390:	2000000c 	.word	0x2000000c

08004394 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004394:	b480      	push	{r7}
 8004396:	b08b      	sub	sp, #44	; 0x2c
 8004398:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
 800439e:	2300      	movs	r3, #0
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	2300      	movs	r3, #0
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80043ae:	4b29      	ldr	r3, [pc, #164]	; (8004454 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d002      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0x30>
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d003      	beq.n	80043ca <HAL_RCC_GetSysClockFreq+0x36>
 80043c2:	e03c      	b.n	800443e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043c4:	4b24      	ldr	r3, [pc, #144]	; (8004458 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043c6:	623b      	str	r3, [r7, #32]
      break;
 80043c8:	e03c      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80043d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80043d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	fa92 f2a2 	rbit	r2, r2
 80043dc:	607a      	str	r2, [r7, #4]
  return result;
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	fab2 f282 	clz	r2, r2
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	40d3      	lsrs	r3, r2
 80043e8:	4a1c      	ldr	r2, [pc, #112]	; (800445c <HAL_RCC_GetSysClockFreq+0xc8>)
 80043ea:	5cd3      	ldrb	r3, [r2, r3]
 80043ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80043ee:	4b19      	ldr	r3, [pc, #100]	; (8004454 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	220f      	movs	r2, #15
 80043f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	fa92 f2a2 	rbit	r2, r2
 8004400:	60fa      	str	r2, [r7, #12]
  return result;
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	fab2 f282 	clz	r2, r2
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	40d3      	lsrs	r3, r2
 800440c:	4a14      	ldr	r2, [pc, #80]	; (8004460 <HAL_RCC_GetSysClockFreq+0xcc>)
 800440e:	5cd3      	ldrb	r3, [r2, r3]
 8004410:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d008      	beq.n	800442e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800441c:	4a0e      	ldr	r2, [pc, #56]	; (8004458 <HAL_RCC_GetSysClockFreq+0xc4>)
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	fbb2 f2f3 	udiv	r2, r2, r3
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	fb02 f303 	mul.w	r3, r2, r3
 800442a:	627b      	str	r3, [r7, #36]	; 0x24
 800442c:	e004      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	4a0c      	ldr	r2, [pc, #48]	; (8004464 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004432:	fb02 f303 	mul.w	r3, r2, r3
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	623b      	str	r3, [r7, #32]
      break;
 800443c:	e002      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800443e:	4b06      	ldr	r3, [pc, #24]	; (8004458 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004440:	623b      	str	r3, [r7, #32]
      break;
 8004442:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004444:	6a3b      	ldr	r3, [r7, #32]
}
 8004446:	4618      	mov	r0, r3
 8004448:	372c      	adds	r7, #44	; 0x2c
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40021000 	.word	0x40021000
 8004458:	007a1200 	.word	0x007a1200
 800445c:	0800b0bc 	.word	0x0800b0bc
 8004460:	0800b0cc 	.word	0x0800b0cc
 8004464:	003d0900 	.word	0x003d0900

08004468 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b092      	sub	sp, #72	; 0x48
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004478:	2300      	movs	r3, #0
 800447a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 80cd 	beq.w	8004626 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800448c:	4b86      	ldr	r3, [pc, #536]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10e      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004498:	4b83      	ldr	r3, [pc, #524]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	4a82      	ldr	r2, [pc, #520]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800449e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a2:	61d3      	str	r3, [r2, #28]
 80044a4:	4b80      	ldr	r3, [pc, #512]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ac:	60bb      	str	r3, [r7, #8]
 80044ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044b0:	2301      	movs	r3, #1
 80044b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b6:	4b7d      	ldr	r3, [pc, #500]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d118      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044c2:	4b7a      	ldr	r3, [pc, #488]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a79      	ldr	r2, [pc, #484]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80044c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ce:	f7fd fe81 	bl	80021d4 <HAL_GetTick>
 80044d2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d4:	e008      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d6:	f7fd fe7d 	bl	80021d4 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b64      	cmp	r3, #100	; 0x64
 80044e2:	d901      	bls.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e0db      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e8:	4b70      	ldr	r3, [pc, #448]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0f0      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044f4:	4b6c      	ldr	r3, [pc, #432]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d07d      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800450c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800450e:	429a      	cmp	r2, r3
 8004510:	d076      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004512:	4b65      	ldr	r3, [pc, #404]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800451a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800451c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004520:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	fa93 f3a3 	rbit	r3, r3
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800452a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800452c:	fab3 f383 	clz	r3, r3
 8004530:	b2db      	uxtb	r3, r3
 8004532:	461a      	mov	r2, r3
 8004534:	4b5e      	ldr	r3, [pc, #376]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	461a      	mov	r2, r3
 800453c:	2301      	movs	r3, #1
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004544:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004548:	fa93 f3a3 	rbit	r3, r3
 800454c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800454e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004550:	fab3 f383 	clz	r3, r3
 8004554:	b2db      	uxtb	r3, r3
 8004556:	461a      	mov	r2, r3
 8004558:	4b55      	ldr	r3, [pc, #340]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	461a      	mov	r2, r3
 8004560:	2300      	movs	r3, #0
 8004562:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004564:	4a50      	ldr	r2, [pc, #320]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004568:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800456a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d045      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004574:	f7fd fe2e 	bl	80021d4 <HAL_GetTick>
 8004578:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457a:	e00a      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457c:	f7fd fe2a 	bl	80021d4 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	f241 3288 	movw	r2, #5000	; 0x1388
 800458a:	4293      	cmp	r3, r2
 800458c:	d901      	bls.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e086      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004592:	2302      	movs	r3, #2
 8004594:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	fa93 f3a3 	rbit	r3, r3
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
 800459e:	2302      	movs	r3, #2
 80045a0:	623b      	str	r3, [r7, #32]
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	fa93 f3a3 	rbit	r3, r3
 80045a8:	61fb      	str	r3, [r7, #28]
  return result;
 80045aa:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ac:	fab3 f383 	clz	r3, r3
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	f043 0302 	orr.w	r3, r3, #2
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d102      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80045c0:	4b39      	ldr	r3, [pc, #228]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	e007      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80045c6:	2302      	movs	r3, #2
 80045c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	fa93 f3a3 	rbit	r3, r3
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	4b35      	ldr	r3, [pc, #212]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	2202      	movs	r2, #2
 80045d8:	613a      	str	r2, [r7, #16]
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	fa92 f2a2 	rbit	r2, r2
 80045e0:	60fa      	str	r2, [r7, #12]
  return result;
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	fab2 f282 	clz	r2, r2
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	f002 021f 	and.w	r2, r2, #31
 80045f4:	2101      	movs	r1, #1
 80045f6:	fa01 f202 	lsl.w	r2, r1, r2
 80045fa:	4013      	ands	r3, r2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0bd      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004600:	4b29      	ldr	r3, [pc, #164]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	4926      	ldr	r1, [pc, #152]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800460e:	4313      	orrs	r3, r2
 8004610:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004612:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004616:	2b01      	cmp	r3, #1
 8004618:	d105      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800461a:	4b23      	ldr	r3, [pc, #140]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	4a22      	ldr	r2, [pc, #136]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004624:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d008      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004632:	4b1d      	ldr	r3, [pc, #116]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	f023 0203 	bic.w	r2, r3, #3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	491a      	ldr	r1, [pc, #104]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004640:	4313      	orrs	r3, r2
 8004642:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0320 	and.w	r3, r3, #32
 800464c:	2b00      	cmp	r3, #0
 800464e:	d008      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004650:	4b15      	ldr	r3, [pc, #84]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	f023 0210 	bic.w	r2, r3, #16
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	4912      	ldr	r1, [pc, #72]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800465e:	4313      	orrs	r3, r2
 8004660:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466a:	2b00      	cmp	r3, #0
 800466c:	d008      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800466e:	4b0e      	ldr	r3, [pc, #56]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004672:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	490b      	ldr	r1, [pc, #44]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800467c:	4313      	orrs	r3, r2
 800467e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d008      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800468c:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	4903      	ldr	r1, [pc, #12]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800469a:	4313      	orrs	r3, r2
 800469c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3748      	adds	r7, #72	; 0x48
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40021000 	.word	0x40021000
 80046ac:	40007000 	.word	0x40007000
 80046b0:	10908100 	.word	0x10908100

080046b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e049      	b.n	800475a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fd fbbc 	bl	8001e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3304      	adds	r3, #4
 80046f0:	4619      	mov	r1, r3
 80046f2:	4610      	mov	r0, r2
 80046f4:	f000 fbb4 	bl	8004e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	d001      	beq.n	800477c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e040      	b.n	80047fe <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0201 	orr.w	r2, r2, #1
 8004792:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a1c      	ldr	r2, [pc, #112]	; (800480c <HAL_TIM_Base_Start_IT+0xa8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00e      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x58>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a6:	d009      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x58>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a18      	ldr	r2, [pc, #96]	; (8004810 <HAL_TIM_Base_Start_IT+0xac>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x58>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a17      	ldr	r2, [pc, #92]	; (8004814 <HAL_TIM_Base_Start_IT+0xb0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d115      	bne.n	80047e8 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	4b15      	ldr	r3, [pc, #84]	; (8004818 <HAL_TIM_Base_Start_IT+0xb4>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b06      	cmp	r3, #6
 80047cc:	d015      	beq.n	80047fa <HAL_TIM_Base_Start_IT+0x96>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d4:	d011      	beq.n	80047fa <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0201 	orr.w	r2, r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e6:	e008      	b.n	80047fa <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	e000      	b.n	80047fc <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40012c00 	.word	0x40012c00
 8004810:	40000400 	.word	0x40000400
 8004814:	40014000 	.word	0x40014000
 8004818:	00010007 	.word	0x00010007

0800481c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e049      	b.n	80048c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fd faea 	bl	8001e1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3304      	adds	r3, #4
 8004858:	4619      	mov	r1, r3
 800485a:	4610      	mov	r0, r2
 800485c:	f000 fb00 	bl	8004e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d109      	bne.n	80048f0 <HAL_TIM_PWM_Start+0x24>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	bf14      	ite	ne
 80048e8:	2301      	movne	r3, #1
 80048ea:	2300      	moveq	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	e03c      	b.n	800496a <HAL_TIM_PWM_Start+0x9e>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d109      	bne.n	800490a <HAL_TIM_PWM_Start+0x3e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b01      	cmp	r3, #1
 8004900:	bf14      	ite	ne
 8004902:	2301      	movne	r3, #1
 8004904:	2300      	moveq	r3, #0
 8004906:	b2db      	uxtb	r3, r3
 8004908:	e02f      	b.n	800496a <HAL_TIM_PWM_Start+0x9e>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b08      	cmp	r3, #8
 800490e:	d109      	bne.n	8004924 <HAL_TIM_PWM_Start+0x58>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b01      	cmp	r3, #1
 800491a:	bf14      	ite	ne
 800491c:	2301      	movne	r3, #1
 800491e:	2300      	moveq	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	e022      	b.n	800496a <HAL_TIM_PWM_Start+0x9e>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b0c      	cmp	r3, #12
 8004928:	d109      	bne.n	800493e <HAL_TIM_PWM_Start+0x72>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b01      	cmp	r3, #1
 8004934:	bf14      	ite	ne
 8004936:	2301      	movne	r3, #1
 8004938:	2300      	moveq	r3, #0
 800493a:	b2db      	uxtb	r3, r3
 800493c:	e015      	b.n	800496a <HAL_TIM_PWM_Start+0x9e>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b10      	cmp	r3, #16
 8004942:	d109      	bne.n	8004958 <HAL_TIM_PWM_Start+0x8c>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b01      	cmp	r3, #1
 800494e:	bf14      	ite	ne
 8004950:	2301      	movne	r3, #1
 8004952:	2300      	moveq	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	e008      	b.n	800496a <HAL_TIM_PWM_Start+0x9e>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b01      	cmp	r3, #1
 8004962:	bf14      	ite	ne
 8004964:	2301      	movne	r3, #1
 8004966:	2300      	moveq	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e088      	b.n	8004a84 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d104      	bne.n	8004982 <HAL_TIM_PWM_Start+0xb6>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004980:	e023      	b.n	80049ca <HAL_TIM_PWM_Start+0xfe>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b04      	cmp	r3, #4
 8004986:	d104      	bne.n	8004992 <HAL_TIM_PWM_Start+0xc6>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004990:	e01b      	b.n	80049ca <HAL_TIM_PWM_Start+0xfe>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b08      	cmp	r3, #8
 8004996:	d104      	bne.n	80049a2 <HAL_TIM_PWM_Start+0xd6>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049a0:	e013      	b.n	80049ca <HAL_TIM_PWM_Start+0xfe>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b0c      	cmp	r3, #12
 80049a6:	d104      	bne.n	80049b2 <HAL_TIM_PWM_Start+0xe6>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049b0:	e00b      	b.n	80049ca <HAL_TIM_PWM_Start+0xfe>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b10      	cmp	r3, #16
 80049b6:	d104      	bne.n	80049c2 <HAL_TIM_PWM_Start+0xf6>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049c0:	e003      	b.n	80049ca <HAL_TIM_PWM_Start+0xfe>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2202      	movs	r2, #2
 80049c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2201      	movs	r2, #1
 80049d0:	6839      	ldr	r1, [r7, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 fdfc 	bl	80055d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a2b      	ldr	r2, [pc, #172]	; (8004a8c <HAL_TIM_PWM_Start+0x1c0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00e      	beq.n	8004a00 <HAL_TIM_PWM_Start+0x134>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a2a      	ldr	r2, [pc, #168]	; (8004a90 <HAL_TIM_PWM_Start+0x1c4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d009      	beq.n	8004a00 <HAL_TIM_PWM_Start+0x134>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a28      	ldr	r2, [pc, #160]	; (8004a94 <HAL_TIM_PWM_Start+0x1c8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d004      	beq.n	8004a00 <HAL_TIM_PWM_Start+0x134>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a27      	ldr	r2, [pc, #156]	; (8004a98 <HAL_TIM_PWM_Start+0x1cc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d101      	bne.n	8004a04 <HAL_TIM_PWM_Start+0x138>
 8004a00:	2301      	movs	r3, #1
 8004a02:	e000      	b.n	8004a06 <HAL_TIM_PWM_Start+0x13a>
 8004a04:	2300      	movs	r3, #0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a1b      	ldr	r2, [pc, #108]	; (8004a8c <HAL_TIM_PWM_Start+0x1c0>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00e      	beq.n	8004a42 <HAL_TIM_PWM_Start+0x176>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a2c:	d009      	beq.n	8004a42 <HAL_TIM_PWM_Start+0x176>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a1a      	ldr	r2, [pc, #104]	; (8004a9c <HAL_TIM_PWM_Start+0x1d0>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d004      	beq.n	8004a42 <HAL_TIM_PWM_Start+0x176>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a14      	ldr	r2, [pc, #80]	; (8004a90 <HAL_TIM_PWM_Start+0x1c4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d115      	bne.n	8004a6e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <HAL_TIM_PWM_Start+0x1d4>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2b06      	cmp	r3, #6
 8004a52:	d015      	beq.n	8004a80 <HAL_TIM_PWM_Start+0x1b4>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a5a:	d011      	beq.n	8004a80 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0201 	orr.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a6c:	e008      	b.n	8004a80 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f042 0201 	orr.w	r2, r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	e000      	b.n	8004a82 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	40012c00 	.word	0x40012c00
 8004a90:	40014000 	.word	0x40014000
 8004a94:	40014400 	.word	0x40014400
 8004a98:	40014800 	.word	0x40014800
 8004a9c:	40000400 	.word	0x40000400
 8004aa0:	00010007 	.word	0x00010007

08004aa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e0ff      	b.n	8004cc2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b14      	cmp	r3, #20
 8004ace:	f200 80f0 	bhi.w	8004cb2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ad2:	a201      	add	r2, pc, #4	; (adr r2, 8004ad8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad8:	08004b2d 	.word	0x08004b2d
 8004adc:	08004cb3 	.word	0x08004cb3
 8004ae0:	08004cb3 	.word	0x08004cb3
 8004ae4:	08004cb3 	.word	0x08004cb3
 8004ae8:	08004b6d 	.word	0x08004b6d
 8004aec:	08004cb3 	.word	0x08004cb3
 8004af0:	08004cb3 	.word	0x08004cb3
 8004af4:	08004cb3 	.word	0x08004cb3
 8004af8:	08004baf 	.word	0x08004baf
 8004afc:	08004cb3 	.word	0x08004cb3
 8004b00:	08004cb3 	.word	0x08004cb3
 8004b04:	08004cb3 	.word	0x08004cb3
 8004b08:	08004bef 	.word	0x08004bef
 8004b0c:	08004cb3 	.word	0x08004cb3
 8004b10:	08004cb3 	.word	0x08004cb3
 8004b14:	08004cb3 	.word	0x08004cb3
 8004b18:	08004c31 	.word	0x08004c31
 8004b1c:	08004cb3 	.word	0x08004cb3
 8004b20:	08004cb3 	.word	0x08004cb3
 8004b24:	08004cb3 	.word	0x08004cb3
 8004b28:	08004c71 	.word	0x08004c71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68b9      	ldr	r1, [r7, #8]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 fa0c 	bl	8004f50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0208 	orr.w	r2, r2, #8
 8004b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699a      	ldr	r2, [r3, #24]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0204 	bic.w	r2, r2, #4
 8004b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6999      	ldr	r1, [r3, #24]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	691a      	ldr	r2, [r3, #16]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	619a      	str	r2, [r3, #24]
      break;
 8004b6a:	e0a5      	b.n	8004cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68b9      	ldr	r1, [r7, #8]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fa72 	bl	800505c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6999      	ldr	r1, [r3, #24]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	021a      	lsls	r2, r3, #8
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	619a      	str	r2, [r3, #24]
      break;
 8004bac:	e084      	b.n	8004cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68b9      	ldr	r1, [r7, #8]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 fad1 	bl	800515c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69da      	ldr	r2, [r3, #28]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f042 0208 	orr.w	r2, r2, #8
 8004bc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69da      	ldr	r2, [r3, #28]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0204 	bic.w	r2, r2, #4
 8004bd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69d9      	ldr	r1, [r3, #28]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	691a      	ldr	r2, [r3, #16]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	61da      	str	r2, [r3, #28]
      break;
 8004bec:	e064      	b.n	8004cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68b9      	ldr	r1, [r7, #8]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fb2f 	bl	8005258 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69da      	ldr	r2, [r3, #28]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69da      	ldr	r2, [r3, #28]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69d9      	ldr	r1, [r3, #28]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	021a      	lsls	r2, r3, #8
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	61da      	str	r2, [r3, #28]
      break;
 8004c2e:	e043      	b.n	8004cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68b9      	ldr	r1, [r7, #8]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 fb72 	bl	8005320 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0208 	orr.w	r2, r2, #8
 8004c4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0204 	bic.w	r2, r2, #4
 8004c5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	691a      	ldr	r2, [r3, #16]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c6e:	e023      	b.n	8004cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fbb0 	bl	80053dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	021a      	lsls	r2, r3, #8
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cb0:	e002      	b.n	8004cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8004cb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop

08004ccc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d101      	bne.n	8004ce8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	e0b6      	b.n	8004e56 <HAL_TIM_ConfigClockSource+0x18a>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d24:	d03e      	beq.n	8004da4 <HAL_TIM_ConfigClockSource+0xd8>
 8004d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d2a:	f200 8087 	bhi.w	8004e3c <HAL_TIM_ConfigClockSource+0x170>
 8004d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d32:	f000 8086 	beq.w	8004e42 <HAL_TIM_ConfigClockSource+0x176>
 8004d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d3a:	d87f      	bhi.n	8004e3c <HAL_TIM_ConfigClockSource+0x170>
 8004d3c:	2b70      	cmp	r3, #112	; 0x70
 8004d3e:	d01a      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0xaa>
 8004d40:	2b70      	cmp	r3, #112	; 0x70
 8004d42:	d87b      	bhi.n	8004e3c <HAL_TIM_ConfigClockSource+0x170>
 8004d44:	2b60      	cmp	r3, #96	; 0x60
 8004d46:	d050      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x11e>
 8004d48:	2b60      	cmp	r3, #96	; 0x60
 8004d4a:	d877      	bhi.n	8004e3c <HAL_TIM_ConfigClockSource+0x170>
 8004d4c:	2b50      	cmp	r3, #80	; 0x50
 8004d4e:	d03c      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0xfe>
 8004d50:	2b50      	cmp	r3, #80	; 0x50
 8004d52:	d873      	bhi.n	8004e3c <HAL_TIM_ConfigClockSource+0x170>
 8004d54:	2b40      	cmp	r3, #64	; 0x40
 8004d56:	d058      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x13e>
 8004d58:	2b40      	cmp	r3, #64	; 0x40
 8004d5a:	d86f      	bhi.n	8004e3c <HAL_TIM_ConfigClockSource+0x170>
 8004d5c:	2b30      	cmp	r3, #48	; 0x30
 8004d5e:	d064      	beq.n	8004e2a <HAL_TIM_ConfigClockSource+0x15e>
 8004d60:	2b30      	cmp	r3, #48	; 0x30
 8004d62:	d86b      	bhi.n	8004e3c <HAL_TIM_ConfigClockSource+0x170>
 8004d64:	2b20      	cmp	r3, #32
 8004d66:	d060      	beq.n	8004e2a <HAL_TIM_ConfigClockSource+0x15e>
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d867      	bhi.n	8004e3c <HAL_TIM_ConfigClockSource+0x170>
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d05c      	beq.n	8004e2a <HAL_TIM_ConfigClockSource+0x15e>
 8004d70:	2b10      	cmp	r3, #16
 8004d72:	d05a      	beq.n	8004e2a <HAL_TIM_ConfigClockSource+0x15e>
 8004d74:	e062      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	6899      	ldr	r1, [r3, #8]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f000 fc03 	bl	8005590 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	609a      	str	r2, [r3, #8]
      break;
 8004da2:	e04f      	b.n	8004e44 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6818      	ldr	r0, [r3, #0]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	6899      	ldr	r1, [r3, #8]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f000 fbec 	bl	8005590 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dc6:	609a      	str	r2, [r3, #8]
      break;
 8004dc8:	e03c      	b.n	8004e44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6818      	ldr	r0, [r3, #0]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	6859      	ldr	r1, [r3, #4]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f000 fb60 	bl	800549c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2150      	movs	r1, #80	; 0x50
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fbb9 	bl	800555a <TIM_ITRx_SetConfig>
      break;
 8004de8:	e02c      	b.n	8004e44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6818      	ldr	r0, [r3, #0]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	6859      	ldr	r1, [r3, #4]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	461a      	mov	r2, r3
 8004df8:	f000 fb7f 	bl	80054fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2160      	movs	r1, #96	; 0x60
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fba9 	bl	800555a <TIM_ITRx_SetConfig>
      break;
 8004e08:	e01c      	b.n	8004e44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6818      	ldr	r0, [r3, #0]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	6859      	ldr	r1, [r3, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	461a      	mov	r2, r3
 8004e18:	f000 fb40 	bl	800549c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2140      	movs	r1, #64	; 0x40
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fb99 	bl	800555a <TIM_ITRx_SetConfig>
      break;
 8004e28:	e00c      	b.n	8004e44 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4619      	mov	r1, r3
 8004e34:	4610      	mov	r0, r2
 8004e36:	f000 fb90 	bl	800555a <TIM_ITRx_SetConfig>
      break;
 8004e3a:	e003      	b.n	8004e44 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e40:	e000      	b.n	8004e44 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004e42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a32      	ldr	r2, [pc, #200]	; (8004f3c <TIM_Base_SetConfig+0xdc>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d007      	beq.n	8004e88 <TIM_Base_SetConfig+0x28>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7e:	d003      	beq.n	8004e88 <TIM_Base_SetConfig+0x28>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a2f      	ldr	r2, [pc, #188]	; (8004f40 <TIM_Base_SetConfig+0xe0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d108      	bne.n	8004e9a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a27      	ldr	r2, [pc, #156]	; (8004f3c <TIM_Base_SetConfig+0xdc>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <TIM_Base_SetConfig+0x6a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea8:	d00f      	beq.n	8004eca <TIM_Base_SetConfig+0x6a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a24      	ldr	r2, [pc, #144]	; (8004f40 <TIM_Base_SetConfig+0xe0>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00b      	beq.n	8004eca <TIM_Base_SetConfig+0x6a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a23      	ldr	r2, [pc, #140]	; (8004f44 <TIM_Base_SetConfig+0xe4>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d007      	beq.n	8004eca <TIM_Base_SetConfig+0x6a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a22      	ldr	r2, [pc, #136]	; (8004f48 <TIM_Base_SetConfig+0xe8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d003      	beq.n	8004eca <TIM_Base_SetConfig+0x6a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a21      	ldr	r2, [pc, #132]	; (8004f4c <TIM_Base_SetConfig+0xec>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d108      	bne.n	8004edc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a0e      	ldr	r2, [pc, #56]	; (8004f3c <TIM_Base_SetConfig+0xdc>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00b      	beq.n	8004f20 <TIM_Base_SetConfig+0xc0>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a0e      	ldr	r2, [pc, #56]	; (8004f44 <TIM_Base_SetConfig+0xe4>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d007      	beq.n	8004f20 <TIM_Base_SetConfig+0xc0>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a0d      	ldr	r2, [pc, #52]	; (8004f48 <TIM_Base_SetConfig+0xe8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d003      	beq.n	8004f20 <TIM_Base_SetConfig+0xc0>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a0c      	ldr	r2, [pc, #48]	; (8004f4c <TIM_Base_SetConfig+0xec>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d103      	bne.n	8004f28 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	615a      	str	r2, [r3, #20]
}
 8004f2e:	bf00      	nop
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	40012c00 	.word	0x40012c00
 8004f40:	40000400 	.word	0x40000400
 8004f44:	40014000 	.word	0x40014000
 8004f48:	40014400 	.word	0x40014400
 8004f4c:	40014800 	.word	0x40014800

08004f50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	f023 0201 	bic.w	r2, r3, #1
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0303 	bic.w	r3, r3, #3
 8004f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f023 0302 	bic.w	r3, r3, #2
 8004f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a28      	ldr	r2, [pc, #160]	; (800504c <TIM_OC1_SetConfig+0xfc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d00b      	beq.n	8004fc8 <TIM_OC1_SetConfig+0x78>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a27      	ldr	r2, [pc, #156]	; (8005050 <TIM_OC1_SetConfig+0x100>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d007      	beq.n	8004fc8 <TIM_OC1_SetConfig+0x78>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a26      	ldr	r2, [pc, #152]	; (8005054 <TIM_OC1_SetConfig+0x104>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d003      	beq.n	8004fc8 <TIM_OC1_SetConfig+0x78>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a25      	ldr	r2, [pc, #148]	; (8005058 <TIM_OC1_SetConfig+0x108>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d10c      	bne.n	8004fe2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f023 0308 	bic.w	r3, r3, #8
 8004fce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f023 0304 	bic.w	r3, r3, #4
 8004fe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a19      	ldr	r2, [pc, #100]	; (800504c <TIM_OC1_SetConfig+0xfc>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00b      	beq.n	8005002 <TIM_OC1_SetConfig+0xb2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a18      	ldr	r2, [pc, #96]	; (8005050 <TIM_OC1_SetConfig+0x100>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d007      	beq.n	8005002 <TIM_OC1_SetConfig+0xb2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a17      	ldr	r2, [pc, #92]	; (8005054 <TIM_OC1_SetConfig+0x104>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d003      	beq.n	8005002 <TIM_OC1_SetConfig+0xb2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a16      	ldr	r2, [pc, #88]	; (8005058 <TIM_OC1_SetConfig+0x108>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d111      	bne.n	8005026 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	621a      	str	r2, [r3, #32]
}
 8005040:	bf00      	nop
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	40012c00 	.word	0x40012c00
 8005050:	40014000 	.word	0x40014000
 8005054:	40014400 	.word	0x40014400
 8005058:	40014800 	.word	0x40014800

0800505c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	f023 0210 	bic.w	r2, r3, #16
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800508a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800508e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	021b      	lsls	r3, r3, #8
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f023 0320 	bic.w	r3, r3, #32
 80050aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a24      	ldr	r2, [pc, #144]	; (800514c <TIM_OC2_SetConfig+0xf0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d10d      	bne.n	80050dc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a1b      	ldr	r2, [pc, #108]	; (800514c <TIM_OC2_SetConfig+0xf0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00b      	beq.n	80050fc <TIM_OC2_SetConfig+0xa0>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a1a      	ldr	r2, [pc, #104]	; (8005150 <TIM_OC2_SetConfig+0xf4>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d007      	beq.n	80050fc <TIM_OC2_SetConfig+0xa0>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a19      	ldr	r2, [pc, #100]	; (8005154 <TIM_OC2_SetConfig+0xf8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_OC2_SetConfig+0xa0>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a18      	ldr	r2, [pc, #96]	; (8005158 <TIM_OC2_SetConfig+0xfc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d113      	bne.n	8005124 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005102:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800510a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	621a      	str	r2, [r3, #32]
}
 800513e:	bf00      	nop
 8005140:	371c      	adds	r7, #28
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40012c00 	.word	0x40012c00
 8005150:	40014000 	.word	0x40014000
 8005154:	40014400 	.word	0x40014400
 8005158:	40014800 	.word	0x40014800

0800515c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800518a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0303 	bic.w	r3, r3, #3
 8005196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	021b      	lsls	r3, r3, #8
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a23      	ldr	r2, [pc, #140]	; (8005248 <TIM_OC3_SetConfig+0xec>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d10d      	bne.n	80051da <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	021b      	lsls	r3, r3, #8
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051d8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a1a      	ldr	r2, [pc, #104]	; (8005248 <TIM_OC3_SetConfig+0xec>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00b      	beq.n	80051fa <TIM_OC3_SetConfig+0x9e>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a19      	ldr	r2, [pc, #100]	; (800524c <TIM_OC3_SetConfig+0xf0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d007      	beq.n	80051fa <TIM_OC3_SetConfig+0x9e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a18      	ldr	r2, [pc, #96]	; (8005250 <TIM_OC3_SetConfig+0xf4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d003      	beq.n	80051fa <TIM_OC3_SetConfig+0x9e>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a17      	ldr	r2, [pc, #92]	; (8005254 <TIM_OC3_SetConfig+0xf8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d113      	bne.n	8005222 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	4313      	orrs	r3, r2
 8005214:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	621a      	str	r2, [r3, #32]
}
 800523c:	bf00      	nop
 800523e:	371c      	adds	r7, #28
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	40012c00 	.word	0x40012c00
 800524c:	40014000 	.word	0x40014000
 8005250:	40014400 	.word	0x40014400
 8005254:	40014800 	.word	0x40014800

08005258 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800528a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	021b      	lsls	r3, r3, #8
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	4313      	orrs	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	031b      	lsls	r3, r3, #12
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a16      	ldr	r2, [pc, #88]	; (8005310 <TIM_OC4_SetConfig+0xb8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d00b      	beq.n	80052d4 <TIM_OC4_SetConfig+0x7c>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a15      	ldr	r2, [pc, #84]	; (8005314 <TIM_OC4_SetConfig+0xbc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d007      	beq.n	80052d4 <TIM_OC4_SetConfig+0x7c>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a14      	ldr	r2, [pc, #80]	; (8005318 <TIM_OC4_SetConfig+0xc0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d003      	beq.n	80052d4 <TIM_OC4_SetConfig+0x7c>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a13      	ldr	r2, [pc, #76]	; (800531c <TIM_OC4_SetConfig+0xc4>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d109      	bne.n	80052e8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	019b      	lsls	r3, r3, #6
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	621a      	str	r2, [r3, #32]
}
 8005302:	bf00      	nop
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40012c00 	.word	0x40012c00
 8005314:	40014000 	.word	0x40014000
 8005318:	40014400 	.word	0x40014400
 800531c:	40014800 	.word	0x40014800

08005320 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800534e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005364:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	041b      	lsls	r3, r3, #16
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a15      	ldr	r2, [pc, #84]	; (80053cc <TIM_OC5_SetConfig+0xac>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00b      	beq.n	8005392 <TIM_OC5_SetConfig+0x72>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a14      	ldr	r2, [pc, #80]	; (80053d0 <TIM_OC5_SetConfig+0xb0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d007      	beq.n	8005392 <TIM_OC5_SetConfig+0x72>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a13      	ldr	r2, [pc, #76]	; (80053d4 <TIM_OC5_SetConfig+0xb4>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d003      	beq.n	8005392 <TIM_OC5_SetConfig+0x72>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a12      	ldr	r2, [pc, #72]	; (80053d8 <TIM_OC5_SetConfig+0xb8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d109      	bne.n	80053a6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005398:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	021b      	lsls	r3, r3, #8
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	621a      	str	r2, [r3, #32]
}
 80053c0:	bf00      	nop
 80053c2:	371c      	adds	r7, #28
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	40012c00 	.word	0x40012c00
 80053d0:	40014000 	.word	0x40014000
 80053d4:	40014400 	.word	0x40014400
 80053d8:	40014800 	.word	0x40014800

080053dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800540a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800540e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	021b      	lsls	r3, r3, #8
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4313      	orrs	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005422:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	051b      	lsls	r3, r3, #20
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a16      	ldr	r2, [pc, #88]	; (800548c <TIM_OC6_SetConfig+0xb0>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00b      	beq.n	8005450 <TIM_OC6_SetConfig+0x74>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a15      	ldr	r2, [pc, #84]	; (8005490 <TIM_OC6_SetConfig+0xb4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d007      	beq.n	8005450 <TIM_OC6_SetConfig+0x74>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a14      	ldr	r2, [pc, #80]	; (8005494 <TIM_OC6_SetConfig+0xb8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d003      	beq.n	8005450 <TIM_OC6_SetConfig+0x74>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a13      	ldr	r2, [pc, #76]	; (8005498 <TIM_OC6_SetConfig+0xbc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d109      	bne.n	8005464 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005456:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	029b      	lsls	r3, r3, #10
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	4313      	orrs	r3, r2
 8005462:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	621a      	str	r2, [r3, #32]
}
 800547e:	bf00      	nop
 8005480:	371c      	adds	r7, #28
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40012c00 	.word	0x40012c00
 8005490:	40014000 	.word	0x40014000
 8005494:	40014400 	.word	0x40014400
 8005498:	40014800 	.word	0x40014800

0800549c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	f023 0201 	bic.w	r2, r3, #1
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	011b      	lsls	r3, r3, #4
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f023 030a 	bic.w	r3, r3, #10
 80054d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4313      	orrs	r3, r2
 80054e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	621a      	str	r2, [r3, #32]
}
 80054ee:	bf00      	nop
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b087      	sub	sp, #28
 80054fe:	af00      	add	r7, sp, #0
 8005500:	60f8      	str	r0, [r7, #12]
 8005502:	60b9      	str	r1, [r7, #8]
 8005504:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f023 0210 	bic.w	r2, r3, #16
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005524:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	031b      	lsls	r3, r3, #12
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005536:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	621a      	str	r2, [r3, #32]
}
 800554e:	bf00      	nop
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800555a:	b480      	push	{r7}
 800555c:	b085      	sub	sp, #20
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4313      	orrs	r3, r2
 8005578:	f043 0307 	orr.w	r3, r3, #7
 800557c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	609a      	str	r2, [r3, #8]
}
 8005584:	bf00      	nop
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	021a      	lsls	r2, r3, #8
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	431a      	orrs	r2, r3
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	609a      	str	r2, [r3, #8]
}
 80055c4:	bf00      	nop
 80055c6:	371c      	adds	r7, #28
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f003 031f 	and.w	r3, r3, #31
 80055e2:	2201      	movs	r2, #1
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a1a      	ldr	r2, [r3, #32]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	43db      	mvns	r3, r3
 80055f2:	401a      	ands	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6a1a      	ldr	r2, [r3, #32]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f003 031f 	and.w	r3, r3, #31
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	fa01 f303 	lsl.w	r3, r1, r3
 8005608:	431a      	orrs	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	621a      	str	r2, [r3, #32]
}
 800560e:	bf00      	nop
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
	...

0800561c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800562c:	2b01      	cmp	r3, #1
 800562e:	d101      	bne.n	8005634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005630:	2302      	movs	r3, #2
 8005632:	e054      	b.n	80056de <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a24      	ldr	r2, [pc, #144]	; (80056ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d108      	bne.n	8005670 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005664:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a17      	ldr	r2, [pc, #92]	; (80056ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00e      	beq.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569c:	d009      	beq.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a13      	ldr	r2, [pc, #76]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d004      	beq.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a11      	ldr	r2, [pc, #68]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d10c      	bne.n	80056cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	40012c00 	.word	0x40012c00
 80056f0:	40000400 	.word	0x40000400
 80056f4:	40014000 	.word	0x40014000

080056f8 <__errno>:
 80056f8:	4b01      	ldr	r3, [pc, #4]	; (8005700 <__errno+0x8>)
 80056fa:	6818      	ldr	r0, [r3, #0]
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	20000014 	.word	0x20000014

08005704 <__libc_init_array>:
 8005704:	b570      	push	{r4, r5, r6, lr}
 8005706:	4d0d      	ldr	r5, [pc, #52]	; (800573c <__libc_init_array+0x38>)
 8005708:	4c0d      	ldr	r4, [pc, #52]	; (8005740 <__libc_init_array+0x3c>)
 800570a:	1b64      	subs	r4, r4, r5
 800570c:	10a4      	asrs	r4, r4, #2
 800570e:	2600      	movs	r6, #0
 8005710:	42a6      	cmp	r6, r4
 8005712:	d109      	bne.n	8005728 <__libc_init_array+0x24>
 8005714:	4d0b      	ldr	r5, [pc, #44]	; (8005744 <__libc_init_array+0x40>)
 8005716:	4c0c      	ldr	r4, [pc, #48]	; (8005748 <__libc_init_array+0x44>)
 8005718:	f005 fc78 	bl	800b00c <_init>
 800571c:	1b64      	subs	r4, r4, r5
 800571e:	10a4      	asrs	r4, r4, #2
 8005720:	2600      	movs	r6, #0
 8005722:	42a6      	cmp	r6, r4
 8005724:	d105      	bne.n	8005732 <__libc_init_array+0x2e>
 8005726:	bd70      	pop	{r4, r5, r6, pc}
 8005728:	f855 3b04 	ldr.w	r3, [r5], #4
 800572c:	4798      	blx	r3
 800572e:	3601      	adds	r6, #1
 8005730:	e7ee      	b.n	8005710 <__libc_init_array+0xc>
 8005732:	f855 3b04 	ldr.w	r3, [r5], #4
 8005736:	4798      	blx	r3
 8005738:	3601      	adds	r6, #1
 800573a:	e7f2      	b.n	8005722 <__libc_init_array+0x1e>
 800573c:	0800b5d8 	.word	0x0800b5d8
 8005740:	0800b5d8 	.word	0x0800b5d8
 8005744:	0800b5d8 	.word	0x0800b5d8
 8005748:	0800b5dc 	.word	0x0800b5dc

0800574c <memset>:
 800574c:	4402      	add	r2, r0
 800574e:	4603      	mov	r3, r0
 8005750:	4293      	cmp	r3, r2
 8005752:	d100      	bne.n	8005756 <memset+0xa>
 8005754:	4770      	bx	lr
 8005756:	f803 1b01 	strb.w	r1, [r3], #1
 800575a:	e7f9      	b.n	8005750 <memset+0x4>

0800575c <__cvt>:
 800575c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005760:	ec55 4b10 	vmov	r4, r5, d0
 8005764:	2d00      	cmp	r5, #0
 8005766:	460e      	mov	r6, r1
 8005768:	4619      	mov	r1, r3
 800576a:	462b      	mov	r3, r5
 800576c:	bfbb      	ittet	lt
 800576e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005772:	461d      	movlt	r5, r3
 8005774:	2300      	movge	r3, #0
 8005776:	232d      	movlt	r3, #45	; 0x2d
 8005778:	700b      	strb	r3, [r1, #0]
 800577a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800577c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005780:	4691      	mov	r9, r2
 8005782:	f023 0820 	bic.w	r8, r3, #32
 8005786:	bfbc      	itt	lt
 8005788:	4622      	movlt	r2, r4
 800578a:	4614      	movlt	r4, r2
 800578c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005790:	d005      	beq.n	800579e <__cvt+0x42>
 8005792:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005796:	d100      	bne.n	800579a <__cvt+0x3e>
 8005798:	3601      	adds	r6, #1
 800579a:	2102      	movs	r1, #2
 800579c:	e000      	b.n	80057a0 <__cvt+0x44>
 800579e:	2103      	movs	r1, #3
 80057a0:	ab03      	add	r3, sp, #12
 80057a2:	9301      	str	r3, [sp, #4]
 80057a4:	ab02      	add	r3, sp, #8
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	ec45 4b10 	vmov	d0, r4, r5
 80057ac:	4653      	mov	r3, sl
 80057ae:	4632      	mov	r2, r6
 80057b0:	f001 ff02 	bl	80075b8 <_dtoa_r>
 80057b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80057b8:	4607      	mov	r7, r0
 80057ba:	d102      	bne.n	80057c2 <__cvt+0x66>
 80057bc:	f019 0f01 	tst.w	r9, #1
 80057c0:	d022      	beq.n	8005808 <__cvt+0xac>
 80057c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057c6:	eb07 0906 	add.w	r9, r7, r6
 80057ca:	d110      	bne.n	80057ee <__cvt+0x92>
 80057cc:	783b      	ldrb	r3, [r7, #0]
 80057ce:	2b30      	cmp	r3, #48	; 0x30
 80057d0:	d10a      	bne.n	80057e8 <__cvt+0x8c>
 80057d2:	2200      	movs	r2, #0
 80057d4:	2300      	movs	r3, #0
 80057d6:	4620      	mov	r0, r4
 80057d8:	4629      	mov	r1, r5
 80057da:	f7fb f975 	bl	8000ac8 <__aeabi_dcmpeq>
 80057de:	b918      	cbnz	r0, 80057e8 <__cvt+0x8c>
 80057e0:	f1c6 0601 	rsb	r6, r6, #1
 80057e4:	f8ca 6000 	str.w	r6, [sl]
 80057e8:	f8da 3000 	ldr.w	r3, [sl]
 80057ec:	4499      	add	r9, r3
 80057ee:	2200      	movs	r2, #0
 80057f0:	2300      	movs	r3, #0
 80057f2:	4620      	mov	r0, r4
 80057f4:	4629      	mov	r1, r5
 80057f6:	f7fb f967 	bl	8000ac8 <__aeabi_dcmpeq>
 80057fa:	b108      	cbz	r0, 8005800 <__cvt+0xa4>
 80057fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005800:	2230      	movs	r2, #48	; 0x30
 8005802:	9b03      	ldr	r3, [sp, #12]
 8005804:	454b      	cmp	r3, r9
 8005806:	d307      	bcc.n	8005818 <__cvt+0xbc>
 8005808:	9b03      	ldr	r3, [sp, #12]
 800580a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800580c:	1bdb      	subs	r3, r3, r7
 800580e:	4638      	mov	r0, r7
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	b004      	add	sp, #16
 8005814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005818:	1c59      	adds	r1, r3, #1
 800581a:	9103      	str	r1, [sp, #12]
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	e7f0      	b.n	8005802 <__cvt+0xa6>

08005820 <__exponent>:
 8005820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005822:	4603      	mov	r3, r0
 8005824:	2900      	cmp	r1, #0
 8005826:	bfb8      	it	lt
 8005828:	4249      	neglt	r1, r1
 800582a:	f803 2b02 	strb.w	r2, [r3], #2
 800582e:	bfb4      	ite	lt
 8005830:	222d      	movlt	r2, #45	; 0x2d
 8005832:	222b      	movge	r2, #43	; 0x2b
 8005834:	2909      	cmp	r1, #9
 8005836:	7042      	strb	r2, [r0, #1]
 8005838:	dd2a      	ble.n	8005890 <__exponent+0x70>
 800583a:	f10d 0407 	add.w	r4, sp, #7
 800583e:	46a4      	mov	ip, r4
 8005840:	270a      	movs	r7, #10
 8005842:	46a6      	mov	lr, r4
 8005844:	460a      	mov	r2, r1
 8005846:	fb91 f6f7 	sdiv	r6, r1, r7
 800584a:	fb07 1516 	mls	r5, r7, r6, r1
 800584e:	3530      	adds	r5, #48	; 0x30
 8005850:	2a63      	cmp	r2, #99	; 0x63
 8005852:	f104 34ff 	add.w	r4, r4, #4294967295
 8005856:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800585a:	4631      	mov	r1, r6
 800585c:	dcf1      	bgt.n	8005842 <__exponent+0x22>
 800585e:	3130      	adds	r1, #48	; 0x30
 8005860:	f1ae 0502 	sub.w	r5, lr, #2
 8005864:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005868:	1c44      	adds	r4, r0, #1
 800586a:	4629      	mov	r1, r5
 800586c:	4561      	cmp	r1, ip
 800586e:	d30a      	bcc.n	8005886 <__exponent+0x66>
 8005870:	f10d 0209 	add.w	r2, sp, #9
 8005874:	eba2 020e 	sub.w	r2, r2, lr
 8005878:	4565      	cmp	r5, ip
 800587a:	bf88      	it	hi
 800587c:	2200      	movhi	r2, #0
 800587e:	4413      	add	r3, r2
 8005880:	1a18      	subs	r0, r3, r0
 8005882:	b003      	add	sp, #12
 8005884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800588a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800588e:	e7ed      	b.n	800586c <__exponent+0x4c>
 8005890:	2330      	movs	r3, #48	; 0x30
 8005892:	3130      	adds	r1, #48	; 0x30
 8005894:	7083      	strb	r3, [r0, #2]
 8005896:	70c1      	strb	r1, [r0, #3]
 8005898:	1d03      	adds	r3, r0, #4
 800589a:	e7f1      	b.n	8005880 <__exponent+0x60>

0800589c <_printf_float>:
 800589c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a0:	ed2d 8b02 	vpush	{d8}
 80058a4:	b08d      	sub	sp, #52	; 0x34
 80058a6:	460c      	mov	r4, r1
 80058a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80058ac:	4616      	mov	r6, r2
 80058ae:	461f      	mov	r7, r3
 80058b0:	4605      	mov	r5, r0
 80058b2:	f003 f993 	bl	8008bdc <_localeconv_r>
 80058b6:	f8d0 a000 	ldr.w	sl, [r0]
 80058ba:	4650      	mov	r0, sl
 80058bc:	f7fa fc88 	bl	80001d0 <strlen>
 80058c0:	2300      	movs	r3, #0
 80058c2:	930a      	str	r3, [sp, #40]	; 0x28
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	9305      	str	r3, [sp, #20]
 80058c8:	f8d8 3000 	ldr.w	r3, [r8]
 80058cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80058d0:	3307      	adds	r3, #7
 80058d2:	f023 0307 	bic.w	r3, r3, #7
 80058d6:	f103 0208 	add.w	r2, r3, #8
 80058da:	f8c8 2000 	str.w	r2, [r8]
 80058de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80058e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80058ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80058ee:	9307      	str	r3, [sp, #28]
 80058f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80058f4:	ee08 0a10 	vmov	s16, r0
 80058f8:	4b9f      	ldr	r3, [pc, #636]	; (8005b78 <_printf_float+0x2dc>)
 80058fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005902:	f7fb f913 	bl	8000b2c <__aeabi_dcmpun>
 8005906:	bb88      	cbnz	r0, 800596c <_printf_float+0xd0>
 8005908:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800590c:	4b9a      	ldr	r3, [pc, #616]	; (8005b78 <_printf_float+0x2dc>)
 800590e:	f04f 32ff 	mov.w	r2, #4294967295
 8005912:	f7fb f8ed 	bl	8000af0 <__aeabi_dcmple>
 8005916:	bb48      	cbnz	r0, 800596c <_printf_float+0xd0>
 8005918:	2200      	movs	r2, #0
 800591a:	2300      	movs	r3, #0
 800591c:	4640      	mov	r0, r8
 800591e:	4649      	mov	r1, r9
 8005920:	f7fb f8dc 	bl	8000adc <__aeabi_dcmplt>
 8005924:	b110      	cbz	r0, 800592c <_printf_float+0x90>
 8005926:	232d      	movs	r3, #45	; 0x2d
 8005928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800592c:	4b93      	ldr	r3, [pc, #588]	; (8005b7c <_printf_float+0x2e0>)
 800592e:	4894      	ldr	r0, [pc, #592]	; (8005b80 <_printf_float+0x2e4>)
 8005930:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005934:	bf94      	ite	ls
 8005936:	4698      	movls	r8, r3
 8005938:	4680      	movhi	r8, r0
 800593a:	2303      	movs	r3, #3
 800593c:	6123      	str	r3, [r4, #16]
 800593e:	9b05      	ldr	r3, [sp, #20]
 8005940:	f023 0204 	bic.w	r2, r3, #4
 8005944:	6022      	str	r2, [r4, #0]
 8005946:	f04f 0900 	mov.w	r9, #0
 800594a:	9700      	str	r7, [sp, #0]
 800594c:	4633      	mov	r3, r6
 800594e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005950:	4621      	mov	r1, r4
 8005952:	4628      	mov	r0, r5
 8005954:	f000 f9d8 	bl	8005d08 <_printf_common>
 8005958:	3001      	adds	r0, #1
 800595a:	f040 8090 	bne.w	8005a7e <_printf_float+0x1e2>
 800595e:	f04f 30ff 	mov.w	r0, #4294967295
 8005962:	b00d      	add	sp, #52	; 0x34
 8005964:	ecbd 8b02 	vpop	{d8}
 8005968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596c:	4642      	mov	r2, r8
 800596e:	464b      	mov	r3, r9
 8005970:	4640      	mov	r0, r8
 8005972:	4649      	mov	r1, r9
 8005974:	f7fb f8da 	bl	8000b2c <__aeabi_dcmpun>
 8005978:	b140      	cbz	r0, 800598c <_printf_float+0xf0>
 800597a:	464b      	mov	r3, r9
 800597c:	2b00      	cmp	r3, #0
 800597e:	bfbc      	itt	lt
 8005980:	232d      	movlt	r3, #45	; 0x2d
 8005982:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005986:	487f      	ldr	r0, [pc, #508]	; (8005b84 <_printf_float+0x2e8>)
 8005988:	4b7f      	ldr	r3, [pc, #508]	; (8005b88 <_printf_float+0x2ec>)
 800598a:	e7d1      	b.n	8005930 <_printf_float+0x94>
 800598c:	6863      	ldr	r3, [r4, #4]
 800598e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005992:	9206      	str	r2, [sp, #24]
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	d13f      	bne.n	8005a18 <_printf_float+0x17c>
 8005998:	2306      	movs	r3, #6
 800599a:	6063      	str	r3, [r4, #4]
 800599c:	9b05      	ldr	r3, [sp, #20]
 800599e:	6861      	ldr	r1, [r4, #4]
 80059a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80059a4:	2300      	movs	r3, #0
 80059a6:	9303      	str	r3, [sp, #12]
 80059a8:	ab0a      	add	r3, sp, #40	; 0x28
 80059aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80059ae:	ab09      	add	r3, sp, #36	; 0x24
 80059b0:	ec49 8b10 	vmov	d0, r8, r9
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	6022      	str	r2, [r4, #0]
 80059b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80059bc:	4628      	mov	r0, r5
 80059be:	f7ff fecd 	bl	800575c <__cvt>
 80059c2:	9b06      	ldr	r3, [sp, #24]
 80059c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059c6:	2b47      	cmp	r3, #71	; 0x47
 80059c8:	4680      	mov	r8, r0
 80059ca:	d108      	bne.n	80059de <_printf_float+0x142>
 80059cc:	1cc8      	adds	r0, r1, #3
 80059ce:	db02      	blt.n	80059d6 <_printf_float+0x13a>
 80059d0:	6863      	ldr	r3, [r4, #4]
 80059d2:	4299      	cmp	r1, r3
 80059d4:	dd41      	ble.n	8005a5a <_printf_float+0x1be>
 80059d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80059da:	fa5f fb8b 	uxtb.w	fp, fp
 80059de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80059e2:	d820      	bhi.n	8005a26 <_printf_float+0x18a>
 80059e4:	3901      	subs	r1, #1
 80059e6:	465a      	mov	r2, fp
 80059e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80059ec:	9109      	str	r1, [sp, #36]	; 0x24
 80059ee:	f7ff ff17 	bl	8005820 <__exponent>
 80059f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059f4:	1813      	adds	r3, r2, r0
 80059f6:	2a01      	cmp	r2, #1
 80059f8:	4681      	mov	r9, r0
 80059fa:	6123      	str	r3, [r4, #16]
 80059fc:	dc02      	bgt.n	8005a04 <_printf_float+0x168>
 80059fe:	6822      	ldr	r2, [r4, #0]
 8005a00:	07d2      	lsls	r2, r2, #31
 8005a02:	d501      	bpl.n	8005a08 <_printf_float+0x16c>
 8005a04:	3301      	adds	r3, #1
 8005a06:	6123      	str	r3, [r4, #16]
 8005a08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d09c      	beq.n	800594a <_printf_float+0xae>
 8005a10:	232d      	movs	r3, #45	; 0x2d
 8005a12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a16:	e798      	b.n	800594a <_printf_float+0xae>
 8005a18:	9a06      	ldr	r2, [sp, #24]
 8005a1a:	2a47      	cmp	r2, #71	; 0x47
 8005a1c:	d1be      	bne.n	800599c <_printf_float+0x100>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1bc      	bne.n	800599c <_printf_float+0x100>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e7b9      	b.n	800599a <_printf_float+0xfe>
 8005a26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005a2a:	d118      	bne.n	8005a5e <_printf_float+0x1c2>
 8005a2c:	2900      	cmp	r1, #0
 8005a2e:	6863      	ldr	r3, [r4, #4]
 8005a30:	dd0b      	ble.n	8005a4a <_printf_float+0x1ae>
 8005a32:	6121      	str	r1, [r4, #16]
 8005a34:	b913      	cbnz	r3, 8005a3c <_printf_float+0x1a0>
 8005a36:	6822      	ldr	r2, [r4, #0]
 8005a38:	07d0      	lsls	r0, r2, #31
 8005a3a:	d502      	bpl.n	8005a42 <_printf_float+0x1a6>
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	440b      	add	r3, r1
 8005a40:	6123      	str	r3, [r4, #16]
 8005a42:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a44:	f04f 0900 	mov.w	r9, #0
 8005a48:	e7de      	b.n	8005a08 <_printf_float+0x16c>
 8005a4a:	b913      	cbnz	r3, 8005a52 <_printf_float+0x1b6>
 8005a4c:	6822      	ldr	r2, [r4, #0]
 8005a4e:	07d2      	lsls	r2, r2, #31
 8005a50:	d501      	bpl.n	8005a56 <_printf_float+0x1ba>
 8005a52:	3302      	adds	r3, #2
 8005a54:	e7f4      	b.n	8005a40 <_printf_float+0x1a4>
 8005a56:	2301      	movs	r3, #1
 8005a58:	e7f2      	b.n	8005a40 <_printf_float+0x1a4>
 8005a5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a60:	4299      	cmp	r1, r3
 8005a62:	db05      	blt.n	8005a70 <_printf_float+0x1d4>
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	6121      	str	r1, [r4, #16]
 8005a68:	07d8      	lsls	r0, r3, #31
 8005a6a:	d5ea      	bpl.n	8005a42 <_printf_float+0x1a6>
 8005a6c:	1c4b      	adds	r3, r1, #1
 8005a6e:	e7e7      	b.n	8005a40 <_printf_float+0x1a4>
 8005a70:	2900      	cmp	r1, #0
 8005a72:	bfd4      	ite	le
 8005a74:	f1c1 0202 	rsble	r2, r1, #2
 8005a78:	2201      	movgt	r2, #1
 8005a7a:	4413      	add	r3, r2
 8005a7c:	e7e0      	b.n	8005a40 <_printf_float+0x1a4>
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	055a      	lsls	r2, r3, #21
 8005a82:	d407      	bmi.n	8005a94 <_printf_float+0x1f8>
 8005a84:	6923      	ldr	r3, [r4, #16]
 8005a86:	4642      	mov	r2, r8
 8005a88:	4631      	mov	r1, r6
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	47b8      	blx	r7
 8005a8e:	3001      	adds	r0, #1
 8005a90:	d12c      	bne.n	8005aec <_printf_float+0x250>
 8005a92:	e764      	b.n	800595e <_printf_float+0xc2>
 8005a94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a98:	f240 80e0 	bls.w	8005c5c <_printf_float+0x3c0>
 8005a9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f7fb f810 	bl	8000ac8 <__aeabi_dcmpeq>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	d034      	beq.n	8005b16 <_printf_float+0x27a>
 8005aac:	4a37      	ldr	r2, [pc, #220]	; (8005b8c <_printf_float+0x2f0>)
 8005aae:	2301      	movs	r3, #1
 8005ab0:	4631      	mov	r1, r6
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	47b8      	blx	r7
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	f43f af51 	beq.w	800595e <_printf_float+0xc2>
 8005abc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	db02      	blt.n	8005aca <_printf_float+0x22e>
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	07d8      	lsls	r0, r3, #31
 8005ac8:	d510      	bpl.n	8005aec <_printf_float+0x250>
 8005aca:	ee18 3a10 	vmov	r3, s16
 8005ace:	4652      	mov	r2, sl
 8005ad0:	4631      	mov	r1, r6
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	47b8      	blx	r7
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	f43f af41 	beq.w	800595e <_printf_float+0xc2>
 8005adc:	f04f 0800 	mov.w	r8, #0
 8005ae0:	f104 091a 	add.w	r9, r4, #26
 8005ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	4543      	cmp	r3, r8
 8005aea:	dc09      	bgt.n	8005b00 <_printf_float+0x264>
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	079b      	lsls	r3, r3, #30
 8005af0:	f100 8105 	bmi.w	8005cfe <_printf_float+0x462>
 8005af4:	68e0      	ldr	r0, [r4, #12]
 8005af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005af8:	4298      	cmp	r0, r3
 8005afa:	bfb8      	it	lt
 8005afc:	4618      	movlt	r0, r3
 8005afe:	e730      	b.n	8005962 <_printf_float+0xc6>
 8005b00:	2301      	movs	r3, #1
 8005b02:	464a      	mov	r2, r9
 8005b04:	4631      	mov	r1, r6
 8005b06:	4628      	mov	r0, r5
 8005b08:	47b8      	blx	r7
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	f43f af27 	beq.w	800595e <_printf_float+0xc2>
 8005b10:	f108 0801 	add.w	r8, r8, #1
 8005b14:	e7e6      	b.n	8005ae4 <_printf_float+0x248>
 8005b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	dc39      	bgt.n	8005b90 <_printf_float+0x2f4>
 8005b1c:	4a1b      	ldr	r2, [pc, #108]	; (8005b8c <_printf_float+0x2f0>)
 8005b1e:	2301      	movs	r3, #1
 8005b20:	4631      	mov	r1, r6
 8005b22:	4628      	mov	r0, r5
 8005b24:	47b8      	blx	r7
 8005b26:	3001      	adds	r0, #1
 8005b28:	f43f af19 	beq.w	800595e <_printf_float+0xc2>
 8005b2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b30:	4313      	orrs	r3, r2
 8005b32:	d102      	bne.n	8005b3a <_printf_float+0x29e>
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	07d9      	lsls	r1, r3, #31
 8005b38:	d5d8      	bpl.n	8005aec <_printf_float+0x250>
 8005b3a:	ee18 3a10 	vmov	r3, s16
 8005b3e:	4652      	mov	r2, sl
 8005b40:	4631      	mov	r1, r6
 8005b42:	4628      	mov	r0, r5
 8005b44:	47b8      	blx	r7
 8005b46:	3001      	adds	r0, #1
 8005b48:	f43f af09 	beq.w	800595e <_printf_float+0xc2>
 8005b4c:	f04f 0900 	mov.w	r9, #0
 8005b50:	f104 0a1a 	add.w	sl, r4, #26
 8005b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b56:	425b      	negs	r3, r3
 8005b58:	454b      	cmp	r3, r9
 8005b5a:	dc01      	bgt.n	8005b60 <_printf_float+0x2c4>
 8005b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b5e:	e792      	b.n	8005a86 <_printf_float+0x1ea>
 8005b60:	2301      	movs	r3, #1
 8005b62:	4652      	mov	r2, sl
 8005b64:	4631      	mov	r1, r6
 8005b66:	4628      	mov	r0, r5
 8005b68:	47b8      	blx	r7
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	f43f aef7 	beq.w	800595e <_printf_float+0xc2>
 8005b70:	f109 0901 	add.w	r9, r9, #1
 8005b74:	e7ee      	b.n	8005b54 <_printf_float+0x2b8>
 8005b76:	bf00      	nop
 8005b78:	7fefffff 	.word	0x7fefffff
 8005b7c:	0800b0e0 	.word	0x0800b0e0
 8005b80:	0800b0e4 	.word	0x0800b0e4
 8005b84:	0800b0ec 	.word	0x0800b0ec
 8005b88:	0800b0e8 	.word	0x0800b0e8
 8005b8c:	0800b0f0 	.word	0x0800b0f0
 8005b90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b94:	429a      	cmp	r2, r3
 8005b96:	bfa8      	it	ge
 8005b98:	461a      	movge	r2, r3
 8005b9a:	2a00      	cmp	r2, #0
 8005b9c:	4691      	mov	r9, r2
 8005b9e:	dc37      	bgt.n	8005c10 <_printf_float+0x374>
 8005ba0:	f04f 0b00 	mov.w	fp, #0
 8005ba4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ba8:	f104 021a 	add.w	r2, r4, #26
 8005bac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bae:	9305      	str	r3, [sp, #20]
 8005bb0:	eba3 0309 	sub.w	r3, r3, r9
 8005bb4:	455b      	cmp	r3, fp
 8005bb6:	dc33      	bgt.n	8005c20 <_printf_float+0x384>
 8005bb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	db3b      	blt.n	8005c38 <_printf_float+0x39c>
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	07da      	lsls	r2, r3, #31
 8005bc4:	d438      	bmi.n	8005c38 <_printf_float+0x39c>
 8005bc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bc8:	9b05      	ldr	r3, [sp, #20]
 8005bca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	eba2 0901 	sub.w	r9, r2, r1
 8005bd2:	4599      	cmp	r9, r3
 8005bd4:	bfa8      	it	ge
 8005bd6:	4699      	movge	r9, r3
 8005bd8:	f1b9 0f00 	cmp.w	r9, #0
 8005bdc:	dc35      	bgt.n	8005c4a <_printf_float+0x3ae>
 8005bde:	f04f 0800 	mov.w	r8, #0
 8005be2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005be6:	f104 0a1a 	add.w	sl, r4, #26
 8005bea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bee:	1a9b      	subs	r3, r3, r2
 8005bf0:	eba3 0309 	sub.w	r3, r3, r9
 8005bf4:	4543      	cmp	r3, r8
 8005bf6:	f77f af79 	ble.w	8005aec <_printf_float+0x250>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	4652      	mov	r2, sl
 8005bfe:	4631      	mov	r1, r6
 8005c00:	4628      	mov	r0, r5
 8005c02:	47b8      	blx	r7
 8005c04:	3001      	adds	r0, #1
 8005c06:	f43f aeaa 	beq.w	800595e <_printf_float+0xc2>
 8005c0a:	f108 0801 	add.w	r8, r8, #1
 8005c0e:	e7ec      	b.n	8005bea <_printf_float+0x34e>
 8005c10:	4613      	mov	r3, r2
 8005c12:	4631      	mov	r1, r6
 8005c14:	4642      	mov	r2, r8
 8005c16:	4628      	mov	r0, r5
 8005c18:	47b8      	blx	r7
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	d1c0      	bne.n	8005ba0 <_printf_float+0x304>
 8005c1e:	e69e      	b.n	800595e <_printf_float+0xc2>
 8005c20:	2301      	movs	r3, #1
 8005c22:	4631      	mov	r1, r6
 8005c24:	4628      	mov	r0, r5
 8005c26:	9205      	str	r2, [sp, #20]
 8005c28:	47b8      	blx	r7
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	f43f ae97 	beq.w	800595e <_printf_float+0xc2>
 8005c30:	9a05      	ldr	r2, [sp, #20]
 8005c32:	f10b 0b01 	add.w	fp, fp, #1
 8005c36:	e7b9      	b.n	8005bac <_printf_float+0x310>
 8005c38:	ee18 3a10 	vmov	r3, s16
 8005c3c:	4652      	mov	r2, sl
 8005c3e:	4631      	mov	r1, r6
 8005c40:	4628      	mov	r0, r5
 8005c42:	47b8      	blx	r7
 8005c44:	3001      	adds	r0, #1
 8005c46:	d1be      	bne.n	8005bc6 <_printf_float+0x32a>
 8005c48:	e689      	b.n	800595e <_printf_float+0xc2>
 8005c4a:	9a05      	ldr	r2, [sp, #20]
 8005c4c:	464b      	mov	r3, r9
 8005c4e:	4442      	add	r2, r8
 8005c50:	4631      	mov	r1, r6
 8005c52:	4628      	mov	r0, r5
 8005c54:	47b8      	blx	r7
 8005c56:	3001      	adds	r0, #1
 8005c58:	d1c1      	bne.n	8005bde <_printf_float+0x342>
 8005c5a:	e680      	b.n	800595e <_printf_float+0xc2>
 8005c5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c5e:	2a01      	cmp	r2, #1
 8005c60:	dc01      	bgt.n	8005c66 <_printf_float+0x3ca>
 8005c62:	07db      	lsls	r3, r3, #31
 8005c64:	d538      	bpl.n	8005cd8 <_printf_float+0x43c>
 8005c66:	2301      	movs	r3, #1
 8005c68:	4642      	mov	r2, r8
 8005c6a:	4631      	mov	r1, r6
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	47b8      	blx	r7
 8005c70:	3001      	adds	r0, #1
 8005c72:	f43f ae74 	beq.w	800595e <_printf_float+0xc2>
 8005c76:	ee18 3a10 	vmov	r3, s16
 8005c7a:	4652      	mov	r2, sl
 8005c7c:	4631      	mov	r1, r6
 8005c7e:	4628      	mov	r0, r5
 8005c80:	47b8      	blx	r7
 8005c82:	3001      	adds	r0, #1
 8005c84:	f43f ae6b 	beq.w	800595e <_printf_float+0xc2>
 8005c88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2300      	movs	r3, #0
 8005c90:	f7fa ff1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c94:	b9d8      	cbnz	r0, 8005cce <_printf_float+0x432>
 8005c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c98:	f108 0201 	add.w	r2, r8, #1
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	4631      	mov	r1, r6
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	47b8      	blx	r7
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	d10e      	bne.n	8005cc6 <_printf_float+0x42a>
 8005ca8:	e659      	b.n	800595e <_printf_float+0xc2>
 8005caa:	2301      	movs	r3, #1
 8005cac:	4652      	mov	r2, sl
 8005cae:	4631      	mov	r1, r6
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	47b8      	blx	r7
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	f43f ae52 	beq.w	800595e <_printf_float+0xc2>
 8005cba:	f108 0801 	add.w	r8, r8, #1
 8005cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	4543      	cmp	r3, r8
 8005cc4:	dcf1      	bgt.n	8005caa <_printf_float+0x40e>
 8005cc6:	464b      	mov	r3, r9
 8005cc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ccc:	e6dc      	b.n	8005a88 <_printf_float+0x1ec>
 8005cce:	f04f 0800 	mov.w	r8, #0
 8005cd2:	f104 0a1a 	add.w	sl, r4, #26
 8005cd6:	e7f2      	b.n	8005cbe <_printf_float+0x422>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	4642      	mov	r2, r8
 8005cdc:	e7df      	b.n	8005c9e <_printf_float+0x402>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	464a      	mov	r2, r9
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	47b8      	blx	r7
 8005ce8:	3001      	adds	r0, #1
 8005cea:	f43f ae38 	beq.w	800595e <_printf_float+0xc2>
 8005cee:	f108 0801 	add.w	r8, r8, #1
 8005cf2:	68e3      	ldr	r3, [r4, #12]
 8005cf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005cf6:	1a5b      	subs	r3, r3, r1
 8005cf8:	4543      	cmp	r3, r8
 8005cfa:	dcf0      	bgt.n	8005cde <_printf_float+0x442>
 8005cfc:	e6fa      	b.n	8005af4 <_printf_float+0x258>
 8005cfe:	f04f 0800 	mov.w	r8, #0
 8005d02:	f104 0919 	add.w	r9, r4, #25
 8005d06:	e7f4      	b.n	8005cf2 <_printf_float+0x456>

08005d08 <_printf_common>:
 8005d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d0c:	4616      	mov	r6, r2
 8005d0e:	4699      	mov	r9, r3
 8005d10:	688a      	ldr	r2, [r1, #8]
 8005d12:	690b      	ldr	r3, [r1, #16]
 8005d14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	bfb8      	it	lt
 8005d1c:	4613      	movlt	r3, r2
 8005d1e:	6033      	str	r3, [r6, #0]
 8005d20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d24:	4607      	mov	r7, r0
 8005d26:	460c      	mov	r4, r1
 8005d28:	b10a      	cbz	r2, 8005d2e <_printf_common+0x26>
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	6033      	str	r3, [r6, #0]
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	0699      	lsls	r1, r3, #26
 8005d32:	bf42      	ittt	mi
 8005d34:	6833      	ldrmi	r3, [r6, #0]
 8005d36:	3302      	addmi	r3, #2
 8005d38:	6033      	strmi	r3, [r6, #0]
 8005d3a:	6825      	ldr	r5, [r4, #0]
 8005d3c:	f015 0506 	ands.w	r5, r5, #6
 8005d40:	d106      	bne.n	8005d50 <_printf_common+0x48>
 8005d42:	f104 0a19 	add.w	sl, r4, #25
 8005d46:	68e3      	ldr	r3, [r4, #12]
 8005d48:	6832      	ldr	r2, [r6, #0]
 8005d4a:	1a9b      	subs	r3, r3, r2
 8005d4c:	42ab      	cmp	r3, r5
 8005d4e:	dc26      	bgt.n	8005d9e <_printf_common+0x96>
 8005d50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d54:	1e13      	subs	r3, r2, #0
 8005d56:	6822      	ldr	r2, [r4, #0]
 8005d58:	bf18      	it	ne
 8005d5a:	2301      	movne	r3, #1
 8005d5c:	0692      	lsls	r2, r2, #26
 8005d5e:	d42b      	bmi.n	8005db8 <_printf_common+0xb0>
 8005d60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d64:	4649      	mov	r1, r9
 8005d66:	4638      	mov	r0, r7
 8005d68:	47c0      	blx	r8
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	d01e      	beq.n	8005dac <_printf_common+0xa4>
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	68e5      	ldr	r5, [r4, #12]
 8005d72:	6832      	ldr	r2, [r6, #0]
 8005d74:	f003 0306 	and.w	r3, r3, #6
 8005d78:	2b04      	cmp	r3, #4
 8005d7a:	bf08      	it	eq
 8005d7c:	1aad      	subeq	r5, r5, r2
 8005d7e:	68a3      	ldr	r3, [r4, #8]
 8005d80:	6922      	ldr	r2, [r4, #16]
 8005d82:	bf0c      	ite	eq
 8005d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d88:	2500      	movne	r5, #0
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	bfc4      	itt	gt
 8005d8e:	1a9b      	subgt	r3, r3, r2
 8005d90:	18ed      	addgt	r5, r5, r3
 8005d92:	2600      	movs	r6, #0
 8005d94:	341a      	adds	r4, #26
 8005d96:	42b5      	cmp	r5, r6
 8005d98:	d11a      	bne.n	8005dd0 <_printf_common+0xc8>
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	e008      	b.n	8005db0 <_printf_common+0xa8>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	4652      	mov	r2, sl
 8005da2:	4649      	mov	r1, r9
 8005da4:	4638      	mov	r0, r7
 8005da6:	47c0      	blx	r8
 8005da8:	3001      	adds	r0, #1
 8005daa:	d103      	bne.n	8005db4 <_printf_common+0xac>
 8005dac:	f04f 30ff 	mov.w	r0, #4294967295
 8005db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db4:	3501      	adds	r5, #1
 8005db6:	e7c6      	b.n	8005d46 <_printf_common+0x3e>
 8005db8:	18e1      	adds	r1, r4, r3
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	2030      	movs	r0, #48	; 0x30
 8005dbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dc2:	4422      	add	r2, r4
 8005dc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dcc:	3302      	adds	r3, #2
 8005dce:	e7c7      	b.n	8005d60 <_printf_common+0x58>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	4622      	mov	r2, r4
 8005dd4:	4649      	mov	r1, r9
 8005dd6:	4638      	mov	r0, r7
 8005dd8:	47c0      	blx	r8
 8005dda:	3001      	adds	r0, #1
 8005ddc:	d0e6      	beq.n	8005dac <_printf_common+0xa4>
 8005dde:	3601      	adds	r6, #1
 8005de0:	e7d9      	b.n	8005d96 <_printf_common+0x8e>
	...

08005de4 <_printf_i>:
 8005de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005de8:	460c      	mov	r4, r1
 8005dea:	4691      	mov	r9, r2
 8005dec:	7e27      	ldrb	r7, [r4, #24]
 8005dee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005df0:	2f78      	cmp	r7, #120	; 0x78
 8005df2:	4680      	mov	r8, r0
 8005df4:	469a      	mov	sl, r3
 8005df6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dfa:	d807      	bhi.n	8005e0c <_printf_i+0x28>
 8005dfc:	2f62      	cmp	r7, #98	; 0x62
 8005dfe:	d80a      	bhi.n	8005e16 <_printf_i+0x32>
 8005e00:	2f00      	cmp	r7, #0
 8005e02:	f000 80d8 	beq.w	8005fb6 <_printf_i+0x1d2>
 8005e06:	2f58      	cmp	r7, #88	; 0x58
 8005e08:	f000 80a3 	beq.w	8005f52 <_printf_i+0x16e>
 8005e0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e14:	e03a      	b.n	8005e8c <_printf_i+0xa8>
 8005e16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e1a:	2b15      	cmp	r3, #21
 8005e1c:	d8f6      	bhi.n	8005e0c <_printf_i+0x28>
 8005e1e:	a001      	add	r0, pc, #4	; (adr r0, 8005e24 <_printf_i+0x40>)
 8005e20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005e24:	08005e7d 	.word	0x08005e7d
 8005e28:	08005e91 	.word	0x08005e91
 8005e2c:	08005e0d 	.word	0x08005e0d
 8005e30:	08005e0d 	.word	0x08005e0d
 8005e34:	08005e0d 	.word	0x08005e0d
 8005e38:	08005e0d 	.word	0x08005e0d
 8005e3c:	08005e91 	.word	0x08005e91
 8005e40:	08005e0d 	.word	0x08005e0d
 8005e44:	08005e0d 	.word	0x08005e0d
 8005e48:	08005e0d 	.word	0x08005e0d
 8005e4c:	08005e0d 	.word	0x08005e0d
 8005e50:	08005f9d 	.word	0x08005f9d
 8005e54:	08005ec1 	.word	0x08005ec1
 8005e58:	08005f7f 	.word	0x08005f7f
 8005e5c:	08005e0d 	.word	0x08005e0d
 8005e60:	08005e0d 	.word	0x08005e0d
 8005e64:	08005fbf 	.word	0x08005fbf
 8005e68:	08005e0d 	.word	0x08005e0d
 8005e6c:	08005ec1 	.word	0x08005ec1
 8005e70:	08005e0d 	.word	0x08005e0d
 8005e74:	08005e0d 	.word	0x08005e0d
 8005e78:	08005f87 	.word	0x08005f87
 8005e7c:	680b      	ldr	r3, [r1, #0]
 8005e7e:	1d1a      	adds	r2, r3, #4
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	600a      	str	r2, [r1, #0]
 8005e84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e0a3      	b.n	8005fd8 <_printf_i+0x1f4>
 8005e90:	6825      	ldr	r5, [r4, #0]
 8005e92:	6808      	ldr	r0, [r1, #0]
 8005e94:	062e      	lsls	r6, r5, #24
 8005e96:	f100 0304 	add.w	r3, r0, #4
 8005e9a:	d50a      	bpl.n	8005eb2 <_printf_i+0xce>
 8005e9c:	6805      	ldr	r5, [r0, #0]
 8005e9e:	600b      	str	r3, [r1, #0]
 8005ea0:	2d00      	cmp	r5, #0
 8005ea2:	da03      	bge.n	8005eac <_printf_i+0xc8>
 8005ea4:	232d      	movs	r3, #45	; 0x2d
 8005ea6:	426d      	negs	r5, r5
 8005ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eac:	485e      	ldr	r0, [pc, #376]	; (8006028 <_printf_i+0x244>)
 8005eae:	230a      	movs	r3, #10
 8005eb0:	e019      	b.n	8005ee6 <_printf_i+0x102>
 8005eb2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005eb6:	6805      	ldr	r5, [r0, #0]
 8005eb8:	600b      	str	r3, [r1, #0]
 8005eba:	bf18      	it	ne
 8005ebc:	b22d      	sxthne	r5, r5
 8005ebe:	e7ef      	b.n	8005ea0 <_printf_i+0xbc>
 8005ec0:	680b      	ldr	r3, [r1, #0]
 8005ec2:	6825      	ldr	r5, [r4, #0]
 8005ec4:	1d18      	adds	r0, r3, #4
 8005ec6:	6008      	str	r0, [r1, #0]
 8005ec8:	0628      	lsls	r0, r5, #24
 8005eca:	d501      	bpl.n	8005ed0 <_printf_i+0xec>
 8005ecc:	681d      	ldr	r5, [r3, #0]
 8005ece:	e002      	b.n	8005ed6 <_printf_i+0xf2>
 8005ed0:	0669      	lsls	r1, r5, #25
 8005ed2:	d5fb      	bpl.n	8005ecc <_printf_i+0xe8>
 8005ed4:	881d      	ldrh	r5, [r3, #0]
 8005ed6:	4854      	ldr	r0, [pc, #336]	; (8006028 <_printf_i+0x244>)
 8005ed8:	2f6f      	cmp	r7, #111	; 0x6f
 8005eda:	bf0c      	ite	eq
 8005edc:	2308      	moveq	r3, #8
 8005ede:	230a      	movne	r3, #10
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ee6:	6866      	ldr	r6, [r4, #4]
 8005ee8:	60a6      	str	r6, [r4, #8]
 8005eea:	2e00      	cmp	r6, #0
 8005eec:	bfa2      	ittt	ge
 8005eee:	6821      	ldrge	r1, [r4, #0]
 8005ef0:	f021 0104 	bicge.w	r1, r1, #4
 8005ef4:	6021      	strge	r1, [r4, #0]
 8005ef6:	b90d      	cbnz	r5, 8005efc <_printf_i+0x118>
 8005ef8:	2e00      	cmp	r6, #0
 8005efa:	d04d      	beq.n	8005f98 <_printf_i+0x1b4>
 8005efc:	4616      	mov	r6, r2
 8005efe:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f02:	fb03 5711 	mls	r7, r3, r1, r5
 8005f06:	5dc7      	ldrb	r7, [r0, r7]
 8005f08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f0c:	462f      	mov	r7, r5
 8005f0e:	42bb      	cmp	r3, r7
 8005f10:	460d      	mov	r5, r1
 8005f12:	d9f4      	bls.n	8005efe <_printf_i+0x11a>
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d10b      	bne.n	8005f30 <_printf_i+0x14c>
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	07df      	lsls	r7, r3, #31
 8005f1c:	d508      	bpl.n	8005f30 <_printf_i+0x14c>
 8005f1e:	6923      	ldr	r3, [r4, #16]
 8005f20:	6861      	ldr	r1, [r4, #4]
 8005f22:	4299      	cmp	r1, r3
 8005f24:	bfde      	ittt	le
 8005f26:	2330      	movle	r3, #48	; 0x30
 8005f28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f30:	1b92      	subs	r2, r2, r6
 8005f32:	6122      	str	r2, [r4, #16]
 8005f34:	f8cd a000 	str.w	sl, [sp]
 8005f38:	464b      	mov	r3, r9
 8005f3a:	aa03      	add	r2, sp, #12
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	4640      	mov	r0, r8
 8005f40:	f7ff fee2 	bl	8005d08 <_printf_common>
 8005f44:	3001      	adds	r0, #1
 8005f46:	d14c      	bne.n	8005fe2 <_printf_i+0x1fe>
 8005f48:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4c:	b004      	add	sp, #16
 8005f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f52:	4835      	ldr	r0, [pc, #212]	; (8006028 <_printf_i+0x244>)
 8005f54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	680e      	ldr	r6, [r1, #0]
 8005f5c:	061f      	lsls	r7, r3, #24
 8005f5e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005f62:	600e      	str	r6, [r1, #0]
 8005f64:	d514      	bpl.n	8005f90 <_printf_i+0x1ac>
 8005f66:	07d9      	lsls	r1, r3, #31
 8005f68:	bf44      	itt	mi
 8005f6a:	f043 0320 	orrmi.w	r3, r3, #32
 8005f6e:	6023      	strmi	r3, [r4, #0]
 8005f70:	b91d      	cbnz	r5, 8005f7a <_printf_i+0x196>
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	f023 0320 	bic.w	r3, r3, #32
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	2310      	movs	r3, #16
 8005f7c:	e7b0      	b.n	8005ee0 <_printf_i+0xfc>
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	f043 0320 	orr.w	r3, r3, #32
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	2378      	movs	r3, #120	; 0x78
 8005f88:	4828      	ldr	r0, [pc, #160]	; (800602c <_printf_i+0x248>)
 8005f8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f8e:	e7e3      	b.n	8005f58 <_printf_i+0x174>
 8005f90:	065e      	lsls	r6, r3, #25
 8005f92:	bf48      	it	mi
 8005f94:	b2ad      	uxthmi	r5, r5
 8005f96:	e7e6      	b.n	8005f66 <_printf_i+0x182>
 8005f98:	4616      	mov	r6, r2
 8005f9a:	e7bb      	b.n	8005f14 <_printf_i+0x130>
 8005f9c:	680b      	ldr	r3, [r1, #0]
 8005f9e:	6826      	ldr	r6, [r4, #0]
 8005fa0:	6960      	ldr	r0, [r4, #20]
 8005fa2:	1d1d      	adds	r5, r3, #4
 8005fa4:	600d      	str	r5, [r1, #0]
 8005fa6:	0635      	lsls	r5, r6, #24
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	d501      	bpl.n	8005fb0 <_printf_i+0x1cc>
 8005fac:	6018      	str	r0, [r3, #0]
 8005fae:	e002      	b.n	8005fb6 <_printf_i+0x1d2>
 8005fb0:	0671      	lsls	r1, r6, #25
 8005fb2:	d5fb      	bpl.n	8005fac <_printf_i+0x1c8>
 8005fb4:	8018      	strh	r0, [r3, #0]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	6123      	str	r3, [r4, #16]
 8005fba:	4616      	mov	r6, r2
 8005fbc:	e7ba      	b.n	8005f34 <_printf_i+0x150>
 8005fbe:	680b      	ldr	r3, [r1, #0]
 8005fc0:	1d1a      	adds	r2, r3, #4
 8005fc2:	600a      	str	r2, [r1, #0]
 8005fc4:	681e      	ldr	r6, [r3, #0]
 8005fc6:	6862      	ldr	r2, [r4, #4]
 8005fc8:	2100      	movs	r1, #0
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f7fa f908 	bl	80001e0 <memchr>
 8005fd0:	b108      	cbz	r0, 8005fd6 <_printf_i+0x1f2>
 8005fd2:	1b80      	subs	r0, r0, r6
 8005fd4:	6060      	str	r0, [r4, #4]
 8005fd6:	6863      	ldr	r3, [r4, #4]
 8005fd8:	6123      	str	r3, [r4, #16]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fe0:	e7a8      	b.n	8005f34 <_printf_i+0x150>
 8005fe2:	6923      	ldr	r3, [r4, #16]
 8005fe4:	4632      	mov	r2, r6
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	4640      	mov	r0, r8
 8005fea:	47d0      	blx	sl
 8005fec:	3001      	adds	r0, #1
 8005fee:	d0ab      	beq.n	8005f48 <_printf_i+0x164>
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	079b      	lsls	r3, r3, #30
 8005ff4:	d413      	bmi.n	800601e <_printf_i+0x23a>
 8005ff6:	68e0      	ldr	r0, [r4, #12]
 8005ff8:	9b03      	ldr	r3, [sp, #12]
 8005ffa:	4298      	cmp	r0, r3
 8005ffc:	bfb8      	it	lt
 8005ffe:	4618      	movlt	r0, r3
 8006000:	e7a4      	b.n	8005f4c <_printf_i+0x168>
 8006002:	2301      	movs	r3, #1
 8006004:	4632      	mov	r2, r6
 8006006:	4649      	mov	r1, r9
 8006008:	4640      	mov	r0, r8
 800600a:	47d0      	blx	sl
 800600c:	3001      	adds	r0, #1
 800600e:	d09b      	beq.n	8005f48 <_printf_i+0x164>
 8006010:	3501      	adds	r5, #1
 8006012:	68e3      	ldr	r3, [r4, #12]
 8006014:	9903      	ldr	r1, [sp, #12]
 8006016:	1a5b      	subs	r3, r3, r1
 8006018:	42ab      	cmp	r3, r5
 800601a:	dcf2      	bgt.n	8006002 <_printf_i+0x21e>
 800601c:	e7eb      	b.n	8005ff6 <_printf_i+0x212>
 800601e:	2500      	movs	r5, #0
 8006020:	f104 0619 	add.w	r6, r4, #25
 8006024:	e7f5      	b.n	8006012 <_printf_i+0x22e>
 8006026:	bf00      	nop
 8006028:	0800b0f2 	.word	0x0800b0f2
 800602c:	0800b103 	.word	0x0800b103

08006030 <_scanf_float>:
 8006030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006034:	b087      	sub	sp, #28
 8006036:	4617      	mov	r7, r2
 8006038:	9303      	str	r3, [sp, #12]
 800603a:	688b      	ldr	r3, [r1, #8]
 800603c:	1e5a      	subs	r2, r3, #1
 800603e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006042:	bf83      	ittte	hi
 8006044:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006048:	195b      	addhi	r3, r3, r5
 800604a:	9302      	strhi	r3, [sp, #8]
 800604c:	2300      	movls	r3, #0
 800604e:	bf86      	itte	hi
 8006050:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006054:	608b      	strhi	r3, [r1, #8]
 8006056:	9302      	strls	r3, [sp, #8]
 8006058:	680b      	ldr	r3, [r1, #0]
 800605a:	468b      	mov	fp, r1
 800605c:	2500      	movs	r5, #0
 800605e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006062:	f84b 3b1c 	str.w	r3, [fp], #28
 8006066:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800606a:	4680      	mov	r8, r0
 800606c:	460c      	mov	r4, r1
 800606e:	465e      	mov	r6, fp
 8006070:	46aa      	mov	sl, r5
 8006072:	46a9      	mov	r9, r5
 8006074:	9501      	str	r5, [sp, #4]
 8006076:	68a2      	ldr	r2, [r4, #8]
 8006078:	b152      	cbz	r2, 8006090 <_scanf_float+0x60>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b4e      	cmp	r3, #78	; 0x4e
 8006080:	d864      	bhi.n	800614c <_scanf_float+0x11c>
 8006082:	2b40      	cmp	r3, #64	; 0x40
 8006084:	d83c      	bhi.n	8006100 <_scanf_float+0xd0>
 8006086:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800608a:	b2c8      	uxtb	r0, r1
 800608c:	280e      	cmp	r0, #14
 800608e:	d93a      	bls.n	8006106 <_scanf_float+0xd6>
 8006090:	f1b9 0f00 	cmp.w	r9, #0
 8006094:	d003      	beq.n	800609e <_scanf_float+0x6e>
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800609c:	6023      	str	r3, [r4, #0]
 800609e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060a2:	f1ba 0f01 	cmp.w	sl, #1
 80060a6:	f200 8113 	bhi.w	80062d0 <_scanf_float+0x2a0>
 80060aa:	455e      	cmp	r6, fp
 80060ac:	f200 8105 	bhi.w	80062ba <_scanf_float+0x28a>
 80060b0:	2501      	movs	r5, #1
 80060b2:	4628      	mov	r0, r5
 80060b4:	b007      	add	sp, #28
 80060b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80060be:	2a0d      	cmp	r2, #13
 80060c0:	d8e6      	bhi.n	8006090 <_scanf_float+0x60>
 80060c2:	a101      	add	r1, pc, #4	; (adr r1, 80060c8 <_scanf_float+0x98>)
 80060c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80060c8:	08006207 	.word	0x08006207
 80060cc:	08006091 	.word	0x08006091
 80060d0:	08006091 	.word	0x08006091
 80060d4:	08006091 	.word	0x08006091
 80060d8:	08006267 	.word	0x08006267
 80060dc:	0800623f 	.word	0x0800623f
 80060e0:	08006091 	.word	0x08006091
 80060e4:	08006091 	.word	0x08006091
 80060e8:	08006215 	.word	0x08006215
 80060ec:	08006091 	.word	0x08006091
 80060f0:	08006091 	.word	0x08006091
 80060f4:	08006091 	.word	0x08006091
 80060f8:	08006091 	.word	0x08006091
 80060fc:	080061cd 	.word	0x080061cd
 8006100:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006104:	e7db      	b.n	80060be <_scanf_float+0x8e>
 8006106:	290e      	cmp	r1, #14
 8006108:	d8c2      	bhi.n	8006090 <_scanf_float+0x60>
 800610a:	a001      	add	r0, pc, #4	; (adr r0, 8006110 <_scanf_float+0xe0>)
 800610c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006110:	080061bf 	.word	0x080061bf
 8006114:	08006091 	.word	0x08006091
 8006118:	080061bf 	.word	0x080061bf
 800611c:	08006253 	.word	0x08006253
 8006120:	08006091 	.word	0x08006091
 8006124:	0800616d 	.word	0x0800616d
 8006128:	080061a9 	.word	0x080061a9
 800612c:	080061a9 	.word	0x080061a9
 8006130:	080061a9 	.word	0x080061a9
 8006134:	080061a9 	.word	0x080061a9
 8006138:	080061a9 	.word	0x080061a9
 800613c:	080061a9 	.word	0x080061a9
 8006140:	080061a9 	.word	0x080061a9
 8006144:	080061a9 	.word	0x080061a9
 8006148:	080061a9 	.word	0x080061a9
 800614c:	2b6e      	cmp	r3, #110	; 0x6e
 800614e:	d809      	bhi.n	8006164 <_scanf_float+0x134>
 8006150:	2b60      	cmp	r3, #96	; 0x60
 8006152:	d8b2      	bhi.n	80060ba <_scanf_float+0x8a>
 8006154:	2b54      	cmp	r3, #84	; 0x54
 8006156:	d077      	beq.n	8006248 <_scanf_float+0x218>
 8006158:	2b59      	cmp	r3, #89	; 0x59
 800615a:	d199      	bne.n	8006090 <_scanf_float+0x60>
 800615c:	2d07      	cmp	r5, #7
 800615e:	d197      	bne.n	8006090 <_scanf_float+0x60>
 8006160:	2508      	movs	r5, #8
 8006162:	e029      	b.n	80061b8 <_scanf_float+0x188>
 8006164:	2b74      	cmp	r3, #116	; 0x74
 8006166:	d06f      	beq.n	8006248 <_scanf_float+0x218>
 8006168:	2b79      	cmp	r3, #121	; 0x79
 800616a:	e7f6      	b.n	800615a <_scanf_float+0x12a>
 800616c:	6821      	ldr	r1, [r4, #0]
 800616e:	05c8      	lsls	r0, r1, #23
 8006170:	d51a      	bpl.n	80061a8 <_scanf_float+0x178>
 8006172:	9b02      	ldr	r3, [sp, #8]
 8006174:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006178:	6021      	str	r1, [r4, #0]
 800617a:	f109 0901 	add.w	r9, r9, #1
 800617e:	b11b      	cbz	r3, 8006188 <_scanf_float+0x158>
 8006180:	3b01      	subs	r3, #1
 8006182:	3201      	adds	r2, #1
 8006184:	9302      	str	r3, [sp, #8]
 8006186:	60a2      	str	r2, [r4, #8]
 8006188:	68a3      	ldr	r3, [r4, #8]
 800618a:	3b01      	subs	r3, #1
 800618c:	60a3      	str	r3, [r4, #8]
 800618e:	6923      	ldr	r3, [r4, #16]
 8006190:	3301      	adds	r3, #1
 8006192:	6123      	str	r3, [r4, #16]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3b01      	subs	r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	607b      	str	r3, [r7, #4]
 800619c:	f340 8084 	ble.w	80062a8 <_scanf_float+0x278>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	3301      	adds	r3, #1
 80061a4:	603b      	str	r3, [r7, #0]
 80061a6:	e766      	b.n	8006076 <_scanf_float+0x46>
 80061a8:	eb1a 0f05 	cmn.w	sl, r5
 80061ac:	f47f af70 	bne.w	8006090 <_scanf_float+0x60>
 80061b0:	6822      	ldr	r2, [r4, #0]
 80061b2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80061b6:	6022      	str	r2, [r4, #0]
 80061b8:	f806 3b01 	strb.w	r3, [r6], #1
 80061bc:	e7e4      	b.n	8006188 <_scanf_float+0x158>
 80061be:	6822      	ldr	r2, [r4, #0]
 80061c0:	0610      	lsls	r0, r2, #24
 80061c2:	f57f af65 	bpl.w	8006090 <_scanf_float+0x60>
 80061c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061ca:	e7f4      	b.n	80061b6 <_scanf_float+0x186>
 80061cc:	f1ba 0f00 	cmp.w	sl, #0
 80061d0:	d10e      	bne.n	80061f0 <_scanf_float+0x1c0>
 80061d2:	f1b9 0f00 	cmp.w	r9, #0
 80061d6:	d10e      	bne.n	80061f6 <_scanf_float+0x1c6>
 80061d8:	6822      	ldr	r2, [r4, #0]
 80061da:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80061de:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80061e2:	d108      	bne.n	80061f6 <_scanf_float+0x1c6>
 80061e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80061e8:	6022      	str	r2, [r4, #0]
 80061ea:	f04f 0a01 	mov.w	sl, #1
 80061ee:	e7e3      	b.n	80061b8 <_scanf_float+0x188>
 80061f0:	f1ba 0f02 	cmp.w	sl, #2
 80061f4:	d055      	beq.n	80062a2 <_scanf_float+0x272>
 80061f6:	2d01      	cmp	r5, #1
 80061f8:	d002      	beq.n	8006200 <_scanf_float+0x1d0>
 80061fa:	2d04      	cmp	r5, #4
 80061fc:	f47f af48 	bne.w	8006090 <_scanf_float+0x60>
 8006200:	3501      	adds	r5, #1
 8006202:	b2ed      	uxtb	r5, r5
 8006204:	e7d8      	b.n	80061b8 <_scanf_float+0x188>
 8006206:	f1ba 0f01 	cmp.w	sl, #1
 800620a:	f47f af41 	bne.w	8006090 <_scanf_float+0x60>
 800620e:	f04f 0a02 	mov.w	sl, #2
 8006212:	e7d1      	b.n	80061b8 <_scanf_float+0x188>
 8006214:	b97d      	cbnz	r5, 8006236 <_scanf_float+0x206>
 8006216:	f1b9 0f00 	cmp.w	r9, #0
 800621a:	f47f af3c 	bne.w	8006096 <_scanf_float+0x66>
 800621e:	6822      	ldr	r2, [r4, #0]
 8006220:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006224:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006228:	f47f af39 	bne.w	800609e <_scanf_float+0x6e>
 800622c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006230:	6022      	str	r2, [r4, #0]
 8006232:	2501      	movs	r5, #1
 8006234:	e7c0      	b.n	80061b8 <_scanf_float+0x188>
 8006236:	2d03      	cmp	r5, #3
 8006238:	d0e2      	beq.n	8006200 <_scanf_float+0x1d0>
 800623a:	2d05      	cmp	r5, #5
 800623c:	e7de      	b.n	80061fc <_scanf_float+0x1cc>
 800623e:	2d02      	cmp	r5, #2
 8006240:	f47f af26 	bne.w	8006090 <_scanf_float+0x60>
 8006244:	2503      	movs	r5, #3
 8006246:	e7b7      	b.n	80061b8 <_scanf_float+0x188>
 8006248:	2d06      	cmp	r5, #6
 800624a:	f47f af21 	bne.w	8006090 <_scanf_float+0x60>
 800624e:	2507      	movs	r5, #7
 8006250:	e7b2      	b.n	80061b8 <_scanf_float+0x188>
 8006252:	6822      	ldr	r2, [r4, #0]
 8006254:	0591      	lsls	r1, r2, #22
 8006256:	f57f af1b 	bpl.w	8006090 <_scanf_float+0x60>
 800625a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800625e:	6022      	str	r2, [r4, #0]
 8006260:	f8cd 9004 	str.w	r9, [sp, #4]
 8006264:	e7a8      	b.n	80061b8 <_scanf_float+0x188>
 8006266:	6822      	ldr	r2, [r4, #0]
 8006268:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800626c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006270:	d006      	beq.n	8006280 <_scanf_float+0x250>
 8006272:	0550      	lsls	r0, r2, #21
 8006274:	f57f af0c 	bpl.w	8006090 <_scanf_float+0x60>
 8006278:	f1b9 0f00 	cmp.w	r9, #0
 800627c:	f43f af0f 	beq.w	800609e <_scanf_float+0x6e>
 8006280:	0591      	lsls	r1, r2, #22
 8006282:	bf58      	it	pl
 8006284:	9901      	ldrpl	r1, [sp, #4]
 8006286:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800628a:	bf58      	it	pl
 800628c:	eba9 0101 	subpl.w	r1, r9, r1
 8006290:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006294:	bf58      	it	pl
 8006296:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800629a:	6022      	str	r2, [r4, #0]
 800629c:	f04f 0900 	mov.w	r9, #0
 80062a0:	e78a      	b.n	80061b8 <_scanf_float+0x188>
 80062a2:	f04f 0a03 	mov.w	sl, #3
 80062a6:	e787      	b.n	80061b8 <_scanf_float+0x188>
 80062a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80062ac:	4639      	mov	r1, r7
 80062ae:	4640      	mov	r0, r8
 80062b0:	4798      	blx	r3
 80062b2:	2800      	cmp	r0, #0
 80062b4:	f43f aedf 	beq.w	8006076 <_scanf_float+0x46>
 80062b8:	e6ea      	b.n	8006090 <_scanf_float+0x60>
 80062ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062c2:	463a      	mov	r2, r7
 80062c4:	4640      	mov	r0, r8
 80062c6:	4798      	blx	r3
 80062c8:	6923      	ldr	r3, [r4, #16]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	6123      	str	r3, [r4, #16]
 80062ce:	e6ec      	b.n	80060aa <_scanf_float+0x7a>
 80062d0:	1e6b      	subs	r3, r5, #1
 80062d2:	2b06      	cmp	r3, #6
 80062d4:	d825      	bhi.n	8006322 <_scanf_float+0x2f2>
 80062d6:	2d02      	cmp	r5, #2
 80062d8:	d836      	bhi.n	8006348 <_scanf_float+0x318>
 80062da:	455e      	cmp	r6, fp
 80062dc:	f67f aee8 	bls.w	80060b0 <_scanf_float+0x80>
 80062e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062e8:	463a      	mov	r2, r7
 80062ea:	4640      	mov	r0, r8
 80062ec:	4798      	blx	r3
 80062ee:	6923      	ldr	r3, [r4, #16]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	6123      	str	r3, [r4, #16]
 80062f4:	e7f1      	b.n	80062da <_scanf_float+0x2aa>
 80062f6:	9802      	ldr	r0, [sp, #8]
 80062f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062fc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006300:	9002      	str	r0, [sp, #8]
 8006302:	463a      	mov	r2, r7
 8006304:	4640      	mov	r0, r8
 8006306:	4798      	blx	r3
 8006308:	6923      	ldr	r3, [r4, #16]
 800630a:	3b01      	subs	r3, #1
 800630c:	6123      	str	r3, [r4, #16]
 800630e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006312:	fa5f fa8a 	uxtb.w	sl, sl
 8006316:	f1ba 0f02 	cmp.w	sl, #2
 800631a:	d1ec      	bne.n	80062f6 <_scanf_float+0x2c6>
 800631c:	3d03      	subs	r5, #3
 800631e:	b2ed      	uxtb	r5, r5
 8006320:	1b76      	subs	r6, r6, r5
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	05da      	lsls	r2, r3, #23
 8006326:	d52f      	bpl.n	8006388 <_scanf_float+0x358>
 8006328:	055b      	lsls	r3, r3, #21
 800632a:	d510      	bpl.n	800634e <_scanf_float+0x31e>
 800632c:	455e      	cmp	r6, fp
 800632e:	f67f aebf 	bls.w	80060b0 <_scanf_float+0x80>
 8006332:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006336:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800633a:	463a      	mov	r2, r7
 800633c:	4640      	mov	r0, r8
 800633e:	4798      	blx	r3
 8006340:	6923      	ldr	r3, [r4, #16]
 8006342:	3b01      	subs	r3, #1
 8006344:	6123      	str	r3, [r4, #16]
 8006346:	e7f1      	b.n	800632c <_scanf_float+0x2fc>
 8006348:	46aa      	mov	sl, r5
 800634a:	9602      	str	r6, [sp, #8]
 800634c:	e7df      	b.n	800630e <_scanf_float+0x2de>
 800634e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006352:	6923      	ldr	r3, [r4, #16]
 8006354:	2965      	cmp	r1, #101	; 0x65
 8006356:	f103 33ff 	add.w	r3, r3, #4294967295
 800635a:	f106 35ff 	add.w	r5, r6, #4294967295
 800635e:	6123      	str	r3, [r4, #16]
 8006360:	d00c      	beq.n	800637c <_scanf_float+0x34c>
 8006362:	2945      	cmp	r1, #69	; 0x45
 8006364:	d00a      	beq.n	800637c <_scanf_float+0x34c>
 8006366:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800636a:	463a      	mov	r2, r7
 800636c:	4640      	mov	r0, r8
 800636e:	4798      	blx	r3
 8006370:	6923      	ldr	r3, [r4, #16]
 8006372:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006376:	3b01      	subs	r3, #1
 8006378:	1eb5      	subs	r5, r6, #2
 800637a:	6123      	str	r3, [r4, #16]
 800637c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006380:	463a      	mov	r2, r7
 8006382:	4640      	mov	r0, r8
 8006384:	4798      	blx	r3
 8006386:	462e      	mov	r6, r5
 8006388:	6825      	ldr	r5, [r4, #0]
 800638a:	f015 0510 	ands.w	r5, r5, #16
 800638e:	d158      	bne.n	8006442 <_scanf_float+0x412>
 8006390:	7035      	strb	r5, [r6, #0]
 8006392:	6823      	ldr	r3, [r4, #0]
 8006394:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800639c:	d11c      	bne.n	80063d8 <_scanf_float+0x3a8>
 800639e:	9b01      	ldr	r3, [sp, #4]
 80063a0:	454b      	cmp	r3, r9
 80063a2:	eba3 0209 	sub.w	r2, r3, r9
 80063a6:	d124      	bne.n	80063f2 <_scanf_float+0x3c2>
 80063a8:	2200      	movs	r2, #0
 80063aa:	4659      	mov	r1, fp
 80063ac:	4640      	mov	r0, r8
 80063ae:	f000 ff29 	bl	8007204 <_strtod_r>
 80063b2:	9b03      	ldr	r3, [sp, #12]
 80063b4:	6821      	ldr	r1, [r4, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f011 0f02 	tst.w	r1, #2
 80063bc:	ec57 6b10 	vmov	r6, r7, d0
 80063c0:	f103 0204 	add.w	r2, r3, #4
 80063c4:	d020      	beq.n	8006408 <_scanf_float+0x3d8>
 80063c6:	9903      	ldr	r1, [sp, #12]
 80063c8:	600a      	str	r2, [r1, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	e9c3 6700 	strd	r6, r7, [r3]
 80063d0:	68e3      	ldr	r3, [r4, #12]
 80063d2:	3301      	adds	r3, #1
 80063d4:	60e3      	str	r3, [r4, #12]
 80063d6:	e66c      	b.n	80060b2 <_scanf_float+0x82>
 80063d8:	9b04      	ldr	r3, [sp, #16]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d0e4      	beq.n	80063a8 <_scanf_float+0x378>
 80063de:	9905      	ldr	r1, [sp, #20]
 80063e0:	230a      	movs	r3, #10
 80063e2:	462a      	mov	r2, r5
 80063e4:	3101      	adds	r1, #1
 80063e6:	4640      	mov	r0, r8
 80063e8:	f000 ff96 	bl	8007318 <_strtol_r>
 80063ec:	9b04      	ldr	r3, [sp, #16]
 80063ee:	9e05      	ldr	r6, [sp, #20]
 80063f0:	1ac2      	subs	r2, r0, r3
 80063f2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80063f6:	429e      	cmp	r6, r3
 80063f8:	bf28      	it	cs
 80063fa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80063fe:	4912      	ldr	r1, [pc, #72]	; (8006448 <_scanf_float+0x418>)
 8006400:	4630      	mov	r0, r6
 8006402:	f000 f8b9 	bl	8006578 <siprintf>
 8006406:	e7cf      	b.n	80063a8 <_scanf_float+0x378>
 8006408:	f011 0f04 	tst.w	r1, #4
 800640c:	9903      	ldr	r1, [sp, #12]
 800640e:	600a      	str	r2, [r1, #0]
 8006410:	d1db      	bne.n	80063ca <_scanf_float+0x39a>
 8006412:	f8d3 8000 	ldr.w	r8, [r3]
 8006416:	ee10 2a10 	vmov	r2, s0
 800641a:	ee10 0a10 	vmov	r0, s0
 800641e:	463b      	mov	r3, r7
 8006420:	4639      	mov	r1, r7
 8006422:	f7fa fb83 	bl	8000b2c <__aeabi_dcmpun>
 8006426:	b128      	cbz	r0, 8006434 <_scanf_float+0x404>
 8006428:	4808      	ldr	r0, [pc, #32]	; (800644c <_scanf_float+0x41c>)
 800642a:	f000 f89f 	bl	800656c <nanf>
 800642e:	ed88 0a00 	vstr	s0, [r8]
 8006432:	e7cd      	b.n	80063d0 <_scanf_float+0x3a0>
 8006434:	4630      	mov	r0, r6
 8006436:	4639      	mov	r1, r7
 8006438:	f7fa fbd6 	bl	8000be8 <__aeabi_d2f>
 800643c:	f8c8 0000 	str.w	r0, [r8]
 8006440:	e7c6      	b.n	80063d0 <_scanf_float+0x3a0>
 8006442:	2500      	movs	r5, #0
 8006444:	e635      	b.n	80060b2 <_scanf_float+0x82>
 8006446:	bf00      	nop
 8006448:	0800b114 	.word	0x0800b114
 800644c:	0800b590 	.word	0x0800b590

08006450 <iprintf>:
 8006450:	b40f      	push	{r0, r1, r2, r3}
 8006452:	4b0a      	ldr	r3, [pc, #40]	; (800647c <iprintf+0x2c>)
 8006454:	b513      	push	{r0, r1, r4, lr}
 8006456:	681c      	ldr	r4, [r3, #0]
 8006458:	b124      	cbz	r4, 8006464 <iprintf+0x14>
 800645a:	69a3      	ldr	r3, [r4, #24]
 800645c:	b913      	cbnz	r3, 8006464 <iprintf+0x14>
 800645e:	4620      	mov	r0, r4
 8006460:	f001 ffb0 	bl	80083c4 <__sinit>
 8006464:	ab05      	add	r3, sp, #20
 8006466:	9a04      	ldr	r2, [sp, #16]
 8006468:	68a1      	ldr	r1, [r4, #8]
 800646a:	9301      	str	r3, [sp, #4]
 800646c:	4620      	mov	r0, r4
 800646e:	f003 fb43 	bl	8009af8 <_vfiprintf_r>
 8006472:	b002      	add	sp, #8
 8006474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006478:	b004      	add	sp, #16
 800647a:	4770      	bx	lr
 800647c:	20000014 	.word	0x20000014

08006480 <_puts_r>:
 8006480:	b570      	push	{r4, r5, r6, lr}
 8006482:	460e      	mov	r6, r1
 8006484:	4605      	mov	r5, r0
 8006486:	b118      	cbz	r0, 8006490 <_puts_r+0x10>
 8006488:	6983      	ldr	r3, [r0, #24]
 800648a:	b90b      	cbnz	r3, 8006490 <_puts_r+0x10>
 800648c:	f001 ff9a 	bl	80083c4 <__sinit>
 8006490:	69ab      	ldr	r3, [r5, #24]
 8006492:	68ac      	ldr	r4, [r5, #8]
 8006494:	b913      	cbnz	r3, 800649c <_puts_r+0x1c>
 8006496:	4628      	mov	r0, r5
 8006498:	f001 ff94 	bl	80083c4 <__sinit>
 800649c:	4b2c      	ldr	r3, [pc, #176]	; (8006550 <_puts_r+0xd0>)
 800649e:	429c      	cmp	r4, r3
 80064a0:	d120      	bne.n	80064e4 <_puts_r+0x64>
 80064a2:	686c      	ldr	r4, [r5, #4]
 80064a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064a6:	07db      	lsls	r3, r3, #31
 80064a8:	d405      	bmi.n	80064b6 <_puts_r+0x36>
 80064aa:	89a3      	ldrh	r3, [r4, #12]
 80064ac:	0598      	lsls	r0, r3, #22
 80064ae:	d402      	bmi.n	80064b6 <_puts_r+0x36>
 80064b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064b2:	f002 fb98 	bl	8008be6 <__retarget_lock_acquire_recursive>
 80064b6:	89a3      	ldrh	r3, [r4, #12]
 80064b8:	0719      	lsls	r1, r3, #28
 80064ba:	d51d      	bpl.n	80064f8 <_puts_r+0x78>
 80064bc:	6923      	ldr	r3, [r4, #16]
 80064be:	b1db      	cbz	r3, 80064f8 <_puts_r+0x78>
 80064c0:	3e01      	subs	r6, #1
 80064c2:	68a3      	ldr	r3, [r4, #8]
 80064c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80064c8:	3b01      	subs	r3, #1
 80064ca:	60a3      	str	r3, [r4, #8]
 80064cc:	bb39      	cbnz	r1, 800651e <_puts_r+0x9e>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	da38      	bge.n	8006544 <_puts_r+0xc4>
 80064d2:	4622      	mov	r2, r4
 80064d4:	210a      	movs	r1, #10
 80064d6:	4628      	mov	r0, r5
 80064d8:	f000 ff20 	bl	800731c <__swbuf_r>
 80064dc:	3001      	adds	r0, #1
 80064de:	d011      	beq.n	8006504 <_puts_r+0x84>
 80064e0:	250a      	movs	r5, #10
 80064e2:	e011      	b.n	8006508 <_puts_r+0x88>
 80064e4:	4b1b      	ldr	r3, [pc, #108]	; (8006554 <_puts_r+0xd4>)
 80064e6:	429c      	cmp	r4, r3
 80064e8:	d101      	bne.n	80064ee <_puts_r+0x6e>
 80064ea:	68ac      	ldr	r4, [r5, #8]
 80064ec:	e7da      	b.n	80064a4 <_puts_r+0x24>
 80064ee:	4b1a      	ldr	r3, [pc, #104]	; (8006558 <_puts_r+0xd8>)
 80064f0:	429c      	cmp	r4, r3
 80064f2:	bf08      	it	eq
 80064f4:	68ec      	ldreq	r4, [r5, #12]
 80064f6:	e7d5      	b.n	80064a4 <_puts_r+0x24>
 80064f8:	4621      	mov	r1, r4
 80064fa:	4628      	mov	r0, r5
 80064fc:	f000 ff60 	bl	80073c0 <__swsetup_r>
 8006500:	2800      	cmp	r0, #0
 8006502:	d0dd      	beq.n	80064c0 <_puts_r+0x40>
 8006504:	f04f 35ff 	mov.w	r5, #4294967295
 8006508:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800650a:	07da      	lsls	r2, r3, #31
 800650c:	d405      	bmi.n	800651a <_puts_r+0x9a>
 800650e:	89a3      	ldrh	r3, [r4, #12]
 8006510:	059b      	lsls	r3, r3, #22
 8006512:	d402      	bmi.n	800651a <_puts_r+0x9a>
 8006514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006516:	f002 fb67 	bl	8008be8 <__retarget_lock_release_recursive>
 800651a:	4628      	mov	r0, r5
 800651c:	bd70      	pop	{r4, r5, r6, pc}
 800651e:	2b00      	cmp	r3, #0
 8006520:	da04      	bge.n	800652c <_puts_r+0xac>
 8006522:	69a2      	ldr	r2, [r4, #24]
 8006524:	429a      	cmp	r2, r3
 8006526:	dc06      	bgt.n	8006536 <_puts_r+0xb6>
 8006528:	290a      	cmp	r1, #10
 800652a:	d004      	beq.n	8006536 <_puts_r+0xb6>
 800652c:	6823      	ldr	r3, [r4, #0]
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	6022      	str	r2, [r4, #0]
 8006532:	7019      	strb	r1, [r3, #0]
 8006534:	e7c5      	b.n	80064c2 <_puts_r+0x42>
 8006536:	4622      	mov	r2, r4
 8006538:	4628      	mov	r0, r5
 800653a:	f000 feef 	bl	800731c <__swbuf_r>
 800653e:	3001      	adds	r0, #1
 8006540:	d1bf      	bne.n	80064c2 <_puts_r+0x42>
 8006542:	e7df      	b.n	8006504 <_puts_r+0x84>
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	250a      	movs	r5, #10
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	6022      	str	r2, [r4, #0]
 800654c:	701d      	strb	r5, [r3, #0]
 800654e:	e7db      	b.n	8006508 <_puts_r+0x88>
 8006550:	0800b328 	.word	0x0800b328
 8006554:	0800b348 	.word	0x0800b348
 8006558:	0800b308 	.word	0x0800b308

0800655c <puts>:
 800655c:	4b02      	ldr	r3, [pc, #8]	; (8006568 <puts+0xc>)
 800655e:	4601      	mov	r1, r0
 8006560:	6818      	ldr	r0, [r3, #0]
 8006562:	f7ff bf8d 	b.w	8006480 <_puts_r>
 8006566:	bf00      	nop
 8006568:	20000014 	.word	0x20000014

0800656c <nanf>:
 800656c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006574 <nanf+0x8>
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	7fc00000 	.word	0x7fc00000

08006578 <siprintf>:
 8006578:	b40e      	push	{r1, r2, r3}
 800657a:	b500      	push	{lr}
 800657c:	b09c      	sub	sp, #112	; 0x70
 800657e:	ab1d      	add	r3, sp, #116	; 0x74
 8006580:	9002      	str	r0, [sp, #8]
 8006582:	9006      	str	r0, [sp, #24]
 8006584:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006588:	4809      	ldr	r0, [pc, #36]	; (80065b0 <siprintf+0x38>)
 800658a:	9107      	str	r1, [sp, #28]
 800658c:	9104      	str	r1, [sp, #16]
 800658e:	4909      	ldr	r1, [pc, #36]	; (80065b4 <siprintf+0x3c>)
 8006590:	f853 2b04 	ldr.w	r2, [r3], #4
 8006594:	9105      	str	r1, [sp, #20]
 8006596:	6800      	ldr	r0, [r0, #0]
 8006598:	9301      	str	r3, [sp, #4]
 800659a:	a902      	add	r1, sp, #8
 800659c:	f003 f982 	bl	80098a4 <_svfiprintf_r>
 80065a0:	9b02      	ldr	r3, [sp, #8]
 80065a2:	2200      	movs	r2, #0
 80065a4:	701a      	strb	r2, [r3, #0]
 80065a6:	b01c      	add	sp, #112	; 0x70
 80065a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80065ac:	b003      	add	sp, #12
 80065ae:	4770      	bx	lr
 80065b0:	20000014 	.word	0x20000014
 80065b4:	ffff0208 	.word	0xffff0208

080065b8 <sulp>:
 80065b8:	b570      	push	{r4, r5, r6, lr}
 80065ba:	4604      	mov	r4, r0
 80065bc:	460d      	mov	r5, r1
 80065be:	ec45 4b10 	vmov	d0, r4, r5
 80065c2:	4616      	mov	r6, r2
 80065c4:	f002 ff0a 	bl	80093dc <__ulp>
 80065c8:	ec51 0b10 	vmov	r0, r1, d0
 80065cc:	b17e      	cbz	r6, 80065ee <sulp+0x36>
 80065ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80065d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	dd09      	ble.n	80065ee <sulp+0x36>
 80065da:	051b      	lsls	r3, r3, #20
 80065dc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80065e0:	2400      	movs	r4, #0
 80065e2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80065e6:	4622      	mov	r2, r4
 80065e8:	462b      	mov	r3, r5
 80065ea:	f7fa f805 	bl	80005f8 <__aeabi_dmul>
 80065ee:	bd70      	pop	{r4, r5, r6, pc}

080065f0 <_strtod_l>:
 80065f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f4:	b0a3      	sub	sp, #140	; 0x8c
 80065f6:	461f      	mov	r7, r3
 80065f8:	2300      	movs	r3, #0
 80065fa:	931e      	str	r3, [sp, #120]	; 0x78
 80065fc:	4ba4      	ldr	r3, [pc, #656]	; (8006890 <_strtod_l+0x2a0>)
 80065fe:	9219      	str	r2, [sp, #100]	; 0x64
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	9307      	str	r3, [sp, #28]
 8006604:	4604      	mov	r4, r0
 8006606:	4618      	mov	r0, r3
 8006608:	4688      	mov	r8, r1
 800660a:	f7f9 fde1 	bl	80001d0 <strlen>
 800660e:	f04f 0a00 	mov.w	sl, #0
 8006612:	4605      	mov	r5, r0
 8006614:	f04f 0b00 	mov.w	fp, #0
 8006618:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800661c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800661e:	781a      	ldrb	r2, [r3, #0]
 8006620:	2a2b      	cmp	r2, #43	; 0x2b
 8006622:	d04c      	beq.n	80066be <_strtod_l+0xce>
 8006624:	d839      	bhi.n	800669a <_strtod_l+0xaa>
 8006626:	2a0d      	cmp	r2, #13
 8006628:	d832      	bhi.n	8006690 <_strtod_l+0xa0>
 800662a:	2a08      	cmp	r2, #8
 800662c:	d832      	bhi.n	8006694 <_strtod_l+0xa4>
 800662e:	2a00      	cmp	r2, #0
 8006630:	d03c      	beq.n	80066ac <_strtod_l+0xbc>
 8006632:	2300      	movs	r3, #0
 8006634:	930e      	str	r3, [sp, #56]	; 0x38
 8006636:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006638:	7833      	ldrb	r3, [r6, #0]
 800663a:	2b30      	cmp	r3, #48	; 0x30
 800663c:	f040 80b4 	bne.w	80067a8 <_strtod_l+0x1b8>
 8006640:	7873      	ldrb	r3, [r6, #1]
 8006642:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006646:	2b58      	cmp	r3, #88	; 0x58
 8006648:	d16c      	bne.n	8006724 <_strtod_l+0x134>
 800664a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800664c:	9301      	str	r3, [sp, #4]
 800664e:	ab1e      	add	r3, sp, #120	; 0x78
 8006650:	9702      	str	r7, [sp, #8]
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	4a8f      	ldr	r2, [pc, #572]	; (8006894 <_strtod_l+0x2a4>)
 8006656:	ab1f      	add	r3, sp, #124	; 0x7c
 8006658:	a91d      	add	r1, sp, #116	; 0x74
 800665a:	4620      	mov	r0, r4
 800665c:	f001 ffb6 	bl	80085cc <__gethex>
 8006660:	f010 0707 	ands.w	r7, r0, #7
 8006664:	4605      	mov	r5, r0
 8006666:	d005      	beq.n	8006674 <_strtod_l+0x84>
 8006668:	2f06      	cmp	r7, #6
 800666a:	d12a      	bne.n	80066c2 <_strtod_l+0xd2>
 800666c:	3601      	adds	r6, #1
 800666e:	2300      	movs	r3, #0
 8006670:	961d      	str	r6, [sp, #116]	; 0x74
 8006672:	930e      	str	r3, [sp, #56]	; 0x38
 8006674:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006676:	2b00      	cmp	r3, #0
 8006678:	f040 8596 	bne.w	80071a8 <_strtod_l+0xbb8>
 800667c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800667e:	b1db      	cbz	r3, 80066b8 <_strtod_l+0xc8>
 8006680:	4652      	mov	r2, sl
 8006682:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006686:	ec43 2b10 	vmov	d0, r2, r3
 800668a:	b023      	add	sp, #140	; 0x8c
 800668c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006690:	2a20      	cmp	r2, #32
 8006692:	d1ce      	bne.n	8006632 <_strtod_l+0x42>
 8006694:	3301      	adds	r3, #1
 8006696:	931d      	str	r3, [sp, #116]	; 0x74
 8006698:	e7c0      	b.n	800661c <_strtod_l+0x2c>
 800669a:	2a2d      	cmp	r2, #45	; 0x2d
 800669c:	d1c9      	bne.n	8006632 <_strtod_l+0x42>
 800669e:	2201      	movs	r2, #1
 80066a0:	920e      	str	r2, [sp, #56]	; 0x38
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	921d      	str	r2, [sp, #116]	; 0x74
 80066a6:	785b      	ldrb	r3, [r3, #1]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1c4      	bne.n	8006636 <_strtod_l+0x46>
 80066ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066ae:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f040 8576 	bne.w	80071a4 <_strtod_l+0xbb4>
 80066b8:	4652      	mov	r2, sl
 80066ba:	465b      	mov	r3, fp
 80066bc:	e7e3      	b.n	8006686 <_strtod_l+0x96>
 80066be:	2200      	movs	r2, #0
 80066c0:	e7ee      	b.n	80066a0 <_strtod_l+0xb0>
 80066c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80066c4:	b13a      	cbz	r2, 80066d6 <_strtod_l+0xe6>
 80066c6:	2135      	movs	r1, #53	; 0x35
 80066c8:	a820      	add	r0, sp, #128	; 0x80
 80066ca:	f002 ff92 	bl	80095f2 <__copybits>
 80066ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 80066d0:	4620      	mov	r0, r4
 80066d2:	f002 fb57 	bl	8008d84 <_Bfree>
 80066d6:	3f01      	subs	r7, #1
 80066d8:	2f05      	cmp	r7, #5
 80066da:	d807      	bhi.n	80066ec <_strtod_l+0xfc>
 80066dc:	e8df f007 	tbb	[pc, r7]
 80066e0:	1d180b0e 	.word	0x1d180b0e
 80066e4:	030e      	.short	0x030e
 80066e6:	f04f 0b00 	mov.w	fp, #0
 80066ea:	46da      	mov	sl, fp
 80066ec:	0728      	lsls	r0, r5, #28
 80066ee:	d5c1      	bpl.n	8006674 <_strtod_l+0x84>
 80066f0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80066f4:	e7be      	b.n	8006674 <_strtod_l+0x84>
 80066f6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80066fa:	e7f7      	b.n	80066ec <_strtod_l+0xfc>
 80066fc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006700:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006702:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006706:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800670a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800670e:	e7ed      	b.n	80066ec <_strtod_l+0xfc>
 8006710:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006898 <_strtod_l+0x2a8>
 8006714:	f04f 0a00 	mov.w	sl, #0
 8006718:	e7e8      	b.n	80066ec <_strtod_l+0xfc>
 800671a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800671e:	f04f 3aff 	mov.w	sl, #4294967295
 8006722:	e7e3      	b.n	80066ec <_strtod_l+0xfc>
 8006724:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	921d      	str	r2, [sp, #116]	; 0x74
 800672a:	785b      	ldrb	r3, [r3, #1]
 800672c:	2b30      	cmp	r3, #48	; 0x30
 800672e:	d0f9      	beq.n	8006724 <_strtod_l+0x134>
 8006730:	2b00      	cmp	r3, #0
 8006732:	d09f      	beq.n	8006674 <_strtod_l+0x84>
 8006734:	2301      	movs	r3, #1
 8006736:	f04f 0900 	mov.w	r9, #0
 800673a:	9304      	str	r3, [sp, #16]
 800673c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800673e:	930a      	str	r3, [sp, #40]	; 0x28
 8006740:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006744:	464f      	mov	r7, r9
 8006746:	220a      	movs	r2, #10
 8006748:	981d      	ldr	r0, [sp, #116]	; 0x74
 800674a:	7806      	ldrb	r6, [r0, #0]
 800674c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006750:	b2d9      	uxtb	r1, r3
 8006752:	2909      	cmp	r1, #9
 8006754:	d92a      	bls.n	80067ac <_strtod_l+0x1bc>
 8006756:	9907      	ldr	r1, [sp, #28]
 8006758:	462a      	mov	r2, r5
 800675a:	f003 fb58 	bl	8009e0e <strncmp>
 800675e:	b398      	cbz	r0, 80067c8 <_strtod_l+0x1d8>
 8006760:	2000      	movs	r0, #0
 8006762:	4633      	mov	r3, r6
 8006764:	463d      	mov	r5, r7
 8006766:	9007      	str	r0, [sp, #28]
 8006768:	4602      	mov	r2, r0
 800676a:	2b65      	cmp	r3, #101	; 0x65
 800676c:	d001      	beq.n	8006772 <_strtod_l+0x182>
 800676e:	2b45      	cmp	r3, #69	; 0x45
 8006770:	d118      	bne.n	80067a4 <_strtod_l+0x1b4>
 8006772:	b91d      	cbnz	r5, 800677c <_strtod_l+0x18c>
 8006774:	9b04      	ldr	r3, [sp, #16]
 8006776:	4303      	orrs	r3, r0
 8006778:	d098      	beq.n	80066ac <_strtod_l+0xbc>
 800677a:	2500      	movs	r5, #0
 800677c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006780:	f108 0301 	add.w	r3, r8, #1
 8006784:	931d      	str	r3, [sp, #116]	; 0x74
 8006786:	f898 3001 	ldrb.w	r3, [r8, #1]
 800678a:	2b2b      	cmp	r3, #43	; 0x2b
 800678c:	d075      	beq.n	800687a <_strtod_l+0x28a>
 800678e:	2b2d      	cmp	r3, #45	; 0x2d
 8006790:	d07b      	beq.n	800688a <_strtod_l+0x29a>
 8006792:	f04f 0c00 	mov.w	ip, #0
 8006796:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800679a:	2909      	cmp	r1, #9
 800679c:	f240 8082 	bls.w	80068a4 <_strtod_l+0x2b4>
 80067a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80067a4:	2600      	movs	r6, #0
 80067a6:	e09d      	b.n	80068e4 <_strtod_l+0x2f4>
 80067a8:	2300      	movs	r3, #0
 80067aa:	e7c4      	b.n	8006736 <_strtod_l+0x146>
 80067ac:	2f08      	cmp	r7, #8
 80067ae:	bfd8      	it	le
 80067b0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80067b2:	f100 0001 	add.w	r0, r0, #1
 80067b6:	bfda      	itte	le
 80067b8:	fb02 3301 	mlale	r3, r2, r1, r3
 80067bc:	9309      	strle	r3, [sp, #36]	; 0x24
 80067be:	fb02 3909 	mlagt	r9, r2, r9, r3
 80067c2:	3701      	adds	r7, #1
 80067c4:	901d      	str	r0, [sp, #116]	; 0x74
 80067c6:	e7bf      	b.n	8006748 <_strtod_l+0x158>
 80067c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80067ca:	195a      	adds	r2, r3, r5
 80067cc:	921d      	str	r2, [sp, #116]	; 0x74
 80067ce:	5d5b      	ldrb	r3, [r3, r5]
 80067d0:	2f00      	cmp	r7, #0
 80067d2:	d037      	beq.n	8006844 <_strtod_l+0x254>
 80067d4:	9007      	str	r0, [sp, #28]
 80067d6:	463d      	mov	r5, r7
 80067d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80067dc:	2a09      	cmp	r2, #9
 80067de:	d912      	bls.n	8006806 <_strtod_l+0x216>
 80067e0:	2201      	movs	r2, #1
 80067e2:	e7c2      	b.n	800676a <_strtod_l+0x17a>
 80067e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	921d      	str	r2, [sp, #116]	; 0x74
 80067ea:	785b      	ldrb	r3, [r3, #1]
 80067ec:	3001      	adds	r0, #1
 80067ee:	2b30      	cmp	r3, #48	; 0x30
 80067f0:	d0f8      	beq.n	80067e4 <_strtod_l+0x1f4>
 80067f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80067f6:	2a08      	cmp	r2, #8
 80067f8:	f200 84db 	bhi.w	80071b2 <_strtod_l+0xbc2>
 80067fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80067fe:	9007      	str	r0, [sp, #28]
 8006800:	2000      	movs	r0, #0
 8006802:	920a      	str	r2, [sp, #40]	; 0x28
 8006804:	4605      	mov	r5, r0
 8006806:	3b30      	subs	r3, #48	; 0x30
 8006808:	f100 0201 	add.w	r2, r0, #1
 800680c:	d014      	beq.n	8006838 <_strtod_l+0x248>
 800680e:	9907      	ldr	r1, [sp, #28]
 8006810:	4411      	add	r1, r2
 8006812:	9107      	str	r1, [sp, #28]
 8006814:	462a      	mov	r2, r5
 8006816:	eb00 0e05 	add.w	lr, r0, r5
 800681a:	210a      	movs	r1, #10
 800681c:	4572      	cmp	r2, lr
 800681e:	d113      	bne.n	8006848 <_strtod_l+0x258>
 8006820:	182a      	adds	r2, r5, r0
 8006822:	2a08      	cmp	r2, #8
 8006824:	f105 0501 	add.w	r5, r5, #1
 8006828:	4405      	add	r5, r0
 800682a:	dc1c      	bgt.n	8006866 <_strtod_l+0x276>
 800682c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800682e:	220a      	movs	r2, #10
 8006830:	fb02 3301 	mla	r3, r2, r1, r3
 8006834:	9309      	str	r3, [sp, #36]	; 0x24
 8006836:	2200      	movs	r2, #0
 8006838:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800683a:	1c59      	adds	r1, r3, #1
 800683c:	911d      	str	r1, [sp, #116]	; 0x74
 800683e:	785b      	ldrb	r3, [r3, #1]
 8006840:	4610      	mov	r0, r2
 8006842:	e7c9      	b.n	80067d8 <_strtod_l+0x1e8>
 8006844:	4638      	mov	r0, r7
 8006846:	e7d2      	b.n	80067ee <_strtod_l+0x1fe>
 8006848:	2a08      	cmp	r2, #8
 800684a:	dc04      	bgt.n	8006856 <_strtod_l+0x266>
 800684c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800684e:	434e      	muls	r6, r1
 8006850:	9609      	str	r6, [sp, #36]	; 0x24
 8006852:	3201      	adds	r2, #1
 8006854:	e7e2      	b.n	800681c <_strtod_l+0x22c>
 8006856:	f102 0c01 	add.w	ip, r2, #1
 800685a:	f1bc 0f10 	cmp.w	ip, #16
 800685e:	bfd8      	it	le
 8006860:	fb01 f909 	mulle.w	r9, r1, r9
 8006864:	e7f5      	b.n	8006852 <_strtod_l+0x262>
 8006866:	2d10      	cmp	r5, #16
 8006868:	bfdc      	itt	le
 800686a:	220a      	movle	r2, #10
 800686c:	fb02 3909 	mlale	r9, r2, r9, r3
 8006870:	e7e1      	b.n	8006836 <_strtod_l+0x246>
 8006872:	2300      	movs	r3, #0
 8006874:	9307      	str	r3, [sp, #28]
 8006876:	2201      	movs	r2, #1
 8006878:	e77c      	b.n	8006774 <_strtod_l+0x184>
 800687a:	f04f 0c00 	mov.w	ip, #0
 800687e:	f108 0302 	add.w	r3, r8, #2
 8006882:	931d      	str	r3, [sp, #116]	; 0x74
 8006884:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006888:	e785      	b.n	8006796 <_strtod_l+0x1a6>
 800688a:	f04f 0c01 	mov.w	ip, #1
 800688e:	e7f6      	b.n	800687e <_strtod_l+0x28e>
 8006890:	0800b3d4 	.word	0x0800b3d4
 8006894:	0800b11c 	.word	0x0800b11c
 8006898:	7ff00000 	.word	0x7ff00000
 800689c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800689e:	1c59      	adds	r1, r3, #1
 80068a0:	911d      	str	r1, [sp, #116]	; 0x74
 80068a2:	785b      	ldrb	r3, [r3, #1]
 80068a4:	2b30      	cmp	r3, #48	; 0x30
 80068a6:	d0f9      	beq.n	800689c <_strtod_l+0x2ac>
 80068a8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80068ac:	2908      	cmp	r1, #8
 80068ae:	f63f af79 	bhi.w	80067a4 <_strtod_l+0x1b4>
 80068b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80068b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80068b8:	9308      	str	r3, [sp, #32]
 80068ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80068bc:	1c59      	adds	r1, r3, #1
 80068be:	911d      	str	r1, [sp, #116]	; 0x74
 80068c0:	785b      	ldrb	r3, [r3, #1]
 80068c2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80068c6:	2e09      	cmp	r6, #9
 80068c8:	d937      	bls.n	800693a <_strtod_l+0x34a>
 80068ca:	9e08      	ldr	r6, [sp, #32]
 80068cc:	1b89      	subs	r1, r1, r6
 80068ce:	2908      	cmp	r1, #8
 80068d0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80068d4:	dc02      	bgt.n	80068dc <_strtod_l+0x2ec>
 80068d6:	4576      	cmp	r6, lr
 80068d8:	bfa8      	it	ge
 80068da:	4676      	movge	r6, lr
 80068dc:	f1bc 0f00 	cmp.w	ip, #0
 80068e0:	d000      	beq.n	80068e4 <_strtod_l+0x2f4>
 80068e2:	4276      	negs	r6, r6
 80068e4:	2d00      	cmp	r5, #0
 80068e6:	d14f      	bne.n	8006988 <_strtod_l+0x398>
 80068e8:	9904      	ldr	r1, [sp, #16]
 80068ea:	4301      	orrs	r1, r0
 80068ec:	f47f aec2 	bne.w	8006674 <_strtod_l+0x84>
 80068f0:	2a00      	cmp	r2, #0
 80068f2:	f47f aedb 	bne.w	80066ac <_strtod_l+0xbc>
 80068f6:	2b69      	cmp	r3, #105	; 0x69
 80068f8:	d027      	beq.n	800694a <_strtod_l+0x35a>
 80068fa:	dc24      	bgt.n	8006946 <_strtod_l+0x356>
 80068fc:	2b49      	cmp	r3, #73	; 0x49
 80068fe:	d024      	beq.n	800694a <_strtod_l+0x35a>
 8006900:	2b4e      	cmp	r3, #78	; 0x4e
 8006902:	f47f aed3 	bne.w	80066ac <_strtod_l+0xbc>
 8006906:	499e      	ldr	r1, [pc, #632]	; (8006b80 <_strtod_l+0x590>)
 8006908:	a81d      	add	r0, sp, #116	; 0x74
 800690a:	f002 f8b7 	bl	8008a7c <__match>
 800690e:	2800      	cmp	r0, #0
 8006910:	f43f aecc 	beq.w	80066ac <_strtod_l+0xbc>
 8006914:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	2b28      	cmp	r3, #40	; 0x28
 800691a:	d12d      	bne.n	8006978 <_strtod_l+0x388>
 800691c:	4999      	ldr	r1, [pc, #612]	; (8006b84 <_strtod_l+0x594>)
 800691e:	aa20      	add	r2, sp, #128	; 0x80
 8006920:	a81d      	add	r0, sp, #116	; 0x74
 8006922:	f002 f8bf 	bl	8008aa4 <__hexnan>
 8006926:	2805      	cmp	r0, #5
 8006928:	d126      	bne.n	8006978 <_strtod_l+0x388>
 800692a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800692c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006930:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006934:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006938:	e69c      	b.n	8006674 <_strtod_l+0x84>
 800693a:	210a      	movs	r1, #10
 800693c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006940:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006944:	e7b9      	b.n	80068ba <_strtod_l+0x2ca>
 8006946:	2b6e      	cmp	r3, #110	; 0x6e
 8006948:	e7db      	b.n	8006902 <_strtod_l+0x312>
 800694a:	498f      	ldr	r1, [pc, #572]	; (8006b88 <_strtod_l+0x598>)
 800694c:	a81d      	add	r0, sp, #116	; 0x74
 800694e:	f002 f895 	bl	8008a7c <__match>
 8006952:	2800      	cmp	r0, #0
 8006954:	f43f aeaa 	beq.w	80066ac <_strtod_l+0xbc>
 8006958:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800695a:	498c      	ldr	r1, [pc, #560]	; (8006b8c <_strtod_l+0x59c>)
 800695c:	3b01      	subs	r3, #1
 800695e:	a81d      	add	r0, sp, #116	; 0x74
 8006960:	931d      	str	r3, [sp, #116]	; 0x74
 8006962:	f002 f88b 	bl	8008a7c <__match>
 8006966:	b910      	cbnz	r0, 800696e <_strtod_l+0x37e>
 8006968:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800696a:	3301      	adds	r3, #1
 800696c:	931d      	str	r3, [sp, #116]	; 0x74
 800696e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006b9c <_strtod_l+0x5ac>
 8006972:	f04f 0a00 	mov.w	sl, #0
 8006976:	e67d      	b.n	8006674 <_strtod_l+0x84>
 8006978:	4885      	ldr	r0, [pc, #532]	; (8006b90 <_strtod_l+0x5a0>)
 800697a:	f003 f9ed 	bl	8009d58 <nan>
 800697e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006982:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006986:	e675      	b.n	8006674 <_strtod_l+0x84>
 8006988:	9b07      	ldr	r3, [sp, #28]
 800698a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800698c:	1af3      	subs	r3, r6, r3
 800698e:	2f00      	cmp	r7, #0
 8006990:	bf08      	it	eq
 8006992:	462f      	moveq	r7, r5
 8006994:	2d10      	cmp	r5, #16
 8006996:	9308      	str	r3, [sp, #32]
 8006998:	46a8      	mov	r8, r5
 800699a:	bfa8      	it	ge
 800699c:	f04f 0810 	movge.w	r8, #16
 80069a0:	f7f9 fdb0 	bl	8000504 <__aeabi_ui2d>
 80069a4:	2d09      	cmp	r5, #9
 80069a6:	4682      	mov	sl, r0
 80069a8:	468b      	mov	fp, r1
 80069aa:	dd13      	ble.n	80069d4 <_strtod_l+0x3e4>
 80069ac:	4b79      	ldr	r3, [pc, #484]	; (8006b94 <_strtod_l+0x5a4>)
 80069ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80069b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80069b6:	f7f9 fe1f 	bl	80005f8 <__aeabi_dmul>
 80069ba:	4682      	mov	sl, r0
 80069bc:	4648      	mov	r0, r9
 80069be:	468b      	mov	fp, r1
 80069c0:	f7f9 fda0 	bl	8000504 <__aeabi_ui2d>
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	4650      	mov	r0, sl
 80069ca:	4659      	mov	r1, fp
 80069cc:	f7f9 fc5e 	bl	800028c <__adddf3>
 80069d0:	4682      	mov	sl, r0
 80069d2:	468b      	mov	fp, r1
 80069d4:	2d0f      	cmp	r5, #15
 80069d6:	dc38      	bgt.n	8006a4a <_strtod_l+0x45a>
 80069d8:	9b08      	ldr	r3, [sp, #32]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f43f ae4a 	beq.w	8006674 <_strtod_l+0x84>
 80069e0:	dd24      	ble.n	8006a2c <_strtod_l+0x43c>
 80069e2:	2b16      	cmp	r3, #22
 80069e4:	dc0b      	bgt.n	80069fe <_strtod_l+0x40e>
 80069e6:	4d6b      	ldr	r5, [pc, #428]	; (8006b94 <_strtod_l+0x5a4>)
 80069e8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80069ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 80069f0:	4652      	mov	r2, sl
 80069f2:	465b      	mov	r3, fp
 80069f4:	f7f9 fe00 	bl	80005f8 <__aeabi_dmul>
 80069f8:	4682      	mov	sl, r0
 80069fa:	468b      	mov	fp, r1
 80069fc:	e63a      	b.n	8006674 <_strtod_l+0x84>
 80069fe:	9a08      	ldr	r2, [sp, #32]
 8006a00:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006a04:	4293      	cmp	r3, r2
 8006a06:	db20      	blt.n	8006a4a <_strtod_l+0x45a>
 8006a08:	4c62      	ldr	r4, [pc, #392]	; (8006b94 <_strtod_l+0x5a4>)
 8006a0a:	f1c5 050f 	rsb	r5, r5, #15
 8006a0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006a12:	4652      	mov	r2, sl
 8006a14:	465b      	mov	r3, fp
 8006a16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a1a:	f7f9 fded 	bl	80005f8 <__aeabi_dmul>
 8006a1e:	9b08      	ldr	r3, [sp, #32]
 8006a20:	1b5d      	subs	r5, r3, r5
 8006a22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006a26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006a2a:	e7e3      	b.n	80069f4 <_strtod_l+0x404>
 8006a2c:	9b08      	ldr	r3, [sp, #32]
 8006a2e:	3316      	adds	r3, #22
 8006a30:	db0b      	blt.n	8006a4a <_strtod_l+0x45a>
 8006a32:	9b07      	ldr	r3, [sp, #28]
 8006a34:	4a57      	ldr	r2, [pc, #348]	; (8006b94 <_strtod_l+0x5a4>)
 8006a36:	1b9e      	subs	r6, r3, r6
 8006a38:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006a3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a40:	4650      	mov	r0, sl
 8006a42:	4659      	mov	r1, fp
 8006a44:	f7f9 ff02 	bl	800084c <__aeabi_ddiv>
 8006a48:	e7d6      	b.n	80069f8 <_strtod_l+0x408>
 8006a4a:	9b08      	ldr	r3, [sp, #32]
 8006a4c:	eba5 0808 	sub.w	r8, r5, r8
 8006a50:	4498      	add	r8, r3
 8006a52:	f1b8 0f00 	cmp.w	r8, #0
 8006a56:	dd71      	ble.n	8006b3c <_strtod_l+0x54c>
 8006a58:	f018 030f 	ands.w	r3, r8, #15
 8006a5c:	d00a      	beq.n	8006a74 <_strtod_l+0x484>
 8006a5e:	494d      	ldr	r1, [pc, #308]	; (8006b94 <_strtod_l+0x5a4>)
 8006a60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a64:	4652      	mov	r2, sl
 8006a66:	465b      	mov	r3, fp
 8006a68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a6c:	f7f9 fdc4 	bl	80005f8 <__aeabi_dmul>
 8006a70:	4682      	mov	sl, r0
 8006a72:	468b      	mov	fp, r1
 8006a74:	f038 080f 	bics.w	r8, r8, #15
 8006a78:	d04d      	beq.n	8006b16 <_strtod_l+0x526>
 8006a7a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006a7e:	dd22      	ble.n	8006ac6 <_strtod_l+0x4d6>
 8006a80:	2500      	movs	r5, #0
 8006a82:	462e      	mov	r6, r5
 8006a84:	9509      	str	r5, [sp, #36]	; 0x24
 8006a86:	9507      	str	r5, [sp, #28]
 8006a88:	2322      	movs	r3, #34	; 0x22
 8006a8a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006b9c <_strtod_l+0x5ac>
 8006a8e:	6023      	str	r3, [r4, #0]
 8006a90:	f04f 0a00 	mov.w	sl, #0
 8006a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f43f adec 	beq.w	8006674 <_strtod_l+0x84>
 8006a9c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f002 f970 	bl	8008d84 <_Bfree>
 8006aa4:	9907      	ldr	r1, [sp, #28]
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f002 f96c 	bl	8008d84 <_Bfree>
 8006aac:	4631      	mov	r1, r6
 8006aae:	4620      	mov	r0, r4
 8006ab0:	f002 f968 	bl	8008d84 <_Bfree>
 8006ab4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f002 f964 	bl	8008d84 <_Bfree>
 8006abc:	4629      	mov	r1, r5
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f002 f960 	bl	8008d84 <_Bfree>
 8006ac4:	e5d6      	b.n	8006674 <_strtod_l+0x84>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006acc:	4650      	mov	r0, sl
 8006ace:	4659      	mov	r1, fp
 8006ad0:	4699      	mov	r9, r3
 8006ad2:	f1b8 0f01 	cmp.w	r8, #1
 8006ad6:	dc21      	bgt.n	8006b1c <_strtod_l+0x52c>
 8006ad8:	b10b      	cbz	r3, 8006ade <_strtod_l+0x4ee>
 8006ada:	4682      	mov	sl, r0
 8006adc:	468b      	mov	fp, r1
 8006ade:	4b2e      	ldr	r3, [pc, #184]	; (8006b98 <_strtod_l+0x5a8>)
 8006ae0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006ae4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006ae8:	4652      	mov	r2, sl
 8006aea:	465b      	mov	r3, fp
 8006aec:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006af0:	f7f9 fd82 	bl	80005f8 <__aeabi_dmul>
 8006af4:	4b29      	ldr	r3, [pc, #164]	; (8006b9c <_strtod_l+0x5ac>)
 8006af6:	460a      	mov	r2, r1
 8006af8:	400b      	ands	r3, r1
 8006afa:	4929      	ldr	r1, [pc, #164]	; (8006ba0 <_strtod_l+0x5b0>)
 8006afc:	428b      	cmp	r3, r1
 8006afe:	4682      	mov	sl, r0
 8006b00:	d8be      	bhi.n	8006a80 <_strtod_l+0x490>
 8006b02:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006b06:	428b      	cmp	r3, r1
 8006b08:	bf86      	itte	hi
 8006b0a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006ba4 <_strtod_l+0x5b4>
 8006b0e:	f04f 3aff 	movhi.w	sl, #4294967295
 8006b12:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006b16:	2300      	movs	r3, #0
 8006b18:	9304      	str	r3, [sp, #16]
 8006b1a:	e081      	b.n	8006c20 <_strtod_l+0x630>
 8006b1c:	f018 0f01 	tst.w	r8, #1
 8006b20:	d007      	beq.n	8006b32 <_strtod_l+0x542>
 8006b22:	4b1d      	ldr	r3, [pc, #116]	; (8006b98 <_strtod_l+0x5a8>)
 8006b24:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2c:	f7f9 fd64 	bl	80005f8 <__aeabi_dmul>
 8006b30:	2301      	movs	r3, #1
 8006b32:	f109 0901 	add.w	r9, r9, #1
 8006b36:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006b3a:	e7ca      	b.n	8006ad2 <_strtod_l+0x4e2>
 8006b3c:	d0eb      	beq.n	8006b16 <_strtod_l+0x526>
 8006b3e:	f1c8 0800 	rsb	r8, r8, #0
 8006b42:	f018 020f 	ands.w	r2, r8, #15
 8006b46:	d00a      	beq.n	8006b5e <_strtod_l+0x56e>
 8006b48:	4b12      	ldr	r3, [pc, #72]	; (8006b94 <_strtod_l+0x5a4>)
 8006b4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b4e:	4650      	mov	r0, sl
 8006b50:	4659      	mov	r1, fp
 8006b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b56:	f7f9 fe79 	bl	800084c <__aeabi_ddiv>
 8006b5a:	4682      	mov	sl, r0
 8006b5c:	468b      	mov	fp, r1
 8006b5e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006b62:	d0d8      	beq.n	8006b16 <_strtod_l+0x526>
 8006b64:	f1b8 0f1f 	cmp.w	r8, #31
 8006b68:	dd1e      	ble.n	8006ba8 <_strtod_l+0x5b8>
 8006b6a:	2500      	movs	r5, #0
 8006b6c:	462e      	mov	r6, r5
 8006b6e:	9509      	str	r5, [sp, #36]	; 0x24
 8006b70:	9507      	str	r5, [sp, #28]
 8006b72:	2322      	movs	r3, #34	; 0x22
 8006b74:	f04f 0a00 	mov.w	sl, #0
 8006b78:	f04f 0b00 	mov.w	fp, #0
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	e789      	b.n	8006a94 <_strtod_l+0x4a4>
 8006b80:	0800b0ed 	.word	0x0800b0ed
 8006b84:	0800b130 	.word	0x0800b130
 8006b88:	0800b0e5 	.word	0x0800b0e5
 8006b8c:	0800b274 	.word	0x0800b274
 8006b90:	0800b590 	.word	0x0800b590
 8006b94:	0800b470 	.word	0x0800b470
 8006b98:	0800b448 	.word	0x0800b448
 8006b9c:	7ff00000 	.word	0x7ff00000
 8006ba0:	7ca00000 	.word	0x7ca00000
 8006ba4:	7fefffff 	.word	0x7fefffff
 8006ba8:	f018 0310 	ands.w	r3, r8, #16
 8006bac:	bf18      	it	ne
 8006bae:	236a      	movne	r3, #106	; 0x6a
 8006bb0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8006f68 <_strtod_l+0x978>
 8006bb4:	9304      	str	r3, [sp, #16]
 8006bb6:	4650      	mov	r0, sl
 8006bb8:	4659      	mov	r1, fp
 8006bba:	2300      	movs	r3, #0
 8006bbc:	f018 0f01 	tst.w	r8, #1
 8006bc0:	d004      	beq.n	8006bcc <_strtod_l+0x5dc>
 8006bc2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006bc6:	f7f9 fd17 	bl	80005f8 <__aeabi_dmul>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006bd0:	f109 0908 	add.w	r9, r9, #8
 8006bd4:	d1f2      	bne.n	8006bbc <_strtod_l+0x5cc>
 8006bd6:	b10b      	cbz	r3, 8006bdc <_strtod_l+0x5ec>
 8006bd8:	4682      	mov	sl, r0
 8006bda:	468b      	mov	fp, r1
 8006bdc:	9b04      	ldr	r3, [sp, #16]
 8006bde:	b1bb      	cbz	r3, 8006c10 <_strtod_l+0x620>
 8006be0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006be4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	4659      	mov	r1, fp
 8006bec:	dd10      	ble.n	8006c10 <_strtod_l+0x620>
 8006bee:	2b1f      	cmp	r3, #31
 8006bf0:	f340 8128 	ble.w	8006e44 <_strtod_l+0x854>
 8006bf4:	2b34      	cmp	r3, #52	; 0x34
 8006bf6:	bfde      	ittt	le
 8006bf8:	3b20      	suble	r3, #32
 8006bfa:	f04f 32ff 	movle.w	r2, #4294967295
 8006bfe:	fa02 f303 	lslle.w	r3, r2, r3
 8006c02:	f04f 0a00 	mov.w	sl, #0
 8006c06:	bfcc      	ite	gt
 8006c08:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006c0c:	ea03 0b01 	andle.w	fp, r3, r1
 8006c10:	2200      	movs	r2, #0
 8006c12:	2300      	movs	r3, #0
 8006c14:	4650      	mov	r0, sl
 8006c16:	4659      	mov	r1, fp
 8006c18:	f7f9 ff56 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	d1a4      	bne.n	8006b6a <_strtod_l+0x57a>
 8006c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c26:	462b      	mov	r3, r5
 8006c28:	463a      	mov	r2, r7
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f002 f916 	bl	8008e5c <__s2b>
 8006c30:	9009      	str	r0, [sp, #36]	; 0x24
 8006c32:	2800      	cmp	r0, #0
 8006c34:	f43f af24 	beq.w	8006a80 <_strtod_l+0x490>
 8006c38:	9b07      	ldr	r3, [sp, #28]
 8006c3a:	1b9e      	subs	r6, r3, r6
 8006c3c:	9b08      	ldr	r3, [sp, #32]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	bfb4      	ite	lt
 8006c42:	4633      	movlt	r3, r6
 8006c44:	2300      	movge	r3, #0
 8006c46:	9310      	str	r3, [sp, #64]	; 0x40
 8006c48:	9b08      	ldr	r3, [sp, #32]
 8006c4a:	2500      	movs	r5, #0
 8006c4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006c50:	9318      	str	r3, [sp, #96]	; 0x60
 8006c52:	462e      	mov	r6, r5
 8006c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c56:	4620      	mov	r0, r4
 8006c58:	6859      	ldr	r1, [r3, #4]
 8006c5a:	f002 f853 	bl	8008d04 <_Balloc>
 8006c5e:	9007      	str	r0, [sp, #28]
 8006c60:	2800      	cmp	r0, #0
 8006c62:	f43f af11 	beq.w	8006a88 <_strtod_l+0x498>
 8006c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c68:	691a      	ldr	r2, [r3, #16]
 8006c6a:	3202      	adds	r2, #2
 8006c6c:	f103 010c 	add.w	r1, r3, #12
 8006c70:	0092      	lsls	r2, r2, #2
 8006c72:	300c      	adds	r0, #12
 8006c74:	f002 f838 	bl	8008ce8 <memcpy>
 8006c78:	ec4b ab10 	vmov	d0, sl, fp
 8006c7c:	aa20      	add	r2, sp, #128	; 0x80
 8006c7e:	a91f      	add	r1, sp, #124	; 0x7c
 8006c80:	4620      	mov	r0, r4
 8006c82:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006c86:	f002 fc25 	bl	80094d4 <__d2b>
 8006c8a:	901e      	str	r0, [sp, #120]	; 0x78
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	f43f aefb 	beq.w	8006a88 <_strtod_l+0x498>
 8006c92:	2101      	movs	r1, #1
 8006c94:	4620      	mov	r0, r4
 8006c96:	f002 f97b 	bl	8008f90 <__i2b>
 8006c9a:	4606      	mov	r6, r0
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	f43f aef3 	beq.w	8006a88 <_strtod_l+0x498>
 8006ca2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ca4:	9904      	ldr	r1, [sp, #16]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	bfab      	itete	ge
 8006caa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8006cac:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8006cae:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006cb0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8006cb4:	bfac      	ite	ge
 8006cb6:	eb03 0902 	addge.w	r9, r3, r2
 8006cba:	1ad7      	sublt	r7, r2, r3
 8006cbc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006cbe:	eba3 0801 	sub.w	r8, r3, r1
 8006cc2:	4490      	add	r8, r2
 8006cc4:	4ba3      	ldr	r3, [pc, #652]	; (8006f54 <_strtod_l+0x964>)
 8006cc6:	f108 38ff 	add.w	r8, r8, #4294967295
 8006cca:	4598      	cmp	r8, r3
 8006ccc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006cd0:	f280 80cc 	bge.w	8006e6c <_strtod_l+0x87c>
 8006cd4:	eba3 0308 	sub.w	r3, r3, r8
 8006cd8:	2b1f      	cmp	r3, #31
 8006cda:	eba2 0203 	sub.w	r2, r2, r3
 8006cde:	f04f 0101 	mov.w	r1, #1
 8006ce2:	f300 80b6 	bgt.w	8006e52 <_strtod_l+0x862>
 8006ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cea:	9311      	str	r3, [sp, #68]	; 0x44
 8006cec:	2300      	movs	r3, #0
 8006cee:	930c      	str	r3, [sp, #48]	; 0x30
 8006cf0:	eb09 0802 	add.w	r8, r9, r2
 8006cf4:	9b04      	ldr	r3, [sp, #16]
 8006cf6:	45c1      	cmp	r9, r8
 8006cf8:	4417      	add	r7, r2
 8006cfa:	441f      	add	r7, r3
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	bfa8      	it	ge
 8006d00:	4643      	movge	r3, r8
 8006d02:	42bb      	cmp	r3, r7
 8006d04:	bfa8      	it	ge
 8006d06:	463b      	movge	r3, r7
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	bfc2      	ittt	gt
 8006d0c:	eba8 0803 	subgt.w	r8, r8, r3
 8006d10:	1aff      	subgt	r7, r7, r3
 8006d12:	eba9 0903 	subgt.w	r9, r9, r3
 8006d16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	dd17      	ble.n	8006d4c <_strtod_l+0x75c>
 8006d1c:	4631      	mov	r1, r6
 8006d1e:	461a      	mov	r2, r3
 8006d20:	4620      	mov	r0, r4
 8006d22:	f002 f9f1 	bl	8009108 <__pow5mult>
 8006d26:	4606      	mov	r6, r0
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	f43f aead 	beq.w	8006a88 <_strtod_l+0x498>
 8006d2e:	4601      	mov	r1, r0
 8006d30:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006d32:	4620      	mov	r0, r4
 8006d34:	f002 f942 	bl	8008fbc <__multiply>
 8006d38:	900f      	str	r0, [sp, #60]	; 0x3c
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	f43f aea4 	beq.w	8006a88 <_strtod_l+0x498>
 8006d40:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006d42:	4620      	mov	r0, r4
 8006d44:	f002 f81e 	bl	8008d84 <_Bfree>
 8006d48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d4a:	931e      	str	r3, [sp, #120]	; 0x78
 8006d4c:	f1b8 0f00 	cmp.w	r8, #0
 8006d50:	f300 8091 	bgt.w	8006e76 <_strtod_l+0x886>
 8006d54:	9b08      	ldr	r3, [sp, #32]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	dd08      	ble.n	8006d6c <_strtod_l+0x77c>
 8006d5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006d5c:	9907      	ldr	r1, [sp, #28]
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f002 f9d2 	bl	8009108 <__pow5mult>
 8006d64:	9007      	str	r0, [sp, #28]
 8006d66:	2800      	cmp	r0, #0
 8006d68:	f43f ae8e 	beq.w	8006a88 <_strtod_l+0x498>
 8006d6c:	2f00      	cmp	r7, #0
 8006d6e:	dd08      	ble.n	8006d82 <_strtod_l+0x792>
 8006d70:	9907      	ldr	r1, [sp, #28]
 8006d72:	463a      	mov	r2, r7
 8006d74:	4620      	mov	r0, r4
 8006d76:	f002 fa21 	bl	80091bc <__lshift>
 8006d7a:	9007      	str	r0, [sp, #28]
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	f43f ae83 	beq.w	8006a88 <_strtod_l+0x498>
 8006d82:	f1b9 0f00 	cmp.w	r9, #0
 8006d86:	dd08      	ble.n	8006d9a <_strtod_l+0x7aa>
 8006d88:	4631      	mov	r1, r6
 8006d8a:	464a      	mov	r2, r9
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f002 fa15 	bl	80091bc <__lshift>
 8006d92:	4606      	mov	r6, r0
 8006d94:	2800      	cmp	r0, #0
 8006d96:	f43f ae77 	beq.w	8006a88 <_strtod_l+0x498>
 8006d9a:	9a07      	ldr	r2, [sp, #28]
 8006d9c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f002 fa94 	bl	80092cc <__mdiff>
 8006da4:	4605      	mov	r5, r0
 8006da6:	2800      	cmp	r0, #0
 8006da8:	f43f ae6e 	beq.w	8006a88 <_strtod_l+0x498>
 8006dac:	68c3      	ldr	r3, [r0, #12]
 8006dae:	930f      	str	r3, [sp, #60]	; 0x3c
 8006db0:	2300      	movs	r3, #0
 8006db2:	60c3      	str	r3, [r0, #12]
 8006db4:	4631      	mov	r1, r6
 8006db6:	f002 fa6d 	bl	8009294 <__mcmp>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	da65      	bge.n	8006e8a <_strtod_l+0x89a>
 8006dbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dc0:	ea53 030a 	orrs.w	r3, r3, sl
 8006dc4:	f040 8087 	bne.w	8006ed6 <_strtod_l+0x8e6>
 8006dc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f040 8082 	bne.w	8006ed6 <_strtod_l+0x8e6>
 8006dd2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006dd6:	0d1b      	lsrs	r3, r3, #20
 8006dd8:	051b      	lsls	r3, r3, #20
 8006dda:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006dde:	d97a      	bls.n	8006ed6 <_strtod_l+0x8e6>
 8006de0:	696b      	ldr	r3, [r5, #20]
 8006de2:	b913      	cbnz	r3, 8006dea <_strtod_l+0x7fa>
 8006de4:	692b      	ldr	r3, [r5, #16]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	dd75      	ble.n	8006ed6 <_strtod_l+0x8e6>
 8006dea:	4629      	mov	r1, r5
 8006dec:	2201      	movs	r2, #1
 8006dee:	4620      	mov	r0, r4
 8006df0:	f002 f9e4 	bl	80091bc <__lshift>
 8006df4:	4631      	mov	r1, r6
 8006df6:	4605      	mov	r5, r0
 8006df8:	f002 fa4c 	bl	8009294 <__mcmp>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	dd6a      	ble.n	8006ed6 <_strtod_l+0x8e6>
 8006e00:	9904      	ldr	r1, [sp, #16]
 8006e02:	4a55      	ldr	r2, [pc, #340]	; (8006f58 <_strtod_l+0x968>)
 8006e04:	465b      	mov	r3, fp
 8006e06:	2900      	cmp	r1, #0
 8006e08:	f000 8085 	beq.w	8006f16 <_strtod_l+0x926>
 8006e0c:	ea02 010b 	and.w	r1, r2, fp
 8006e10:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006e14:	dc7f      	bgt.n	8006f16 <_strtod_l+0x926>
 8006e16:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006e1a:	f77f aeaa 	ble.w	8006b72 <_strtod_l+0x582>
 8006e1e:	4a4f      	ldr	r2, [pc, #316]	; (8006f5c <_strtod_l+0x96c>)
 8006e20:	2300      	movs	r3, #0
 8006e22:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8006e26:	4650      	mov	r0, sl
 8006e28:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8006e2c:	4659      	mov	r1, fp
 8006e2e:	f7f9 fbe3 	bl	80005f8 <__aeabi_dmul>
 8006e32:	460b      	mov	r3, r1
 8006e34:	4303      	orrs	r3, r0
 8006e36:	bf08      	it	eq
 8006e38:	2322      	moveq	r3, #34	; 0x22
 8006e3a:	4682      	mov	sl, r0
 8006e3c:	468b      	mov	fp, r1
 8006e3e:	bf08      	it	eq
 8006e40:	6023      	streq	r3, [r4, #0]
 8006e42:	e62b      	b.n	8006a9c <_strtod_l+0x4ac>
 8006e44:	f04f 32ff 	mov.w	r2, #4294967295
 8006e48:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4c:	ea03 0a0a 	and.w	sl, r3, sl
 8006e50:	e6de      	b.n	8006c10 <_strtod_l+0x620>
 8006e52:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006e56:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006e5a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006e5e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006e62:	fa01 f308 	lsl.w	r3, r1, r8
 8006e66:	930c      	str	r3, [sp, #48]	; 0x30
 8006e68:	9111      	str	r1, [sp, #68]	; 0x44
 8006e6a:	e741      	b.n	8006cf0 <_strtod_l+0x700>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	930c      	str	r3, [sp, #48]	; 0x30
 8006e70:	2301      	movs	r3, #1
 8006e72:	9311      	str	r3, [sp, #68]	; 0x44
 8006e74:	e73c      	b.n	8006cf0 <_strtod_l+0x700>
 8006e76:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006e78:	4642      	mov	r2, r8
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f002 f99e 	bl	80091bc <__lshift>
 8006e80:	901e      	str	r0, [sp, #120]	; 0x78
 8006e82:	2800      	cmp	r0, #0
 8006e84:	f47f af66 	bne.w	8006d54 <_strtod_l+0x764>
 8006e88:	e5fe      	b.n	8006a88 <_strtod_l+0x498>
 8006e8a:	465f      	mov	r7, fp
 8006e8c:	d16e      	bne.n	8006f6c <_strtod_l+0x97c>
 8006e8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e94:	b342      	cbz	r2, 8006ee8 <_strtod_l+0x8f8>
 8006e96:	4a32      	ldr	r2, [pc, #200]	; (8006f60 <_strtod_l+0x970>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d128      	bne.n	8006eee <_strtod_l+0x8fe>
 8006e9c:	9b04      	ldr	r3, [sp, #16]
 8006e9e:	4650      	mov	r0, sl
 8006ea0:	b1eb      	cbz	r3, 8006ede <_strtod_l+0x8ee>
 8006ea2:	4a2d      	ldr	r2, [pc, #180]	; (8006f58 <_strtod_l+0x968>)
 8006ea4:	403a      	ands	r2, r7
 8006ea6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006eaa:	f04f 31ff 	mov.w	r1, #4294967295
 8006eae:	d819      	bhi.n	8006ee4 <_strtod_l+0x8f4>
 8006eb0:	0d12      	lsrs	r2, r2, #20
 8006eb2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eba:	4298      	cmp	r0, r3
 8006ebc:	d117      	bne.n	8006eee <_strtod_l+0x8fe>
 8006ebe:	4b29      	ldr	r3, [pc, #164]	; (8006f64 <_strtod_l+0x974>)
 8006ec0:	429f      	cmp	r7, r3
 8006ec2:	d102      	bne.n	8006eca <_strtod_l+0x8da>
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	f43f addf 	beq.w	8006a88 <_strtod_l+0x498>
 8006eca:	4b23      	ldr	r3, [pc, #140]	; (8006f58 <_strtod_l+0x968>)
 8006ecc:	403b      	ands	r3, r7
 8006ece:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006ed2:	f04f 0a00 	mov.w	sl, #0
 8006ed6:	9b04      	ldr	r3, [sp, #16]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1a0      	bne.n	8006e1e <_strtod_l+0x82e>
 8006edc:	e5de      	b.n	8006a9c <_strtod_l+0x4ac>
 8006ede:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee2:	e7ea      	b.n	8006eba <_strtod_l+0x8ca>
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	e7e8      	b.n	8006eba <_strtod_l+0x8ca>
 8006ee8:	ea53 030a 	orrs.w	r3, r3, sl
 8006eec:	d088      	beq.n	8006e00 <_strtod_l+0x810>
 8006eee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ef0:	b1db      	cbz	r3, 8006f2a <_strtod_l+0x93a>
 8006ef2:	423b      	tst	r3, r7
 8006ef4:	d0ef      	beq.n	8006ed6 <_strtod_l+0x8e6>
 8006ef6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ef8:	9a04      	ldr	r2, [sp, #16]
 8006efa:	4650      	mov	r0, sl
 8006efc:	4659      	mov	r1, fp
 8006efe:	b1c3      	cbz	r3, 8006f32 <_strtod_l+0x942>
 8006f00:	f7ff fb5a 	bl	80065b8 <sulp>
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f0c:	f7f9 f9be 	bl	800028c <__adddf3>
 8006f10:	4682      	mov	sl, r0
 8006f12:	468b      	mov	fp, r1
 8006f14:	e7df      	b.n	8006ed6 <_strtod_l+0x8e6>
 8006f16:	4013      	ands	r3, r2
 8006f18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006f1c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006f20:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006f24:	f04f 3aff 	mov.w	sl, #4294967295
 8006f28:	e7d5      	b.n	8006ed6 <_strtod_l+0x8e6>
 8006f2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f2c:	ea13 0f0a 	tst.w	r3, sl
 8006f30:	e7e0      	b.n	8006ef4 <_strtod_l+0x904>
 8006f32:	f7ff fb41 	bl	80065b8 <sulp>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f3e:	f7f9 f9a3 	bl	8000288 <__aeabi_dsub>
 8006f42:	2200      	movs	r2, #0
 8006f44:	2300      	movs	r3, #0
 8006f46:	4682      	mov	sl, r0
 8006f48:	468b      	mov	fp, r1
 8006f4a:	f7f9 fdbd 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	d0c1      	beq.n	8006ed6 <_strtod_l+0x8e6>
 8006f52:	e60e      	b.n	8006b72 <_strtod_l+0x582>
 8006f54:	fffffc02 	.word	0xfffffc02
 8006f58:	7ff00000 	.word	0x7ff00000
 8006f5c:	39500000 	.word	0x39500000
 8006f60:	000fffff 	.word	0x000fffff
 8006f64:	7fefffff 	.word	0x7fefffff
 8006f68:	0800b148 	.word	0x0800b148
 8006f6c:	4631      	mov	r1, r6
 8006f6e:	4628      	mov	r0, r5
 8006f70:	f002 fb0c 	bl	800958c <__ratio>
 8006f74:	ec59 8b10 	vmov	r8, r9, d0
 8006f78:	ee10 0a10 	vmov	r0, s0
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f82:	4649      	mov	r1, r9
 8006f84:	f7f9 fdb4 	bl	8000af0 <__aeabi_dcmple>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	d07c      	beq.n	8007086 <_strtod_l+0xa96>
 8006f8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d04c      	beq.n	800702c <_strtod_l+0xa3c>
 8006f92:	4b95      	ldr	r3, [pc, #596]	; (80071e8 <_strtod_l+0xbf8>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006f9a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80071e8 <_strtod_l+0xbf8>
 8006f9e:	f04f 0800 	mov.w	r8, #0
 8006fa2:	4b92      	ldr	r3, [pc, #584]	; (80071ec <_strtod_l+0xbfc>)
 8006fa4:	403b      	ands	r3, r7
 8006fa6:	9311      	str	r3, [sp, #68]	; 0x44
 8006fa8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006faa:	4b91      	ldr	r3, [pc, #580]	; (80071f0 <_strtod_l+0xc00>)
 8006fac:	429a      	cmp	r2, r3
 8006fae:	f040 80b2 	bne.w	8007116 <_strtod_l+0xb26>
 8006fb2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006fb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fba:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006fbe:	ec4b ab10 	vmov	d0, sl, fp
 8006fc2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8006fc6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006fca:	f002 fa07 	bl	80093dc <__ulp>
 8006fce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fd2:	ec53 2b10 	vmov	r2, r3, d0
 8006fd6:	f7f9 fb0f 	bl	80005f8 <__aeabi_dmul>
 8006fda:	4652      	mov	r2, sl
 8006fdc:	465b      	mov	r3, fp
 8006fde:	f7f9 f955 	bl	800028c <__adddf3>
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	4981      	ldr	r1, [pc, #516]	; (80071ec <_strtod_l+0xbfc>)
 8006fe6:	4a83      	ldr	r2, [pc, #524]	; (80071f4 <_strtod_l+0xc04>)
 8006fe8:	4019      	ands	r1, r3
 8006fea:	4291      	cmp	r1, r2
 8006fec:	4682      	mov	sl, r0
 8006fee:	d95e      	bls.n	80070ae <_strtod_l+0xabe>
 8006ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ff2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d103      	bne.n	8007002 <_strtod_l+0xa12>
 8006ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	f43f ad43 	beq.w	8006a88 <_strtod_l+0x498>
 8007002:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007200 <_strtod_l+0xc10>
 8007006:	f04f 3aff 	mov.w	sl, #4294967295
 800700a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800700c:	4620      	mov	r0, r4
 800700e:	f001 feb9 	bl	8008d84 <_Bfree>
 8007012:	9907      	ldr	r1, [sp, #28]
 8007014:	4620      	mov	r0, r4
 8007016:	f001 feb5 	bl	8008d84 <_Bfree>
 800701a:	4631      	mov	r1, r6
 800701c:	4620      	mov	r0, r4
 800701e:	f001 feb1 	bl	8008d84 <_Bfree>
 8007022:	4629      	mov	r1, r5
 8007024:	4620      	mov	r0, r4
 8007026:	f001 fead 	bl	8008d84 <_Bfree>
 800702a:	e613      	b.n	8006c54 <_strtod_l+0x664>
 800702c:	f1ba 0f00 	cmp.w	sl, #0
 8007030:	d11b      	bne.n	800706a <_strtod_l+0xa7a>
 8007032:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007036:	b9f3      	cbnz	r3, 8007076 <_strtod_l+0xa86>
 8007038:	4b6b      	ldr	r3, [pc, #428]	; (80071e8 <_strtod_l+0xbf8>)
 800703a:	2200      	movs	r2, #0
 800703c:	4640      	mov	r0, r8
 800703e:	4649      	mov	r1, r9
 8007040:	f7f9 fd4c 	bl	8000adc <__aeabi_dcmplt>
 8007044:	b9d0      	cbnz	r0, 800707c <_strtod_l+0xa8c>
 8007046:	4640      	mov	r0, r8
 8007048:	4649      	mov	r1, r9
 800704a:	4b6b      	ldr	r3, [pc, #428]	; (80071f8 <_strtod_l+0xc08>)
 800704c:	2200      	movs	r2, #0
 800704e:	f7f9 fad3 	bl	80005f8 <__aeabi_dmul>
 8007052:	4680      	mov	r8, r0
 8007054:	4689      	mov	r9, r1
 8007056:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800705a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800705e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007060:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8007064:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007068:	e79b      	b.n	8006fa2 <_strtod_l+0x9b2>
 800706a:	f1ba 0f01 	cmp.w	sl, #1
 800706e:	d102      	bne.n	8007076 <_strtod_l+0xa86>
 8007070:	2f00      	cmp	r7, #0
 8007072:	f43f ad7e 	beq.w	8006b72 <_strtod_l+0x582>
 8007076:	4b61      	ldr	r3, [pc, #388]	; (80071fc <_strtod_l+0xc0c>)
 8007078:	2200      	movs	r2, #0
 800707a:	e78c      	b.n	8006f96 <_strtod_l+0x9a6>
 800707c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80071f8 <_strtod_l+0xc08>
 8007080:	f04f 0800 	mov.w	r8, #0
 8007084:	e7e7      	b.n	8007056 <_strtod_l+0xa66>
 8007086:	4b5c      	ldr	r3, [pc, #368]	; (80071f8 <_strtod_l+0xc08>)
 8007088:	4640      	mov	r0, r8
 800708a:	4649      	mov	r1, r9
 800708c:	2200      	movs	r2, #0
 800708e:	f7f9 fab3 	bl	80005f8 <__aeabi_dmul>
 8007092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007094:	4680      	mov	r8, r0
 8007096:	4689      	mov	r9, r1
 8007098:	b933      	cbnz	r3, 80070a8 <_strtod_l+0xab8>
 800709a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800709e:	9012      	str	r0, [sp, #72]	; 0x48
 80070a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80070a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80070a6:	e7dd      	b.n	8007064 <_strtod_l+0xa74>
 80070a8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80070ac:	e7f9      	b.n	80070a2 <_strtod_l+0xab2>
 80070ae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80070b2:	9b04      	ldr	r3, [sp, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1a8      	bne.n	800700a <_strtod_l+0xa1a>
 80070b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80070bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80070be:	0d1b      	lsrs	r3, r3, #20
 80070c0:	051b      	lsls	r3, r3, #20
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d1a1      	bne.n	800700a <_strtod_l+0xa1a>
 80070c6:	4640      	mov	r0, r8
 80070c8:	4649      	mov	r1, r9
 80070ca:	f7f9 fddd 	bl	8000c88 <__aeabi_d2lz>
 80070ce:	f7f9 fa65 	bl	800059c <__aeabi_l2d>
 80070d2:	4602      	mov	r2, r0
 80070d4:	460b      	mov	r3, r1
 80070d6:	4640      	mov	r0, r8
 80070d8:	4649      	mov	r1, r9
 80070da:	f7f9 f8d5 	bl	8000288 <__aeabi_dsub>
 80070de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070e4:	ea43 030a 	orr.w	r3, r3, sl
 80070e8:	4313      	orrs	r3, r2
 80070ea:	4680      	mov	r8, r0
 80070ec:	4689      	mov	r9, r1
 80070ee:	d053      	beq.n	8007198 <_strtod_l+0xba8>
 80070f0:	a335      	add	r3, pc, #212	; (adr r3, 80071c8 <_strtod_l+0xbd8>)
 80070f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f6:	f7f9 fcf1 	bl	8000adc <__aeabi_dcmplt>
 80070fa:	2800      	cmp	r0, #0
 80070fc:	f47f acce 	bne.w	8006a9c <_strtod_l+0x4ac>
 8007100:	a333      	add	r3, pc, #204	; (adr r3, 80071d0 <_strtod_l+0xbe0>)
 8007102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007106:	4640      	mov	r0, r8
 8007108:	4649      	mov	r1, r9
 800710a:	f7f9 fd05 	bl	8000b18 <__aeabi_dcmpgt>
 800710e:	2800      	cmp	r0, #0
 8007110:	f43f af7b 	beq.w	800700a <_strtod_l+0xa1a>
 8007114:	e4c2      	b.n	8006a9c <_strtod_l+0x4ac>
 8007116:	9b04      	ldr	r3, [sp, #16]
 8007118:	b333      	cbz	r3, 8007168 <_strtod_l+0xb78>
 800711a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800711c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007120:	d822      	bhi.n	8007168 <_strtod_l+0xb78>
 8007122:	a32d      	add	r3, pc, #180	; (adr r3, 80071d8 <_strtod_l+0xbe8>)
 8007124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007128:	4640      	mov	r0, r8
 800712a:	4649      	mov	r1, r9
 800712c:	f7f9 fce0 	bl	8000af0 <__aeabi_dcmple>
 8007130:	b1a0      	cbz	r0, 800715c <_strtod_l+0xb6c>
 8007132:	4649      	mov	r1, r9
 8007134:	4640      	mov	r0, r8
 8007136:	f7f9 fd37 	bl	8000ba8 <__aeabi_d2uiz>
 800713a:	2801      	cmp	r0, #1
 800713c:	bf38      	it	cc
 800713e:	2001      	movcc	r0, #1
 8007140:	f7f9 f9e0 	bl	8000504 <__aeabi_ui2d>
 8007144:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007146:	4680      	mov	r8, r0
 8007148:	4689      	mov	r9, r1
 800714a:	bb13      	cbnz	r3, 8007192 <_strtod_l+0xba2>
 800714c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007150:	9014      	str	r0, [sp, #80]	; 0x50
 8007152:	9315      	str	r3, [sp, #84]	; 0x54
 8007154:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007158:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800715c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800715e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007160:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007164:	1a9b      	subs	r3, r3, r2
 8007166:	930d      	str	r3, [sp, #52]	; 0x34
 8007168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800716c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007170:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007174:	f002 f932 	bl	80093dc <__ulp>
 8007178:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800717c:	ec53 2b10 	vmov	r2, r3, d0
 8007180:	f7f9 fa3a 	bl	80005f8 <__aeabi_dmul>
 8007184:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007188:	f7f9 f880 	bl	800028c <__adddf3>
 800718c:	4682      	mov	sl, r0
 800718e:	468b      	mov	fp, r1
 8007190:	e78f      	b.n	80070b2 <_strtod_l+0xac2>
 8007192:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8007196:	e7dd      	b.n	8007154 <_strtod_l+0xb64>
 8007198:	a311      	add	r3, pc, #68	; (adr r3, 80071e0 <_strtod_l+0xbf0>)
 800719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719e:	f7f9 fc9d 	bl	8000adc <__aeabi_dcmplt>
 80071a2:	e7b4      	b.n	800710e <_strtod_l+0xb1e>
 80071a4:	2300      	movs	r3, #0
 80071a6:	930e      	str	r3, [sp, #56]	; 0x38
 80071a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80071aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80071ac:	6013      	str	r3, [r2, #0]
 80071ae:	f7ff ba65 	b.w	800667c <_strtod_l+0x8c>
 80071b2:	2b65      	cmp	r3, #101	; 0x65
 80071b4:	f43f ab5d 	beq.w	8006872 <_strtod_l+0x282>
 80071b8:	2b45      	cmp	r3, #69	; 0x45
 80071ba:	f43f ab5a 	beq.w	8006872 <_strtod_l+0x282>
 80071be:	2201      	movs	r2, #1
 80071c0:	f7ff bb92 	b.w	80068e8 <_strtod_l+0x2f8>
 80071c4:	f3af 8000 	nop.w
 80071c8:	94a03595 	.word	0x94a03595
 80071cc:	3fdfffff 	.word	0x3fdfffff
 80071d0:	35afe535 	.word	0x35afe535
 80071d4:	3fe00000 	.word	0x3fe00000
 80071d8:	ffc00000 	.word	0xffc00000
 80071dc:	41dfffff 	.word	0x41dfffff
 80071e0:	94a03595 	.word	0x94a03595
 80071e4:	3fcfffff 	.word	0x3fcfffff
 80071e8:	3ff00000 	.word	0x3ff00000
 80071ec:	7ff00000 	.word	0x7ff00000
 80071f0:	7fe00000 	.word	0x7fe00000
 80071f4:	7c9fffff 	.word	0x7c9fffff
 80071f8:	3fe00000 	.word	0x3fe00000
 80071fc:	bff00000 	.word	0xbff00000
 8007200:	7fefffff 	.word	0x7fefffff

08007204 <_strtod_r>:
 8007204:	4b01      	ldr	r3, [pc, #4]	; (800720c <_strtod_r+0x8>)
 8007206:	f7ff b9f3 	b.w	80065f0 <_strtod_l>
 800720a:	bf00      	nop
 800720c:	2000007c 	.word	0x2000007c

08007210 <_strtol_l.isra.0>:
 8007210:	2b01      	cmp	r3, #1
 8007212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007216:	d001      	beq.n	800721c <_strtol_l.isra.0+0xc>
 8007218:	2b24      	cmp	r3, #36	; 0x24
 800721a:	d906      	bls.n	800722a <_strtol_l.isra.0+0x1a>
 800721c:	f7fe fa6c 	bl	80056f8 <__errno>
 8007220:	2316      	movs	r3, #22
 8007222:	6003      	str	r3, [r0, #0]
 8007224:	2000      	movs	r0, #0
 8007226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800722a:	4f3a      	ldr	r7, [pc, #232]	; (8007314 <_strtol_l.isra.0+0x104>)
 800722c:	468e      	mov	lr, r1
 800722e:	4676      	mov	r6, lr
 8007230:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007234:	5de5      	ldrb	r5, [r4, r7]
 8007236:	f015 0508 	ands.w	r5, r5, #8
 800723a:	d1f8      	bne.n	800722e <_strtol_l.isra.0+0x1e>
 800723c:	2c2d      	cmp	r4, #45	; 0x2d
 800723e:	d134      	bne.n	80072aa <_strtol_l.isra.0+0x9a>
 8007240:	f89e 4000 	ldrb.w	r4, [lr]
 8007244:	f04f 0801 	mov.w	r8, #1
 8007248:	f106 0e02 	add.w	lr, r6, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d05c      	beq.n	800730a <_strtol_l.isra.0+0xfa>
 8007250:	2b10      	cmp	r3, #16
 8007252:	d10c      	bne.n	800726e <_strtol_l.isra.0+0x5e>
 8007254:	2c30      	cmp	r4, #48	; 0x30
 8007256:	d10a      	bne.n	800726e <_strtol_l.isra.0+0x5e>
 8007258:	f89e 4000 	ldrb.w	r4, [lr]
 800725c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007260:	2c58      	cmp	r4, #88	; 0x58
 8007262:	d14d      	bne.n	8007300 <_strtol_l.isra.0+0xf0>
 8007264:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007268:	2310      	movs	r3, #16
 800726a:	f10e 0e02 	add.w	lr, lr, #2
 800726e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007272:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007276:	2600      	movs	r6, #0
 8007278:	fbbc f9f3 	udiv	r9, ip, r3
 800727c:	4635      	mov	r5, r6
 800727e:	fb03 ca19 	mls	sl, r3, r9, ip
 8007282:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007286:	2f09      	cmp	r7, #9
 8007288:	d818      	bhi.n	80072bc <_strtol_l.isra.0+0xac>
 800728a:	463c      	mov	r4, r7
 800728c:	42a3      	cmp	r3, r4
 800728e:	dd24      	ble.n	80072da <_strtol_l.isra.0+0xca>
 8007290:	2e00      	cmp	r6, #0
 8007292:	db1f      	blt.n	80072d4 <_strtol_l.isra.0+0xc4>
 8007294:	45a9      	cmp	r9, r5
 8007296:	d31d      	bcc.n	80072d4 <_strtol_l.isra.0+0xc4>
 8007298:	d101      	bne.n	800729e <_strtol_l.isra.0+0x8e>
 800729a:	45a2      	cmp	sl, r4
 800729c:	db1a      	blt.n	80072d4 <_strtol_l.isra.0+0xc4>
 800729e:	fb05 4503 	mla	r5, r5, r3, r4
 80072a2:	2601      	movs	r6, #1
 80072a4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80072a8:	e7eb      	b.n	8007282 <_strtol_l.isra.0+0x72>
 80072aa:	2c2b      	cmp	r4, #43	; 0x2b
 80072ac:	bf08      	it	eq
 80072ae:	f89e 4000 	ldrbeq.w	r4, [lr]
 80072b2:	46a8      	mov	r8, r5
 80072b4:	bf08      	it	eq
 80072b6:	f106 0e02 	addeq.w	lr, r6, #2
 80072ba:	e7c7      	b.n	800724c <_strtol_l.isra.0+0x3c>
 80072bc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80072c0:	2f19      	cmp	r7, #25
 80072c2:	d801      	bhi.n	80072c8 <_strtol_l.isra.0+0xb8>
 80072c4:	3c37      	subs	r4, #55	; 0x37
 80072c6:	e7e1      	b.n	800728c <_strtol_l.isra.0+0x7c>
 80072c8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80072cc:	2f19      	cmp	r7, #25
 80072ce:	d804      	bhi.n	80072da <_strtol_l.isra.0+0xca>
 80072d0:	3c57      	subs	r4, #87	; 0x57
 80072d2:	e7db      	b.n	800728c <_strtol_l.isra.0+0x7c>
 80072d4:	f04f 36ff 	mov.w	r6, #4294967295
 80072d8:	e7e4      	b.n	80072a4 <_strtol_l.isra.0+0x94>
 80072da:	2e00      	cmp	r6, #0
 80072dc:	da05      	bge.n	80072ea <_strtol_l.isra.0+0xda>
 80072de:	2322      	movs	r3, #34	; 0x22
 80072e0:	6003      	str	r3, [r0, #0]
 80072e2:	4665      	mov	r5, ip
 80072e4:	b942      	cbnz	r2, 80072f8 <_strtol_l.isra.0+0xe8>
 80072e6:	4628      	mov	r0, r5
 80072e8:	e79d      	b.n	8007226 <_strtol_l.isra.0+0x16>
 80072ea:	f1b8 0f00 	cmp.w	r8, #0
 80072ee:	d000      	beq.n	80072f2 <_strtol_l.isra.0+0xe2>
 80072f0:	426d      	negs	r5, r5
 80072f2:	2a00      	cmp	r2, #0
 80072f4:	d0f7      	beq.n	80072e6 <_strtol_l.isra.0+0xd6>
 80072f6:	b10e      	cbz	r6, 80072fc <_strtol_l.isra.0+0xec>
 80072f8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80072fc:	6011      	str	r1, [r2, #0]
 80072fe:	e7f2      	b.n	80072e6 <_strtol_l.isra.0+0xd6>
 8007300:	2430      	movs	r4, #48	; 0x30
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1b3      	bne.n	800726e <_strtol_l.isra.0+0x5e>
 8007306:	2308      	movs	r3, #8
 8007308:	e7b1      	b.n	800726e <_strtol_l.isra.0+0x5e>
 800730a:	2c30      	cmp	r4, #48	; 0x30
 800730c:	d0a4      	beq.n	8007258 <_strtol_l.isra.0+0x48>
 800730e:	230a      	movs	r3, #10
 8007310:	e7ad      	b.n	800726e <_strtol_l.isra.0+0x5e>
 8007312:	bf00      	nop
 8007314:	0800b171 	.word	0x0800b171

08007318 <_strtol_r>:
 8007318:	f7ff bf7a 	b.w	8007210 <_strtol_l.isra.0>

0800731c <__swbuf_r>:
 800731c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731e:	460e      	mov	r6, r1
 8007320:	4614      	mov	r4, r2
 8007322:	4605      	mov	r5, r0
 8007324:	b118      	cbz	r0, 800732e <__swbuf_r+0x12>
 8007326:	6983      	ldr	r3, [r0, #24]
 8007328:	b90b      	cbnz	r3, 800732e <__swbuf_r+0x12>
 800732a:	f001 f84b 	bl	80083c4 <__sinit>
 800732e:	4b21      	ldr	r3, [pc, #132]	; (80073b4 <__swbuf_r+0x98>)
 8007330:	429c      	cmp	r4, r3
 8007332:	d12b      	bne.n	800738c <__swbuf_r+0x70>
 8007334:	686c      	ldr	r4, [r5, #4]
 8007336:	69a3      	ldr	r3, [r4, #24]
 8007338:	60a3      	str	r3, [r4, #8]
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	071a      	lsls	r2, r3, #28
 800733e:	d52f      	bpl.n	80073a0 <__swbuf_r+0x84>
 8007340:	6923      	ldr	r3, [r4, #16]
 8007342:	b36b      	cbz	r3, 80073a0 <__swbuf_r+0x84>
 8007344:	6923      	ldr	r3, [r4, #16]
 8007346:	6820      	ldr	r0, [r4, #0]
 8007348:	1ac0      	subs	r0, r0, r3
 800734a:	6963      	ldr	r3, [r4, #20]
 800734c:	b2f6      	uxtb	r6, r6
 800734e:	4283      	cmp	r3, r0
 8007350:	4637      	mov	r7, r6
 8007352:	dc04      	bgt.n	800735e <__swbuf_r+0x42>
 8007354:	4621      	mov	r1, r4
 8007356:	4628      	mov	r0, r5
 8007358:	f000 ffa0 	bl	800829c <_fflush_r>
 800735c:	bb30      	cbnz	r0, 80073ac <__swbuf_r+0x90>
 800735e:	68a3      	ldr	r3, [r4, #8]
 8007360:	3b01      	subs	r3, #1
 8007362:	60a3      	str	r3, [r4, #8]
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	6022      	str	r2, [r4, #0]
 800736a:	701e      	strb	r6, [r3, #0]
 800736c:	6963      	ldr	r3, [r4, #20]
 800736e:	3001      	adds	r0, #1
 8007370:	4283      	cmp	r3, r0
 8007372:	d004      	beq.n	800737e <__swbuf_r+0x62>
 8007374:	89a3      	ldrh	r3, [r4, #12]
 8007376:	07db      	lsls	r3, r3, #31
 8007378:	d506      	bpl.n	8007388 <__swbuf_r+0x6c>
 800737a:	2e0a      	cmp	r6, #10
 800737c:	d104      	bne.n	8007388 <__swbuf_r+0x6c>
 800737e:	4621      	mov	r1, r4
 8007380:	4628      	mov	r0, r5
 8007382:	f000 ff8b 	bl	800829c <_fflush_r>
 8007386:	b988      	cbnz	r0, 80073ac <__swbuf_r+0x90>
 8007388:	4638      	mov	r0, r7
 800738a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800738c:	4b0a      	ldr	r3, [pc, #40]	; (80073b8 <__swbuf_r+0x9c>)
 800738e:	429c      	cmp	r4, r3
 8007390:	d101      	bne.n	8007396 <__swbuf_r+0x7a>
 8007392:	68ac      	ldr	r4, [r5, #8]
 8007394:	e7cf      	b.n	8007336 <__swbuf_r+0x1a>
 8007396:	4b09      	ldr	r3, [pc, #36]	; (80073bc <__swbuf_r+0xa0>)
 8007398:	429c      	cmp	r4, r3
 800739a:	bf08      	it	eq
 800739c:	68ec      	ldreq	r4, [r5, #12]
 800739e:	e7ca      	b.n	8007336 <__swbuf_r+0x1a>
 80073a0:	4621      	mov	r1, r4
 80073a2:	4628      	mov	r0, r5
 80073a4:	f000 f80c 	bl	80073c0 <__swsetup_r>
 80073a8:	2800      	cmp	r0, #0
 80073aa:	d0cb      	beq.n	8007344 <__swbuf_r+0x28>
 80073ac:	f04f 37ff 	mov.w	r7, #4294967295
 80073b0:	e7ea      	b.n	8007388 <__swbuf_r+0x6c>
 80073b2:	bf00      	nop
 80073b4:	0800b328 	.word	0x0800b328
 80073b8:	0800b348 	.word	0x0800b348
 80073bc:	0800b308 	.word	0x0800b308

080073c0 <__swsetup_r>:
 80073c0:	4b32      	ldr	r3, [pc, #200]	; (800748c <__swsetup_r+0xcc>)
 80073c2:	b570      	push	{r4, r5, r6, lr}
 80073c4:	681d      	ldr	r5, [r3, #0]
 80073c6:	4606      	mov	r6, r0
 80073c8:	460c      	mov	r4, r1
 80073ca:	b125      	cbz	r5, 80073d6 <__swsetup_r+0x16>
 80073cc:	69ab      	ldr	r3, [r5, #24]
 80073ce:	b913      	cbnz	r3, 80073d6 <__swsetup_r+0x16>
 80073d0:	4628      	mov	r0, r5
 80073d2:	f000 fff7 	bl	80083c4 <__sinit>
 80073d6:	4b2e      	ldr	r3, [pc, #184]	; (8007490 <__swsetup_r+0xd0>)
 80073d8:	429c      	cmp	r4, r3
 80073da:	d10f      	bne.n	80073fc <__swsetup_r+0x3c>
 80073dc:	686c      	ldr	r4, [r5, #4]
 80073de:	89a3      	ldrh	r3, [r4, #12]
 80073e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073e4:	0719      	lsls	r1, r3, #28
 80073e6:	d42c      	bmi.n	8007442 <__swsetup_r+0x82>
 80073e8:	06dd      	lsls	r5, r3, #27
 80073ea:	d411      	bmi.n	8007410 <__swsetup_r+0x50>
 80073ec:	2309      	movs	r3, #9
 80073ee:	6033      	str	r3, [r6, #0]
 80073f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073f4:	81a3      	strh	r3, [r4, #12]
 80073f6:	f04f 30ff 	mov.w	r0, #4294967295
 80073fa:	e03e      	b.n	800747a <__swsetup_r+0xba>
 80073fc:	4b25      	ldr	r3, [pc, #148]	; (8007494 <__swsetup_r+0xd4>)
 80073fe:	429c      	cmp	r4, r3
 8007400:	d101      	bne.n	8007406 <__swsetup_r+0x46>
 8007402:	68ac      	ldr	r4, [r5, #8]
 8007404:	e7eb      	b.n	80073de <__swsetup_r+0x1e>
 8007406:	4b24      	ldr	r3, [pc, #144]	; (8007498 <__swsetup_r+0xd8>)
 8007408:	429c      	cmp	r4, r3
 800740a:	bf08      	it	eq
 800740c:	68ec      	ldreq	r4, [r5, #12]
 800740e:	e7e6      	b.n	80073de <__swsetup_r+0x1e>
 8007410:	0758      	lsls	r0, r3, #29
 8007412:	d512      	bpl.n	800743a <__swsetup_r+0x7a>
 8007414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007416:	b141      	cbz	r1, 800742a <__swsetup_r+0x6a>
 8007418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800741c:	4299      	cmp	r1, r3
 800741e:	d002      	beq.n	8007426 <__swsetup_r+0x66>
 8007420:	4630      	mov	r0, r6
 8007422:	f002 f939 	bl	8009698 <_free_r>
 8007426:	2300      	movs	r3, #0
 8007428:	6363      	str	r3, [r4, #52]	; 0x34
 800742a:	89a3      	ldrh	r3, [r4, #12]
 800742c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007430:	81a3      	strh	r3, [r4, #12]
 8007432:	2300      	movs	r3, #0
 8007434:	6063      	str	r3, [r4, #4]
 8007436:	6923      	ldr	r3, [r4, #16]
 8007438:	6023      	str	r3, [r4, #0]
 800743a:	89a3      	ldrh	r3, [r4, #12]
 800743c:	f043 0308 	orr.w	r3, r3, #8
 8007440:	81a3      	strh	r3, [r4, #12]
 8007442:	6923      	ldr	r3, [r4, #16]
 8007444:	b94b      	cbnz	r3, 800745a <__swsetup_r+0x9a>
 8007446:	89a3      	ldrh	r3, [r4, #12]
 8007448:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800744c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007450:	d003      	beq.n	800745a <__swsetup_r+0x9a>
 8007452:	4621      	mov	r1, r4
 8007454:	4630      	mov	r0, r6
 8007456:	f001 fbed 	bl	8008c34 <__smakebuf_r>
 800745a:	89a0      	ldrh	r0, [r4, #12]
 800745c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007460:	f010 0301 	ands.w	r3, r0, #1
 8007464:	d00a      	beq.n	800747c <__swsetup_r+0xbc>
 8007466:	2300      	movs	r3, #0
 8007468:	60a3      	str	r3, [r4, #8]
 800746a:	6963      	ldr	r3, [r4, #20]
 800746c:	425b      	negs	r3, r3
 800746e:	61a3      	str	r3, [r4, #24]
 8007470:	6923      	ldr	r3, [r4, #16]
 8007472:	b943      	cbnz	r3, 8007486 <__swsetup_r+0xc6>
 8007474:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007478:	d1ba      	bne.n	80073f0 <__swsetup_r+0x30>
 800747a:	bd70      	pop	{r4, r5, r6, pc}
 800747c:	0781      	lsls	r1, r0, #30
 800747e:	bf58      	it	pl
 8007480:	6963      	ldrpl	r3, [r4, #20]
 8007482:	60a3      	str	r3, [r4, #8]
 8007484:	e7f4      	b.n	8007470 <__swsetup_r+0xb0>
 8007486:	2000      	movs	r0, #0
 8007488:	e7f7      	b.n	800747a <__swsetup_r+0xba>
 800748a:	bf00      	nop
 800748c:	20000014 	.word	0x20000014
 8007490:	0800b328 	.word	0x0800b328
 8007494:	0800b348 	.word	0x0800b348
 8007498:	0800b308 	.word	0x0800b308

0800749c <quorem>:
 800749c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a0:	6903      	ldr	r3, [r0, #16]
 80074a2:	690c      	ldr	r4, [r1, #16]
 80074a4:	42a3      	cmp	r3, r4
 80074a6:	4607      	mov	r7, r0
 80074a8:	f2c0 8081 	blt.w	80075ae <quorem+0x112>
 80074ac:	3c01      	subs	r4, #1
 80074ae:	f101 0814 	add.w	r8, r1, #20
 80074b2:	f100 0514 	add.w	r5, r0, #20
 80074b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074ba:	9301      	str	r3, [sp, #4]
 80074bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80074c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074c4:	3301      	adds	r3, #1
 80074c6:	429a      	cmp	r2, r3
 80074c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80074cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80074d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80074d4:	d331      	bcc.n	800753a <quorem+0x9e>
 80074d6:	f04f 0e00 	mov.w	lr, #0
 80074da:	4640      	mov	r0, r8
 80074dc:	46ac      	mov	ip, r5
 80074de:	46f2      	mov	sl, lr
 80074e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80074e4:	b293      	uxth	r3, r2
 80074e6:	fb06 e303 	mla	r3, r6, r3, lr
 80074ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	ebaa 0303 	sub.w	r3, sl, r3
 80074f4:	0c12      	lsrs	r2, r2, #16
 80074f6:	f8dc a000 	ldr.w	sl, [ip]
 80074fa:	fb06 e202 	mla	r2, r6, r2, lr
 80074fe:	fa13 f38a 	uxtah	r3, r3, sl
 8007502:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007506:	fa1f fa82 	uxth.w	sl, r2
 800750a:	f8dc 2000 	ldr.w	r2, [ip]
 800750e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007512:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007516:	b29b      	uxth	r3, r3
 8007518:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800751c:	4581      	cmp	r9, r0
 800751e:	f84c 3b04 	str.w	r3, [ip], #4
 8007522:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007526:	d2db      	bcs.n	80074e0 <quorem+0x44>
 8007528:	f855 300b 	ldr.w	r3, [r5, fp]
 800752c:	b92b      	cbnz	r3, 800753a <quorem+0x9e>
 800752e:	9b01      	ldr	r3, [sp, #4]
 8007530:	3b04      	subs	r3, #4
 8007532:	429d      	cmp	r5, r3
 8007534:	461a      	mov	r2, r3
 8007536:	d32e      	bcc.n	8007596 <quorem+0xfa>
 8007538:	613c      	str	r4, [r7, #16]
 800753a:	4638      	mov	r0, r7
 800753c:	f001 feaa 	bl	8009294 <__mcmp>
 8007540:	2800      	cmp	r0, #0
 8007542:	db24      	blt.n	800758e <quorem+0xf2>
 8007544:	3601      	adds	r6, #1
 8007546:	4628      	mov	r0, r5
 8007548:	f04f 0c00 	mov.w	ip, #0
 800754c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007550:	f8d0 e000 	ldr.w	lr, [r0]
 8007554:	b293      	uxth	r3, r2
 8007556:	ebac 0303 	sub.w	r3, ip, r3
 800755a:	0c12      	lsrs	r2, r2, #16
 800755c:	fa13 f38e 	uxtah	r3, r3, lr
 8007560:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007564:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007568:	b29b      	uxth	r3, r3
 800756a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800756e:	45c1      	cmp	r9, r8
 8007570:	f840 3b04 	str.w	r3, [r0], #4
 8007574:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007578:	d2e8      	bcs.n	800754c <quorem+0xb0>
 800757a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800757e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007582:	b922      	cbnz	r2, 800758e <quorem+0xf2>
 8007584:	3b04      	subs	r3, #4
 8007586:	429d      	cmp	r5, r3
 8007588:	461a      	mov	r2, r3
 800758a:	d30a      	bcc.n	80075a2 <quorem+0x106>
 800758c:	613c      	str	r4, [r7, #16]
 800758e:	4630      	mov	r0, r6
 8007590:	b003      	add	sp, #12
 8007592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007596:	6812      	ldr	r2, [r2, #0]
 8007598:	3b04      	subs	r3, #4
 800759a:	2a00      	cmp	r2, #0
 800759c:	d1cc      	bne.n	8007538 <quorem+0x9c>
 800759e:	3c01      	subs	r4, #1
 80075a0:	e7c7      	b.n	8007532 <quorem+0x96>
 80075a2:	6812      	ldr	r2, [r2, #0]
 80075a4:	3b04      	subs	r3, #4
 80075a6:	2a00      	cmp	r2, #0
 80075a8:	d1f0      	bne.n	800758c <quorem+0xf0>
 80075aa:	3c01      	subs	r4, #1
 80075ac:	e7eb      	b.n	8007586 <quorem+0xea>
 80075ae:	2000      	movs	r0, #0
 80075b0:	e7ee      	b.n	8007590 <quorem+0xf4>
 80075b2:	0000      	movs	r0, r0
 80075b4:	0000      	movs	r0, r0
	...

080075b8 <_dtoa_r>:
 80075b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075bc:	ed2d 8b02 	vpush	{d8}
 80075c0:	ec57 6b10 	vmov	r6, r7, d0
 80075c4:	b095      	sub	sp, #84	; 0x54
 80075c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80075c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80075cc:	9105      	str	r1, [sp, #20]
 80075ce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80075d2:	4604      	mov	r4, r0
 80075d4:	9209      	str	r2, [sp, #36]	; 0x24
 80075d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80075d8:	b975      	cbnz	r5, 80075f8 <_dtoa_r+0x40>
 80075da:	2010      	movs	r0, #16
 80075dc:	f001 fb6a 	bl	8008cb4 <malloc>
 80075e0:	4602      	mov	r2, r0
 80075e2:	6260      	str	r0, [r4, #36]	; 0x24
 80075e4:	b920      	cbnz	r0, 80075f0 <_dtoa_r+0x38>
 80075e6:	4bb2      	ldr	r3, [pc, #712]	; (80078b0 <_dtoa_r+0x2f8>)
 80075e8:	21ea      	movs	r1, #234	; 0xea
 80075ea:	48b2      	ldr	r0, [pc, #712]	; (80078b4 <_dtoa_r+0x2fc>)
 80075ec:	f002 fc40 	bl	8009e70 <__assert_func>
 80075f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80075f4:	6005      	str	r5, [r0, #0]
 80075f6:	60c5      	str	r5, [r0, #12]
 80075f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075fa:	6819      	ldr	r1, [r3, #0]
 80075fc:	b151      	cbz	r1, 8007614 <_dtoa_r+0x5c>
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	604a      	str	r2, [r1, #4]
 8007602:	2301      	movs	r3, #1
 8007604:	4093      	lsls	r3, r2
 8007606:	608b      	str	r3, [r1, #8]
 8007608:	4620      	mov	r0, r4
 800760a:	f001 fbbb 	bl	8008d84 <_Bfree>
 800760e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007610:	2200      	movs	r2, #0
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	1e3b      	subs	r3, r7, #0
 8007616:	bfb9      	ittee	lt
 8007618:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800761c:	9303      	strlt	r3, [sp, #12]
 800761e:	2300      	movge	r3, #0
 8007620:	f8c8 3000 	strge.w	r3, [r8]
 8007624:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007628:	4ba3      	ldr	r3, [pc, #652]	; (80078b8 <_dtoa_r+0x300>)
 800762a:	bfbc      	itt	lt
 800762c:	2201      	movlt	r2, #1
 800762e:	f8c8 2000 	strlt.w	r2, [r8]
 8007632:	ea33 0309 	bics.w	r3, r3, r9
 8007636:	d11b      	bne.n	8007670 <_dtoa_r+0xb8>
 8007638:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800763a:	f242 730f 	movw	r3, #9999	; 0x270f
 800763e:	6013      	str	r3, [r2, #0]
 8007640:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007644:	4333      	orrs	r3, r6
 8007646:	f000 857a 	beq.w	800813e <_dtoa_r+0xb86>
 800764a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800764c:	b963      	cbnz	r3, 8007668 <_dtoa_r+0xb0>
 800764e:	4b9b      	ldr	r3, [pc, #620]	; (80078bc <_dtoa_r+0x304>)
 8007650:	e024      	b.n	800769c <_dtoa_r+0xe4>
 8007652:	4b9b      	ldr	r3, [pc, #620]	; (80078c0 <_dtoa_r+0x308>)
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	3308      	adds	r3, #8
 8007658:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800765a:	6013      	str	r3, [r2, #0]
 800765c:	9800      	ldr	r0, [sp, #0]
 800765e:	b015      	add	sp, #84	; 0x54
 8007660:	ecbd 8b02 	vpop	{d8}
 8007664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007668:	4b94      	ldr	r3, [pc, #592]	; (80078bc <_dtoa_r+0x304>)
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	3303      	adds	r3, #3
 800766e:	e7f3      	b.n	8007658 <_dtoa_r+0xa0>
 8007670:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007674:	2200      	movs	r2, #0
 8007676:	ec51 0b17 	vmov	r0, r1, d7
 800767a:	2300      	movs	r3, #0
 800767c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007680:	f7f9 fa22 	bl	8000ac8 <__aeabi_dcmpeq>
 8007684:	4680      	mov	r8, r0
 8007686:	b158      	cbz	r0, 80076a0 <_dtoa_r+0xe8>
 8007688:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800768a:	2301      	movs	r3, #1
 800768c:	6013      	str	r3, [r2, #0]
 800768e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007690:	2b00      	cmp	r3, #0
 8007692:	f000 8551 	beq.w	8008138 <_dtoa_r+0xb80>
 8007696:	488b      	ldr	r0, [pc, #556]	; (80078c4 <_dtoa_r+0x30c>)
 8007698:	6018      	str	r0, [r3, #0]
 800769a:	1e43      	subs	r3, r0, #1
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	e7dd      	b.n	800765c <_dtoa_r+0xa4>
 80076a0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80076a4:	aa12      	add	r2, sp, #72	; 0x48
 80076a6:	a913      	add	r1, sp, #76	; 0x4c
 80076a8:	4620      	mov	r0, r4
 80076aa:	f001 ff13 	bl	80094d4 <__d2b>
 80076ae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80076b2:	4683      	mov	fp, r0
 80076b4:	2d00      	cmp	r5, #0
 80076b6:	d07c      	beq.n	80077b2 <_dtoa_r+0x1fa>
 80076b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076ba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80076be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076c2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80076c6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80076ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80076ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80076d2:	4b7d      	ldr	r3, [pc, #500]	; (80078c8 <_dtoa_r+0x310>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	4630      	mov	r0, r6
 80076d8:	4639      	mov	r1, r7
 80076da:	f7f8 fdd5 	bl	8000288 <__aeabi_dsub>
 80076de:	a36e      	add	r3, pc, #440	; (adr r3, 8007898 <_dtoa_r+0x2e0>)
 80076e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e4:	f7f8 ff88 	bl	80005f8 <__aeabi_dmul>
 80076e8:	a36d      	add	r3, pc, #436	; (adr r3, 80078a0 <_dtoa_r+0x2e8>)
 80076ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ee:	f7f8 fdcd 	bl	800028c <__adddf3>
 80076f2:	4606      	mov	r6, r0
 80076f4:	4628      	mov	r0, r5
 80076f6:	460f      	mov	r7, r1
 80076f8:	f7f8 ff14 	bl	8000524 <__aeabi_i2d>
 80076fc:	a36a      	add	r3, pc, #424	; (adr r3, 80078a8 <_dtoa_r+0x2f0>)
 80076fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007702:	f7f8 ff79 	bl	80005f8 <__aeabi_dmul>
 8007706:	4602      	mov	r2, r0
 8007708:	460b      	mov	r3, r1
 800770a:	4630      	mov	r0, r6
 800770c:	4639      	mov	r1, r7
 800770e:	f7f8 fdbd 	bl	800028c <__adddf3>
 8007712:	4606      	mov	r6, r0
 8007714:	460f      	mov	r7, r1
 8007716:	f7f9 fa1f 	bl	8000b58 <__aeabi_d2iz>
 800771a:	2200      	movs	r2, #0
 800771c:	4682      	mov	sl, r0
 800771e:	2300      	movs	r3, #0
 8007720:	4630      	mov	r0, r6
 8007722:	4639      	mov	r1, r7
 8007724:	f7f9 f9da 	bl	8000adc <__aeabi_dcmplt>
 8007728:	b148      	cbz	r0, 800773e <_dtoa_r+0x186>
 800772a:	4650      	mov	r0, sl
 800772c:	f7f8 fefa 	bl	8000524 <__aeabi_i2d>
 8007730:	4632      	mov	r2, r6
 8007732:	463b      	mov	r3, r7
 8007734:	f7f9 f9c8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007738:	b908      	cbnz	r0, 800773e <_dtoa_r+0x186>
 800773a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800773e:	f1ba 0f16 	cmp.w	sl, #22
 8007742:	d854      	bhi.n	80077ee <_dtoa_r+0x236>
 8007744:	4b61      	ldr	r3, [pc, #388]	; (80078cc <_dtoa_r+0x314>)
 8007746:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007752:	f7f9 f9c3 	bl	8000adc <__aeabi_dcmplt>
 8007756:	2800      	cmp	r0, #0
 8007758:	d04b      	beq.n	80077f2 <_dtoa_r+0x23a>
 800775a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800775e:	2300      	movs	r3, #0
 8007760:	930e      	str	r3, [sp, #56]	; 0x38
 8007762:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007764:	1b5d      	subs	r5, r3, r5
 8007766:	1e6b      	subs	r3, r5, #1
 8007768:	9304      	str	r3, [sp, #16]
 800776a:	bf43      	ittte	mi
 800776c:	2300      	movmi	r3, #0
 800776e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007772:	9304      	strmi	r3, [sp, #16]
 8007774:	f04f 0800 	movpl.w	r8, #0
 8007778:	f1ba 0f00 	cmp.w	sl, #0
 800777c:	db3b      	blt.n	80077f6 <_dtoa_r+0x23e>
 800777e:	9b04      	ldr	r3, [sp, #16]
 8007780:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007784:	4453      	add	r3, sl
 8007786:	9304      	str	r3, [sp, #16]
 8007788:	2300      	movs	r3, #0
 800778a:	9306      	str	r3, [sp, #24]
 800778c:	9b05      	ldr	r3, [sp, #20]
 800778e:	2b09      	cmp	r3, #9
 8007790:	d869      	bhi.n	8007866 <_dtoa_r+0x2ae>
 8007792:	2b05      	cmp	r3, #5
 8007794:	bfc4      	itt	gt
 8007796:	3b04      	subgt	r3, #4
 8007798:	9305      	strgt	r3, [sp, #20]
 800779a:	9b05      	ldr	r3, [sp, #20]
 800779c:	f1a3 0302 	sub.w	r3, r3, #2
 80077a0:	bfcc      	ite	gt
 80077a2:	2500      	movgt	r5, #0
 80077a4:	2501      	movle	r5, #1
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d869      	bhi.n	800787e <_dtoa_r+0x2c6>
 80077aa:	e8df f003 	tbb	[pc, r3]
 80077ae:	4e2c      	.short	0x4e2c
 80077b0:	5a4c      	.short	0x5a4c
 80077b2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80077b6:	441d      	add	r5, r3
 80077b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80077bc:	2b20      	cmp	r3, #32
 80077be:	bfc1      	itttt	gt
 80077c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80077c4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80077c8:	fa09 f303 	lslgt.w	r3, r9, r3
 80077cc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80077d0:	bfda      	itte	le
 80077d2:	f1c3 0320 	rsble	r3, r3, #32
 80077d6:	fa06 f003 	lslle.w	r0, r6, r3
 80077da:	4318      	orrgt	r0, r3
 80077dc:	f7f8 fe92 	bl	8000504 <__aeabi_ui2d>
 80077e0:	2301      	movs	r3, #1
 80077e2:	4606      	mov	r6, r0
 80077e4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80077e8:	3d01      	subs	r5, #1
 80077ea:	9310      	str	r3, [sp, #64]	; 0x40
 80077ec:	e771      	b.n	80076d2 <_dtoa_r+0x11a>
 80077ee:	2301      	movs	r3, #1
 80077f0:	e7b6      	b.n	8007760 <_dtoa_r+0x1a8>
 80077f2:	900e      	str	r0, [sp, #56]	; 0x38
 80077f4:	e7b5      	b.n	8007762 <_dtoa_r+0x1aa>
 80077f6:	f1ca 0300 	rsb	r3, sl, #0
 80077fa:	9306      	str	r3, [sp, #24]
 80077fc:	2300      	movs	r3, #0
 80077fe:	eba8 080a 	sub.w	r8, r8, sl
 8007802:	930d      	str	r3, [sp, #52]	; 0x34
 8007804:	e7c2      	b.n	800778c <_dtoa_r+0x1d4>
 8007806:	2300      	movs	r3, #0
 8007808:	9308      	str	r3, [sp, #32]
 800780a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800780c:	2b00      	cmp	r3, #0
 800780e:	dc39      	bgt.n	8007884 <_dtoa_r+0x2cc>
 8007810:	f04f 0901 	mov.w	r9, #1
 8007814:	f8cd 9004 	str.w	r9, [sp, #4]
 8007818:	464b      	mov	r3, r9
 800781a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800781e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007820:	2200      	movs	r2, #0
 8007822:	6042      	str	r2, [r0, #4]
 8007824:	2204      	movs	r2, #4
 8007826:	f102 0614 	add.w	r6, r2, #20
 800782a:	429e      	cmp	r6, r3
 800782c:	6841      	ldr	r1, [r0, #4]
 800782e:	d92f      	bls.n	8007890 <_dtoa_r+0x2d8>
 8007830:	4620      	mov	r0, r4
 8007832:	f001 fa67 	bl	8008d04 <_Balloc>
 8007836:	9000      	str	r0, [sp, #0]
 8007838:	2800      	cmp	r0, #0
 800783a:	d14b      	bne.n	80078d4 <_dtoa_r+0x31c>
 800783c:	4b24      	ldr	r3, [pc, #144]	; (80078d0 <_dtoa_r+0x318>)
 800783e:	4602      	mov	r2, r0
 8007840:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007844:	e6d1      	b.n	80075ea <_dtoa_r+0x32>
 8007846:	2301      	movs	r3, #1
 8007848:	e7de      	b.n	8007808 <_dtoa_r+0x250>
 800784a:	2300      	movs	r3, #0
 800784c:	9308      	str	r3, [sp, #32]
 800784e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007850:	eb0a 0903 	add.w	r9, sl, r3
 8007854:	f109 0301 	add.w	r3, r9, #1
 8007858:	2b01      	cmp	r3, #1
 800785a:	9301      	str	r3, [sp, #4]
 800785c:	bfb8      	it	lt
 800785e:	2301      	movlt	r3, #1
 8007860:	e7dd      	b.n	800781e <_dtoa_r+0x266>
 8007862:	2301      	movs	r3, #1
 8007864:	e7f2      	b.n	800784c <_dtoa_r+0x294>
 8007866:	2501      	movs	r5, #1
 8007868:	2300      	movs	r3, #0
 800786a:	9305      	str	r3, [sp, #20]
 800786c:	9508      	str	r5, [sp, #32]
 800786e:	f04f 39ff 	mov.w	r9, #4294967295
 8007872:	2200      	movs	r2, #0
 8007874:	f8cd 9004 	str.w	r9, [sp, #4]
 8007878:	2312      	movs	r3, #18
 800787a:	9209      	str	r2, [sp, #36]	; 0x24
 800787c:	e7cf      	b.n	800781e <_dtoa_r+0x266>
 800787e:	2301      	movs	r3, #1
 8007880:	9308      	str	r3, [sp, #32]
 8007882:	e7f4      	b.n	800786e <_dtoa_r+0x2b6>
 8007884:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007888:	f8cd 9004 	str.w	r9, [sp, #4]
 800788c:	464b      	mov	r3, r9
 800788e:	e7c6      	b.n	800781e <_dtoa_r+0x266>
 8007890:	3101      	adds	r1, #1
 8007892:	6041      	str	r1, [r0, #4]
 8007894:	0052      	lsls	r2, r2, #1
 8007896:	e7c6      	b.n	8007826 <_dtoa_r+0x26e>
 8007898:	636f4361 	.word	0x636f4361
 800789c:	3fd287a7 	.word	0x3fd287a7
 80078a0:	8b60c8b3 	.word	0x8b60c8b3
 80078a4:	3fc68a28 	.word	0x3fc68a28
 80078a8:	509f79fb 	.word	0x509f79fb
 80078ac:	3fd34413 	.word	0x3fd34413
 80078b0:	0800b27e 	.word	0x0800b27e
 80078b4:	0800b295 	.word	0x0800b295
 80078b8:	7ff00000 	.word	0x7ff00000
 80078bc:	0800b27a 	.word	0x0800b27a
 80078c0:	0800b271 	.word	0x0800b271
 80078c4:	0800b0f1 	.word	0x0800b0f1
 80078c8:	3ff80000 	.word	0x3ff80000
 80078cc:	0800b470 	.word	0x0800b470
 80078d0:	0800b2f4 	.word	0x0800b2f4
 80078d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078d6:	9a00      	ldr	r2, [sp, #0]
 80078d8:	601a      	str	r2, [r3, #0]
 80078da:	9b01      	ldr	r3, [sp, #4]
 80078dc:	2b0e      	cmp	r3, #14
 80078de:	f200 80ad 	bhi.w	8007a3c <_dtoa_r+0x484>
 80078e2:	2d00      	cmp	r5, #0
 80078e4:	f000 80aa 	beq.w	8007a3c <_dtoa_r+0x484>
 80078e8:	f1ba 0f00 	cmp.w	sl, #0
 80078ec:	dd36      	ble.n	800795c <_dtoa_r+0x3a4>
 80078ee:	4ac3      	ldr	r2, [pc, #780]	; (8007bfc <_dtoa_r+0x644>)
 80078f0:	f00a 030f 	and.w	r3, sl, #15
 80078f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80078f8:	ed93 7b00 	vldr	d7, [r3]
 80078fc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007900:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007904:	eeb0 8a47 	vmov.f32	s16, s14
 8007908:	eef0 8a67 	vmov.f32	s17, s15
 800790c:	d016      	beq.n	800793c <_dtoa_r+0x384>
 800790e:	4bbc      	ldr	r3, [pc, #752]	; (8007c00 <_dtoa_r+0x648>)
 8007910:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007914:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007918:	f7f8 ff98 	bl	800084c <__aeabi_ddiv>
 800791c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007920:	f007 070f 	and.w	r7, r7, #15
 8007924:	2503      	movs	r5, #3
 8007926:	4eb6      	ldr	r6, [pc, #728]	; (8007c00 <_dtoa_r+0x648>)
 8007928:	b957      	cbnz	r7, 8007940 <_dtoa_r+0x388>
 800792a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800792e:	ec53 2b18 	vmov	r2, r3, d8
 8007932:	f7f8 ff8b 	bl	800084c <__aeabi_ddiv>
 8007936:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800793a:	e029      	b.n	8007990 <_dtoa_r+0x3d8>
 800793c:	2502      	movs	r5, #2
 800793e:	e7f2      	b.n	8007926 <_dtoa_r+0x36e>
 8007940:	07f9      	lsls	r1, r7, #31
 8007942:	d508      	bpl.n	8007956 <_dtoa_r+0x39e>
 8007944:	ec51 0b18 	vmov	r0, r1, d8
 8007948:	e9d6 2300 	ldrd	r2, r3, [r6]
 800794c:	f7f8 fe54 	bl	80005f8 <__aeabi_dmul>
 8007950:	ec41 0b18 	vmov	d8, r0, r1
 8007954:	3501      	adds	r5, #1
 8007956:	107f      	asrs	r7, r7, #1
 8007958:	3608      	adds	r6, #8
 800795a:	e7e5      	b.n	8007928 <_dtoa_r+0x370>
 800795c:	f000 80a6 	beq.w	8007aac <_dtoa_r+0x4f4>
 8007960:	f1ca 0600 	rsb	r6, sl, #0
 8007964:	4ba5      	ldr	r3, [pc, #660]	; (8007bfc <_dtoa_r+0x644>)
 8007966:	4fa6      	ldr	r7, [pc, #664]	; (8007c00 <_dtoa_r+0x648>)
 8007968:	f006 020f 	and.w	r2, r6, #15
 800796c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007974:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007978:	f7f8 fe3e 	bl	80005f8 <__aeabi_dmul>
 800797c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007980:	1136      	asrs	r6, r6, #4
 8007982:	2300      	movs	r3, #0
 8007984:	2502      	movs	r5, #2
 8007986:	2e00      	cmp	r6, #0
 8007988:	f040 8085 	bne.w	8007a96 <_dtoa_r+0x4de>
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1d2      	bne.n	8007936 <_dtoa_r+0x37e>
 8007990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007992:	2b00      	cmp	r3, #0
 8007994:	f000 808c 	beq.w	8007ab0 <_dtoa_r+0x4f8>
 8007998:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800799c:	4b99      	ldr	r3, [pc, #612]	; (8007c04 <_dtoa_r+0x64c>)
 800799e:	2200      	movs	r2, #0
 80079a0:	4630      	mov	r0, r6
 80079a2:	4639      	mov	r1, r7
 80079a4:	f7f9 f89a 	bl	8000adc <__aeabi_dcmplt>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	f000 8081 	beq.w	8007ab0 <_dtoa_r+0x4f8>
 80079ae:	9b01      	ldr	r3, [sp, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d07d      	beq.n	8007ab0 <_dtoa_r+0x4f8>
 80079b4:	f1b9 0f00 	cmp.w	r9, #0
 80079b8:	dd3c      	ble.n	8007a34 <_dtoa_r+0x47c>
 80079ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 80079be:	9307      	str	r3, [sp, #28]
 80079c0:	2200      	movs	r2, #0
 80079c2:	4b91      	ldr	r3, [pc, #580]	; (8007c08 <_dtoa_r+0x650>)
 80079c4:	4630      	mov	r0, r6
 80079c6:	4639      	mov	r1, r7
 80079c8:	f7f8 fe16 	bl	80005f8 <__aeabi_dmul>
 80079cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079d0:	3501      	adds	r5, #1
 80079d2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80079d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80079da:	4628      	mov	r0, r5
 80079dc:	f7f8 fda2 	bl	8000524 <__aeabi_i2d>
 80079e0:	4632      	mov	r2, r6
 80079e2:	463b      	mov	r3, r7
 80079e4:	f7f8 fe08 	bl	80005f8 <__aeabi_dmul>
 80079e8:	4b88      	ldr	r3, [pc, #544]	; (8007c0c <_dtoa_r+0x654>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	f7f8 fc4e 	bl	800028c <__adddf3>
 80079f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80079f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079f8:	9303      	str	r3, [sp, #12]
 80079fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d15c      	bne.n	8007aba <_dtoa_r+0x502>
 8007a00:	4b83      	ldr	r3, [pc, #524]	; (8007c10 <_dtoa_r+0x658>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	4630      	mov	r0, r6
 8007a06:	4639      	mov	r1, r7
 8007a08:	f7f8 fc3e 	bl	8000288 <__aeabi_dsub>
 8007a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a10:	4606      	mov	r6, r0
 8007a12:	460f      	mov	r7, r1
 8007a14:	f7f9 f880 	bl	8000b18 <__aeabi_dcmpgt>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	f040 8296 	bne.w	8007f4a <_dtoa_r+0x992>
 8007a1e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007a22:	4630      	mov	r0, r6
 8007a24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a28:	4639      	mov	r1, r7
 8007a2a:	f7f9 f857 	bl	8000adc <__aeabi_dcmplt>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	f040 8288 	bne.w	8007f44 <_dtoa_r+0x98c>
 8007a34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007a38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f2c0 8158 	blt.w	8007cf4 <_dtoa_r+0x73c>
 8007a44:	f1ba 0f0e 	cmp.w	sl, #14
 8007a48:	f300 8154 	bgt.w	8007cf4 <_dtoa_r+0x73c>
 8007a4c:	4b6b      	ldr	r3, [pc, #428]	; (8007bfc <_dtoa_r+0x644>)
 8007a4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007a52:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f280 80e3 	bge.w	8007c24 <_dtoa_r+0x66c>
 8007a5e:	9b01      	ldr	r3, [sp, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f300 80df 	bgt.w	8007c24 <_dtoa_r+0x66c>
 8007a66:	f040 826d 	bne.w	8007f44 <_dtoa_r+0x98c>
 8007a6a:	4b69      	ldr	r3, [pc, #420]	; (8007c10 <_dtoa_r+0x658>)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	4640      	mov	r0, r8
 8007a70:	4649      	mov	r1, r9
 8007a72:	f7f8 fdc1 	bl	80005f8 <__aeabi_dmul>
 8007a76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a7a:	f7f9 f843 	bl	8000b04 <__aeabi_dcmpge>
 8007a7e:	9e01      	ldr	r6, [sp, #4]
 8007a80:	4637      	mov	r7, r6
 8007a82:	2800      	cmp	r0, #0
 8007a84:	f040 8243 	bne.w	8007f0e <_dtoa_r+0x956>
 8007a88:	9d00      	ldr	r5, [sp, #0]
 8007a8a:	2331      	movs	r3, #49	; 0x31
 8007a8c:	f805 3b01 	strb.w	r3, [r5], #1
 8007a90:	f10a 0a01 	add.w	sl, sl, #1
 8007a94:	e23f      	b.n	8007f16 <_dtoa_r+0x95e>
 8007a96:	07f2      	lsls	r2, r6, #31
 8007a98:	d505      	bpl.n	8007aa6 <_dtoa_r+0x4ee>
 8007a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a9e:	f7f8 fdab 	bl	80005f8 <__aeabi_dmul>
 8007aa2:	3501      	adds	r5, #1
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	1076      	asrs	r6, r6, #1
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	e76c      	b.n	8007986 <_dtoa_r+0x3ce>
 8007aac:	2502      	movs	r5, #2
 8007aae:	e76f      	b.n	8007990 <_dtoa_r+0x3d8>
 8007ab0:	9b01      	ldr	r3, [sp, #4]
 8007ab2:	f8cd a01c 	str.w	sl, [sp, #28]
 8007ab6:	930c      	str	r3, [sp, #48]	; 0x30
 8007ab8:	e78d      	b.n	80079d6 <_dtoa_r+0x41e>
 8007aba:	9900      	ldr	r1, [sp, #0]
 8007abc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007abe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ac0:	4b4e      	ldr	r3, [pc, #312]	; (8007bfc <_dtoa_r+0x644>)
 8007ac2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ac6:	4401      	add	r1, r0
 8007ac8:	9102      	str	r1, [sp, #8]
 8007aca:	9908      	ldr	r1, [sp, #32]
 8007acc:	eeb0 8a47 	vmov.f32	s16, s14
 8007ad0:	eef0 8a67 	vmov.f32	s17, s15
 8007ad4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ad8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007adc:	2900      	cmp	r1, #0
 8007ade:	d045      	beq.n	8007b6c <_dtoa_r+0x5b4>
 8007ae0:	494c      	ldr	r1, [pc, #304]	; (8007c14 <_dtoa_r+0x65c>)
 8007ae2:	2000      	movs	r0, #0
 8007ae4:	f7f8 feb2 	bl	800084c <__aeabi_ddiv>
 8007ae8:	ec53 2b18 	vmov	r2, r3, d8
 8007aec:	f7f8 fbcc 	bl	8000288 <__aeabi_dsub>
 8007af0:	9d00      	ldr	r5, [sp, #0]
 8007af2:	ec41 0b18 	vmov	d8, r0, r1
 8007af6:	4639      	mov	r1, r7
 8007af8:	4630      	mov	r0, r6
 8007afa:	f7f9 f82d 	bl	8000b58 <__aeabi_d2iz>
 8007afe:	900c      	str	r0, [sp, #48]	; 0x30
 8007b00:	f7f8 fd10 	bl	8000524 <__aeabi_i2d>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	4630      	mov	r0, r6
 8007b0a:	4639      	mov	r1, r7
 8007b0c:	f7f8 fbbc 	bl	8000288 <__aeabi_dsub>
 8007b10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b12:	3330      	adds	r3, #48	; 0x30
 8007b14:	f805 3b01 	strb.w	r3, [r5], #1
 8007b18:	ec53 2b18 	vmov	r2, r3, d8
 8007b1c:	4606      	mov	r6, r0
 8007b1e:	460f      	mov	r7, r1
 8007b20:	f7f8 ffdc 	bl	8000adc <__aeabi_dcmplt>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	d165      	bne.n	8007bf4 <_dtoa_r+0x63c>
 8007b28:	4632      	mov	r2, r6
 8007b2a:	463b      	mov	r3, r7
 8007b2c:	4935      	ldr	r1, [pc, #212]	; (8007c04 <_dtoa_r+0x64c>)
 8007b2e:	2000      	movs	r0, #0
 8007b30:	f7f8 fbaa 	bl	8000288 <__aeabi_dsub>
 8007b34:	ec53 2b18 	vmov	r2, r3, d8
 8007b38:	f7f8 ffd0 	bl	8000adc <__aeabi_dcmplt>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	f040 80b9 	bne.w	8007cb4 <_dtoa_r+0x6fc>
 8007b42:	9b02      	ldr	r3, [sp, #8]
 8007b44:	429d      	cmp	r5, r3
 8007b46:	f43f af75 	beq.w	8007a34 <_dtoa_r+0x47c>
 8007b4a:	4b2f      	ldr	r3, [pc, #188]	; (8007c08 <_dtoa_r+0x650>)
 8007b4c:	ec51 0b18 	vmov	r0, r1, d8
 8007b50:	2200      	movs	r2, #0
 8007b52:	f7f8 fd51 	bl	80005f8 <__aeabi_dmul>
 8007b56:	4b2c      	ldr	r3, [pc, #176]	; (8007c08 <_dtoa_r+0x650>)
 8007b58:	ec41 0b18 	vmov	d8, r0, r1
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	4630      	mov	r0, r6
 8007b60:	4639      	mov	r1, r7
 8007b62:	f7f8 fd49 	bl	80005f8 <__aeabi_dmul>
 8007b66:	4606      	mov	r6, r0
 8007b68:	460f      	mov	r7, r1
 8007b6a:	e7c4      	b.n	8007af6 <_dtoa_r+0x53e>
 8007b6c:	ec51 0b17 	vmov	r0, r1, d7
 8007b70:	f7f8 fd42 	bl	80005f8 <__aeabi_dmul>
 8007b74:	9b02      	ldr	r3, [sp, #8]
 8007b76:	9d00      	ldr	r5, [sp, #0]
 8007b78:	930c      	str	r3, [sp, #48]	; 0x30
 8007b7a:	ec41 0b18 	vmov	d8, r0, r1
 8007b7e:	4639      	mov	r1, r7
 8007b80:	4630      	mov	r0, r6
 8007b82:	f7f8 ffe9 	bl	8000b58 <__aeabi_d2iz>
 8007b86:	9011      	str	r0, [sp, #68]	; 0x44
 8007b88:	f7f8 fccc 	bl	8000524 <__aeabi_i2d>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	460b      	mov	r3, r1
 8007b90:	4630      	mov	r0, r6
 8007b92:	4639      	mov	r1, r7
 8007b94:	f7f8 fb78 	bl	8000288 <__aeabi_dsub>
 8007b98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b9a:	3330      	adds	r3, #48	; 0x30
 8007b9c:	f805 3b01 	strb.w	r3, [r5], #1
 8007ba0:	9b02      	ldr	r3, [sp, #8]
 8007ba2:	429d      	cmp	r5, r3
 8007ba4:	4606      	mov	r6, r0
 8007ba6:	460f      	mov	r7, r1
 8007ba8:	f04f 0200 	mov.w	r2, #0
 8007bac:	d134      	bne.n	8007c18 <_dtoa_r+0x660>
 8007bae:	4b19      	ldr	r3, [pc, #100]	; (8007c14 <_dtoa_r+0x65c>)
 8007bb0:	ec51 0b18 	vmov	r0, r1, d8
 8007bb4:	f7f8 fb6a 	bl	800028c <__adddf3>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	4639      	mov	r1, r7
 8007bc0:	f7f8 ffaa 	bl	8000b18 <__aeabi_dcmpgt>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d175      	bne.n	8007cb4 <_dtoa_r+0x6fc>
 8007bc8:	ec53 2b18 	vmov	r2, r3, d8
 8007bcc:	4911      	ldr	r1, [pc, #68]	; (8007c14 <_dtoa_r+0x65c>)
 8007bce:	2000      	movs	r0, #0
 8007bd0:	f7f8 fb5a 	bl	8000288 <__aeabi_dsub>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	4630      	mov	r0, r6
 8007bda:	4639      	mov	r1, r7
 8007bdc:	f7f8 ff7e 	bl	8000adc <__aeabi_dcmplt>
 8007be0:	2800      	cmp	r0, #0
 8007be2:	f43f af27 	beq.w	8007a34 <_dtoa_r+0x47c>
 8007be6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007be8:	1e6b      	subs	r3, r5, #1
 8007bea:	930c      	str	r3, [sp, #48]	; 0x30
 8007bec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007bf0:	2b30      	cmp	r3, #48	; 0x30
 8007bf2:	d0f8      	beq.n	8007be6 <_dtoa_r+0x62e>
 8007bf4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007bf8:	e04a      	b.n	8007c90 <_dtoa_r+0x6d8>
 8007bfa:	bf00      	nop
 8007bfc:	0800b470 	.word	0x0800b470
 8007c00:	0800b448 	.word	0x0800b448
 8007c04:	3ff00000 	.word	0x3ff00000
 8007c08:	40240000 	.word	0x40240000
 8007c0c:	401c0000 	.word	0x401c0000
 8007c10:	40140000 	.word	0x40140000
 8007c14:	3fe00000 	.word	0x3fe00000
 8007c18:	4baf      	ldr	r3, [pc, #700]	; (8007ed8 <_dtoa_r+0x920>)
 8007c1a:	f7f8 fced 	bl	80005f8 <__aeabi_dmul>
 8007c1e:	4606      	mov	r6, r0
 8007c20:	460f      	mov	r7, r1
 8007c22:	e7ac      	b.n	8007b7e <_dtoa_r+0x5c6>
 8007c24:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c28:	9d00      	ldr	r5, [sp, #0]
 8007c2a:	4642      	mov	r2, r8
 8007c2c:	464b      	mov	r3, r9
 8007c2e:	4630      	mov	r0, r6
 8007c30:	4639      	mov	r1, r7
 8007c32:	f7f8 fe0b 	bl	800084c <__aeabi_ddiv>
 8007c36:	f7f8 ff8f 	bl	8000b58 <__aeabi_d2iz>
 8007c3a:	9002      	str	r0, [sp, #8]
 8007c3c:	f7f8 fc72 	bl	8000524 <__aeabi_i2d>
 8007c40:	4642      	mov	r2, r8
 8007c42:	464b      	mov	r3, r9
 8007c44:	f7f8 fcd8 	bl	80005f8 <__aeabi_dmul>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	4639      	mov	r1, r7
 8007c50:	f7f8 fb1a 	bl	8000288 <__aeabi_dsub>
 8007c54:	9e02      	ldr	r6, [sp, #8]
 8007c56:	9f01      	ldr	r7, [sp, #4]
 8007c58:	3630      	adds	r6, #48	; 0x30
 8007c5a:	f805 6b01 	strb.w	r6, [r5], #1
 8007c5e:	9e00      	ldr	r6, [sp, #0]
 8007c60:	1bae      	subs	r6, r5, r6
 8007c62:	42b7      	cmp	r7, r6
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	d137      	bne.n	8007cda <_dtoa_r+0x722>
 8007c6a:	f7f8 fb0f 	bl	800028c <__adddf3>
 8007c6e:	4642      	mov	r2, r8
 8007c70:	464b      	mov	r3, r9
 8007c72:	4606      	mov	r6, r0
 8007c74:	460f      	mov	r7, r1
 8007c76:	f7f8 ff4f 	bl	8000b18 <__aeabi_dcmpgt>
 8007c7a:	b9c8      	cbnz	r0, 8007cb0 <_dtoa_r+0x6f8>
 8007c7c:	4642      	mov	r2, r8
 8007c7e:	464b      	mov	r3, r9
 8007c80:	4630      	mov	r0, r6
 8007c82:	4639      	mov	r1, r7
 8007c84:	f7f8 ff20 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c88:	b110      	cbz	r0, 8007c90 <_dtoa_r+0x6d8>
 8007c8a:	9b02      	ldr	r3, [sp, #8]
 8007c8c:	07d9      	lsls	r1, r3, #31
 8007c8e:	d40f      	bmi.n	8007cb0 <_dtoa_r+0x6f8>
 8007c90:	4620      	mov	r0, r4
 8007c92:	4659      	mov	r1, fp
 8007c94:	f001 f876 	bl	8008d84 <_Bfree>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	702b      	strb	r3, [r5, #0]
 8007c9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c9e:	f10a 0001 	add.w	r0, sl, #1
 8007ca2:	6018      	str	r0, [r3, #0]
 8007ca4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f43f acd8 	beq.w	800765c <_dtoa_r+0xa4>
 8007cac:	601d      	str	r5, [r3, #0]
 8007cae:	e4d5      	b.n	800765c <_dtoa_r+0xa4>
 8007cb0:	f8cd a01c 	str.w	sl, [sp, #28]
 8007cb4:	462b      	mov	r3, r5
 8007cb6:	461d      	mov	r5, r3
 8007cb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cbc:	2a39      	cmp	r2, #57	; 0x39
 8007cbe:	d108      	bne.n	8007cd2 <_dtoa_r+0x71a>
 8007cc0:	9a00      	ldr	r2, [sp, #0]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d1f7      	bne.n	8007cb6 <_dtoa_r+0x6fe>
 8007cc6:	9a07      	ldr	r2, [sp, #28]
 8007cc8:	9900      	ldr	r1, [sp, #0]
 8007cca:	3201      	adds	r2, #1
 8007ccc:	9207      	str	r2, [sp, #28]
 8007cce:	2230      	movs	r2, #48	; 0x30
 8007cd0:	700a      	strb	r2, [r1, #0]
 8007cd2:	781a      	ldrb	r2, [r3, #0]
 8007cd4:	3201      	adds	r2, #1
 8007cd6:	701a      	strb	r2, [r3, #0]
 8007cd8:	e78c      	b.n	8007bf4 <_dtoa_r+0x63c>
 8007cda:	4b7f      	ldr	r3, [pc, #508]	; (8007ed8 <_dtoa_r+0x920>)
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f7f8 fc8b 	bl	80005f8 <__aeabi_dmul>
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	4606      	mov	r6, r0
 8007ce8:	460f      	mov	r7, r1
 8007cea:	f7f8 feed 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d09b      	beq.n	8007c2a <_dtoa_r+0x672>
 8007cf2:	e7cd      	b.n	8007c90 <_dtoa_r+0x6d8>
 8007cf4:	9a08      	ldr	r2, [sp, #32]
 8007cf6:	2a00      	cmp	r2, #0
 8007cf8:	f000 80c4 	beq.w	8007e84 <_dtoa_r+0x8cc>
 8007cfc:	9a05      	ldr	r2, [sp, #20]
 8007cfe:	2a01      	cmp	r2, #1
 8007d00:	f300 80a8 	bgt.w	8007e54 <_dtoa_r+0x89c>
 8007d04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d06:	2a00      	cmp	r2, #0
 8007d08:	f000 80a0 	beq.w	8007e4c <_dtoa_r+0x894>
 8007d0c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d10:	9e06      	ldr	r6, [sp, #24]
 8007d12:	4645      	mov	r5, r8
 8007d14:	9a04      	ldr	r2, [sp, #16]
 8007d16:	2101      	movs	r1, #1
 8007d18:	441a      	add	r2, r3
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	4498      	add	r8, r3
 8007d1e:	9204      	str	r2, [sp, #16]
 8007d20:	f001 f936 	bl	8008f90 <__i2b>
 8007d24:	4607      	mov	r7, r0
 8007d26:	2d00      	cmp	r5, #0
 8007d28:	dd0b      	ble.n	8007d42 <_dtoa_r+0x78a>
 8007d2a:	9b04      	ldr	r3, [sp, #16]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	dd08      	ble.n	8007d42 <_dtoa_r+0x78a>
 8007d30:	42ab      	cmp	r3, r5
 8007d32:	9a04      	ldr	r2, [sp, #16]
 8007d34:	bfa8      	it	ge
 8007d36:	462b      	movge	r3, r5
 8007d38:	eba8 0803 	sub.w	r8, r8, r3
 8007d3c:	1aed      	subs	r5, r5, r3
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	9304      	str	r3, [sp, #16]
 8007d42:	9b06      	ldr	r3, [sp, #24]
 8007d44:	b1fb      	cbz	r3, 8007d86 <_dtoa_r+0x7ce>
 8007d46:	9b08      	ldr	r3, [sp, #32]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f000 809f 	beq.w	8007e8c <_dtoa_r+0x8d4>
 8007d4e:	2e00      	cmp	r6, #0
 8007d50:	dd11      	ble.n	8007d76 <_dtoa_r+0x7be>
 8007d52:	4639      	mov	r1, r7
 8007d54:	4632      	mov	r2, r6
 8007d56:	4620      	mov	r0, r4
 8007d58:	f001 f9d6 	bl	8009108 <__pow5mult>
 8007d5c:	465a      	mov	r2, fp
 8007d5e:	4601      	mov	r1, r0
 8007d60:	4607      	mov	r7, r0
 8007d62:	4620      	mov	r0, r4
 8007d64:	f001 f92a 	bl	8008fbc <__multiply>
 8007d68:	4659      	mov	r1, fp
 8007d6a:	9007      	str	r0, [sp, #28]
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f001 f809 	bl	8008d84 <_Bfree>
 8007d72:	9b07      	ldr	r3, [sp, #28]
 8007d74:	469b      	mov	fp, r3
 8007d76:	9b06      	ldr	r3, [sp, #24]
 8007d78:	1b9a      	subs	r2, r3, r6
 8007d7a:	d004      	beq.n	8007d86 <_dtoa_r+0x7ce>
 8007d7c:	4659      	mov	r1, fp
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f001 f9c2 	bl	8009108 <__pow5mult>
 8007d84:	4683      	mov	fp, r0
 8007d86:	2101      	movs	r1, #1
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f001 f901 	bl	8008f90 <__i2b>
 8007d8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	4606      	mov	r6, r0
 8007d94:	dd7c      	ble.n	8007e90 <_dtoa_r+0x8d8>
 8007d96:	461a      	mov	r2, r3
 8007d98:	4601      	mov	r1, r0
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f001 f9b4 	bl	8009108 <__pow5mult>
 8007da0:	9b05      	ldr	r3, [sp, #20]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	4606      	mov	r6, r0
 8007da6:	dd76      	ble.n	8007e96 <_dtoa_r+0x8de>
 8007da8:	2300      	movs	r3, #0
 8007daa:	9306      	str	r3, [sp, #24]
 8007dac:	6933      	ldr	r3, [r6, #16]
 8007dae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007db2:	6918      	ldr	r0, [r3, #16]
 8007db4:	f001 f89c 	bl	8008ef0 <__hi0bits>
 8007db8:	f1c0 0020 	rsb	r0, r0, #32
 8007dbc:	9b04      	ldr	r3, [sp, #16]
 8007dbe:	4418      	add	r0, r3
 8007dc0:	f010 001f 	ands.w	r0, r0, #31
 8007dc4:	f000 8086 	beq.w	8007ed4 <_dtoa_r+0x91c>
 8007dc8:	f1c0 0320 	rsb	r3, r0, #32
 8007dcc:	2b04      	cmp	r3, #4
 8007dce:	dd7f      	ble.n	8007ed0 <_dtoa_r+0x918>
 8007dd0:	f1c0 001c 	rsb	r0, r0, #28
 8007dd4:	9b04      	ldr	r3, [sp, #16]
 8007dd6:	4403      	add	r3, r0
 8007dd8:	4480      	add	r8, r0
 8007dda:	4405      	add	r5, r0
 8007ddc:	9304      	str	r3, [sp, #16]
 8007dde:	f1b8 0f00 	cmp.w	r8, #0
 8007de2:	dd05      	ble.n	8007df0 <_dtoa_r+0x838>
 8007de4:	4659      	mov	r1, fp
 8007de6:	4642      	mov	r2, r8
 8007de8:	4620      	mov	r0, r4
 8007dea:	f001 f9e7 	bl	80091bc <__lshift>
 8007dee:	4683      	mov	fp, r0
 8007df0:	9b04      	ldr	r3, [sp, #16]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	dd05      	ble.n	8007e02 <_dtoa_r+0x84a>
 8007df6:	4631      	mov	r1, r6
 8007df8:	461a      	mov	r2, r3
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f001 f9de 	bl	80091bc <__lshift>
 8007e00:	4606      	mov	r6, r0
 8007e02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d069      	beq.n	8007edc <_dtoa_r+0x924>
 8007e08:	4631      	mov	r1, r6
 8007e0a:	4658      	mov	r0, fp
 8007e0c:	f001 fa42 	bl	8009294 <__mcmp>
 8007e10:	2800      	cmp	r0, #0
 8007e12:	da63      	bge.n	8007edc <_dtoa_r+0x924>
 8007e14:	2300      	movs	r3, #0
 8007e16:	4659      	mov	r1, fp
 8007e18:	220a      	movs	r2, #10
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f000 ffd4 	bl	8008dc8 <__multadd>
 8007e20:	9b08      	ldr	r3, [sp, #32]
 8007e22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e26:	4683      	mov	fp, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 818f 	beq.w	800814c <_dtoa_r+0xb94>
 8007e2e:	4639      	mov	r1, r7
 8007e30:	2300      	movs	r3, #0
 8007e32:	220a      	movs	r2, #10
 8007e34:	4620      	mov	r0, r4
 8007e36:	f000 ffc7 	bl	8008dc8 <__multadd>
 8007e3a:	f1b9 0f00 	cmp.w	r9, #0
 8007e3e:	4607      	mov	r7, r0
 8007e40:	f300 808e 	bgt.w	8007f60 <_dtoa_r+0x9a8>
 8007e44:	9b05      	ldr	r3, [sp, #20]
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	dc50      	bgt.n	8007eec <_dtoa_r+0x934>
 8007e4a:	e089      	b.n	8007f60 <_dtoa_r+0x9a8>
 8007e4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007e52:	e75d      	b.n	8007d10 <_dtoa_r+0x758>
 8007e54:	9b01      	ldr	r3, [sp, #4]
 8007e56:	1e5e      	subs	r6, r3, #1
 8007e58:	9b06      	ldr	r3, [sp, #24]
 8007e5a:	42b3      	cmp	r3, r6
 8007e5c:	bfbf      	itttt	lt
 8007e5e:	9b06      	ldrlt	r3, [sp, #24]
 8007e60:	9606      	strlt	r6, [sp, #24]
 8007e62:	1af2      	sublt	r2, r6, r3
 8007e64:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007e66:	bfb6      	itet	lt
 8007e68:	189b      	addlt	r3, r3, r2
 8007e6a:	1b9e      	subge	r6, r3, r6
 8007e6c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007e6e:	9b01      	ldr	r3, [sp, #4]
 8007e70:	bfb8      	it	lt
 8007e72:	2600      	movlt	r6, #0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	bfb5      	itete	lt
 8007e78:	eba8 0503 	sublt.w	r5, r8, r3
 8007e7c:	9b01      	ldrge	r3, [sp, #4]
 8007e7e:	2300      	movlt	r3, #0
 8007e80:	4645      	movge	r5, r8
 8007e82:	e747      	b.n	8007d14 <_dtoa_r+0x75c>
 8007e84:	9e06      	ldr	r6, [sp, #24]
 8007e86:	9f08      	ldr	r7, [sp, #32]
 8007e88:	4645      	mov	r5, r8
 8007e8a:	e74c      	b.n	8007d26 <_dtoa_r+0x76e>
 8007e8c:	9a06      	ldr	r2, [sp, #24]
 8007e8e:	e775      	b.n	8007d7c <_dtoa_r+0x7c4>
 8007e90:	9b05      	ldr	r3, [sp, #20]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	dc18      	bgt.n	8007ec8 <_dtoa_r+0x910>
 8007e96:	9b02      	ldr	r3, [sp, #8]
 8007e98:	b9b3      	cbnz	r3, 8007ec8 <_dtoa_r+0x910>
 8007e9a:	9b03      	ldr	r3, [sp, #12]
 8007e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ea0:	b9a3      	cbnz	r3, 8007ecc <_dtoa_r+0x914>
 8007ea2:	9b03      	ldr	r3, [sp, #12]
 8007ea4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ea8:	0d1b      	lsrs	r3, r3, #20
 8007eaa:	051b      	lsls	r3, r3, #20
 8007eac:	b12b      	cbz	r3, 8007eba <_dtoa_r+0x902>
 8007eae:	9b04      	ldr	r3, [sp, #16]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	9304      	str	r3, [sp, #16]
 8007eb4:	f108 0801 	add.w	r8, r8, #1
 8007eb8:	2301      	movs	r3, #1
 8007eba:	9306      	str	r3, [sp, #24]
 8007ebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f47f af74 	bne.w	8007dac <_dtoa_r+0x7f4>
 8007ec4:	2001      	movs	r0, #1
 8007ec6:	e779      	b.n	8007dbc <_dtoa_r+0x804>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	e7f6      	b.n	8007eba <_dtoa_r+0x902>
 8007ecc:	9b02      	ldr	r3, [sp, #8]
 8007ece:	e7f4      	b.n	8007eba <_dtoa_r+0x902>
 8007ed0:	d085      	beq.n	8007dde <_dtoa_r+0x826>
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	301c      	adds	r0, #28
 8007ed6:	e77d      	b.n	8007dd4 <_dtoa_r+0x81c>
 8007ed8:	40240000 	.word	0x40240000
 8007edc:	9b01      	ldr	r3, [sp, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	dc38      	bgt.n	8007f54 <_dtoa_r+0x99c>
 8007ee2:	9b05      	ldr	r3, [sp, #20]
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	dd35      	ble.n	8007f54 <_dtoa_r+0x99c>
 8007ee8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007eec:	f1b9 0f00 	cmp.w	r9, #0
 8007ef0:	d10d      	bne.n	8007f0e <_dtoa_r+0x956>
 8007ef2:	4631      	mov	r1, r6
 8007ef4:	464b      	mov	r3, r9
 8007ef6:	2205      	movs	r2, #5
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f000 ff65 	bl	8008dc8 <__multadd>
 8007efe:	4601      	mov	r1, r0
 8007f00:	4606      	mov	r6, r0
 8007f02:	4658      	mov	r0, fp
 8007f04:	f001 f9c6 	bl	8009294 <__mcmp>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	f73f adbd 	bgt.w	8007a88 <_dtoa_r+0x4d0>
 8007f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f10:	9d00      	ldr	r5, [sp, #0]
 8007f12:	ea6f 0a03 	mvn.w	sl, r3
 8007f16:	f04f 0800 	mov.w	r8, #0
 8007f1a:	4631      	mov	r1, r6
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f000 ff31 	bl	8008d84 <_Bfree>
 8007f22:	2f00      	cmp	r7, #0
 8007f24:	f43f aeb4 	beq.w	8007c90 <_dtoa_r+0x6d8>
 8007f28:	f1b8 0f00 	cmp.w	r8, #0
 8007f2c:	d005      	beq.n	8007f3a <_dtoa_r+0x982>
 8007f2e:	45b8      	cmp	r8, r7
 8007f30:	d003      	beq.n	8007f3a <_dtoa_r+0x982>
 8007f32:	4641      	mov	r1, r8
 8007f34:	4620      	mov	r0, r4
 8007f36:	f000 ff25 	bl	8008d84 <_Bfree>
 8007f3a:	4639      	mov	r1, r7
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f000 ff21 	bl	8008d84 <_Bfree>
 8007f42:	e6a5      	b.n	8007c90 <_dtoa_r+0x6d8>
 8007f44:	2600      	movs	r6, #0
 8007f46:	4637      	mov	r7, r6
 8007f48:	e7e1      	b.n	8007f0e <_dtoa_r+0x956>
 8007f4a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007f4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007f50:	4637      	mov	r7, r6
 8007f52:	e599      	b.n	8007a88 <_dtoa_r+0x4d0>
 8007f54:	9b08      	ldr	r3, [sp, #32]
 8007f56:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f000 80fd 	beq.w	800815a <_dtoa_r+0xba2>
 8007f60:	2d00      	cmp	r5, #0
 8007f62:	dd05      	ble.n	8007f70 <_dtoa_r+0x9b8>
 8007f64:	4639      	mov	r1, r7
 8007f66:	462a      	mov	r2, r5
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f001 f927 	bl	80091bc <__lshift>
 8007f6e:	4607      	mov	r7, r0
 8007f70:	9b06      	ldr	r3, [sp, #24]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d05c      	beq.n	8008030 <_dtoa_r+0xa78>
 8007f76:	6879      	ldr	r1, [r7, #4]
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f000 fec3 	bl	8008d04 <_Balloc>
 8007f7e:	4605      	mov	r5, r0
 8007f80:	b928      	cbnz	r0, 8007f8e <_dtoa_r+0x9d6>
 8007f82:	4b80      	ldr	r3, [pc, #512]	; (8008184 <_dtoa_r+0xbcc>)
 8007f84:	4602      	mov	r2, r0
 8007f86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007f8a:	f7ff bb2e 	b.w	80075ea <_dtoa_r+0x32>
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	3202      	adds	r2, #2
 8007f92:	0092      	lsls	r2, r2, #2
 8007f94:	f107 010c 	add.w	r1, r7, #12
 8007f98:	300c      	adds	r0, #12
 8007f9a:	f000 fea5 	bl	8008ce8 <memcpy>
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f001 f90a 	bl	80091bc <__lshift>
 8007fa8:	9b00      	ldr	r3, [sp, #0]
 8007faa:	3301      	adds	r3, #1
 8007fac:	9301      	str	r3, [sp, #4]
 8007fae:	9b00      	ldr	r3, [sp, #0]
 8007fb0:	444b      	add	r3, r9
 8007fb2:	9307      	str	r3, [sp, #28]
 8007fb4:	9b02      	ldr	r3, [sp, #8]
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	46b8      	mov	r8, r7
 8007fbc:	9306      	str	r3, [sp, #24]
 8007fbe:	4607      	mov	r7, r0
 8007fc0:	9b01      	ldr	r3, [sp, #4]
 8007fc2:	4631      	mov	r1, r6
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	4658      	mov	r0, fp
 8007fc8:	9302      	str	r3, [sp, #8]
 8007fca:	f7ff fa67 	bl	800749c <quorem>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	3330      	adds	r3, #48	; 0x30
 8007fd2:	9004      	str	r0, [sp, #16]
 8007fd4:	4641      	mov	r1, r8
 8007fd6:	4658      	mov	r0, fp
 8007fd8:	9308      	str	r3, [sp, #32]
 8007fda:	f001 f95b 	bl	8009294 <__mcmp>
 8007fde:	463a      	mov	r2, r7
 8007fe0:	4681      	mov	r9, r0
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	f001 f971 	bl	80092cc <__mdiff>
 8007fea:	68c2      	ldr	r2, [r0, #12]
 8007fec:	9b08      	ldr	r3, [sp, #32]
 8007fee:	4605      	mov	r5, r0
 8007ff0:	bb02      	cbnz	r2, 8008034 <_dtoa_r+0xa7c>
 8007ff2:	4601      	mov	r1, r0
 8007ff4:	4658      	mov	r0, fp
 8007ff6:	f001 f94d 	bl	8009294 <__mcmp>
 8007ffa:	9b08      	ldr	r3, [sp, #32]
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	4629      	mov	r1, r5
 8008000:	4620      	mov	r0, r4
 8008002:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008006:	f000 febd 	bl	8008d84 <_Bfree>
 800800a:	9b05      	ldr	r3, [sp, #20]
 800800c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800800e:	9d01      	ldr	r5, [sp, #4]
 8008010:	ea43 0102 	orr.w	r1, r3, r2
 8008014:	9b06      	ldr	r3, [sp, #24]
 8008016:	430b      	orrs	r3, r1
 8008018:	9b08      	ldr	r3, [sp, #32]
 800801a:	d10d      	bne.n	8008038 <_dtoa_r+0xa80>
 800801c:	2b39      	cmp	r3, #57	; 0x39
 800801e:	d029      	beq.n	8008074 <_dtoa_r+0xabc>
 8008020:	f1b9 0f00 	cmp.w	r9, #0
 8008024:	dd01      	ble.n	800802a <_dtoa_r+0xa72>
 8008026:	9b04      	ldr	r3, [sp, #16]
 8008028:	3331      	adds	r3, #49	; 0x31
 800802a:	9a02      	ldr	r2, [sp, #8]
 800802c:	7013      	strb	r3, [r2, #0]
 800802e:	e774      	b.n	8007f1a <_dtoa_r+0x962>
 8008030:	4638      	mov	r0, r7
 8008032:	e7b9      	b.n	8007fa8 <_dtoa_r+0x9f0>
 8008034:	2201      	movs	r2, #1
 8008036:	e7e2      	b.n	8007ffe <_dtoa_r+0xa46>
 8008038:	f1b9 0f00 	cmp.w	r9, #0
 800803c:	db06      	blt.n	800804c <_dtoa_r+0xa94>
 800803e:	9905      	ldr	r1, [sp, #20]
 8008040:	ea41 0909 	orr.w	r9, r1, r9
 8008044:	9906      	ldr	r1, [sp, #24]
 8008046:	ea59 0101 	orrs.w	r1, r9, r1
 800804a:	d120      	bne.n	800808e <_dtoa_r+0xad6>
 800804c:	2a00      	cmp	r2, #0
 800804e:	ddec      	ble.n	800802a <_dtoa_r+0xa72>
 8008050:	4659      	mov	r1, fp
 8008052:	2201      	movs	r2, #1
 8008054:	4620      	mov	r0, r4
 8008056:	9301      	str	r3, [sp, #4]
 8008058:	f001 f8b0 	bl	80091bc <__lshift>
 800805c:	4631      	mov	r1, r6
 800805e:	4683      	mov	fp, r0
 8008060:	f001 f918 	bl	8009294 <__mcmp>
 8008064:	2800      	cmp	r0, #0
 8008066:	9b01      	ldr	r3, [sp, #4]
 8008068:	dc02      	bgt.n	8008070 <_dtoa_r+0xab8>
 800806a:	d1de      	bne.n	800802a <_dtoa_r+0xa72>
 800806c:	07da      	lsls	r2, r3, #31
 800806e:	d5dc      	bpl.n	800802a <_dtoa_r+0xa72>
 8008070:	2b39      	cmp	r3, #57	; 0x39
 8008072:	d1d8      	bne.n	8008026 <_dtoa_r+0xa6e>
 8008074:	9a02      	ldr	r2, [sp, #8]
 8008076:	2339      	movs	r3, #57	; 0x39
 8008078:	7013      	strb	r3, [r2, #0]
 800807a:	462b      	mov	r3, r5
 800807c:	461d      	mov	r5, r3
 800807e:	3b01      	subs	r3, #1
 8008080:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008084:	2a39      	cmp	r2, #57	; 0x39
 8008086:	d050      	beq.n	800812a <_dtoa_r+0xb72>
 8008088:	3201      	adds	r2, #1
 800808a:	701a      	strb	r2, [r3, #0]
 800808c:	e745      	b.n	8007f1a <_dtoa_r+0x962>
 800808e:	2a00      	cmp	r2, #0
 8008090:	dd03      	ble.n	800809a <_dtoa_r+0xae2>
 8008092:	2b39      	cmp	r3, #57	; 0x39
 8008094:	d0ee      	beq.n	8008074 <_dtoa_r+0xabc>
 8008096:	3301      	adds	r3, #1
 8008098:	e7c7      	b.n	800802a <_dtoa_r+0xa72>
 800809a:	9a01      	ldr	r2, [sp, #4]
 800809c:	9907      	ldr	r1, [sp, #28]
 800809e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80080a2:	428a      	cmp	r2, r1
 80080a4:	d02a      	beq.n	80080fc <_dtoa_r+0xb44>
 80080a6:	4659      	mov	r1, fp
 80080a8:	2300      	movs	r3, #0
 80080aa:	220a      	movs	r2, #10
 80080ac:	4620      	mov	r0, r4
 80080ae:	f000 fe8b 	bl	8008dc8 <__multadd>
 80080b2:	45b8      	cmp	r8, r7
 80080b4:	4683      	mov	fp, r0
 80080b6:	f04f 0300 	mov.w	r3, #0
 80080ba:	f04f 020a 	mov.w	r2, #10
 80080be:	4641      	mov	r1, r8
 80080c0:	4620      	mov	r0, r4
 80080c2:	d107      	bne.n	80080d4 <_dtoa_r+0xb1c>
 80080c4:	f000 fe80 	bl	8008dc8 <__multadd>
 80080c8:	4680      	mov	r8, r0
 80080ca:	4607      	mov	r7, r0
 80080cc:	9b01      	ldr	r3, [sp, #4]
 80080ce:	3301      	adds	r3, #1
 80080d0:	9301      	str	r3, [sp, #4]
 80080d2:	e775      	b.n	8007fc0 <_dtoa_r+0xa08>
 80080d4:	f000 fe78 	bl	8008dc8 <__multadd>
 80080d8:	4639      	mov	r1, r7
 80080da:	4680      	mov	r8, r0
 80080dc:	2300      	movs	r3, #0
 80080de:	220a      	movs	r2, #10
 80080e0:	4620      	mov	r0, r4
 80080e2:	f000 fe71 	bl	8008dc8 <__multadd>
 80080e6:	4607      	mov	r7, r0
 80080e8:	e7f0      	b.n	80080cc <_dtoa_r+0xb14>
 80080ea:	f1b9 0f00 	cmp.w	r9, #0
 80080ee:	9a00      	ldr	r2, [sp, #0]
 80080f0:	bfcc      	ite	gt
 80080f2:	464d      	movgt	r5, r9
 80080f4:	2501      	movle	r5, #1
 80080f6:	4415      	add	r5, r2
 80080f8:	f04f 0800 	mov.w	r8, #0
 80080fc:	4659      	mov	r1, fp
 80080fe:	2201      	movs	r2, #1
 8008100:	4620      	mov	r0, r4
 8008102:	9301      	str	r3, [sp, #4]
 8008104:	f001 f85a 	bl	80091bc <__lshift>
 8008108:	4631      	mov	r1, r6
 800810a:	4683      	mov	fp, r0
 800810c:	f001 f8c2 	bl	8009294 <__mcmp>
 8008110:	2800      	cmp	r0, #0
 8008112:	dcb2      	bgt.n	800807a <_dtoa_r+0xac2>
 8008114:	d102      	bne.n	800811c <_dtoa_r+0xb64>
 8008116:	9b01      	ldr	r3, [sp, #4]
 8008118:	07db      	lsls	r3, r3, #31
 800811a:	d4ae      	bmi.n	800807a <_dtoa_r+0xac2>
 800811c:	462b      	mov	r3, r5
 800811e:	461d      	mov	r5, r3
 8008120:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008124:	2a30      	cmp	r2, #48	; 0x30
 8008126:	d0fa      	beq.n	800811e <_dtoa_r+0xb66>
 8008128:	e6f7      	b.n	8007f1a <_dtoa_r+0x962>
 800812a:	9a00      	ldr	r2, [sp, #0]
 800812c:	429a      	cmp	r2, r3
 800812e:	d1a5      	bne.n	800807c <_dtoa_r+0xac4>
 8008130:	f10a 0a01 	add.w	sl, sl, #1
 8008134:	2331      	movs	r3, #49	; 0x31
 8008136:	e779      	b.n	800802c <_dtoa_r+0xa74>
 8008138:	4b13      	ldr	r3, [pc, #76]	; (8008188 <_dtoa_r+0xbd0>)
 800813a:	f7ff baaf 	b.w	800769c <_dtoa_r+0xe4>
 800813e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008140:	2b00      	cmp	r3, #0
 8008142:	f47f aa86 	bne.w	8007652 <_dtoa_r+0x9a>
 8008146:	4b11      	ldr	r3, [pc, #68]	; (800818c <_dtoa_r+0xbd4>)
 8008148:	f7ff baa8 	b.w	800769c <_dtoa_r+0xe4>
 800814c:	f1b9 0f00 	cmp.w	r9, #0
 8008150:	dc03      	bgt.n	800815a <_dtoa_r+0xba2>
 8008152:	9b05      	ldr	r3, [sp, #20]
 8008154:	2b02      	cmp	r3, #2
 8008156:	f73f aec9 	bgt.w	8007eec <_dtoa_r+0x934>
 800815a:	9d00      	ldr	r5, [sp, #0]
 800815c:	4631      	mov	r1, r6
 800815e:	4658      	mov	r0, fp
 8008160:	f7ff f99c 	bl	800749c <quorem>
 8008164:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008168:	f805 3b01 	strb.w	r3, [r5], #1
 800816c:	9a00      	ldr	r2, [sp, #0]
 800816e:	1aaa      	subs	r2, r5, r2
 8008170:	4591      	cmp	r9, r2
 8008172:	ddba      	ble.n	80080ea <_dtoa_r+0xb32>
 8008174:	4659      	mov	r1, fp
 8008176:	2300      	movs	r3, #0
 8008178:	220a      	movs	r2, #10
 800817a:	4620      	mov	r0, r4
 800817c:	f000 fe24 	bl	8008dc8 <__multadd>
 8008180:	4683      	mov	fp, r0
 8008182:	e7eb      	b.n	800815c <_dtoa_r+0xba4>
 8008184:	0800b2f4 	.word	0x0800b2f4
 8008188:	0800b0f0 	.word	0x0800b0f0
 800818c:	0800b271 	.word	0x0800b271

08008190 <__sflush_r>:
 8008190:	898a      	ldrh	r2, [r1, #12]
 8008192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008196:	4605      	mov	r5, r0
 8008198:	0710      	lsls	r0, r2, #28
 800819a:	460c      	mov	r4, r1
 800819c:	d458      	bmi.n	8008250 <__sflush_r+0xc0>
 800819e:	684b      	ldr	r3, [r1, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	dc05      	bgt.n	80081b0 <__sflush_r+0x20>
 80081a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	dc02      	bgt.n	80081b0 <__sflush_r+0x20>
 80081aa:	2000      	movs	r0, #0
 80081ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081b2:	2e00      	cmp	r6, #0
 80081b4:	d0f9      	beq.n	80081aa <__sflush_r+0x1a>
 80081b6:	2300      	movs	r3, #0
 80081b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081bc:	682f      	ldr	r7, [r5, #0]
 80081be:	602b      	str	r3, [r5, #0]
 80081c0:	d032      	beq.n	8008228 <__sflush_r+0x98>
 80081c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081c4:	89a3      	ldrh	r3, [r4, #12]
 80081c6:	075a      	lsls	r2, r3, #29
 80081c8:	d505      	bpl.n	80081d6 <__sflush_r+0x46>
 80081ca:	6863      	ldr	r3, [r4, #4]
 80081cc:	1ac0      	subs	r0, r0, r3
 80081ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081d0:	b10b      	cbz	r3, 80081d6 <__sflush_r+0x46>
 80081d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081d4:	1ac0      	subs	r0, r0, r3
 80081d6:	2300      	movs	r3, #0
 80081d8:	4602      	mov	r2, r0
 80081da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081dc:	6a21      	ldr	r1, [r4, #32]
 80081de:	4628      	mov	r0, r5
 80081e0:	47b0      	blx	r6
 80081e2:	1c43      	adds	r3, r0, #1
 80081e4:	89a3      	ldrh	r3, [r4, #12]
 80081e6:	d106      	bne.n	80081f6 <__sflush_r+0x66>
 80081e8:	6829      	ldr	r1, [r5, #0]
 80081ea:	291d      	cmp	r1, #29
 80081ec:	d82c      	bhi.n	8008248 <__sflush_r+0xb8>
 80081ee:	4a2a      	ldr	r2, [pc, #168]	; (8008298 <__sflush_r+0x108>)
 80081f0:	40ca      	lsrs	r2, r1
 80081f2:	07d6      	lsls	r6, r2, #31
 80081f4:	d528      	bpl.n	8008248 <__sflush_r+0xb8>
 80081f6:	2200      	movs	r2, #0
 80081f8:	6062      	str	r2, [r4, #4]
 80081fa:	04d9      	lsls	r1, r3, #19
 80081fc:	6922      	ldr	r2, [r4, #16]
 80081fe:	6022      	str	r2, [r4, #0]
 8008200:	d504      	bpl.n	800820c <__sflush_r+0x7c>
 8008202:	1c42      	adds	r2, r0, #1
 8008204:	d101      	bne.n	800820a <__sflush_r+0x7a>
 8008206:	682b      	ldr	r3, [r5, #0]
 8008208:	b903      	cbnz	r3, 800820c <__sflush_r+0x7c>
 800820a:	6560      	str	r0, [r4, #84]	; 0x54
 800820c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800820e:	602f      	str	r7, [r5, #0]
 8008210:	2900      	cmp	r1, #0
 8008212:	d0ca      	beq.n	80081aa <__sflush_r+0x1a>
 8008214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008218:	4299      	cmp	r1, r3
 800821a:	d002      	beq.n	8008222 <__sflush_r+0x92>
 800821c:	4628      	mov	r0, r5
 800821e:	f001 fa3b 	bl	8009698 <_free_r>
 8008222:	2000      	movs	r0, #0
 8008224:	6360      	str	r0, [r4, #52]	; 0x34
 8008226:	e7c1      	b.n	80081ac <__sflush_r+0x1c>
 8008228:	6a21      	ldr	r1, [r4, #32]
 800822a:	2301      	movs	r3, #1
 800822c:	4628      	mov	r0, r5
 800822e:	47b0      	blx	r6
 8008230:	1c41      	adds	r1, r0, #1
 8008232:	d1c7      	bne.n	80081c4 <__sflush_r+0x34>
 8008234:	682b      	ldr	r3, [r5, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d0c4      	beq.n	80081c4 <__sflush_r+0x34>
 800823a:	2b1d      	cmp	r3, #29
 800823c:	d001      	beq.n	8008242 <__sflush_r+0xb2>
 800823e:	2b16      	cmp	r3, #22
 8008240:	d101      	bne.n	8008246 <__sflush_r+0xb6>
 8008242:	602f      	str	r7, [r5, #0]
 8008244:	e7b1      	b.n	80081aa <__sflush_r+0x1a>
 8008246:	89a3      	ldrh	r3, [r4, #12]
 8008248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800824c:	81a3      	strh	r3, [r4, #12]
 800824e:	e7ad      	b.n	80081ac <__sflush_r+0x1c>
 8008250:	690f      	ldr	r7, [r1, #16]
 8008252:	2f00      	cmp	r7, #0
 8008254:	d0a9      	beq.n	80081aa <__sflush_r+0x1a>
 8008256:	0793      	lsls	r3, r2, #30
 8008258:	680e      	ldr	r6, [r1, #0]
 800825a:	bf08      	it	eq
 800825c:	694b      	ldreq	r3, [r1, #20]
 800825e:	600f      	str	r7, [r1, #0]
 8008260:	bf18      	it	ne
 8008262:	2300      	movne	r3, #0
 8008264:	eba6 0807 	sub.w	r8, r6, r7
 8008268:	608b      	str	r3, [r1, #8]
 800826a:	f1b8 0f00 	cmp.w	r8, #0
 800826e:	dd9c      	ble.n	80081aa <__sflush_r+0x1a>
 8008270:	6a21      	ldr	r1, [r4, #32]
 8008272:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008274:	4643      	mov	r3, r8
 8008276:	463a      	mov	r2, r7
 8008278:	4628      	mov	r0, r5
 800827a:	47b0      	blx	r6
 800827c:	2800      	cmp	r0, #0
 800827e:	dc06      	bgt.n	800828e <__sflush_r+0xfe>
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008286:	81a3      	strh	r3, [r4, #12]
 8008288:	f04f 30ff 	mov.w	r0, #4294967295
 800828c:	e78e      	b.n	80081ac <__sflush_r+0x1c>
 800828e:	4407      	add	r7, r0
 8008290:	eba8 0800 	sub.w	r8, r8, r0
 8008294:	e7e9      	b.n	800826a <__sflush_r+0xda>
 8008296:	bf00      	nop
 8008298:	20400001 	.word	0x20400001

0800829c <_fflush_r>:
 800829c:	b538      	push	{r3, r4, r5, lr}
 800829e:	690b      	ldr	r3, [r1, #16]
 80082a0:	4605      	mov	r5, r0
 80082a2:	460c      	mov	r4, r1
 80082a4:	b913      	cbnz	r3, 80082ac <_fflush_r+0x10>
 80082a6:	2500      	movs	r5, #0
 80082a8:	4628      	mov	r0, r5
 80082aa:	bd38      	pop	{r3, r4, r5, pc}
 80082ac:	b118      	cbz	r0, 80082b6 <_fflush_r+0x1a>
 80082ae:	6983      	ldr	r3, [r0, #24]
 80082b0:	b90b      	cbnz	r3, 80082b6 <_fflush_r+0x1a>
 80082b2:	f000 f887 	bl	80083c4 <__sinit>
 80082b6:	4b14      	ldr	r3, [pc, #80]	; (8008308 <_fflush_r+0x6c>)
 80082b8:	429c      	cmp	r4, r3
 80082ba:	d11b      	bne.n	80082f4 <_fflush_r+0x58>
 80082bc:	686c      	ldr	r4, [r5, #4]
 80082be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d0ef      	beq.n	80082a6 <_fflush_r+0xa>
 80082c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082c8:	07d0      	lsls	r0, r2, #31
 80082ca:	d404      	bmi.n	80082d6 <_fflush_r+0x3a>
 80082cc:	0599      	lsls	r1, r3, #22
 80082ce:	d402      	bmi.n	80082d6 <_fflush_r+0x3a>
 80082d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082d2:	f000 fc88 	bl	8008be6 <__retarget_lock_acquire_recursive>
 80082d6:	4628      	mov	r0, r5
 80082d8:	4621      	mov	r1, r4
 80082da:	f7ff ff59 	bl	8008190 <__sflush_r>
 80082de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082e0:	07da      	lsls	r2, r3, #31
 80082e2:	4605      	mov	r5, r0
 80082e4:	d4e0      	bmi.n	80082a8 <_fflush_r+0xc>
 80082e6:	89a3      	ldrh	r3, [r4, #12]
 80082e8:	059b      	lsls	r3, r3, #22
 80082ea:	d4dd      	bmi.n	80082a8 <_fflush_r+0xc>
 80082ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082ee:	f000 fc7b 	bl	8008be8 <__retarget_lock_release_recursive>
 80082f2:	e7d9      	b.n	80082a8 <_fflush_r+0xc>
 80082f4:	4b05      	ldr	r3, [pc, #20]	; (800830c <_fflush_r+0x70>)
 80082f6:	429c      	cmp	r4, r3
 80082f8:	d101      	bne.n	80082fe <_fflush_r+0x62>
 80082fa:	68ac      	ldr	r4, [r5, #8]
 80082fc:	e7df      	b.n	80082be <_fflush_r+0x22>
 80082fe:	4b04      	ldr	r3, [pc, #16]	; (8008310 <_fflush_r+0x74>)
 8008300:	429c      	cmp	r4, r3
 8008302:	bf08      	it	eq
 8008304:	68ec      	ldreq	r4, [r5, #12]
 8008306:	e7da      	b.n	80082be <_fflush_r+0x22>
 8008308:	0800b328 	.word	0x0800b328
 800830c:	0800b348 	.word	0x0800b348
 8008310:	0800b308 	.word	0x0800b308

08008314 <std>:
 8008314:	2300      	movs	r3, #0
 8008316:	b510      	push	{r4, lr}
 8008318:	4604      	mov	r4, r0
 800831a:	e9c0 3300 	strd	r3, r3, [r0]
 800831e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008322:	6083      	str	r3, [r0, #8]
 8008324:	8181      	strh	r1, [r0, #12]
 8008326:	6643      	str	r3, [r0, #100]	; 0x64
 8008328:	81c2      	strh	r2, [r0, #14]
 800832a:	6183      	str	r3, [r0, #24]
 800832c:	4619      	mov	r1, r3
 800832e:	2208      	movs	r2, #8
 8008330:	305c      	adds	r0, #92	; 0x5c
 8008332:	f7fd fa0b 	bl	800574c <memset>
 8008336:	4b05      	ldr	r3, [pc, #20]	; (800834c <std+0x38>)
 8008338:	6263      	str	r3, [r4, #36]	; 0x24
 800833a:	4b05      	ldr	r3, [pc, #20]	; (8008350 <std+0x3c>)
 800833c:	62a3      	str	r3, [r4, #40]	; 0x28
 800833e:	4b05      	ldr	r3, [pc, #20]	; (8008354 <std+0x40>)
 8008340:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008342:	4b05      	ldr	r3, [pc, #20]	; (8008358 <std+0x44>)
 8008344:	6224      	str	r4, [r4, #32]
 8008346:	6323      	str	r3, [r4, #48]	; 0x30
 8008348:	bd10      	pop	{r4, pc}
 800834a:	bf00      	nop
 800834c:	08009d89 	.word	0x08009d89
 8008350:	08009dab 	.word	0x08009dab
 8008354:	08009de3 	.word	0x08009de3
 8008358:	08009e07 	.word	0x08009e07

0800835c <_cleanup_r>:
 800835c:	4901      	ldr	r1, [pc, #4]	; (8008364 <_cleanup_r+0x8>)
 800835e:	f000 b8af 	b.w	80084c0 <_fwalk_reent>
 8008362:	bf00      	nop
 8008364:	0800829d 	.word	0x0800829d

08008368 <__sfmoreglue>:
 8008368:	b570      	push	{r4, r5, r6, lr}
 800836a:	1e4a      	subs	r2, r1, #1
 800836c:	2568      	movs	r5, #104	; 0x68
 800836e:	4355      	muls	r5, r2
 8008370:	460e      	mov	r6, r1
 8008372:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008376:	f001 f9df 	bl	8009738 <_malloc_r>
 800837a:	4604      	mov	r4, r0
 800837c:	b140      	cbz	r0, 8008390 <__sfmoreglue+0x28>
 800837e:	2100      	movs	r1, #0
 8008380:	e9c0 1600 	strd	r1, r6, [r0]
 8008384:	300c      	adds	r0, #12
 8008386:	60a0      	str	r0, [r4, #8]
 8008388:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800838c:	f7fd f9de 	bl	800574c <memset>
 8008390:	4620      	mov	r0, r4
 8008392:	bd70      	pop	{r4, r5, r6, pc}

08008394 <__sfp_lock_acquire>:
 8008394:	4801      	ldr	r0, [pc, #4]	; (800839c <__sfp_lock_acquire+0x8>)
 8008396:	f000 bc26 	b.w	8008be6 <__retarget_lock_acquire_recursive>
 800839a:	bf00      	nop
 800839c:	200005b0 	.word	0x200005b0

080083a0 <__sfp_lock_release>:
 80083a0:	4801      	ldr	r0, [pc, #4]	; (80083a8 <__sfp_lock_release+0x8>)
 80083a2:	f000 bc21 	b.w	8008be8 <__retarget_lock_release_recursive>
 80083a6:	bf00      	nop
 80083a8:	200005b0 	.word	0x200005b0

080083ac <__sinit_lock_acquire>:
 80083ac:	4801      	ldr	r0, [pc, #4]	; (80083b4 <__sinit_lock_acquire+0x8>)
 80083ae:	f000 bc1a 	b.w	8008be6 <__retarget_lock_acquire_recursive>
 80083b2:	bf00      	nop
 80083b4:	200005ab 	.word	0x200005ab

080083b8 <__sinit_lock_release>:
 80083b8:	4801      	ldr	r0, [pc, #4]	; (80083c0 <__sinit_lock_release+0x8>)
 80083ba:	f000 bc15 	b.w	8008be8 <__retarget_lock_release_recursive>
 80083be:	bf00      	nop
 80083c0:	200005ab 	.word	0x200005ab

080083c4 <__sinit>:
 80083c4:	b510      	push	{r4, lr}
 80083c6:	4604      	mov	r4, r0
 80083c8:	f7ff fff0 	bl	80083ac <__sinit_lock_acquire>
 80083cc:	69a3      	ldr	r3, [r4, #24]
 80083ce:	b11b      	cbz	r3, 80083d8 <__sinit+0x14>
 80083d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083d4:	f7ff bff0 	b.w	80083b8 <__sinit_lock_release>
 80083d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80083dc:	6523      	str	r3, [r4, #80]	; 0x50
 80083de:	4b13      	ldr	r3, [pc, #76]	; (800842c <__sinit+0x68>)
 80083e0:	4a13      	ldr	r2, [pc, #76]	; (8008430 <__sinit+0x6c>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80083e6:	42a3      	cmp	r3, r4
 80083e8:	bf04      	itt	eq
 80083ea:	2301      	moveq	r3, #1
 80083ec:	61a3      	streq	r3, [r4, #24]
 80083ee:	4620      	mov	r0, r4
 80083f0:	f000 f820 	bl	8008434 <__sfp>
 80083f4:	6060      	str	r0, [r4, #4]
 80083f6:	4620      	mov	r0, r4
 80083f8:	f000 f81c 	bl	8008434 <__sfp>
 80083fc:	60a0      	str	r0, [r4, #8]
 80083fe:	4620      	mov	r0, r4
 8008400:	f000 f818 	bl	8008434 <__sfp>
 8008404:	2200      	movs	r2, #0
 8008406:	60e0      	str	r0, [r4, #12]
 8008408:	2104      	movs	r1, #4
 800840a:	6860      	ldr	r0, [r4, #4]
 800840c:	f7ff ff82 	bl	8008314 <std>
 8008410:	68a0      	ldr	r0, [r4, #8]
 8008412:	2201      	movs	r2, #1
 8008414:	2109      	movs	r1, #9
 8008416:	f7ff ff7d 	bl	8008314 <std>
 800841a:	68e0      	ldr	r0, [r4, #12]
 800841c:	2202      	movs	r2, #2
 800841e:	2112      	movs	r1, #18
 8008420:	f7ff ff78 	bl	8008314 <std>
 8008424:	2301      	movs	r3, #1
 8008426:	61a3      	str	r3, [r4, #24]
 8008428:	e7d2      	b.n	80083d0 <__sinit+0xc>
 800842a:	bf00      	nop
 800842c:	0800b0dc 	.word	0x0800b0dc
 8008430:	0800835d 	.word	0x0800835d

08008434 <__sfp>:
 8008434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008436:	4607      	mov	r7, r0
 8008438:	f7ff ffac 	bl	8008394 <__sfp_lock_acquire>
 800843c:	4b1e      	ldr	r3, [pc, #120]	; (80084b8 <__sfp+0x84>)
 800843e:	681e      	ldr	r6, [r3, #0]
 8008440:	69b3      	ldr	r3, [r6, #24]
 8008442:	b913      	cbnz	r3, 800844a <__sfp+0x16>
 8008444:	4630      	mov	r0, r6
 8008446:	f7ff ffbd 	bl	80083c4 <__sinit>
 800844a:	3648      	adds	r6, #72	; 0x48
 800844c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008450:	3b01      	subs	r3, #1
 8008452:	d503      	bpl.n	800845c <__sfp+0x28>
 8008454:	6833      	ldr	r3, [r6, #0]
 8008456:	b30b      	cbz	r3, 800849c <__sfp+0x68>
 8008458:	6836      	ldr	r6, [r6, #0]
 800845a:	e7f7      	b.n	800844c <__sfp+0x18>
 800845c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008460:	b9d5      	cbnz	r5, 8008498 <__sfp+0x64>
 8008462:	4b16      	ldr	r3, [pc, #88]	; (80084bc <__sfp+0x88>)
 8008464:	60e3      	str	r3, [r4, #12]
 8008466:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800846a:	6665      	str	r5, [r4, #100]	; 0x64
 800846c:	f000 fbba 	bl	8008be4 <__retarget_lock_init_recursive>
 8008470:	f7ff ff96 	bl	80083a0 <__sfp_lock_release>
 8008474:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008478:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800847c:	6025      	str	r5, [r4, #0]
 800847e:	61a5      	str	r5, [r4, #24]
 8008480:	2208      	movs	r2, #8
 8008482:	4629      	mov	r1, r5
 8008484:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008488:	f7fd f960 	bl	800574c <memset>
 800848c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008490:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008494:	4620      	mov	r0, r4
 8008496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008498:	3468      	adds	r4, #104	; 0x68
 800849a:	e7d9      	b.n	8008450 <__sfp+0x1c>
 800849c:	2104      	movs	r1, #4
 800849e:	4638      	mov	r0, r7
 80084a0:	f7ff ff62 	bl	8008368 <__sfmoreglue>
 80084a4:	4604      	mov	r4, r0
 80084a6:	6030      	str	r0, [r6, #0]
 80084a8:	2800      	cmp	r0, #0
 80084aa:	d1d5      	bne.n	8008458 <__sfp+0x24>
 80084ac:	f7ff ff78 	bl	80083a0 <__sfp_lock_release>
 80084b0:	230c      	movs	r3, #12
 80084b2:	603b      	str	r3, [r7, #0]
 80084b4:	e7ee      	b.n	8008494 <__sfp+0x60>
 80084b6:	bf00      	nop
 80084b8:	0800b0dc 	.word	0x0800b0dc
 80084bc:	ffff0001 	.word	0xffff0001

080084c0 <_fwalk_reent>:
 80084c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084c4:	4606      	mov	r6, r0
 80084c6:	4688      	mov	r8, r1
 80084c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80084cc:	2700      	movs	r7, #0
 80084ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084d2:	f1b9 0901 	subs.w	r9, r9, #1
 80084d6:	d505      	bpl.n	80084e4 <_fwalk_reent+0x24>
 80084d8:	6824      	ldr	r4, [r4, #0]
 80084da:	2c00      	cmp	r4, #0
 80084dc:	d1f7      	bne.n	80084ce <_fwalk_reent+0xe>
 80084de:	4638      	mov	r0, r7
 80084e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084e4:	89ab      	ldrh	r3, [r5, #12]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d907      	bls.n	80084fa <_fwalk_reent+0x3a>
 80084ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084ee:	3301      	adds	r3, #1
 80084f0:	d003      	beq.n	80084fa <_fwalk_reent+0x3a>
 80084f2:	4629      	mov	r1, r5
 80084f4:	4630      	mov	r0, r6
 80084f6:	47c0      	blx	r8
 80084f8:	4307      	orrs	r7, r0
 80084fa:	3568      	adds	r5, #104	; 0x68
 80084fc:	e7e9      	b.n	80084d2 <_fwalk_reent+0x12>

080084fe <rshift>:
 80084fe:	6903      	ldr	r3, [r0, #16]
 8008500:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008508:	ea4f 1261 	mov.w	r2, r1, asr #5
 800850c:	f100 0414 	add.w	r4, r0, #20
 8008510:	dd45      	ble.n	800859e <rshift+0xa0>
 8008512:	f011 011f 	ands.w	r1, r1, #31
 8008516:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800851a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800851e:	d10c      	bne.n	800853a <rshift+0x3c>
 8008520:	f100 0710 	add.w	r7, r0, #16
 8008524:	4629      	mov	r1, r5
 8008526:	42b1      	cmp	r1, r6
 8008528:	d334      	bcc.n	8008594 <rshift+0x96>
 800852a:	1a9b      	subs	r3, r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	1eea      	subs	r2, r5, #3
 8008530:	4296      	cmp	r6, r2
 8008532:	bf38      	it	cc
 8008534:	2300      	movcc	r3, #0
 8008536:	4423      	add	r3, r4
 8008538:	e015      	b.n	8008566 <rshift+0x68>
 800853a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800853e:	f1c1 0820 	rsb	r8, r1, #32
 8008542:	40cf      	lsrs	r7, r1
 8008544:	f105 0e04 	add.w	lr, r5, #4
 8008548:	46a1      	mov	r9, r4
 800854a:	4576      	cmp	r6, lr
 800854c:	46f4      	mov	ip, lr
 800854e:	d815      	bhi.n	800857c <rshift+0x7e>
 8008550:	1a9b      	subs	r3, r3, r2
 8008552:	009a      	lsls	r2, r3, #2
 8008554:	3a04      	subs	r2, #4
 8008556:	3501      	adds	r5, #1
 8008558:	42ae      	cmp	r6, r5
 800855a:	bf38      	it	cc
 800855c:	2200      	movcc	r2, #0
 800855e:	18a3      	adds	r3, r4, r2
 8008560:	50a7      	str	r7, [r4, r2]
 8008562:	b107      	cbz	r7, 8008566 <rshift+0x68>
 8008564:	3304      	adds	r3, #4
 8008566:	1b1a      	subs	r2, r3, r4
 8008568:	42a3      	cmp	r3, r4
 800856a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800856e:	bf08      	it	eq
 8008570:	2300      	moveq	r3, #0
 8008572:	6102      	str	r2, [r0, #16]
 8008574:	bf08      	it	eq
 8008576:	6143      	streq	r3, [r0, #20]
 8008578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800857c:	f8dc c000 	ldr.w	ip, [ip]
 8008580:	fa0c fc08 	lsl.w	ip, ip, r8
 8008584:	ea4c 0707 	orr.w	r7, ip, r7
 8008588:	f849 7b04 	str.w	r7, [r9], #4
 800858c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008590:	40cf      	lsrs	r7, r1
 8008592:	e7da      	b.n	800854a <rshift+0x4c>
 8008594:	f851 cb04 	ldr.w	ip, [r1], #4
 8008598:	f847 cf04 	str.w	ip, [r7, #4]!
 800859c:	e7c3      	b.n	8008526 <rshift+0x28>
 800859e:	4623      	mov	r3, r4
 80085a0:	e7e1      	b.n	8008566 <rshift+0x68>

080085a2 <__hexdig_fun>:
 80085a2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80085a6:	2b09      	cmp	r3, #9
 80085a8:	d802      	bhi.n	80085b0 <__hexdig_fun+0xe>
 80085aa:	3820      	subs	r0, #32
 80085ac:	b2c0      	uxtb	r0, r0
 80085ae:	4770      	bx	lr
 80085b0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80085b4:	2b05      	cmp	r3, #5
 80085b6:	d801      	bhi.n	80085bc <__hexdig_fun+0x1a>
 80085b8:	3847      	subs	r0, #71	; 0x47
 80085ba:	e7f7      	b.n	80085ac <__hexdig_fun+0xa>
 80085bc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80085c0:	2b05      	cmp	r3, #5
 80085c2:	d801      	bhi.n	80085c8 <__hexdig_fun+0x26>
 80085c4:	3827      	subs	r0, #39	; 0x27
 80085c6:	e7f1      	b.n	80085ac <__hexdig_fun+0xa>
 80085c8:	2000      	movs	r0, #0
 80085ca:	4770      	bx	lr

080085cc <__gethex>:
 80085cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d0:	ed2d 8b02 	vpush	{d8}
 80085d4:	b089      	sub	sp, #36	; 0x24
 80085d6:	ee08 0a10 	vmov	s16, r0
 80085da:	9304      	str	r3, [sp, #16]
 80085dc:	4bbc      	ldr	r3, [pc, #752]	; (80088d0 <__gethex+0x304>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	9301      	str	r3, [sp, #4]
 80085e2:	4618      	mov	r0, r3
 80085e4:	468b      	mov	fp, r1
 80085e6:	4690      	mov	r8, r2
 80085e8:	f7f7 fdf2 	bl	80001d0 <strlen>
 80085ec:	9b01      	ldr	r3, [sp, #4]
 80085ee:	f8db 2000 	ldr.w	r2, [fp]
 80085f2:	4403      	add	r3, r0
 80085f4:	4682      	mov	sl, r0
 80085f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80085fa:	9305      	str	r3, [sp, #20]
 80085fc:	1c93      	adds	r3, r2, #2
 80085fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008602:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008606:	32fe      	adds	r2, #254	; 0xfe
 8008608:	18d1      	adds	r1, r2, r3
 800860a:	461f      	mov	r7, r3
 800860c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008610:	9100      	str	r1, [sp, #0]
 8008612:	2830      	cmp	r0, #48	; 0x30
 8008614:	d0f8      	beq.n	8008608 <__gethex+0x3c>
 8008616:	f7ff ffc4 	bl	80085a2 <__hexdig_fun>
 800861a:	4604      	mov	r4, r0
 800861c:	2800      	cmp	r0, #0
 800861e:	d13a      	bne.n	8008696 <__gethex+0xca>
 8008620:	9901      	ldr	r1, [sp, #4]
 8008622:	4652      	mov	r2, sl
 8008624:	4638      	mov	r0, r7
 8008626:	f001 fbf2 	bl	8009e0e <strncmp>
 800862a:	4605      	mov	r5, r0
 800862c:	2800      	cmp	r0, #0
 800862e:	d168      	bne.n	8008702 <__gethex+0x136>
 8008630:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008634:	eb07 060a 	add.w	r6, r7, sl
 8008638:	f7ff ffb3 	bl	80085a2 <__hexdig_fun>
 800863c:	2800      	cmp	r0, #0
 800863e:	d062      	beq.n	8008706 <__gethex+0x13a>
 8008640:	4633      	mov	r3, r6
 8008642:	7818      	ldrb	r0, [r3, #0]
 8008644:	2830      	cmp	r0, #48	; 0x30
 8008646:	461f      	mov	r7, r3
 8008648:	f103 0301 	add.w	r3, r3, #1
 800864c:	d0f9      	beq.n	8008642 <__gethex+0x76>
 800864e:	f7ff ffa8 	bl	80085a2 <__hexdig_fun>
 8008652:	2301      	movs	r3, #1
 8008654:	fab0 f480 	clz	r4, r0
 8008658:	0964      	lsrs	r4, r4, #5
 800865a:	4635      	mov	r5, r6
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	463a      	mov	r2, r7
 8008660:	4616      	mov	r6, r2
 8008662:	3201      	adds	r2, #1
 8008664:	7830      	ldrb	r0, [r6, #0]
 8008666:	f7ff ff9c 	bl	80085a2 <__hexdig_fun>
 800866a:	2800      	cmp	r0, #0
 800866c:	d1f8      	bne.n	8008660 <__gethex+0x94>
 800866e:	9901      	ldr	r1, [sp, #4]
 8008670:	4652      	mov	r2, sl
 8008672:	4630      	mov	r0, r6
 8008674:	f001 fbcb 	bl	8009e0e <strncmp>
 8008678:	b980      	cbnz	r0, 800869c <__gethex+0xd0>
 800867a:	b94d      	cbnz	r5, 8008690 <__gethex+0xc4>
 800867c:	eb06 050a 	add.w	r5, r6, sl
 8008680:	462a      	mov	r2, r5
 8008682:	4616      	mov	r6, r2
 8008684:	3201      	adds	r2, #1
 8008686:	7830      	ldrb	r0, [r6, #0]
 8008688:	f7ff ff8b 	bl	80085a2 <__hexdig_fun>
 800868c:	2800      	cmp	r0, #0
 800868e:	d1f8      	bne.n	8008682 <__gethex+0xb6>
 8008690:	1bad      	subs	r5, r5, r6
 8008692:	00ad      	lsls	r5, r5, #2
 8008694:	e004      	b.n	80086a0 <__gethex+0xd4>
 8008696:	2400      	movs	r4, #0
 8008698:	4625      	mov	r5, r4
 800869a:	e7e0      	b.n	800865e <__gethex+0x92>
 800869c:	2d00      	cmp	r5, #0
 800869e:	d1f7      	bne.n	8008690 <__gethex+0xc4>
 80086a0:	7833      	ldrb	r3, [r6, #0]
 80086a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80086a6:	2b50      	cmp	r3, #80	; 0x50
 80086a8:	d13b      	bne.n	8008722 <__gethex+0x156>
 80086aa:	7873      	ldrb	r3, [r6, #1]
 80086ac:	2b2b      	cmp	r3, #43	; 0x2b
 80086ae:	d02c      	beq.n	800870a <__gethex+0x13e>
 80086b0:	2b2d      	cmp	r3, #45	; 0x2d
 80086b2:	d02e      	beq.n	8008712 <__gethex+0x146>
 80086b4:	1c71      	adds	r1, r6, #1
 80086b6:	f04f 0900 	mov.w	r9, #0
 80086ba:	7808      	ldrb	r0, [r1, #0]
 80086bc:	f7ff ff71 	bl	80085a2 <__hexdig_fun>
 80086c0:	1e43      	subs	r3, r0, #1
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	2b18      	cmp	r3, #24
 80086c6:	d82c      	bhi.n	8008722 <__gethex+0x156>
 80086c8:	f1a0 0210 	sub.w	r2, r0, #16
 80086cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80086d0:	f7ff ff67 	bl	80085a2 <__hexdig_fun>
 80086d4:	1e43      	subs	r3, r0, #1
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	2b18      	cmp	r3, #24
 80086da:	d91d      	bls.n	8008718 <__gethex+0x14c>
 80086dc:	f1b9 0f00 	cmp.w	r9, #0
 80086e0:	d000      	beq.n	80086e4 <__gethex+0x118>
 80086e2:	4252      	negs	r2, r2
 80086e4:	4415      	add	r5, r2
 80086e6:	f8cb 1000 	str.w	r1, [fp]
 80086ea:	b1e4      	cbz	r4, 8008726 <__gethex+0x15a>
 80086ec:	9b00      	ldr	r3, [sp, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	bf14      	ite	ne
 80086f2:	2700      	movne	r7, #0
 80086f4:	2706      	moveq	r7, #6
 80086f6:	4638      	mov	r0, r7
 80086f8:	b009      	add	sp, #36	; 0x24
 80086fa:	ecbd 8b02 	vpop	{d8}
 80086fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008702:	463e      	mov	r6, r7
 8008704:	4625      	mov	r5, r4
 8008706:	2401      	movs	r4, #1
 8008708:	e7ca      	b.n	80086a0 <__gethex+0xd4>
 800870a:	f04f 0900 	mov.w	r9, #0
 800870e:	1cb1      	adds	r1, r6, #2
 8008710:	e7d3      	b.n	80086ba <__gethex+0xee>
 8008712:	f04f 0901 	mov.w	r9, #1
 8008716:	e7fa      	b.n	800870e <__gethex+0x142>
 8008718:	230a      	movs	r3, #10
 800871a:	fb03 0202 	mla	r2, r3, r2, r0
 800871e:	3a10      	subs	r2, #16
 8008720:	e7d4      	b.n	80086cc <__gethex+0x100>
 8008722:	4631      	mov	r1, r6
 8008724:	e7df      	b.n	80086e6 <__gethex+0x11a>
 8008726:	1bf3      	subs	r3, r6, r7
 8008728:	3b01      	subs	r3, #1
 800872a:	4621      	mov	r1, r4
 800872c:	2b07      	cmp	r3, #7
 800872e:	dc0b      	bgt.n	8008748 <__gethex+0x17c>
 8008730:	ee18 0a10 	vmov	r0, s16
 8008734:	f000 fae6 	bl	8008d04 <_Balloc>
 8008738:	4604      	mov	r4, r0
 800873a:	b940      	cbnz	r0, 800874e <__gethex+0x182>
 800873c:	4b65      	ldr	r3, [pc, #404]	; (80088d4 <__gethex+0x308>)
 800873e:	4602      	mov	r2, r0
 8008740:	21de      	movs	r1, #222	; 0xde
 8008742:	4865      	ldr	r0, [pc, #404]	; (80088d8 <__gethex+0x30c>)
 8008744:	f001 fb94 	bl	8009e70 <__assert_func>
 8008748:	3101      	adds	r1, #1
 800874a:	105b      	asrs	r3, r3, #1
 800874c:	e7ee      	b.n	800872c <__gethex+0x160>
 800874e:	f100 0914 	add.w	r9, r0, #20
 8008752:	f04f 0b00 	mov.w	fp, #0
 8008756:	f1ca 0301 	rsb	r3, sl, #1
 800875a:	f8cd 9008 	str.w	r9, [sp, #8]
 800875e:	f8cd b000 	str.w	fp, [sp]
 8008762:	9306      	str	r3, [sp, #24]
 8008764:	42b7      	cmp	r7, r6
 8008766:	d340      	bcc.n	80087ea <__gethex+0x21e>
 8008768:	9802      	ldr	r0, [sp, #8]
 800876a:	9b00      	ldr	r3, [sp, #0]
 800876c:	f840 3b04 	str.w	r3, [r0], #4
 8008770:	eba0 0009 	sub.w	r0, r0, r9
 8008774:	1080      	asrs	r0, r0, #2
 8008776:	0146      	lsls	r6, r0, #5
 8008778:	6120      	str	r0, [r4, #16]
 800877a:	4618      	mov	r0, r3
 800877c:	f000 fbb8 	bl	8008ef0 <__hi0bits>
 8008780:	1a30      	subs	r0, r6, r0
 8008782:	f8d8 6000 	ldr.w	r6, [r8]
 8008786:	42b0      	cmp	r0, r6
 8008788:	dd63      	ble.n	8008852 <__gethex+0x286>
 800878a:	1b87      	subs	r7, r0, r6
 800878c:	4639      	mov	r1, r7
 800878e:	4620      	mov	r0, r4
 8008790:	f000 ff52 	bl	8009638 <__any_on>
 8008794:	4682      	mov	sl, r0
 8008796:	b1a8      	cbz	r0, 80087c4 <__gethex+0x1f8>
 8008798:	1e7b      	subs	r3, r7, #1
 800879a:	1159      	asrs	r1, r3, #5
 800879c:	f003 021f 	and.w	r2, r3, #31
 80087a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80087a4:	f04f 0a01 	mov.w	sl, #1
 80087a8:	fa0a f202 	lsl.w	r2, sl, r2
 80087ac:	420a      	tst	r2, r1
 80087ae:	d009      	beq.n	80087c4 <__gethex+0x1f8>
 80087b0:	4553      	cmp	r3, sl
 80087b2:	dd05      	ble.n	80087c0 <__gethex+0x1f4>
 80087b4:	1eb9      	subs	r1, r7, #2
 80087b6:	4620      	mov	r0, r4
 80087b8:	f000 ff3e 	bl	8009638 <__any_on>
 80087bc:	2800      	cmp	r0, #0
 80087be:	d145      	bne.n	800884c <__gethex+0x280>
 80087c0:	f04f 0a02 	mov.w	sl, #2
 80087c4:	4639      	mov	r1, r7
 80087c6:	4620      	mov	r0, r4
 80087c8:	f7ff fe99 	bl	80084fe <rshift>
 80087cc:	443d      	add	r5, r7
 80087ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80087d2:	42ab      	cmp	r3, r5
 80087d4:	da4c      	bge.n	8008870 <__gethex+0x2a4>
 80087d6:	ee18 0a10 	vmov	r0, s16
 80087da:	4621      	mov	r1, r4
 80087dc:	f000 fad2 	bl	8008d84 <_Bfree>
 80087e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80087e2:	2300      	movs	r3, #0
 80087e4:	6013      	str	r3, [r2, #0]
 80087e6:	27a3      	movs	r7, #163	; 0xa3
 80087e8:	e785      	b.n	80086f6 <__gethex+0x12a>
 80087ea:	1e73      	subs	r3, r6, #1
 80087ec:	9a05      	ldr	r2, [sp, #20]
 80087ee:	9303      	str	r3, [sp, #12]
 80087f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d019      	beq.n	800882c <__gethex+0x260>
 80087f8:	f1bb 0f20 	cmp.w	fp, #32
 80087fc:	d107      	bne.n	800880e <__gethex+0x242>
 80087fe:	9b02      	ldr	r3, [sp, #8]
 8008800:	9a00      	ldr	r2, [sp, #0]
 8008802:	f843 2b04 	str.w	r2, [r3], #4
 8008806:	9302      	str	r3, [sp, #8]
 8008808:	2300      	movs	r3, #0
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	469b      	mov	fp, r3
 800880e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008812:	f7ff fec6 	bl	80085a2 <__hexdig_fun>
 8008816:	9b00      	ldr	r3, [sp, #0]
 8008818:	f000 000f 	and.w	r0, r0, #15
 800881c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008820:	4303      	orrs	r3, r0
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	f10b 0b04 	add.w	fp, fp, #4
 8008828:	9b03      	ldr	r3, [sp, #12]
 800882a:	e00d      	b.n	8008848 <__gethex+0x27c>
 800882c:	9b03      	ldr	r3, [sp, #12]
 800882e:	9a06      	ldr	r2, [sp, #24]
 8008830:	4413      	add	r3, r2
 8008832:	42bb      	cmp	r3, r7
 8008834:	d3e0      	bcc.n	80087f8 <__gethex+0x22c>
 8008836:	4618      	mov	r0, r3
 8008838:	9901      	ldr	r1, [sp, #4]
 800883a:	9307      	str	r3, [sp, #28]
 800883c:	4652      	mov	r2, sl
 800883e:	f001 fae6 	bl	8009e0e <strncmp>
 8008842:	9b07      	ldr	r3, [sp, #28]
 8008844:	2800      	cmp	r0, #0
 8008846:	d1d7      	bne.n	80087f8 <__gethex+0x22c>
 8008848:	461e      	mov	r6, r3
 800884a:	e78b      	b.n	8008764 <__gethex+0x198>
 800884c:	f04f 0a03 	mov.w	sl, #3
 8008850:	e7b8      	b.n	80087c4 <__gethex+0x1f8>
 8008852:	da0a      	bge.n	800886a <__gethex+0x29e>
 8008854:	1a37      	subs	r7, r6, r0
 8008856:	4621      	mov	r1, r4
 8008858:	ee18 0a10 	vmov	r0, s16
 800885c:	463a      	mov	r2, r7
 800885e:	f000 fcad 	bl	80091bc <__lshift>
 8008862:	1bed      	subs	r5, r5, r7
 8008864:	4604      	mov	r4, r0
 8008866:	f100 0914 	add.w	r9, r0, #20
 800886a:	f04f 0a00 	mov.w	sl, #0
 800886e:	e7ae      	b.n	80087ce <__gethex+0x202>
 8008870:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008874:	42a8      	cmp	r0, r5
 8008876:	dd72      	ble.n	800895e <__gethex+0x392>
 8008878:	1b45      	subs	r5, r0, r5
 800887a:	42ae      	cmp	r6, r5
 800887c:	dc36      	bgt.n	80088ec <__gethex+0x320>
 800887e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008882:	2b02      	cmp	r3, #2
 8008884:	d02a      	beq.n	80088dc <__gethex+0x310>
 8008886:	2b03      	cmp	r3, #3
 8008888:	d02c      	beq.n	80088e4 <__gethex+0x318>
 800888a:	2b01      	cmp	r3, #1
 800888c:	d115      	bne.n	80088ba <__gethex+0x2ee>
 800888e:	42ae      	cmp	r6, r5
 8008890:	d113      	bne.n	80088ba <__gethex+0x2ee>
 8008892:	2e01      	cmp	r6, #1
 8008894:	d10b      	bne.n	80088ae <__gethex+0x2e2>
 8008896:	9a04      	ldr	r2, [sp, #16]
 8008898:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800889c:	6013      	str	r3, [r2, #0]
 800889e:	2301      	movs	r3, #1
 80088a0:	6123      	str	r3, [r4, #16]
 80088a2:	f8c9 3000 	str.w	r3, [r9]
 80088a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088a8:	2762      	movs	r7, #98	; 0x62
 80088aa:	601c      	str	r4, [r3, #0]
 80088ac:	e723      	b.n	80086f6 <__gethex+0x12a>
 80088ae:	1e71      	subs	r1, r6, #1
 80088b0:	4620      	mov	r0, r4
 80088b2:	f000 fec1 	bl	8009638 <__any_on>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d1ed      	bne.n	8008896 <__gethex+0x2ca>
 80088ba:	ee18 0a10 	vmov	r0, s16
 80088be:	4621      	mov	r1, r4
 80088c0:	f000 fa60 	bl	8008d84 <_Bfree>
 80088c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80088c6:	2300      	movs	r3, #0
 80088c8:	6013      	str	r3, [r2, #0]
 80088ca:	2750      	movs	r7, #80	; 0x50
 80088cc:	e713      	b.n	80086f6 <__gethex+0x12a>
 80088ce:	bf00      	nop
 80088d0:	0800b3d4 	.word	0x0800b3d4
 80088d4:	0800b2f4 	.word	0x0800b2f4
 80088d8:	0800b368 	.word	0x0800b368
 80088dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1eb      	bne.n	80088ba <__gethex+0x2ee>
 80088e2:	e7d8      	b.n	8008896 <__gethex+0x2ca>
 80088e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1d5      	bne.n	8008896 <__gethex+0x2ca>
 80088ea:	e7e6      	b.n	80088ba <__gethex+0x2ee>
 80088ec:	1e6f      	subs	r7, r5, #1
 80088ee:	f1ba 0f00 	cmp.w	sl, #0
 80088f2:	d131      	bne.n	8008958 <__gethex+0x38c>
 80088f4:	b127      	cbz	r7, 8008900 <__gethex+0x334>
 80088f6:	4639      	mov	r1, r7
 80088f8:	4620      	mov	r0, r4
 80088fa:	f000 fe9d 	bl	8009638 <__any_on>
 80088fe:	4682      	mov	sl, r0
 8008900:	117b      	asrs	r3, r7, #5
 8008902:	2101      	movs	r1, #1
 8008904:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008908:	f007 071f 	and.w	r7, r7, #31
 800890c:	fa01 f707 	lsl.w	r7, r1, r7
 8008910:	421f      	tst	r7, r3
 8008912:	4629      	mov	r1, r5
 8008914:	4620      	mov	r0, r4
 8008916:	bf18      	it	ne
 8008918:	f04a 0a02 	orrne.w	sl, sl, #2
 800891c:	1b76      	subs	r6, r6, r5
 800891e:	f7ff fdee 	bl	80084fe <rshift>
 8008922:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008926:	2702      	movs	r7, #2
 8008928:	f1ba 0f00 	cmp.w	sl, #0
 800892c:	d048      	beq.n	80089c0 <__gethex+0x3f4>
 800892e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008932:	2b02      	cmp	r3, #2
 8008934:	d015      	beq.n	8008962 <__gethex+0x396>
 8008936:	2b03      	cmp	r3, #3
 8008938:	d017      	beq.n	800896a <__gethex+0x39e>
 800893a:	2b01      	cmp	r3, #1
 800893c:	d109      	bne.n	8008952 <__gethex+0x386>
 800893e:	f01a 0f02 	tst.w	sl, #2
 8008942:	d006      	beq.n	8008952 <__gethex+0x386>
 8008944:	f8d9 0000 	ldr.w	r0, [r9]
 8008948:	ea4a 0a00 	orr.w	sl, sl, r0
 800894c:	f01a 0f01 	tst.w	sl, #1
 8008950:	d10e      	bne.n	8008970 <__gethex+0x3a4>
 8008952:	f047 0710 	orr.w	r7, r7, #16
 8008956:	e033      	b.n	80089c0 <__gethex+0x3f4>
 8008958:	f04f 0a01 	mov.w	sl, #1
 800895c:	e7d0      	b.n	8008900 <__gethex+0x334>
 800895e:	2701      	movs	r7, #1
 8008960:	e7e2      	b.n	8008928 <__gethex+0x35c>
 8008962:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008964:	f1c3 0301 	rsb	r3, r3, #1
 8008968:	9315      	str	r3, [sp, #84]	; 0x54
 800896a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800896c:	2b00      	cmp	r3, #0
 800896e:	d0f0      	beq.n	8008952 <__gethex+0x386>
 8008970:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008974:	f104 0314 	add.w	r3, r4, #20
 8008978:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800897c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008980:	f04f 0c00 	mov.w	ip, #0
 8008984:	4618      	mov	r0, r3
 8008986:	f853 2b04 	ldr.w	r2, [r3], #4
 800898a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800898e:	d01c      	beq.n	80089ca <__gethex+0x3fe>
 8008990:	3201      	adds	r2, #1
 8008992:	6002      	str	r2, [r0, #0]
 8008994:	2f02      	cmp	r7, #2
 8008996:	f104 0314 	add.w	r3, r4, #20
 800899a:	d13f      	bne.n	8008a1c <__gethex+0x450>
 800899c:	f8d8 2000 	ldr.w	r2, [r8]
 80089a0:	3a01      	subs	r2, #1
 80089a2:	42b2      	cmp	r2, r6
 80089a4:	d10a      	bne.n	80089bc <__gethex+0x3f0>
 80089a6:	1171      	asrs	r1, r6, #5
 80089a8:	2201      	movs	r2, #1
 80089aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80089ae:	f006 061f 	and.w	r6, r6, #31
 80089b2:	fa02 f606 	lsl.w	r6, r2, r6
 80089b6:	421e      	tst	r6, r3
 80089b8:	bf18      	it	ne
 80089ba:	4617      	movne	r7, r2
 80089bc:	f047 0720 	orr.w	r7, r7, #32
 80089c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80089c2:	601c      	str	r4, [r3, #0]
 80089c4:	9b04      	ldr	r3, [sp, #16]
 80089c6:	601d      	str	r5, [r3, #0]
 80089c8:	e695      	b.n	80086f6 <__gethex+0x12a>
 80089ca:	4299      	cmp	r1, r3
 80089cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80089d0:	d8d8      	bhi.n	8008984 <__gethex+0x3b8>
 80089d2:	68a3      	ldr	r3, [r4, #8]
 80089d4:	459b      	cmp	fp, r3
 80089d6:	db19      	blt.n	8008a0c <__gethex+0x440>
 80089d8:	6861      	ldr	r1, [r4, #4]
 80089da:	ee18 0a10 	vmov	r0, s16
 80089de:	3101      	adds	r1, #1
 80089e0:	f000 f990 	bl	8008d04 <_Balloc>
 80089e4:	4681      	mov	r9, r0
 80089e6:	b918      	cbnz	r0, 80089f0 <__gethex+0x424>
 80089e8:	4b1a      	ldr	r3, [pc, #104]	; (8008a54 <__gethex+0x488>)
 80089ea:	4602      	mov	r2, r0
 80089ec:	2184      	movs	r1, #132	; 0x84
 80089ee:	e6a8      	b.n	8008742 <__gethex+0x176>
 80089f0:	6922      	ldr	r2, [r4, #16]
 80089f2:	3202      	adds	r2, #2
 80089f4:	f104 010c 	add.w	r1, r4, #12
 80089f8:	0092      	lsls	r2, r2, #2
 80089fa:	300c      	adds	r0, #12
 80089fc:	f000 f974 	bl	8008ce8 <memcpy>
 8008a00:	4621      	mov	r1, r4
 8008a02:	ee18 0a10 	vmov	r0, s16
 8008a06:	f000 f9bd 	bl	8008d84 <_Bfree>
 8008a0a:	464c      	mov	r4, r9
 8008a0c:	6923      	ldr	r3, [r4, #16]
 8008a0e:	1c5a      	adds	r2, r3, #1
 8008a10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a14:	6122      	str	r2, [r4, #16]
 8008a16:	2201      	movs	r2, #1
 8008a18:	615a      	str	r2, [r3, #20]
 8008a1a:	e7bb      	b.n	8008994 <__gethex+0x3c8>
 8008a1c:	6922      	ldr	r2, [r4, #16]
 8008a1e:	455a      	cmp	r2, fp
 8008a20:	dd0b      	ble.n	8008a3a <__gethex+0x46e>
 8008a22:	2101      	movs	r1, #1
 8008a24:	4620      	mov	r0, r4
 8008a26:	f7ff fd6a 	bl	80084fe <rshift>
 8008a2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a2e:	3501      	adds	r5, #1
 8008a30:	42ab      	cmp	r3, r5
 8008a32:	f6ff aed0 	blt.w	80087d6 <__gethex+0x20a>
 8008a36:	2701      	movs	r7, #1
 8008a38:	e7c0      	b.n	80089bc <__gethex+0x3f0>
 8008a3a:	f016 061f 	ands.w	r6, r6, #31
 8008a3e:	d0fa      	beq.n	8008a36 <__gethex+0x46a>
 8008a40:	449a      	add	sl, r3
 8008a42:	f1c6 0620 	rsb	r6, r6, #32
 8008a46:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008a4a:	f000 fa51 	bl	8008ef0 <__hi0bits>
 8008a4e:	42b0      	cmp	r0, r6
 8008a50:	dbe7      	blt.n	8008a22 <__gethex+0x456>
 8008a52:	e7f0      	b.n	8008a36 <__gethex+0x46a>
 8008a54:	0800b2f4 	.word	0x0800b2f4

08008a58 <L_shift>:
 8008a58:	f1c2 0208 	rsb	r2, r2, #8
 8008a5c:	0092      	lsls	r2, r2, #2
 8008a5e:	b570      	push	{r4, r5, r6, lr}
 8008a60:	f1c2 0620 	rsb	r6, r2, #32
 8008a64:	6843      	ldr	r3, [r0, #4]
 8008a66:	6804      	ldr	r4, [r0, #0]
 8008a68:	fa03 f506 	lsl.w	r5, r3, r6
 8008a6c:	432c      	orrs	r4, r5
 8008a6e:	40d3      	lsrs	r3, r2
 8008a70:	6004      	str	r4, [r0, #0]
 8008a72:	f840 3f04 	str.w	r3, [r0, #4]!
 8008a76:	4288      	cmp	r0, r1
 8008a78:	d3f4      	bcc.n	8008a64 <L_shift+0xc>
 8008a7a:	bd70      	pop	{r4, r5, r6, pc}

08008a7c <__match>:
 8008a7c:	b530      	push	{r4, r5, lr}
 8008a7e:	6803      	ldr	r3, [r0, #0]
 8008a80:	3301      	adds	r3, #1
 8008a82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a86:	b914      	cbnz	r4, 8008a8e <__match+0x12>
 8008a88:	6003      	str	r3, [r0, #0]
 8008a8a:	2001      	movs	r0, #1
 8008a8c:	bd30      	pop	{r4, r5, pc}
 8008a8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a92:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008a96:	2d19      	cmp	r5, #25
 8008a98:	bf98      	it	ls
 8008a9a:	3220      	addls	r2, #32
 8008a9c:	42a2      	cmp	r2, r4
 8008a9e:	d0f0      	beq.n	8008a82 <__match+0x6>
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	e7f3      	b.n	8008a8c <__match+0x10>

08008aa4 <__hexnan>:
 8008aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa8:	680b      	ldr	r3, [r1, #0]
 8008aaa:	6801      	ldr	r1, [r0, #0]
 8008aac:	115e      	asrs	r6, r3, #5
 8008aae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008ab2:	f013 031f 	ands.w	r3, r3, #31
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	bf18      	it	ne
 8008aba:	3604      	addne	r6, #4
 8008abc:	2500      	movs	r5, #0
 8008abe:	1f37      	subs	r7, r6, #4
 8008ac0:	4682      	mov	sl, r0
 8008ac2:	4690      	mov	r8, r2
 8008ac4:	9301      	str	r3, [sp, #4]
 8008ac6:	f846 5c04 	str.w	r5, [r6, #-4]
 8008aca:	46b9      	mov	r9, r7
 8008acc:	463c      	mov	r4, r7
 8008ace:	9502      	str	r5, [sp, #8]
 8008ad0:	46ab      	mov	fp, r5
 8008ad2:	784a      	ldrb	r2, [r1, #1]
 8008ad4:	1c4b      	adds	r3, r1, #1
 8008ad6:	9303      	str	r3, [sp, #12]
 8008ad8:	b342      	cbz	r2, 8008b2c <__hexnan+0x88>
 8008ada:	4610      	mov	r0, r2
 8008adc:	9105      	str	r1, [sp, #20]
 8008ade:	9204      	str	r2, [sp, #16]
 8008ae0:	f7ff fd5f 	bl	80085a2 <__hexdig_fun>
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	d14f      	bne.n	8008b88 <__hexnan+0xe4>
 8008ae8:	9a04      	ldr	r2, [sp, #16]
 8008aea:	9905      	ldr	r1, [sp, #20]
 8008aec:	2a20      	cmp	r2, #32
 8008aee:	d818      	bhi.n	8008b22 <__hexnan+0x7e>
 8008af0:	9b02      	ldr	r3, [sp, #8]
 8008af2:	459b      	cmp	fp, r3
 8008af4:	dd13      	ble.n	8008b1e <__hexnan+0x7a>
 8008af6:	454c      	cmp	r4, r9
 8008af8:	d206      	bcs.n	8008b08 <__hexnan+0x64>
 8008afa:	2d07      	cmp	r5, #7
 8008afc:	dc04      	bgt.n	8008b08 <__hexnan+0x64>
 8008afe:	462a      	mov	r2, r5
 8008b00:	4649      	mov	r1, r9
 8008b02:	4620      	mov	r0, r4
 8008b04:	f7ff ffa8 	bl	8008a58 <L_shift>
 8008b08:	4544      	cmp	r4, r8
 8008b0a:	d950      	bls.n	8008bae <__hexnan+0x10a>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	f1a4 0904 	sub.w	r9, r4, #4
 8008b12:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b16:	f8cd b008 	str.w	fp, [sp, #8]
 8008b1a:	464c      	mov	r4, r9
 8008b1c:	461d      	mov	r5, r3
 8008b1e:	9903      	ldr	r1, [sp, #12]
 8008b20:	e7d7      	b.n	8008ad2 <__hexnan+0x2e>
 8008b22:	2a29      	cmp	r2, #41	; 0x29
 8008b24:	d156      	bne.n	8008bd4 <__hexnan+0x130>
 8008b26:	3102      	adds	r1, #2
 8008b28:	f8ca 1000 	str.w	r1, [sl]
 8008b2c:	f1bb 0f00 	cmp.w	fp, #0
 8008b30:	d050      	beq.n	8008bd4 <__hexnan+0x130>
 8008b32:	454c      	cmp	r4, r9
 8008b34:	d206      	bcs.n	8008b44 <__hexnan+0xa0>
 8008b36:	2d07      	cmp	r5, #7
 8008b38:	dc04      	bgt.n	8008b44 <__hexnan+0xa0>
 8008b3a:	462a      	mov	r2, r5
 8008b3c:	4649      	mov	r1, r9
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f7ff ff8a 	bl	8008a58 <L_shift>
 8008b44:	4544      	cmp	r4, r8
 8008b46:	d934      	bls.n	8008bb2 <__hexnan+0x10e>
 8008b48:	f1a8 0204 	sub.w	r2, r8, #4
 8008b4c:	4623      	mov	r3, r4
 8008b4e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008b52:	f842 1f04 	str.w	r1, [r2, #4]!
 8008b56:	429f      	cmp	r7, r3
 8008b58:	d2f9      	bcs.n	8008b4e <__hexnan+0xaa>
 8008b5a:	1b3b      	subs	r3, r7, r4
 8008b5c:	f023 0303 	bic.w	r3, r3, #3
 8008b60:	3304      	adds	r3, #4
 8008b62:	3401      	adds	r4, #1
 8008b64:	3e03      	subs	r6, #3
 8008b66:	42b4      	cmp	r4, r6
 8008b68:	bf88      	it	hi
 8008b6a:	2304      	movhi	r3, #4
 8008b6c:	4443      	add	r3, r8
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f843 2b04 	str.w	r2, [r3], #4
 8008b74:	429f      	cmp	r7, r3
 8008b76:	d2fb      	bcs.n	8008b70 <__hexnan+0xcc>
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	b91b      	cbnz	r3, 8008b84 <__hexnan+0xe0>
 8008b7c:	4547      	cmp	r7, r8
 8008b7e:	d127      	bne.n	8008bd0 <__hexnan+0x12c>
 8008b80:	2301      	movs	r3, #1
 8008b82:	603b      	str	r3, [r7, #0]
 8008b84:	2005      	movs	r0, #5
 8008b86:	e026      	b.n	8008bd6 <__hexnan+0x132>
 8008b88:	3501      	adds	r5, #1
 8008b8a:	2d08      	cmp	r5, #8
 8008b8c:	f10b 0b01 	add.w	fp, fp, #1
 8008b90:	dd06      	ble.n	8008ba0 <__hexnan+0xfc>
 8008b92:	4544      	cmp	r4, r8
 8008b94:	d9c3      	bls.n	8008b1e <__hexnan+0x7a>
 8008b96:	2300      	movs	r3, #0
 8008b98:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b9c:	2501      	movs	r5, #1
 8008b9e:	3c04      	subs	r4, #4
 8008ba0:	6822      	ldr	r2, [r4, #0]
 8008ba2:	f000 000f 	and.w	r0, r0, #15
 8008ba6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008baa:	6022      	str	r2, [r4, #0]
 8008bac:	e7b7      	b.n	8008b1e <__hexnan+0x7a>
 8008bae:	2508      	movs	r5, #8
 8008bb0:	e7b5      	b.n	8008b1e <__hexnan+0x7a>
 8008bb2:	9b01      	ldr	r3, [sp, #4]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d0df      	beq.n	8008b78 <__hexnan+0xd4>
 8008bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bbc:	f1c3 0320 	rsb	r3, r3, #32
 8008bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8008bc4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008bc8:	401a      	ands	r2, r3
 8008bca:	f846 2c04 	str.w	r2, [r6, #-4]
 8008bce:	e7d3      	b.n	8008b78 <__hexnan+0xd4>
 8008bd0:	3f04      	subs	r7, #4
 8008bd2:	e7d1      	b.n	8008b78 <__hexnan+0xd4>
 8008bd4:	2004      	movs	r0, #4
 8008bd6:	b007      	add	sp, #28
 8008bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008bdc <_localeconv_r>:
 8008bdc:	4800      	ldr	r0, [pc, #0]	; (8008be0 <_localeconv_r+0x4>)
 8008bde:	4770      	bx	lr
 8008be0:	2000016c 	.word	0x2000016c

08008be4 <__retarget_lock_init_recursive>:
 8008be4:	4770      	bx	lr

08008be6 <__retarget_lock_acquire_recursive>:
 8008be6:	4770      	bx	lr

08008be8 <__retarget_lock_release_recursive>:
 8008be8:	4770      	bx	lr

08008bea <__swhatbuf_r>:
 8008bea:	b570      	push	{r4, r5, r6, lr}
 8008bec:	460e      	mov	r6, r1
 8008bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bf2:	2900      	cmp	r1, #0
 8008bf4:	b096      	sub	sp, #88	; 0x58
 8008bf6:	4614      	mov	r4, r2
 8008bf8:	461d      	mov	r5, r3
 8008bfa:	da07      	bge.n	8008c0c <__swhatbuf_r+0x22>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	602b      	str	r3, [r5, #0]
 8008c00:	89b3      	ldrh	r3, [r6, #12]
 8008c02:	061a      	lsls	r2, r3, #24
 8008c04:	d410      	bmi.n	8008c28 <__swhatbuf_r+0x3e>
 8008c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c0a:	e00e      	b.n	8008c2a <__swhatbuf_r+0x40>
 8008c0c:	466a      	mov	r2, sp
 8008c0e:	f001 f96f 	bl	8009ef0 <_fstat_r>
 8008c12:	2800      	cmp	r0, #0
 8008c14:	dbf2      	blt.n	8008bfc <__swhatbuf_r+0x12>
 8008c16:	9a01      	ldr	r2, [sp, #4]
 8008c18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c20:	425a      	negs	r2, r3
 8008c22:	415a      	adcs	r2, r3
 8008c24:	602a      	str	r2, [r5, #0]
 8008c26:	e7ee      	b.n	8008c06 <__swhatbuf_r+0x1c>
 8008c28:	2340      	movs	r3, #64	; 0x40
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	6023      	str	r3, [r4, #0]
 8008c2e:	b016      	add	sp, #88	; 0x58
 8008c30:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c34 <__smakebuf_r>:
 8008c34:	898b      	ldrh	r3, [r1, #12]
 8008c36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c38:	079d      	lsls	r5, r3, #30
 8008c3a:	4606      	mov	r6, r0
 8008c3c:	460c      	mov	r4, r1
 8008c3e:	d507      	bpl.n	8008c50 <__smakebuf_r+0x1c>
 8008c40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c44:	6023      	str	r3, [r4, #0]
 8008c46:	6123      	str	r3, [r4, #16]
 8008c48:	2301      	movs	r3, #1
 8008c4a:	6163      	str	r3, [r4, #20]
 8008c4c:	b002      	add	sp, #8
 8008c4e:	bd70      	pop	{r4, r5, r6, pc}
 8008c50:	ab01      	add	r3, sp, #4
 8008c52:	466a      	mov	r2, sp
 8008c54:	f7ff ffc9 	bl	8008bea <__swhatbuf_r>
 8008c58:	9900      	ldr	r1, [sp, #0]
 8008c5a:	4605      	mov	r5, r0
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	f000 fd6b 	bl	8009738 <_malloc_r>
 8008c62:	b948      	cbnz	r0, 8008c78 <__smakebuf_r+0x44>
 8008c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c68:	059a      	lsls	r2, r3, #22
 8008c6a:	d4ef      	bmi.n	8008c4c <__smakebuf_r+0x18>
 8008c6c:	f023 0303 	bic.w	r3, r3, #3
 8008c70:	f043 0302 	orr.w	r3, r3, #2
 8008c74:	81a3      	strh	r3, [r4, #12]
 8008c76:	e7e3      	b.n	8008c40 <__smakebuf_r+0xc>
 8008c78:	4b0d      	ldr	r3, [pc, #52]	; (8008cb0 <__smakebuf_r+0x7c>)
 8008c7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	6020      	str	r0, [r4, #0]
 8008c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c84:	81a3      	strh	r3, [r4, #12]
 8008c86:	9b00      	ldr	r3, [sp, #0]
 8008c88:	6163      	str	r3, [r4, #20]
 8008c8a:	9b01      	ldr	r3, [sp, #4]
 8008c8c:	6120      	str	r0, [r4, #16]
 8008c8e:	b15b      	cbz	r3, 8008ca8 <__smakebuf_r+0x74>
 8008c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c94:	4630      	mov	r0, r6
 8008c96:	f001 f93d 	bl	8009f14 <_isatty_r>
 8008c9a:	b128      	cbz	r0, 8008ca8 <__smakebuf_r+0x74>
 8008c9c:	89a3      	ldrh	r3, [r4, #12]
 8008c9e:	f023 0303 	bic.w	r3, r3, #3
 8008ca2:	f043 0301 	orr.w	r3, r3, #1
 8008ca6:	81a3      	strh	r3, [r4, #12]
 8008ca8:	89a0      	ldrh	r0, [r4, #12]
 8008caa:	4305      	orrs	r5, r0
 8008cac:	81a5      	strh	r5, [r4, #12]
 8008cae:	e7cd      	b.n	8008c4c <__smakebuf_r+0x18>
 8008cb0:	0800835d 	.word	0x0800835d

08008cb4 <malloc>:
 8008cb4:	4b02      	ldr	r3, [pc, #8]	; (8008cc0 <malloc+0xc>)
 8008cb6:	4601      	mov	r1, r0
 8008cb8:	6818      	ldr	r0, [r3, #0]
 8008cba:	f000 bd3d 	b.w	8009738 <_malloc_r>
 8008cbe:	bf00      	nop
 8008cc0:	20000014 	.word	0x20000014

08008cc4 <__ascii_mbtowc>:
 8008cc4:	b082      	sub	sp, #8
 8008cc6:	b901      	cbnz	r1, 8008cca <__ascii_mbtowc+0x6>
 8008cc8:	a901      	add	r1, sp, #4
 8008cca:	b142      	cbz	r2, 8008cde <__ascii_mbtowc+0x1a>
 8008ccc:	b14b      	cbz	r3, 8008ce2 <__ascii_mbtowc+0x1e>
 8008cce:	7813      	ldrb	r3, [r2, #0]
 8008cd0:	600b      	str	r3, [r1, #0]
 8008cd2:	7812      	ldrb	r2, [r2, #0]
 8008cd4:	1e10      	subs	r0, r2, #0
 8008cd6:	bf18      	it	ne
 8008cd8:	2001      	movne	r0, #1
 8008cda:	b002      	add	sp, #8
 8008cdc:	4770      	bx	lr
 8008cde:	4610      	mov	r0, r2
 8008ce0:	e7fb      	b.n	8008cda <__ascii_mbtowc+0x16>
 8008ce2:	f06f 0001 	mvn.w	r0, #1
 8008ce6:	e7f8      	b.n	8008cda <__ascii_mbtowc+0x16>

08008ce8 <memcpy>:
 8008ce8:	440a      	add	r2, r1
 8008cea:	4291      	cmp	r1, r2
 8008cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf0:	d100      	bne.n	8008cf4 <memcpy+0xc>
 8008cf2:	4770      	bx	lr
 8008cf4:	b510      	push	{r4, lr}
 8008cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cfe:	4291      	cmp	r1, r2
 8008d00:	d1f9      	bne.n	8008cf6 <memcpy+0xe>
 8008d02:	bd10      	pop	{r4, pc}

08008d04 <_Balloc>:
 8008d04:	b570      	push	{r4, r5, r6, lr}
 8008d06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d08:	4604      	mov	r4, r0
 8008d0a:	460d      	mov	r5, r1
 8008d0c:	b976      	cbnz	r6, 8008d2c <_Balloc+0x28>
 8008d0e:	2010      	movs	r0, #16
 8008d10:	f7ff ffd0 	bl	8008cb4 <malloc>
 8008d14:	4602      	mov	r2, r0
 8008d16:	6260      	str	r0, [r4, #36]	; 0x24
 8008d18:	b920      	cbnz	r0, 8008d24 <_Balloc+0x20>
 8008d1a:	4b18      	ldr	r3, [pc, #96]	; (8008d7c <_Balloc+0x78>)
 8008d1c:	4818      	ldr	r0, [pc, #96]	; (8008d80 <_Balloc+0x7c>)
 8008d1e:	2166      	movs	r1, #102	; 0x66
 8008d20:	f001 f8a6 	bl	8009e70 <__assert_func>
 8008d24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d28:	6006      	str	r6, [r0, #0]
 8008d2a:	60c6      	str	r6, [r0, #12]
 8008d2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d2e:	68f3      	ldr	r3, [r6, #12]
 8008d30:	b183      	cbz	r3, 8008d54 <_Balloc+0x50>
 8008d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d3a:	b9b8      	cbnz	r0, 8008d6c <_Balloc+0x68>
 8008d3c:	2101      	movs	r1, #1
 8008d3e:	fa01 f605 	lsl.w	r6, r1, r5
 8008d42:	1d72      	adds	r2, r6, #5
 8008d44:	0092      	lsls	r2, r2, #2
 8008d46:	4620      	mov	r0, r4
 8008d48:	f000 fc97 	bl	800967a <_calloc_r>
 8008d4c:	b160      	cbz	r0, 8008d68 <_Balloc+0x64>
 8008d4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d52:	e00e      	b.n	8008d72 <_Balloc+0x6e>
 8008d54:	2221      	movs	r2, #33	; 0x21
 8008d56:	2104      	movs	r1, #4
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f000 fc8e 	bl	800967a <_calloc_r>
 8008d5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d60:	60f0      	str	r0, [r6, #12]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1e4      	bne.n	8008d32 <_Balloc+0x2e>
 8008d68:	2000      	movs	r0, #0
 8008d6a:	bd70      	pop	{r4, r5, r6, pc}
 8008d6c:	6802      	ldr	r2, [r0, #0]
 8008d6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d72:	2300      	movs	r3, #0
 8008d74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d78:	e7f7      	b.n	8008d6a <_Balloc+0x66>
 8008d7a:	bf00      	nop
 8008d7c:	0800b27e 	.word	0x0800b27e
 8008d80:	0800b3e8 	.word	0x0800b3e8

08008d84 <_Bfree>:
 8008d84:	b570      	push	{r4, r5, r6, lr}
 8008d86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d88:	4605      	mov	r5, r0
 8008d8a:	460c      	mov	r4, r1
 8008d8c:	b976      	cbnz	r6, 8008dac <_Bfree+0x28>
 8008d8e:	2010      	movs	r0, #16
 8008d90:	f7ff ff90 	bl	8008cb4 <malloc>
 8008d94:	4602      	mov	r2, r0
 8008d96:	6268      	str	r0, [r5, #36]	; 0x24
 8008d98:	b920      	cbnz	r0, 8008da4 <_Bfree+0x20>
 8008d9a:	4b09      	ldr	r3, [pc, #36]	; (8008dc0 <_Bfree+0x3c>)
 8008d9c:	4809      	ldr	r0, [pc, #36]	; (8008dc4 <_Bfree+0x40>)
 8008d9e:	218a      	movs	r1, #138	; 0x8a
 8008da0:	f001 f866 	bl	8009e70 <__assert_func>
 8008da4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008da8:	6006      	str	r6, [r0, #0]
 8008daa:	60c6      	str	r6, [r0, #12]
 8008dac:	b13c      	cbz	r4, 8008dbe <_Bfree+0x3a>
 8008dae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008db0:	6862      	ldr	r2, [r4, #4]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008db8:	6021      	str	r1, [r4, #0]
 8008dba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008dbe:	bd70      	pop	{r4, r5, r6, pc}
 8008dc0:	0800b27e 	.word	0x0800b27e
 8008dc4:	0800b3e8 	.word	0x0800b3e8

08008dc8 <__multadd>:
 8008dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dcc:	690e      	ldr	r6, [r1, #16]
 8008dce:	4607      	mov	r7, r0
 8008dd0:	4698      	mov	r8, r3
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	f101 0014 	add.w	r0, r1, #20
 8008dd8:	2300      	movs	r3, #0
 8008dda:	6805      	ldr	r5, [r0, #0]
 8008ddc:	b2a9      	uxth	r1, r5
 8008dde:	fb02 8101 	mla	r1, r2, r1, r8
 8008de2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008de6:	0c2d      	lsrs	r5, r5, #16
 8008de8:	fb02 c505 	mla	r5, r2, r5, ip
 8008dec:	b289      	uxth	r1, r1
 8008dee:	3301      	adds	r3, #1
 8008df0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008df4:	429e      	cmp	r6, r3
 8008df6:	f840 1b04 	str.w	r1, [r0], #4
 8008dfa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008dfe:	dcec      	bgt.n	8008dda <__multadd+0x12>
 8008e00:	f1b8 0f00 	cmp.w	r8, #0
 8008e04:	d022      	beq.n	8008e4c <__multadd+0x84>
 8008e06:	68a3      	ldr	r3, [r4, #8]
 8008e08:	42b3      	cmp	r3, r6
 8008e0a:	dc19      	bgt.n	8008e40 <__multadd+0x78>
 8008e0c:	6861      	ldr	r1, [r4, #4]
 8008e0e:	4638      	mov	r0, r7
 8008e10:	3101      	adds	r1, #1
 8008e12:	f7ff ff77 	bl	8008d04 <_Balloc>
 8008e16:	4605      	mov	r5, r0
 8008e18:	b928      	cbnz	r0, 8008e26 <__multadd+0x5e>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	4b0d      	ldr	r3, [pc, #52]	; (8008e54 <__multadd+0x8c>)
 8008e1e:	480e      	ldr	r0, [pc, #56]	; (8008e58 <__multadd+0x90>)
 8008e20:	21b5      	movs	r1, #181	; 0xb5
 8008e22:	f001 f825 	bl	8009e70 <__assert_func>
 8008e26:	6922      	ldr	r2, [r4, #16]
 8008e28:	3202      	adds	r2, #2
 8008e2a:	f104 010c 	add.w	r1, r4, #12
 8008e2e:	0092      	lsls	r2, r2, #2
 8008e30:	300c      	adds	r0, #12
 8008e32:	f7ff ff59 	bl	8008ce8 <memcpy>
 8008e36:	4621      	mov	r1, r4
 8008e38:	4638      	mov	r0, r7
 8008e3a:	f7ff ffa3 	bl	8008d84 <_Bfree>
 8008e3e:	462c      	mov	r4, r5
 8008e40:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008e44:	3601      	adds	r6, #1
 8008e46:	f8c3 8014 	str.w	r8, [r3, #20]
 8008e4a:	6126      	str	r6, [r4, #16]
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e52:	bf00      	nop
 8008e54:	0800b2f4 	.word	0x0800b2f4
 8008e58:	0800b3e8 	.word	0x0800b3e8

08008e5c <__s2b>:
 8008e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e60:	460c      	mov	r4, r1
 8008e62:	4615      	mov	r5, r2
 8008e64:	461f      	mov	r7, r3
 8008e66:	2209      	movs	r2, #9
 8008e68:	3308      	adds	r3, #8
 8008e6a:	4606      	mov	r6, r0
 8008e6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e70:	2100      	movs	r1, #0
 8008e72:	2201      	movs	r2, #1
 8008e74:	429a      	cmp	r2, r3
 8008e76:	db09      	blt.n	8008e8c <__s2b+0x30>
 8008e78:	4630      	mov	r0, r6
 8008e7a:	f7ff ff43 	bl	8008d04 <_Balloc>
 8008e7e:	b940      	cbnz	r0, 8008e92 <__s2b+0x36>
 8008e80:	4602      	mov	r2, r0
 8008e82:	4b19      	ldr	r3, [pc, #100]	; (8008ee8 <__s2b+0x8c>)
 8008e84:	4819      	ldr	r0, [pc, #100]	; (8008eec <__s2b+0x90>)
 8008e86:	21ce      	movs	r1, #206	; 0xce
 8008e88:	f000 fff2 	bl	8009e70 <__assert_func>
 8008e8c:	0052      	lsls	r2, r2, #1
 8008e8e:	3101      	adds	r1, #1
 8008e90:	e7f0      	b.n	8008e74 <__s2b+0x18>
 8008e92:	9b08      	ldr	r3, [sp, #32]
 8008e94:	6143      	str	r3, [r0, #20]
 8008e96:	2d09      	cmp	r5, #9
 8008e98:	f04f 0301 	mov.w	r3, #1
 8008e9c:	6103      	str	r3, [r0, #16]
 8008e9e:	dd16      	ble.n	8008ece <__s2b+0x72>
 8008ea0:	f104 0909 	add.w	r9, r4, #9
 8008ea4:	46c8      	mov	r8, r9
 8008ea6:	442c      	add	r4, r5
 8008ea8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008eac:	4601      	mov	r1, r0
 8008eae:	3b30      	subs	r3, #48	; 0x30
 8008eb0:	220a      	movs	r2, #10
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	f7ff ff88 	bl	8008dc8 <__multadd>
 8008eb8:	45a0      	cmp	r8, r4
 8008eba:	d1f5      	bne.n	8008ea8 <__s2b+0x4c>
 8008ebc:	f1a5 0408 	sub.w	r4, r5, #8
 8008ec0:	444c      	add	r4, r9
 8008ec2:	1b2d      	subs	r5, r5, r4
 8008ec4:	1963      	adds	r3, r4, r5
 8008ec6:	42bb      	cmp	r3, r7
 8008ec8:	db04      	blt.n	8008ed4 <__s2b+0x78>
 8008eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ece:	340a      	adds	r4, #10
 8008ed0:	2509      	movs	r5, #9
 8008ed2:	e7f6      	b.n	8008ec2 <__s2b+0x66>
 8008ed4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ed8:	4601      	mov	r1, r0
 8008eda:	3b30      	subs	r3, #48	; 0x30
 8008edc:	220a      	movs	r2, #10
 8008ede:	4630      	mov	r0, r6
 8008ee0:	f7ff ff72 	bl	8008dc8 <__multadd>
 8008ee4:	e7ee      	b.n	8008ec4 <__s2b+0x68>
 8008ee6:	bf00      	nop
 8008ee8:	0800b2f4 	.word	0x0800b2f4
 8008eec:	0800b3e8 	.word	0x0800b3e8

08008ef0 <__hi0bits>:
 8008ef0:	0c03      	lsrs	r3, r0, #16
 8008ef2:	041b      	lsls	r3, r3, #16
 8008ef4:	b9d3      	cbnz	r3, 8008f2c <__hi0bits+0x3c>
 8008ef6:	0400      	lsls	r0, r0, #16
 8008ef8:	2310      	movs	r3, #16
 8008efa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008efe:	bf04      	itt	eq
 8008f00:	0200      	lsleq	r0, r0, #8
 8008f02:	3308      	addeq	r3, #8
 8008f04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008f08:	bf04      	itt	eq
 8008f0a:	0100      	lsleq	r0, r0, #4
 8008f0c:	3304      	addeq	r3, #4
 8008f0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008f12:	bf04      	itt	eq
 8008f14:	0080      	lsleq	r0, r0, #2
 8008f16:	3302      	addeq	r3, #2
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	db05      	blt.n	8008f28 <__hi0bits+0x38>
 8008f1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008f20:	f103 0301 	add.w	r3, r3, #1
 8008f24:	bf08      	it	eq
 8008f26:	2320      	moveq	r3, #32
 8008f28:	4618      	mov	r0, r3
 8008f2a:	4770      	bx	lr
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	e7e4      	b.n	8008efa <__hi0bits+0xa>

08008f30 <__lo0bits>:
 8008f30:	6803      	ldr	r3, [r0, #0]
 8008f32:	f013 0207 	ands.w	r2, r3, #7
 8008f36:	4601      	mov	r1, r0
 8008f38:	d00b      	beq.n	8008f52 <__lo0bits+0x22>
 8008f3a:	07da      	lsls	r2, r3, #31
 8008f3c:	d424      	bmi.n	8008f88 <__lo0bits+0x58>
 8008f3e:	0798      	lsls	r0, r3, #30
 8008f40:	bf49      	itett	mi
 8008f42:	085b      	lsrmi	r3, r3, #1
 8008f44:	089b      	lsrpl	r3, r3, #2
 8008f46:	2001      	movmi	r0, #1
 8008f48:	600b      	strmi	r3, [r1, #0]
 8008f4a:	bf5c      	itt	pl
 8008f4c:	600b      	strpl	r3, [r1, #0]
 8008f4e:	2002      	movpl	r0, #2
 8008f50:	4770      	bx	lr
 8008f52:	b298      	uxth	r0, r3
 8008f54:	b9b0      	cbnz	r0, 8008f84 <__lo0bits+0x54>
 8008f56:	0c1b      	lsrs	r3, r3, #16
 8008f58:	2010      	movs	r0, #16
 8008f5a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008f5e:	bf04      	itt	eq
 8008f60:	0a1b      	lsreq	r3, r3, #8
 8008f62:	3008      	addeq	r0, #8
 8008f64:	071a      	lsls	r2, r3, #28
 8008f66:	bf04      	itt	eq
 8008f68:	091b      	lsreq	r3, r3, #4
 8008f6a:	3004      	addeq	r0, #4
 8008f6c:	079a      	lsls	r2, r3, #30
 8008f6e:	bf04      	itt	eq
 8008f70:	089b      	lsreq	r3, r3, #2
 8008f72:	3002      	addeq	r0, #2
 8008f74:	07da      	lsls	r2, r3, #31
 8008f76:	d403      	bmi.n	8008f80 <__lo0bits+0x50>
 8008f78:	085b      	lsrs	r3, r3, #1
 8008f7a:	f100 0001 	add.w	r0, r0, #1
 8008f7e:	d005      	beq.n	8008f8c <__lo0bits+0x5c>
 8008f80:	600b      	str	r3, [r1, #0]
 8008f82:	4770      	bx	lr
 8008f84:	4610      	mov	r0, r2
 8008f86:	e7e8      	b.n	8008f5a <__lo0bits+0x2a>
 8008f88:	2000      	movs	r0, #0
 8008f8a:	4770      	bx	lr
 8008f8c:	2020      	movs	r0, #32
 8008f8e:	4770      	bx	lr

08008f90 <__i2b>:
 8008f90:	b510      	push	{r4, lr}
 8008f92:	460c      	mov	r4, r1
 8008f94:	2101      	movs	r1, #1
 8008f96:	f7ff feb5 	bl	8008d04 <_Balloc>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	b928      	cbnz	r0, 8008faa <__i2b+0x1a>
 8008f9e:	4b05      	ldr	r3, [pc, #20]	; (8008fb4 <__i2b+0x24>)
 8008fa0:	4805      	ldr	r0, [pc, #20]	; (8008fb8 <__i2b+0x28>)
 8008fa2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008fa6:	f000 ff63 	bl	8009e70 <__assert_func>
 8008faa:	2301      	movs	r3, #1
 8008fac:	6144      	str	r4, [r0, #20]
 8008fae:	6103      	str	r3, [r0, #16]
 8008fb0:	bd10      	pop	{r4, pc}
 8008fb2:	bf00      	nop
 8008fb4:	0800b2f4 	.word	0x0800b2f4
 8008fb8:	0800b3e8 	.word	0x0800b3e8

08008fbc <__multiply>:
 8008fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc0:	4614      	mov	r4, r2
 8008fc2:	690a      	ldr	r2, [r1, #16]
 8008fc4:	6923      	ldr	r3, [r4, #16]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	bfb8      	it	lt
 8008fca:	460b      	movlt	r3, r1
 8008fcc:	460d      	mov	r5, r1
 8008fce:	bfbc      	itt	lt
 8008fd0:	4625      	movlt	r5, r4
 8008fd2:	461c      	movlt	r4, r3
 8008fd4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008fd8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008fdc:	68ab      	ldr	r3, [r5, #8]
 8008fde:	6869      	ldr	r1, [r5, #4]
 8008fe0:	eb0a 0709 	add.w	r7, sl, r9
 8008fe4:	42bb      	cmp	r3, r7
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	bfb8      	it	lt
 8008fea:	3101      	addlt	r1, #1
 8008fec:	f7ff fe8a 	bl	8008d04 <_Balloc>
 8008ff0:	b930      	cbnz	r0, 8009000 <__multiply+0x44>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	4b42      	ldr	r3, [pc, #264]	; (8009100 <__multiply+0x144>)
 8008ff6:	4843      	ldr	r0, [pc, #268]	; (8009104 <__multiply+0x148>)
 8008ff8:	f240 115d 	movw	r1, #349	; 0x15d
 8008ffc:	f000 ff38 	bl	8009e70 <__assert_func>
 8009000:	f100 0614 	add.w	r6, r0, #20
 8009004:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009008:	4633      	mov	r3, r6
 800900a:	2200      	movs	r2, #0
 800900c:	4543      	cmp	r3, r8
 800900e:	d31e      	bcc.n	800904e <__multiply+0x92>
 8009010:	f105 0c14 	add.w	ip, r5, #20
 8009014:	f104 0314 	add.w	r3, r4, #20
 8009018:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800901c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009020:	9202      	str	r2, [sp, #8]
 8009022:	ebac 0205 	sub.w	r2, ip, r5
 8009026:	3a15      	subs	r2, #21
 8009028:	f022 0203 	bic.w	r2, r2, #3
 800902c:	3204      	adds	r2, #4
 800902e:	f105 0115 	add.w	r1, r5, #21
 8009032:	458c      	cmp	ip, r1
 8009034:	bf38      	it	cc
 8009036:	2204      	movcc	r2, #4
 8009038:	9201      	str	r2, [sp, #4]
 800903a:	9a02      	ldr	r2, [sp, #8]
 800903c:	9303      	str	r3, [sp, #12]
 800903e:	429a      	cmp	r2, r3
 8009040:	d808      	bhi.n	8009054 <__multiply+0x98>
 8009042:	2f00      	cmp	r7, #0
 8009044:	dc55      	bgt.n	80090f2 <__multiply+0x136>
 8009046:	6107      	str	r7, [r0, #16]
 8009048:	b005      	add	sp, #20
 800904a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904e:	f843 2b04 	str.w	r2, [r3], #4
 8009052:	e7db      	b.n	800900c <__multiply+0x50>
 8009054:	f8b3 a000 	ldrh.w	sl, [r3]
 8009058:	f1ba 0f00 	cmp.w	sl, #0
 800905c:	d020      	beq.n	80090a0 <__multiply+0xe4>
 800905e:	f105 0e14 	add.w	lr, r5, #20
 8009062:	46b1      	mov	r9, r6
 8009064:	2200      	movs	r2, #0
 8009066:	f85e 4b04 	ldr.w	r4, [lr], #4
 800906a:	f8d9 b000 	ldr.w	fp, [r9]
 800906e:	b2a1      	uxth	r1, r4
 8009070:	fa1f fb8b 	uxth.w	fp, fp
 8009074:	fb0a b101 	mla	r1, sl, r1, fp
 8009078:	4411      	add	r1, r2
 800907a:	f8d9 2000 	ldr.w	r2, [r9]
 800907e:	0c24      	lsrs	r4, r4, #16
 8009080:	0c12      	lsrs	r2, r2, #16
 8009082:	fb0a 2404 	mla	r4, sl, r4, r2
 8009086:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800908a:	b289      	uxth	r1, r1
 800908c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009090:	45f4      	cmp	ip, lr
 8009092:	f849 1b04 	str.w	r1, [r9], #4
 8009096:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800909a:	d8e4      	bhi.n	8009066 <__multiply+0xaa>
 800909c:	9901      	ldr	r1, [sp, #4]
 800909e:	5072      	str	r2, [r6, r1]
 80090a0:	9a03      	ldr	r2, [sp, #12]
 80090a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80090a6:	3304      	adds	r3, #4
 80090a8:	f1b9 0f00 	cmp.w	r9, #0
 80090ac:	d01f      	beq.n	80090ee <__multiply+0x132>
 80090ae:	6834      	ldr	r4, [r6, #0]
 80090b0:	f105 0114 	add.w	r1, r5, #20
 80090b4:	46b6      	mov	lr, r6
 80090b6:	f04f 0a00 	mov.w	sl, #0
 80090ba:	880a      	ldrh	r2, [r1, #0]
 80090bc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80090c0:	fb09 b202 	mla	r2, r9, r2, fp
 80090c4:	4492      	add	sl, r2
 80090c6:	b2a4      	uxth	r4, r4
 80090c8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80090cc:	f84e 4b04 	str.w	r4, [lr], #4
 80090d0:	f851 4b04 	ldr.w	r4, [r1], #4
 80090d4:	f8be 2000 	ldrh.w	r2, [lr]
 80090d8:	0c24      	lsrs	r4, r4, #16
 80090da:	fb09 2404 	mla	r4, r9, r4, r2
 80090de:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80090e2:	458c      	cmp	ip, r1
 80090e4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80090e8:	d8e7      	bhi.n	80090ba <__multiply+0xfe>
 80090ea:	9a01      	ldr	r2, [sp, #4]
 80090ec:	50b4      	str	r4, [r6, r2]
 80090ee:	3604      	adds	r6, #4
 80090f0:	e7a3      	b.n	800903a <__multiply+0x7e>
 80090f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1a5      	bne.n	8009046 <__multiply+0x8a>
 80090fa:	3f01      	subs	r7, #1
 80090fc:	e7a1      	b.n	8009042 <__multiply+0x86>
 80090fe:	bf00      	nop
 8009100:	0800b2f4 	.word	0x0800b2f4
 8009104:	0800b3e8 	.word	0x0800b3e8

08009108 <__pow5mult>:
 8009108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800910c:	4615      	mov	r5, r2
 800910e:	f012 0203 	ands.w	r2, r2, #3
 8009112:	4606      	mov	r6, r0
 8009114:	460f      	mov	r7, r1
 8009116:	d007      	beq.n	8009128 <__pow5mult+0x20>
 8009118:	4c25      	ldr	r4, [pc, #148]	; (80091b0 <__pow5mult+0xa8>)
 800911a:	3a01      	subs	r2, #1
 800911c:	2300      	movs	r3, #0
 800911e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009122:	f7ff fe51 	bl	8008dc8 <__multadd>
 8009126:	4607      	mov	r7, r0
 8009128:	10ad      	asrs	r5, r5, #2
 800912a:	d03d      	beq.n	80091a8 <__pow5mult+0xa0>
 800912c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800912e:	b97c      	cbnz	r4, 8009150 <__pow5mult+0x48>
 8009130:	2010      	movs	r0, #16
 8009132:	f7ff fdbf 	bl	8008cb4 <malloc>
 8009136:	4602      	mov	r2, r0
 8009138:	6270      	str	r0, [r6, #36]	; 0x24
 800913a:	b928      	cbnz	r0, 8009148 <__pow5mult+0x40>
 800913c:	4b1d      	ldr	r3, [pc, #116]	; (80091b4 <__pow5mult+0xac>)
 800913e:	481e      	ldr	r0, [pc, #120]	; (80091b8 <__pow5mult+0xb0>)
 8009140:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009144:	f000 fe94 	bl	8009e70 <__assert_func>
 8009148:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800914c:	6004      	str	r4, [r0, #0]
 800914e:	60c4      	str	r4, [r0, #12]
 8009150:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009154:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009158:	b94c      	cbnz	r4, 800916e <__pow5mult+0x66>
 800915a:	f240 2171 	movw	r1, #625	; 0x271
 800915e:	4630      	mov	r0, r6
 8009160:	f7ff ff16 	bl	8008f90 <__i2b>
 8009164:	2300      	movs	r3, #0
 8009166:	f8c8 0008 	str.w	r0, [r8, #8]
 800916a:	4604      	mov	r4, r0
 800916c:	6003      	str	r3, [r0, #0]
 800916e:	f04f 0900 	mov.w	r9, #0
 8009172:	07eb      	lsls	r3, r5, #31
 8009174:	d50a      	bpl.n	800918c <__pow5mult+0x84>
 8009176:	4639      	mov	r1, r7
 8009178:	4622      	mov	r2, r4
 800917a:	4630      	mov	r0, r6
 800917c:	f7ff ff1e 	bl	8008fbc <__multiply>
 8009180:	4639      	mov	r1, r7
 8009182:	4680      	mov	r8, r0
 8009184:	4630      	mov	r0, r6
 8009186:	f7ff fdfd 	bl	8008d84 <_Bfree>
 800918a:	4647      	mov	r7, r8
 800918c:	106d      	asrs	r5, r5, #1
 800918e:	d00b      	beq.n	80091a8 <__pow5mult+0xa0>
 8009190:	6820      	ldr	r0, [r4, #0]
 8009192:	b938      	cbnz	r0, 80091a4 <__pow5mult+0x9c>
 8009194:	4622      	mov	r2, r4
 8009196:	4621      	mov	r1, r4
 8009198:	4630      	mov	r0, r6
 800919a:	f7ff ff0f 	bl	8008fbc <__multiply>
 800919e:	6020      	str	r0, [r4, #0]
 80091a0:	f8c0 9000 	str.w	r9, [r0]
 80091a4:	4604      	mov	r4, r0
 80091a6:	e7e4      	b.n	8009172 <__pow5mult+0x6a>
 80091a8:	4638      	mov	r0, r7
 80091aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ae:	bf00      	nop
 80091b0:	0800b538 	.word	0x0800b538
 80091b4:	0800b27e 	.word	0x0800b27e
 80091b8:	0800b3e8 	.word	0x0800b3e8

080091bc <__lshift>:
 80091bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091c0:	460c      	mov	r4, r1
 80091c2:	6849      	ldr	r1, [r1, #4]
 80091c4:	6923      	ldr	r3, [r4, #16]
 80091c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091ca:	68a3      	ldr	r3, [r4, #8]
 80091cc:	4607      	mov	r7, r0
 80091ce:	4691      	mov	r9, r2
 80091d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091d4:	f108 0601 	add.w	r6, r8, #1
 80091d8:	42b3      	cmp	r3, r6
 80091da:	db0b      	blt.n	80091f4 <__lshift+0x38>
 80091dc:	4638      	mov	r0, r7
 80091de:	f7ff fd91 	bl	8008d04 <_Balloc>
 80091e2:	4605      	mov	r5, r0
 80091e4:	b948      	cbnz	r0, 80091fa <__lshift+0x3e>
 80091e6:	4602      	mov	r2, r0
 80091e8:	4b28      	ldr	r3, [pc, #160]	; (800928c <__lshift+0xd0>)
 80091ea:	4829      	ldr	r0, [pc, #164]	; (8009290 <__lshift+0xd4>)
 80091ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80091f0:	f000 fe3e 	bl	8009e70 <__assert_func>
 80091f4:	3101      	adds	r1, #1
 80091f6:	005b      	lsls	r3, r3, #1
 80091f8:	e7ee      	b.n	80091d8 <__lshift+0x1c>
 80091fa:	2300      	movs	r3, #0
 80091fc:	f100 0114 	add.w	r1, r0, #20
 8009200:	f100 0210 	add.w	r2, r0, #16
 8009204:	4618      	mov	r0, r3
 8009206:	4553      	cmp	r3, sl
 8009208:	db33      	blt.n	8009272 <__lshift+0xb6>
 800920a:	6920      	ldr	r0, [r4, #16]
 800920c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009210:	f104 0314 	add.w	r3, r4, #20
 8009214:	f019 091f 	ands.w	r9, r9, #31
 8009218:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800921c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009220:	d02b      	beq.n	800927a <__lshift+0xbe>
 8009222:	f1c9 0e20 	rsb	lr, r9, #32
 8009226:	468a      	mov	sl, r1
 8009228:	2200      	movs	r2, #0
 800922a:	6818      	ldr	r0, [r3, #0]
 800922c:	fa00 f009 	lsl.w	r0, r0, r9
 8009230:	4302      	orrs	r2, r0
 8009232:	f84a 2b04 	str.w	r2, [sl], #4
 8009236:	f853 2b04 	ldr.w	r2, [r3], #4
 800923a:	459c      	cmp	ip, r3
 800923c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009240:	d8f3      	bhi.n	800922a <__lshift+0x6e>
 8009242:	ebac 0304 	sub.w	r3, ip, r4
 8009246:	3b15      	subs	r3, #21
 8009248:	f023 0303 	bic.w	r3, r3, #3
 800924c:	3304      	adds	r3, #4
 800924e:	f104 0015 	add.w	r0, r4, #21
 8009252:	4584      	cmp	ip, r0
 8009254:	bf38      	it	cc
 8009256:	2304      	movcc	r3, #4
 8009258:	50ca      	str	r2, [r1, r3]
 800925a:	b10a      	cbz	r2, 8009260 <__lshift+0xa4>
 800925c:	f108 0602 	add.w	r6, r8, #2
 8009260:	3e01      	subs	r6, #1
 8009262:	4638      	mov	r0, r7
 8009264:	612e      	str	r6, [r5, #16]
 8009266:	4621      	mov	r1, r4
 8009268:	f7ff fd8c 	bl	8008d84 <_Bfree>
 800926c:	4628      	mov	r0, r5
 800926e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009272:	f842 0f04 	str.w	r0, [r2, #4]!
 8009276:	3301      	adds	r3, #1
 8009278:	e7c5      	b.n	8009206 <__lshift+0x4a>
 800927a:	3904      	subs	r1, #4
 800927c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009280:	f841 2f04 	str.w	r2, [r1, #4]!
 8009284:	459c      	cmp	ip, r3
 8009286:	d8f9      	bhi.n	800927c <__lshift+0xc0>
 8009288:	e7ea      	b.n	8009260 <__lshift+0xa4>
 800928a:	bf00      	nop
 800928c:	0800b2f4 	.word	0x0800b2f4
 8009290:	0800b3e8 	.word	0x0800b3e8

08009294 <__mcmp>:
 8009294:	b530      	push	{r4, r5, lr}
 8009296:	6902      	ldr	r2, [r0, #16]
 8009298:	690c      	ldr	r4, [r1, #16]
 800929a:	1b12      	subs	r2, r2, r4
 800929c:	d10e      	bne.n	80092bc <__mcmp+0x28>
 800929e:	f100 0314 	add.w	r3, r0, #20
 80092a2:	3114      	adds	r1, #20
 80092a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80092a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80092ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80092b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80092b4:	42a5      	cmp	r5, r4
 80092b6:	d003      	beq.n	80092c0 <__mcmp+0x2c>
 80092b8:	d305      	bcc.n	80092c6 <__mcmp+0x32>
 80092ba:	2201      	movs	r2, #1
 80092bc:	4610      	mov	r0, r2
 80092be:	bd30      	pop	{r4, r5, pc}
 80092c0:	4283      	cmp	r3, r0
 80092c2:	d3f3      	bcc.n	80092ac <__mcmp+0x18>
 80092c4:	e7fa      	b.n	80092bc <__mcmp+0x28>
 80092c6:	f04f 32ff 	mov.w	r2, #4294967295
 80092ca:	e7f7      	b.n	80092bc <__mcmp+0x28>

080092cc <__mdiff>:
 80092cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d0:	460c      	mov	r4, r1
 80092d2:	4606      	mov	r6, r0
 80092d4:	4611      	mov	r1, r2
 80092d6:	4620      	mov	r0, r4
 80092d8:	4617      	mov	r7, r2
 80092da:	f7ff ffdb 	bl	8009294 <__mcmp>
 80092de:	1e05      	subs	r5, r0, #0
 80092e0:	d110      	bne.n	8009304 <__mdiff+0x38>
 80092e2:	4629      	mov	r1, r5
 80092e4:	4630      	mov	r0, r6
 80092e6:	f7ff fd0d 	bl	8008d04 <_Balloc>
 80092ea:	b930      	cbnz	r0, 80092fa <__mdiff+0x2e>
 80092ec:	4b39      	ldr	r3, [pc, #228]	; (80093d4 <__mdiff+0x108>)
 80092ee:	4602      	mov	r2, r0
 80092f0:	f240 2132 	movw	r1, #562	; 0x232
 80092f4:	4838      	ldr	r0, [pc, #224]	; (80093d8 <__mdiff+0x10c>)
 80092f6:	f000 fdbb 	bl	8009e70 <__assert_func>
 80092fa:	2301      	movs	r3, #1
 80092fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009300:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009304:	bfa4      	itt	ge
 8009306:	463b      	movge	r3, r7
 8009308:	4627      	movge	r7, r4
 800930a:	4630      	mov	r0, r6
 800930c:	6879      	ldr	r1, [r7, #4]
 800930e:	bfa6      	itte	ge
 8009310:	461c      	movge	r4, r3
 8009312:	2500      	movge	r5, #0
 8009314:	2501      	movlt	r5, #1
 8009316:	f7ff fcf5 	bl	8008d04 <_Balloc>
 800931a:	b920      	cbnz	r0, 8009326 <__mdiff+0x5a>
 800931c:	4b2d      	ldr	r3, [pc, #180]	; (80093d4 <__mdiff+0x108>)
 800931e:	4602      	mov	r2, r0
 8009320:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009324:	e7e6      	b.n	80092f4 <__mdiff+0x28>
 8009326:	693e      	ldr	r6, [r7, #16]
 8009328:	60c5      	str	r5, [r0, #12]
 800932a:	6925      	ldr	r5, [r4, #16]
 800932c:	f107 0114 	add.w	r1, r7, #20
 8009330:	f104 0914 	add.w	r9, r4, #20
 8009334:	f100 0e14 	add.w	lr, r0, #20
 8009338:	f107 0210 	add.w	r2, r7, #16
 800933c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009340:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009344:	46f2      	mov	sl, lr
 8009346:	2700      	movs	r7, #0
 8009348:	f859 3b04 	ldr.w	r3, [r9], #4
 800934c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009350:	fa1f f883 	uxth.w	r8, r3
 8009354:	fa17 f78b 	uxtah	r7, r7, fp
 8009358:	0c1b      	lsrs	r3, r3, #16
 800935a:	eba7 0808 	sub.w	r8, r7, r8
 800935e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009362:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009366:	fa1f f888 	uxth.w	r8, r8
 800936a:	141f      	asrs	r7, r3, #16
 800936c:	454d      	cmp	r5, r9
 800936e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009372:	f84a 3b04 	str.w	r3, [sl], #4
 8009376:	d8e7      	bhi.n	8009348 <__mdiff+0x7c>
 8009378:	1b2b      	subs	r3, r5, r4
 800937a:	3b15      	subs	r3, #21
 800937c:	f023 0303 	bic.w	r3, r3, #3
 8009380:	3304      	adds	r3, #4
 8009382:	3415      	adds	r4, #21
 8009384:	42a5      	cmp	r5, r4
 8009386:	bf38      	it	cc
 8009388:	2304      	movcc	r3, #4
 800938a:	4419      	add	r1, r3
 800938c:	4473      	add	r3, lr
 800938e:	469e      	mov	lr, r3
 8009390:	460d      	mov	r5, r1
 8009392:	4565      	cmp	r5, ip
 8009394:	d30e      	bcc.n	80093b4 <__mdiff+0xe8>
 8009396:	f10c 0203 	add.w	r2, ip, #3
 800939a:	1a52      	subs	r2, r2, r1
 800939c:	f022 0203 	bic.w	r2, r2, #3
 80093a0:	3903      	subs	r1, #3
 80093a2:	458c      	cmp	ip, r1
 80093a4:	bf38      	it	cc
 80093a6:	2200      	movcc	r2, #0
 80093a8:	441a      	add	r2, r3
 80093aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80093ae:	b17b      	cbz	r3, 80093d0 <__mdiff+0x104>
 80093b0:	6106      	str	r6, [r0, #16]
 80093b2:	e7a5      	b.n	8009300 <__mdiff+0x34>
 80093b4:	f855 8b04 	ldr.w	r8, [r5], #4
 80093b8:	fa17 f488 	uxtah	r4, r7, r8
 80093bc:	1422      	asrs	r2, r4, #16
 80093be:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80093c2:	b2a4      	uxth	r4, r4
 80093c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80093c8:	f84e 4b04 	str.w	r4, [lr], #4
 80093cc:	1417      	asrs	r7, r2, #16
 80093ce:	e7e0      	b.n	8009392 <__mdiff+0xc6>
 80093d0:	3e01      	subs	r6, #1
 80093d2:	e7ea      	b.n	80093aa <__mdiff+0xde>
 80093d4:	0800b2f4 	.word	0x0800b2f4
 80093d8:	0800b3e8 	.word	0x0800b3e8

080093dc <__ulp>:
 80093dc:	b082      	sub	sp, #8
 80093de:	ed8d 0b00 	vstr	d0, [sp]
 80093e2:	9b01      	ldr	r3, [sp, #4]
 80093e4:	4912      	ldr	r1, [pc, #72]	; (8009430 <__ulp+0x54>)
 80093e6:	4019      	ands	r1, r3
 80093e8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80093ec:	2900      	cmp	r1, #0
 80093ee:	dd05      	ble.n	80093fc <__ulp+0x20>
 80093f0:	2200      	movs	r2, #0
 80093f2:	460b      	mov	r3, r1
 80093f4:	ec43 2b10 	vmov	d0, r2, r3
 80093f8:	b002      	add	sp, #8
 80093fa:	4770      	bx	lr
 80093fc:	4249      	negs	r1, r1
 80093fe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009402:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009406:	f04f 0200 	mov.w	r2, #0
 800940a:	f04f 0300 	mov.w	r3, #0
 800940e:	da04      	bge.n	800941a <__ulp+0x3e>
 8009410:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009414:	fa41 f300 	asr.w	r3, r1, r0
 8009418:	e7ec      	b.n	80093f4 <__ulp+0x18>
 800941a:	f1a0 0114 	sub.w	r1, r0, #20
 800941e:	291e      	cmp	r1, #30
 8009420:	bfda      	itte	le
 8009422:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009426:	fa20 f101 	lsrle.w	r1, r0, r1
 800942a:	2101      	movgt	r1, #1
 800942c:	460a      	mov	r2, r1
 800942e:	e7e1      	b.n	80093f4 <__ulp+0x18>
 8009430:	7ff00000 	.word	0x7ff00000

08009434 <__b2d>:
 8009434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009436:	6905      	ldr	r5, [r0, #16]
 8009438:	f100 0714 	add.w	r7, r0, #20
 800943c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009440:	1f2e      	subs	r6, r5, #4
 8009442:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009446:	4620      	mov	r0, r4
 8009448:	f7ff fd52 	bl	8008ef0 <__hi0bits>
 800944c:	f1c0 0320 	rsb	r3, r0, #32
 8009450:	280a      	cmp	r0, #10
 8009452:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80094d0 <__b2d+0x9c>
 8009456:	600b      	str	r3, [r1, #0]
 8009458:	dc14      	bgt.n	8009484 <__b2d+0x50>
 800945a:	f1c0 0e0b 	rsb	lr, r0, #11
 800945e:	fa24 f10e 	lsr.w	r1, r4, lr
 8009462:	42b7      	cmp	r7, r6
 8009464:	ea41 030c 	orr.w	r3, r1, ip
 8009468:	bf34      	ite	cc
 800946a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800946e:	2100      	movcs	r1, #0
 8009470:	3015      	adds	r0, #21
 8009472:	fa04 f000 	lsl.w	r0, r4, r0
 8009476:	fa21 f10e 	lsr.w	r1, r1, lr
 800947a:	ea40 0201 	orr.w	r2, r0, r1
 800947e:	ec43 2b10 	vmov	d0, r2, r3
 8009482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009484:	42b7      	cmp	r7, r6
 8009486:	bf3a      	itte	cc
 8009488:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800948c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009490:	2100      	movcs	r1, #0
 8009492:	380b      	subs	r0, #11
 8009494:	d017      	beq.n	80094c6 <__b2d+0x92>
 8009496:	f1c0 0c20 	rsb	ip, r0, #32
 800949a:	fa04 f500 	lsl.w	r5, r4, r0
 800949e:	42be      	cmp	r6, r7
 80094a0:	fa21 f40c 	lsr.w	r4, r1, ip
 80094a4:	ea45 0504 	orr.w	r5, r5, r4
 80094a8:	bf8c      	ite	hi
 80094aa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80094ae:	2400      	movls	r4, #0
 80094b0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80094b4:	fa01 f000 	lsl.w	r0, r1, r0
 80094b8:	fa24 f40c 	lsr.w	r4, r4, ip
 80094bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80094c0:	ea40 0204 	orr.w	r2, r0, r4
 80094c4:	e7db      	b.n	800947e <__b2d+0x4a>
 80094c6:	ea44 030c 	orr.w	r3, r4, ip
 80094ca:	460a      	mov	r2, r1
 80094cc:	e7d7      	b.n	800947e <__b2d+0x4a>
 80094ce:	bf00      	nop
 80094d0:	3ff00000 	.word	0x3ff00000

080094d4 <__d2b>:
 80094d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094d8:	4689      	mov	r9, r1
 80094da:	2101      	movs	r1, #1
 80094dc:	ec57 6b10 	vmov	r6, r7, d0
 80094e0:	4690      	mov	r8, r2
 80094e2:	f7ff fc0f 	bl	8008d04 <_Balloc>
 80094e6:	4604      	mov	r4, r0
 80094e8:	b930      	cbnz	r0, 80094f8 <__d2b+0x24>
 80094ea:	4602      	mov	r2, r0
 80094ec:	4b25      	ldr	r3, [pc, #148]	; (8009584 <__d2b+0xb0>)
 80094ee:	4826      	ldr	r0, [pc, #152]	; (8009588 <__d2b+0xb4>)
 80094f0:	f240 310a 	movw	r1, #778	; 0x30a
 80094f4:	f000 fcbc 	bl	8009e70 <__assert_func>
 80094f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80094fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009500:	bb35      	cbnz	r5, 8009550 <__d2b+0x7c>
 8009502:	2e00      	cmp	r6, #0
 8009504:	9301      	str	r3, [sp, #4]
 8009506:	d028      	beq.n	800955a <__d2b+0x86>
 8009508:	4668      	mov	r0, sp
 800950a:	9600      	str	r6, [sp, #0]
 800950c:	f7ff fd10 	bl	8008f30 <__lo0bits>
 8009510:	9900      	ldr	r1, [sp, #0]
 8009512:	b300      	cbz	r0, 8009556 <__d2b+0x82>
 8009514:	9a01      	ldr	r2, [sp, #4]
 8009516:	f1c0 0320 	rsb	r3, r0, #32
 800951a:	fa02 f303 	lsl.w	r3, r2, r3
 800951e:	430b      	orrs	r3, r1
 8009520:	40c2      	lsrs	r2, r0
 8009522:	6163      	str	r3, [r4, #20]
 8009524:	9201      	str	r2, [sp, #4]
 8009526:	9b01      	ldr	r3, [sp, #4]
 8009528:	61a3      	str	r3, [r4, #24]
 800952a:	2b00      	cmp	r3, #0
 800952c:	bf14      	ite	ne
 800952e:	2202      	movne	r2, #2
 8009530:	2201      	moveq	r2, #1
 8009532:	6122      	str	r2, [r4, #16]
 8009534:	b1d5      	cbz	r5, 800956c <__d2b+0x98>
 8009536:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800953a:	4405      	add	r5, r0
 800953c:	f8c9 5000 	str.w	r5, [r9]
 8009540:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009544:	f8c8 0000 	str.w	r0, [r8]
 8009548:	4620      	mov	r0, r4
 800954a:	b003      	add	sp, #12
 800954c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009550:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009554:	e7d5      	b.n	8009502 <__d2b+0x2e>
 8009556:	6161      	str	r1, [r4, #20]
 8009558:	e7e5      	b.n	8009526 <__d2b+0x52>
 800955a:	a801      	add	r0, sp, #4
 800955c:	f7ff fce8 	bl	8008f30 <__lo0bits>
 8009560:	9b01      	ldr	r3, [sp, #4]
 8009562:	6163      	str	r3, [r4, #20]
 8009564:	2201      	movs	r2, #1
 8009566:	6122      	str	r2, [r4, #16]
 8009568:	3020      	adds	r0, #32
 800956a:	e7e3      	b.n	8009534 <__d2b+0x60>
 800956c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009570:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009574:	f8c9 0000 	str.w	r0, [r9]
 8009578:	6918      	ldr	r0, [r3, #16]
 800957a:	f7ff fcb9 	bl	8008ef0 <__hi0bits>
 800957e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009582:	e7df      	b.n	8009544 <__d2b+0x70>
 8009584:	0800b2f4 	.word	0x0800b2f4
 8009588:	0800b3e8 	.word	0x0800b3e8

0800958c <__ratio>:
 800958c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009590:	4688      	mov	r8, r1
 8009592:	4669      	mov	r1, sp
 8009594:	4681      	mov	r9, r0
 8009596:	f7ff ff4d 	bl	8009434 <__b2d>
 800959a:	a901      	add	r1, sp, #4
 800959c:	4640      	mov	r0, r8
 800959e:	ec55 4b10 	vmov	r4, r5, d0
 80095a2:	f7ff ff47 	bl	8009434 <__b2d>
 80095a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80095aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80095ae:	eba3 0c02 	sub.w	ip, r3, r2
 80095b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80095b6:	1a9b      	subs	r3, r3, r2
 80095b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80095bc:	ec51 0b10 	vmov	r0, r1, d0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	bfd6      	itet	le
 80095c4:	460a      	movle	r2, r1
 80095c6:	462a      	movgt	r2, r5
 80095c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80095cc:	468b      	mov	fp, r1
 80095ce:	462f      	mov	r7, r5
 80095d0:	bfd4      	ite	le
 80095d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80095d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80095da:	4620      	mov	r0, r4
 80095dc:	ee10 2a10 	vmov	r2, s0
 80095e0:	465b      	mov	r3, fp
 80095e2:	4639      	mov	r1, r7
 80095e4:	f7f7 f932 	bl	800084c <__aeabi_ddiv>
 80095e8:	ec41 0b10 	vmov	d0, r0, r1
 80095ec:	b003      	add	sp, #12
 80095ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080095f2 <__copybits>:
 80095f2:	3901      	subs	r1, #1
 80095f4:	b570      	push	{r4, r5, r6, lr}
 80095f6:	1149      	asrs	r1, r1, #5
 80095f8:	6914      	ldr	r4, [r2, #16]
 80095fa:	3101      	adds	r1, #1
 80095fc:	f102 0314 	add.w	r3, r2, #20
 8009600:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009604:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009608:	1f05      	subs	r5, r0, #4
 800960a:	42a3      	cmp	r3, r4
 800960c:	d30c      	bcc.n	8009628 <__copybits+0x36>
 800960e:	1aa3      	subs	r3, r4, r2
 8009610:	3b11      	subs	r3, #17
 8009612:	f023 0303 	bic.w	r3, r3, #3
 8009616:	3211      	adds	r2, #17
 8009618:	42a2      	cmp	r2, r4
 800961a:	bf88      	it	hi
 800961c:	2300      	movhi	r3, #0
 800961e:	4418      	add	r0, r3
 8009620:	2300      	movs	r3, #0
 8009622:	4288      	cmp	r0, r1
 8009624:	d305      	bcc.n	8009632 <__copybits+0x40>
 8009626:	bd70      	pop	{r4, r5, r6, pc}
 8009628:	f853 6b04 	ldr.w	r6, [r3], #4
 800962c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009630:	e7eb      	b.n	800960a <__copybits+0x18>
 8009632:	f840 3b04 	str.w	r3, [r0], #4
 8009636:	e7f4      	b.n	8009622 <__copybits+0x30>

08009638 <__any_on>:
 8009638:	f100 0214 	add.w	r2, r0, #20
 800963c:	6900      	ldr	r0, [r0, #16]
 800963e:	114b      	asrs	r3, r1, #5
 8009640:	4298      	cmp	r0, r3
 8009642:	b510      	push	{r4, lr}
 8009644:	db11      	blt.n	800966a <__any_on+0x32>
 8009646:	dd0a      	ble.n	800965e <__any_on+0x26>
 8009648:	f011 011f 	ands.w	r1, r1, #31
 800964c:	d007      	beq.n	800965e <__any_on+0x26>
 800964e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009652:	fa24 f001 	lsr.w	r0, r4, r1
 8009656:	fa00 f101 	lsl.w	r1, r0, r1
 800965a:	428c      	cmp	r4, r1
 800965c:	d10b      	bne.n	8009676 <__any_on+0x3e>
 800965e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009662:	4293      	cmp	r3, r2
 8009664:	d803      	bhi.n	800966e <__any_on+0x36>
 8009666:	2000      	movs	r0, #0
 8009668:	bd10      	pop	{r4, pc}
 800966a:	4603      	mov	r3, r0
 800966c:	e7f7      	b.n	800965e <__any_on+0x26>
 800966e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009672:	2900      	cmp	r1, #0
 8009674:	d0f5      	beq.n	8009662 <__any_on+0x2a>
 8009676:	2001      	movs	r0, #1
 8009678:	e7f6      	b.n	8009668 <__any_on+0x30>

0800967a <_calloc_r>:
 800967a:	b513      	push	{r0, r1, r4, lr}
 800967c:	434a      	muls	r2, r1
 800967e:	4611      	mov	r1, r2
 8009680:	9201      	str	r2, [sp, #4]
 8009682:	f000 f859 	bl	8009738 <_malloc_r>
 8009686:	4604      	mov	r4, r0
 8009688:	b118      	cbz	r0, 8009692 <_calloc_r+0x18>
 800968a:	9a01      	ldr	r2, [sp, #4]
 800968c:	2100      	movs	r1, #0
 800968e:	f7fc f85d 	bl	800574c <memset>
 8009692:	4620      	mov	r0, r4
 8009694:	b002      	add	sp, #8
 8009696:	bd10      	pop	{r4, pc}

08009698 <_free_r>:
 8009698:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800969a:	2900      	cmp	r1, #0
 800969c:	d048      	beq.n	8009730 <_free_r+0x98>
 800969e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096a2:	9001      	str	r0, [sp, #4]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f1a1 0404 	sub.w	r4, r1, #4
 80096aa:	bfb8      	it	lt
 80096ac:	18e4      	addlt	r4, r4, r3
 80096ae:	f000 fc6d 	bl	8009f8c <__malloc_lock>
 80096b2:	4a20      	ldr	r2, [pc, #128]	; (8009734 <_free_r+0x9c>)
 80096b4:	9801      	ldr	r0, [sp, #4]
 80096b6:	6813      	ldr	r3, [r2, #0]
 80096b8:	4615      	mov	r5, r2
 80096ba:	b933      	cbnz	r3, 80096ca <_free_r+0x32>
 80096bc:	6063      	str	r3, [r4, #4]
 80096be:	6014      	str	r4, [r2, #0]
 80096c0:	b003      	add	sp, #12
 80096c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096c6:	f000 bc67 	b.w	8009f98 <__malloc_unlock>
 80096ca:	42a3      	cmp	r3, r4
 80096cc:	d90b      	bls.n	80096e6 <_free_r+0x4e>
 80096ce:	6821      	ldr	r1, [r4, #0]
 80096d0:	1862      	adds	r2, r4, r1
 80096d2:	4293      	cmp	r3, r2
 80096d4:	bf04      	itt	eq
 80096d6:	681a      	ldreq	r2, [r3, #0]
 80096d8:	685b      	ldreq	r3, [r3, #4]
 80096da:	6063      	str	r3, [r4, #4]
 80096dc:	bf04      	itt	eq
 80096de:	1852      	addeq	r2, r2, r1
 80096e0:	6022      	streq	r2, [r4, #0]
 80096e2:	602c      	str	r4, [r5, #0]
 80096e4:	e7ec      	b.n	80096c0 <_free_r+0x28>
 80096e6:	461a      	mov	r2, r3
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	b10b      	cbz	r3, 80096f0 <_free_r+0x58>
 80096ec:	42a3      	cmp	r3, r4
 80096ee:	d9fa      	bls.n	80096e6 <_free_r+0x4e>
 80096f0:	6811      	ldr	r1, [r2, #0]
 80096f2:	1855      	adds	r5, r2, r1
 80096f4:	42a5      	cmp	r5, r4
 80096f6:	d10b      	bne.n	8009710 <_free_r+0x78>
 80096f8:	6824      	ldr	r4, [r4, #0]
 80096fa:	4421      	add	r1, r4
 80096fc:	1854      	adds	r4, r2, r1
 80096fe:	42a3      	cmp	r3, r4
 8009700:	6011      	str	r1, [r2, #0]
 8009702:	d1dd      	bne.n	80096c0 <_free_r+0x28>
 8009704:	681c      	ldr	r4, [r3, #0]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	6053      	str	r3, [r2, #4]
 800970a:	4421      	add	r1, r4
 800970c:	6011      	str	r1, [r2, #0]
 800970e:	e7d7      	b.n	80096c0 <_free_r+0x28>
 8009710:	d902      	bls.n	8009718 <_free_r+0x80>
 8009712:	230c      	movs	r3, #12
 8009714:	6003      	str	r3, [r0, #0]
 8009716:	e7d3      	b.n	80096c0 <_free_r+0x28>
 8009718:	6825      	ldr	r5, [r4, #0]
 800971a:	1961      	adds	r1, r4, r5
 800971c:	428b      	cmp	r3, r1
 800971e:	bf04      	itt	eq
 8009720:	6819      	ldreq	r1, [r3, #0]
 8009722:	685b      	ldreq	r3, [r3, #4]
 8009724:	6063      	str	r3, [r4, #4]
 8009726:	bf04      	itt	eq
 8009728:	1949      	addeq	r1, r1, r5
 800972a:	6021      	streq	r1, [r4, #0]
 800972c:	6054      	str	r4, [r2, #4]
 800972e:	e7c7      	b.n	80096c0 <_free_r+0x28>
 8009730:	b003      	add	sp, #12
 8009732:	bd30      	pop	{r4, r5, pc}
 8009734:	2000023c 	.word	0x2000023c

08009738 <_malloc_r>:
 8009738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973a:	1ccd      	adds	r5, r1, #3
 800973c:	f025 0503 	bic.w	r5, r5, #3
 8009740:	3508      	adds	r5, #8
 8009742:	2d0c      	cmp	r5, #12
 8009744:	bf38      	it	cc
 8009746:	250c      	movcc	r5, #12
 8009748:	2d00      	cmp	r5, #0
 800974a:	4606      	mov	r6, r0
 800974c:	db01      	blt.n	8009752 <_malloc_r+0x1a>
 800974e:	42a9      	cmp	r1, r5
 8009750:	d903      	bls.n	800975a <_malloc_r+0x22>
 8009752:	230c      	movs	r3, #12
 8009754:	6033      	str	r3, [r6, #0]
 8009756:	2000      	movs	r0, #0
 8009758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800975a:	f000 fc17 	bl	8009f8c <__malloc_lock>
 800975e:	4921      	ldr	r1, [pc, #132]	; (80097e4 <_malloc_r+0xac>)
 8009760:	680a      	ldr	r2, [r1, #0]
 8009762:	4614      	mov	r4, r2
 8009764:	b99c      	cbnz	r4, 800978e <_malloc_r+0x56>
 8009766:	4f20      	ldr	r7, [pc, #128]	; (80097e8 <_malloc_r+0xb0>)
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	b923      	cbnz	r3, 8009776 <_malloc_r+0x3e>
 800976c:	4621      	mov	r1, r4
 800976e:	4630      	mov	r0, r6
 8009770:	f000 fafa 	bl	8009d68 <_sbrk_r>
 8009774:	6038      	str	r0, [r7, #0]
 8009776:	4629      	mov	r1, r5
 8009778:	4630      	mov	r0, r6
 800977a:	f000 faf5 	bl	8009d68 <_sbrk_r>
 800977e:	1c43      	adds	r3, r0, #1
 8009780:	d123      	bne.n	80097ca <_malloc_r+0x92>
 8009782:	230c      	movs	r3, #12
 8009784:	6033      	str	r3, [r6, #0]
 8009786:	4630      	mov	r0, r6
 8009788:	f000 fc06 	bl	8009f98 <__malloc_unlock>
 800978c:	e7e3      	b.n	8009756 <_malloc_r+0x1e>
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	1b5b      	subs	r3, r3, r5
 8009792:	d417      	bmi.n	80097c4 <_malloc_r+0x8c>
 8009794:	2b0b      	cmp	r3, #11
 8009796:	d903      	bls.n	80097a0 <_malloc_r+0x68>
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	441c      	add	r4, r3
 800979c:	6025      	str	r5, [r4, #0]
 800979e:	e004      	b.n	80097aa <_malloc_r+0x72>
 80097a0:	6863      	ldr	r3, [r4, #4]
 80097a2:	42a2      	cmp	r2, r4
 80097a4:	bf0c      	ite	eq
 80097a6:	600b      	streq	r3, [r1, #0]
 80097a8:	6053      	strne	r3, [r2, #4]
 80097aa:	4630      	mov	r0, r6
 80097ac:	f000 fbf4 	bl	8009f98 <__malloc_unlock>
 80097b0:	f104 000b 	add.w	r0, r4, #11
 80097b4:	1d23      	adds	r3, r4, #4
 80097b6:	f020 0007 	bic.w	r0, r0, #7
 80097ba:	1ac2      	subs	r2, r0, r3
 80097bc:	d0cc      	beq.n	8009758 <_malloc_r+0x20>
 80097be:	1a1b      	subs	r3, r3, r0
 80097c0:	50a3      	str	r3, [r4, r2]
 80097c2:	e7c9      	b.n	8009758 <_malloc_r+0x20>
 80097c4:	4622      	mov	r2, r4
 80097c6:	6864      	ldr	r4, [r4, #4]
 80097c8:	e7cc      	b.n	8009764 <_malloc_r+0x2c>
 80097ca:	1cc4      	adds	r4, r0, #3
 80097cc:	f024 0403 	bic.w	r4, r4, #3
 80097d0:	42a0      	cmp	r0, r4
 80097d2:	d0e3      	beq.n	800979c <_malloc_r+0x64>
 80097d4:	1a21      	subs	r1, r4, r0
 80097d6:	4630      	mov	r0, r6
 80097d8:	f000 fac6 	bl	8009d68 <_sbrk_r>
 80097dc:	3001      	adds	r0, #1
 80097de:	d1dd      	bne.n	800979c <_malloc_r+0x64>
 80097e0:	e7cf      	b.n	8009782 <_malloc_r+0x4a>
 80097e2:	bf00      	nop
 80097e4:	2000023c 	.word	0x2000023c
 80097e8:	20000240 	.word	0x20000240

080097ec <__ssputs_r>:
 80097ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097f0:	688e      	ldr	r6, [r1, #8]
 80097f2:	429e      	cmp	r6, r3
 80097f4:	4682      	mov	sl, r0
 80097f6:	460c      	mov	r4, r1
 80097f8:	4690      	mov	r8, r2
 80097fa:	461f      	mov	r7, r3
 80097fc:	d838      	bhi.n	8009870 <__ssputs_r+0x84>
 80097fe:	898a      	ldrh	r2, [r1, #12]
 8009800:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009804:	d032      	beq.n	800986c <__ssputs_r+0x80>
 8009806:	6825      	ldr	r5, [r4, #0]
 8009808:	6909      	ldr	r1, [r1, #16]
 800980a:	eba5 0901 	sub.w	r9, r5, r1
 800980e:	6965      	ldr	r5, [r4, #20]
 8009810:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009814:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009818:	3301      	adds	r3, #1
 800981a:	444b      	add	r3, r9
 800981c:	106d      	asrs	r5, r5, #1
 800981e:	429d      	cmp	r5, r3
 8009820:	bf38      	it	cc
 8009822:	461d      	movcc	r5, r3
 8009824:	0553      	lsls	r3, r2, #21
 8009826:	d531      	bpl.n	800988c <__ssputs_r+0xa0>
 8009828:	4629      	mov	r1, r5
 800982a:	f7ff ff85 	bl	8009738 <_malloc_r>
 800982e:	4606      	mov	r6, r0
 8009830:	b950      	cbnz	r0, 8009848 <__ssputs_r+0x5c>
 8009832:	230c      	movs	r3, #12
 8009834:	f8ca 3000 	str.w	r3, [sl]
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800983e:	81a3      	strh	r3, [r4, #12]
 8009840:	f04f 30ff 	mov.w	r0, #4294967295
 8009844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009848:	6921      	ldr	r1, [r4, #16]
 800984a:	464a      	mov	r2, r9
 800984c:	f7ff fa4c 	bl	8008ce8 <memcpy>
 8009850:	89a3      	ldrh	r3, [r4, #12]
 8009852:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800985a:	81a3      	strh	r3, [r4, #12]
 800985c:	6126      	str	r6, [r4, #16]
 800985e:	6165      	str	r5, [r4, #20]
 8009860:	444e      	add	r6, r9
 8009862:	eba5 0509 	sub.w	r5, r5, r9
 8009866:	6026      	str	r6, [r4, #0]
 8009868:	60a5      	str	r5, [r4, #8]
 800986a:	463e      	mov	r6, r7
 800986c:	42be      	cmp	r6, r7
 800986e:	d900      	bls.n	8009872 <__ssputs_r+0x86>
 8009870:	463e      	mov	r6, r7
 8009872:	4632      	mov	r2, r6
 8009874:	6820      	ldr	r0, [r4, #0]
 8009876:	4641      	mov	r1, r8
 8009878:	f000 fb6e 	bl	8009f58 <memmove>
 800987c:	68a3      	ldr	r3, [r4, #8]
 800987e:	6822      	ldr	r2, [r4, #0]
 8009880:	1b9b      	subs	r3, r3, r6
 8009882:	4432      	add	r2, r6
 8009884:	60a3      	str	r3, [r4, #8]
 8009886:	6022      	str	r2, [r4, #0]
 8009888:	2000      	movs	r0, #0
 800988a:	e7db      	b.n	8009844 <__ssputs_r+0x58>
 800988c:	462a      	mov	r2, r5
 800988e:	f000 fb89 	bl	8009fa4 <_realloc_r>
 8009892:	4606      	mov	r6, r0
 8009894:	2800      	cmp	r0, #0
 8009896:	d1e1      	bne.n	800985c <__ssputs_r+0x70>
 8009898:	6921      	ldr	r1, [r4, #16]
 800989a:	4650      	mov	r0, sl
 800989c:	f7ff fefc 	bl	8009698 <_free_r>
 80098a0:	e7c7      	b.n	8009832 <__ssputs_r+0x46>
	...

080098a4 <_svfiprintf_r>:
 80098a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a8:	4698      	mov	r8, r3
 80098aa:	898b      	ldrh	r3, [r1, #12]
 80098ac:	061b      	lsls	r3, r3, #24
 80098ae:	b09d      	sub	sp, #116	; 0x74
 80098b0:	4607      	mov	r7, r0
 80098b2:	460d      	mov	r5, r1
 80098b4:	4614      	mov	r4, r2
 80098b6:	d50e      	bpl.n	80098d6 <_svfiprintf_r+0x32>
 80098b8:	690b      	ldr	r3, [r1, #16]
 80098ba:	b963      	cbnz	r3, 80098d6 <_svfiprintf_r+0x32>
 80098bc:	2140      	movs	r1, #64	; 0x40
 80098be:	f7ff ff3b 	bl	8009738 <_malloc_r>
 80098c2:	6028      	str	r0, [r5, #0]
 80098c4:	6128      	str	r0, [r5, #16]
 80098c6:	b920      	cbnz	r0, 80098d2 <_svfiprintf_r+0x2e>
 80098c8:	230c      	movs	r3, #12
 80098ca:	603b      	str	r3, [r7, #0]
 80098cc:	f04f 30ff 	mov.w	r0, #4294967295
 80098d0:	e0d1      	b.n	8009a76 <_svfiprintf_r+0x1d2>
 80098d2:	2340      	movs	r3, #64	; 0x40
 80098d4:	616b      	str	r3, [r5, #20]
 80098d6:	2300      	movs	r3, #0
 80098d8:	9309      	str	r3, [sp, #36]	; 0x24
 80098da:	2320      	movs	r3, #32
 80098dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80098e4:	2330      	movs	r3, #48	; 0x30
 80098e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009a90 <_svfiprintf_r+0x1ec>
 80098ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098ee:	f04f 0901 	mov.w	r9, #1
 80098f2:	4623      	mov	r3, r4
 80098f4:	469a      	mov	sl, r3
 80098f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098fa:	b10a      	cbz	r2, 8009900 <_svfiprintf_r+0x5c>
 80098fc:	2a25      	cmp	r2, #37	; 0x25
 80098fe:	d1f9      	bne.n	80098f4 <_svfiprintf_r+0x50>
 8009900:	ebba 0b04 	subs.w	fp, sl, r4
 8009904:	d00b      	beq.n	800991e <_svfiprintf_r+0x7a>
 8009906:	465b      	mov	r3, fp
 8009908:	4622      	mov	r2, r4
 800990a:	4629      	mov	r1, r5
 800990c:	4638      	mov	r0, r7
 800990e:	f7ff ff6d 	bl	80097ec <__ssputs_r>
 8009912:	3001      	adds	r0, #1
 8009914:	f000 80aa 	beq.w	8009a6c <_svfiprintf_r+0x1c8>
 8009918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800991a:	445a      	add	r2, fp
 800991c:	9209      	str	r2, [sp, #36]	; 0x24
 800991e:	f89a 3000 	ldrb.w	r3, [sl]
 8009922:	2b00      	cmp	r3, #0
 8009924:	f000 80a2 	beq.w	8009a6c <_svfiprintf_r+0x1c8>
 8009928:	2300      	movs	r3, #0
 800992a:	f04f 32ff 	mov.w	r2, #4294967295
 800992e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009932:	f10a 0a01 	add.w	sl, sl, #1
 8009936:	9304      	str	r3, [sp, #16]
 8009938:	9307      	str	r3, [sp, #28]
 800993a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800993e:	931a      	str	r3, [sp, #104]	; 0x68
 8009940:	4654      	mov	r4, sl
 8009942:	2205      	movs	r2, #5
 8009944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009948:	4851      	ldr	r0, [pc, #324]	; (8009a90 <_svfiprintf_r+0x1ec>)
 800994a:	f7f6 fc49 	bl	80001e0 <memchr>
 800994e:	9a04      	ldr	r2, [sp, #16]
 8009950:	b9d8      	cbnz	r0, 800998a <_svfiprintf_r+0xe6>
 8009952:	06d0      	lsls	r0, r2, #27
 8009954:	bf44      	itt	mi
 8009956:	2320      	movmi	r3, #32
 8009958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800995c:	0711      	lsls	r1, r2, #28
 800995e:	bf44      	itt	mi
 8009960:	232b      	movmi	r3, #43	; 0x2b
 8009962:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009966:	f89a 3000 	ldrb.w	r3, [sl]
 800996a:	2b2a      	cmp	r3, #42	; 0x2a
 800996c:	d015      	beq.n	800999a <_svfiprintf_r+0xf6>
 800996e:	9a07      	ldr	r2, [sp, #28]
 8009970:	4654      	mov	r4, sl
 8009972:	2000      	movs	r0, #0
 8009974:	f04f 0c0a 	mov.w	ip, #10
 8009978:	4621      	mov	r1, r4
 800997a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800997e:	3b30      	subs	r3, #48	; 0x30
 8009980:	2b09      	cmp	r3, #9
 8009982:	d94e      	bls.n	8009a22 <_svfiprintf_r+0x17e>
 8009984:	b1b0      	cbz	r0, 80099b4 <_svfiprintf_r+0x110>
 8009986:	9207      	str	r2, [sp, #28]
 8009988:	e014      	b.n	80099b4 <_svfiprintf_r+0x110>
 800998a:	eba0 0308 	sub.w	r3, r0, r8
 800998e:	fa09 f303 	lsl.w	r3, r9, r3
 8009992:	4313      	orrs	r3, r2
 8009994:	9304      	str	r3, [sp, #16]
 8009996:	46a2      	mov	sl, r4
 8009998:	e7d2      	b.n	8009940 <_svfiprintf_r+0x9c>
 800999a:	9b03      	ldr	r3, [sp, #12]
 800999c:	1d19      	adds	r1, r3, #4
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	9103      	str	r1, [sp, #12]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	bfbb      	ittet	lt
 80099a6:	425b      	neglt	r3, r3
 80099a8:	f042 0202 	orrlt.w	r2, r2, #2
 80099ac:	9307      	strge	r3, [sp, #28]
 80099ae:	9307      	strlt	r3, [sp, #28]
 80099b0:	bfb8      	it	lt
 80099b2:	9204      	strlt	r2, [sp, #16]
 80099b4:	7823      	ldrb	r3, [r4, #0]
 80099b6:	2b2e      	cmp	r3, #46	; 0x2e
 80099b8:	d10c      	bne.n	80099d4 <_svfiprintf_r+0x130>
 80099ba:	7863      	ldrb	r3, [r4, #1]
 80099bc:	2b2a      	cmp	r3, #42	; 0x2a
 80099be:	d135      	bne.n	8009a2c <_svfiprintf_r+0x188>
 80099c0:	9b03      	ldr	r3, [sp, #12]
 80099c2:	1d1a      	adds	r2, r3, #4
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	9203      	str	r2, [sp, #12]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	bfb8      	it	lt
 80099cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80099d0:	3402      	adds	r4, #2
 80099d2:	9305      	str	r3, [sp, #20]
 80099d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009aa0 <_svfiprintf_r+0x1fc>
 80099d8:	7821      	ldrb	r1, [r4, #0]
 80099da:	2203      	movs	r2, #3
 80099dc:	4650      	mov	r0, sl
 80099de:	f7f6 fbff 	bl	80001e0 <memchr>
 80099e2:	b140      	cbz	r0, 80099f6 <_svfiprintf_r+0x152>
 80099e4:	2340      	movs	r3, #64	; 0x40
 80099e6:	eba0 000a 	sub.w	r0, r0, sl
 80099ea:	fa03 f000 	lsl.w	r0, r3, r0
 80099ee:	9b04      	ldr	r3, [sp, #16]
 80099f0:	4303      	orrs	r3, r0
 80099f2:	3401      	adds	r4, #1
 80099f4:	9304      	str	r3, [sp, #16]
 80099f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099fa:	4826      	ldr	r0, [pc, #152]	; (8009a94 <_svfiprintf_r+0x1f0>)
 80099fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a00:	2206      	movs	r2, #6
 8009a02:	f7f6 fbed 	bl	80001e0 <memchr>
 8009a06:	2800      	cmp	r0, #0
 8009a08:	d038      	beq.n	8009a7c <_svfiprintf_r+0x1d8>
 8009a0a:	4b23      	ldr	r3, [pc, #140]	; (8009a98 <_svfiprintf_r+0x1f4>)
 8009a0c:	bb1b      	cbnz	r3, 8009a56 <_svfiprintf_r+0x1b2>
 8009a0e:	9b03      	ldr	r3, [sp, #12]
 8009a10:	3307      	adds	r3, #7
 8009a12:	f023 0307 	bic.w	r3, r3, #7
 8009a16:	3308      	adds	r3, #8
 8009a18:	9303      	str	r3, [sp, #12]
 8009a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a1c:	4433      	add	r3, r6
 8009a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a20:	e767      	b.n	80098f2 <_svfiprintf_r+0x4e>
 8009a22:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a26:	460c      	mov	r4, r1
 8009a28:	2001      	movs	r0, #1
 8009a2a:	e7a5      	b.n	8009978 <_svfiprintf_r+0xd4>
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	3401      	adds	r4, #1
 8009a30:	9305      	str	r3, [sp, #20]
 8009a32:	4619      	mov	r1, r3
 8009a34:	f04f 0c0a 	mov.w	ip, #10
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a3e:	3a30      	subs	r2, #48	; 0x30
 8009a40:	2a09      	cmp	r2, #9
 8009a42:	d903      	bls.n	8009a4c <_svfiprintf_r+0x1a8>
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d0c5      	beq.n	80099d4 <_svfiprintf_r+0x130>
 8009a48:	9105      	str	r1, [sp, #20]
 8009a4a:	e7c3      	b.n	80099d4 <_svfiprintf_r+0x130>
 8009a4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a50:	4604      	mov	r4, r0
 8009a52:	2301      	movs	r3, #1
 8009a54:	e7f0      	b.n	8009a38 <_svfiprintf_r+0x194>
 8009a56:	ab03      	add	r3, sp, #12
 8009a58:	9300      	str	r3, [sp, #0]
 8009a5a:	462a      	mov	r2, r5
 8009a5c:	4b0f      	ldr	r3, [pc, #60]	; (8009a9c <_svfiprintf_r+0x1f8>)
 8009a5e:	a904      	add	r1, sp, #16
 8009a60:	4638      	mov	r0, r7
 8009a62:	f7fb ff1b 	bl	800589c <_printf_float>
 8009a66:	1c42      	adds	r2, r0, #1
 8009a68:	4606      	mov	r6, r0
 8009a6a:	d1d6      	bne.n	8009a1a <_svfiprintf_r+0x176>
 8009a6c:	89ab      	ldrh	r3, [r5, #12]
 8009a6e:	065b      	lsls	r3, r3, #25
 8009a70:	f53f af2c 	bmi.w	80098cc <_svfiprintf_r+0x28>
 8009a74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a76:	b01d      	add	sp, #116	; 0x74
 8009a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a7c:	ab03      	add	r3, sp, #12
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	462a      	mov	r2, r5
 8009a82:	4b06      	ldr	r3, [pc, #24]	; (8009a9c <_svfiprintf_r+0x1f8>)
 8009a84:	a904      	add	r1, sp, #16
 8009a86:	4638      	mov	r0, r7
 8009a88:	f7fc f9ac 	bl	8005de4 <_printf_i>
 8009a8c:	e7eb      	b.n	8009a66 <_svfiprintf_r+0x1c2>
 8009a8e:	bf00      	nop
 8009a90:	0800b544 	.word	0x0800b544
 8009a94:	0800b54e 	.word	0x0800b54e
 8009a98:	0800589d 	.word	0x0800589d
 8009a9c:	080097ed 	.word	0x080097ed
 8009aa0:	0800b54a 	.word	0x0800b54a

08009aa4 <__sfputc_r>:
 8009aa4:	6893      	ldr	r3, [r2, #8]
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	b410      	push	{r4}
 8009aac:	6093      	str	r3, [r2, #8]
 8009aae:	da08      	bge.n	8009ac2 <__sfputc_r+0x1e>
 8009ab0:	6994      	ldr	r4, [r2, #24]
 8009ab2:	42a3      	cmp	r3, r4
 8009ab4:	db01      	blt.n	8009aba <__sfputc_r+0x16>
 8009ab6:	290a      	cmp	r1, #10
 8009ab8:	d103      	bne.n	8009ac2 <__sfputc_r+0x1e>
 8009aba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009abe:	f7fd bc2d 	b.w	800731c <__swbuf_r>
 8009ac2:	6813      	ldr	r3, [r2, #0]
 8009ac4:	1c58      	adds	r0, r3, #1
 8009ac6:	6010      	str	r0, [r2, #0]
 8009ac8:	7019      	strb	r1, [r3, #0]
 8009aca:	4608      	mov	r0, r1
 8009acc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ad0:	4770      	bx	lr

08009ad2 <__sfputs_r>:
 8009ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad4:	4606      	mov	r6, r0
 8009ad6:	460f      	mov	r7, r1
 8009ad8:	4614      	mov	r4, r2
 8009ada:	18d5      	adds	r5, r2, r3
 8009adc:	42ac      	cmp	r4, r5
 8009ade:	d101      	bne.n	8009ae4 <__sfputs_r+0x12>
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	e007      	b.n	8009af4 <__sfputs_r+0x22>
 8009ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ae8:	463a      	mov	r2, r7
 8009aea:	4630      	mov	r0, r6
 8009aec:	f7ff ffda 	bl	8009aa4 <__sfputc_r>
 8009af0:	1c43      	adds	r3, r0, #1
 8009af2:	d1f3      	bne.n	8009adc <__sfputs_r+0xa>
 8009af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009af8 <_vfiprintf_r>:
 8009af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afc:	460d      	mov	r5, r1
 8009afe:	b09d      	sub	sp, #116	; 0x74
 8009b00:	4614      	mov	r4, r2
 8009b02:	4698      	mov	r8, r3
 8009b04:	4606      	mov	r6, r0
 8009b06:	b118      	cbz	r0, 8009b10 <_vfiprintf_r+0x18>
 8009b08:	6983      	ldr	r3, [r0, #24]
 8009b0a:	b90b      	cbnz	r3, 8009b10 <_vfiprintf_r+0x18>
 8009b0c:	f7fe fc5a 	bl	80083c4 <__sinit>
 8009b10:	4b89      	ldr	r3, [pc, #548]	; (8009d38 <_vfiprintf_r+0x240>)
 8009b12:	429d      	cmp	r5, r3
 8009b14:	d11b      	bne.n	8009b4e <_vfiprintf_r+0x56>
 8009b16:	6875      	ldr	r5, [r6, #4]
 8009b18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b1a:	07d9      	lsls	r1, r3, #31
 8009b1c:	d405      	bmi.n	8009b2a <_vfiprintf_r+0x32>
 8009b1e:	89ab      	ldrh	r3, [r5, #12]
 8009b20:	059a      	lsls	r2, r3, #22
 8009b22:	d402      	bmi.n	8009b2a <_vfiprintf_r+0x32>
 8009b24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b26:	f7ff f85e 	bl	8008be6 <__retarget_lock_acquire_recursive>
 8009b2a:	89ab      	ldrh	r3, [r5, #12]
 8009b2c:	071b      	lsls	r3, r3, #28
 8009b2e:	d501      	bpl.n	8009b34 <_vfiprintf_r+0x3c>
 8009b30:	692b      	ldr	r3, [r5, #16]
 8009b32:	b9eb      	cbnz	r3, 8009b70 <_vfiprintf_r+0x78>
 8009b34:	4629      	mov	r1, r5
 8009b36:	4630      	mov	r0, r6
 8009b38:	f7fd fc42 	bl	80073c0 <__swsetup_r>
 8009b3c:	b1c0      	cbz	r0, 8009b70 <_vfiprintf_r+0x78>
 8009b3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b40:	07dc      	lsls	r4, r3, #31
 8009b42:	d50e      	bpl.n	8009b62 <_vfiprintf_r+0x6a>
 8009b44:	f04f 30ff 	mov.w	r0, #4294967295
 8009b48:	b01d      	add	sp, #116	; 0x74
 8009b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b4e:	4b7b      	ldr	r3, [pc, #492]	; (8009d3c <_vfiprintf_r+0x244>)
 8009b50:	429d      	cmp	r5, r3
 8009b52:	d101      	bne.n	8009b58 <_vfiprintf_r+0x60>
 8009b54:	68b5      	ldr	r5, [r6, #8]
 8009b56:	e7df      	b.n	8009b18 <_vfiprintf_r+0x20>
 8009b58:	4b79      	ldr	r3, [pc, #484]	; (8009d40 <_vfiprintf_r+0x248>)
 8009b5a:	429d      	cmp	r5, r3
 8009b5c:	bf08      	it	eq
 8009b5e:	68f5      	ldreq	r5, [r6, #12]
 8009b60:	e7da      	b.n	8009b18 <_vfiprintf_r+0x20>
 8009b62:	89ab      	ldrh	r3, [r5, #12]
 8009b64:	0598      	lsls	r0, r3, #22
 8009b66:	d4ed      	bmi.n	8009b44 <_vfiprintf_r+0x4c>
 8009b68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b6a:	f7ff f83d 	bl	8008be8 <__retarget_lock_release_recursive>
 8009b6e:	e7e9      	b.n	8009b44 <_vfiprintf_r+0x4c>
 8009b70:	2300      	movs	r3, #0
 8009b72:	9309      	str	r3, [sp, #36]	; 0x24
 8009b74:	2320      	movs	r3, #32
 8009b76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b7e:	2330      	movs	r3, #48	; 0x30
 8009b80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009d44 <_vfiprintf_r+0x24c>
 8009b84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b88:	f04f 0901 	mov.w	r9, #1
 8009b8c:	4623      	mov	r3, r4
 8009b8e:	469a      	mov	sl, r3
 8009b90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b94:	b10a      	cbz	r2, 8009b9a <_vfiprintf_r+0xa2>
 8009b96:	2a25      	cmp	r2, #37	; 0x25
 8009b98:	d1f9      	bne.n	8009b8e <_vfiprintf_r+0x96>
 8009b9a:	ebba 0b04 	subs.w	fp, sl, r4
 8009b9e:	d00b      	beq.n	8009bb8 <_vfiprintf_r+0xc0>
 8009ba0:	465b      	mov	r3, fp
 8009ba2:	4622      	mov	r2, r4
 8009ba4:	4629      	mov	r1, r5
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	f7ff ff93 	bl	8009ad2 <__sfputs_r>
 8009bac:	3001      	adds	r0, #1
 8009bae:	f000 80aa 	beq.w	8009d06 <_vfiprintf_r+0x20e>
 8009bb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bb4:	445a      	add	r2, fp
 8009bb6:	9209      	str	r2, [sp, #36]	; 0x24
 8009bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f000 80a2 	beq.w	8009d06 <_vfiprintf_r+0x20e>
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bcc:	f10a 0a01 	add.w	sl, sl, #1
 8009bd0:	9304      	str	r3, [sp, #16]
 8009bd2:	9307      	str	r3, [sp, #28]
 8009bd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bd8:	931a      	str	r3, [sp, #104]	; 0x68
 8009bda:	4654      	mov	r4, sl
 8009bdc:	2205      	movs	r2, #5
 8009bde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009be2:	4858      	ldr	r0, [pc, #352]	; (8009d44 <_vfiprintf_r+0x24c>)
 8009be4:	f7f6 fafc 	bl	80001e0 <memchr>
 8009be8:	9a04      	ldr	r2, [sp, #16]
 8009bea:	b9d8      	cbnz	r0, 8009c24 <_vfiprintf_r+0x12c>
 8009bec:	06d1      	lsls	r1, r2, #27
 8009bee:	bf44      	itt	mi
 8009bf0:	2320      	movmi	r3, #32
 8009bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bf6:	0713      	lsls	r3, r2, #28
 8009bf8:	bf44      	itt	mi
 8009bfa:	232b      	movmi	r3, #43	; 0x2b
 8009bfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c00:	f89a 3000 	ldrb.w	r3, [sl]
 8009c04:	2b2a      	cmp	r3, #42	; 0x2a
 8009c06:	d015      	beq.n	8009c34 <_vfiprintf_r+0x13c>
 8009c08:	9a07      	ldr	r2, [sp, #28]
 8009c0a:	4654      	mov	r4, sl
 8009c0c:	2000      	movs	r0, #0
 8009c0e:	f04f 0c0a 	mov.w	ip, #10
 8009c12:	4621      	mov	r1, r4
 8009c14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c18:	3b30      	subs	r3, #48	; 0x30
 8009c1a:	2b09      	cmp	r3, #9
 8009c1c:	d94e      	bls.n	8009cbc <_vfiprintf_r+0x1c4>
 8009c1e:	b1b0      	cbz	r0, 8009c4e <_vfiprintf_r+0x156>
 8009c20:	9207      	str	r2, [sp, #28]
 8009c22:	e014      	b.n	8009c4e <_vfiprintf_r+0x156>
 8009c24:	eba0 0308 	sub.w	r3, r0, r8
 8009c28:	fa09 f303 	lsl.w	r3, r9, r3
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	9304      	str	r3, [sp, #16]
 8009c30:	46a2      	mov	sl, r4
 8009c32:	e7d2      	b.n	8009bda <_vfiprintf_r+0xe2>
 8009c34:	9b03      	ldr	r3, [sp, #12]
 8009c36:	1d19      	adds	r1, r3, #4
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	9103      	str	r1, [sp, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	bfbb      	ittet	lt
 8009c40:	425b      	neglt	r3, r3
 8009c42:	f042 0202 	orrlt.w	r2, r2, #2
 8009c46:	9307      	strge	r3, [sp, #28]
 8009c48:	9307      	strlt	r3, [sp, #28]
 8009c4a:	bfb8      	it	lt
 8009c4c:	9204      	strlt	r2, [sp, #16]
 8009c4e:	7823      	ldrb	r3, [r4, #0]
 8009c50:	2b2e      	cmp	r3, #46	; 0x2e
 8009c52:	d10c      	bne.n	8009c6e <_vfiprintf_r+0x176>
 8009c54:	7863      	ldrb	r3, [r4, #1]
 8009c56:	2b2a      	cmp	r3, #42	; 0x2a
 8009c58:	d135      	bne.n	8009cc6 <_vfiprintf_r+0x1ce>
 8009c5a:	9b03      	ldr	r3, [sp, #12]
 8009c5c:	1d1a      	adds	r2, r3, #4
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	9203      	str	r2, [sp, #12]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	bfb8      	it	lt
 8009c66:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c6a:	3402      	adds	r4, #2
 8009c6c:	9305      	str	r3, [sp, #20]
 8009c6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d54 <_vfiprintf_r+0x25c>
 8009c72:	7821      	ldrb	r1, [r4, #0]
 8009c74:	2203      	movs	r2, #3
 8009c76:	4650      	mov	r0, sl
 8009c78:	f7f6 fab2 	bl	80001e0 <memchr>
 8009c7c:	b140      	cbz	r0, 8009c90 <_vfiprintf_r+0x198>
 8009c7e:	2340      	movs	r3, #64	; 0x40
 8009c80:	eba0 000a 	sub.w	r0, r0, sl
 8009c84:	fa03 f000 	lsl.w	r0, r3, r0
 8009c88:	9b04      	ldr	r3, [sp, #16]
 8009c8a:	4303      	orrs	r3, r0
 8009c8c:	3401      	adds	r4, #1
 8009c8e:	9304      	str	r3, [sp, #16]
 8009c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c94:	482c      	ldr	r0, [pc, #176]	; (8009d48 <_vfiprintf_r+0x250>)
 8009c96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c9a:	2206      	movs	r2, #6
 8009c9c:	f7f6 faa0 	bl	80001e0 <memchr>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d03f      	beq.n	8009d24 <_vfiprintf_r+0x22c>
 8009ca4:	4b29      	ldr	r3, [pc, #164]	; (8009d4c <_vfiprintf_r+0x254>)
 8009ca6:	bb1b      	cbnz	r3, 8009cf0 <_vfiprintf_r+0x1f8>
 8009ca8:	9b03      	ldr	r3, [sp, #12]
 8009caa:	3307      	adds	r3, #7
 8009cac:	f023 0307 	bic.w	r3, r3, #7
 8009cb0:	3308      	adds	r3, #8
 8009cb2:	9303      	str	r3, [sp, #12]
 8009cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cb6:	443b      	add	r3, r7
 8009cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8009cba:	e767      	b.n	8009b8c <_vfiprintf_r+0x94>
 8009cbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cc0:	460c      	mov	r4, r1
 8009cc2:	2001      	movs	r0, #1
 8009cc4:	e7a5      	b.n	8009c12 <_vfiprintf_r+0x11a>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	3401      	adds	r4, #1
 8009cca:	9305      	str	r3, [sp, #20]
 8009ccc:	4619      	mov	r1, r3
 8009cce:	f04f 0c0a 	mov.w	ip, #10
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cd8:	3a30      	subs	r2, #48	; 0x30
 8009cda:	2a09      	cmp	r2, #9
 8009cdc:	d903      	bls.n	8009ce6 <_vfiprintf_r+0x1ee>
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d0c5      	beq.n	8009c6e <_vfiprintf_r+0x176>
 8009ce2:	9105      	str	r1, [sp, #20]
 8009ce4:	e7c3      	b.n	8009c6e <_vfiprintf_r+0x176>
 8009ce6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cea:	4604      	mov	r4, r0
 8009cec:	2301      	movs	r3, #1
 8009cee:	e7f0      	b.n	8009cd2 <_vfiprintf_r+0x1da>
 8009cf0:	ab03      	add	r3, sp, #12
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	462a      	mov	r2, r5
 8009cf6:	4b16      	ldr	r3, [pc, #88]	; (8009d50 <_vfiprintf_r+0x258>)
 8009cf8:	a904      	add	r1, sp, #16
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	f7fb fdce 	bl	800589c <_printf_float>
 8009d00:	4607      	mov	r7, r0
 8009d02:	1c78      	adds	r0, r7, #1
 8009d04:	d1d6      	bne.n	8009cb4 <_vfiprintf_r+0x1bc>
 8009d06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d08:	07d9      	lsls	r1, r3, #31
 8009d0a:	d405      	bmi.n	8009d18 <_vfiprintf_r+0x220>
 8009d0c:	89ab      	ldrh	r3, [r5, #12]
 8009d0e:	059a      	lsls	r2, r3, #22
 8009d10:	d402      	bmi.n	8009d18 <_vfiprintf_r+0x220>
 8009d12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d14:	f7fe ff68 	bl	8008be8 <__retarget_lock_release_recursive>
 8009d18:	89ab      	ldrh	r3, [r5, #12]
 8009d1a:	065b      	lsls	r3, r3, #25
 8009d1c:	f53f af12 	bmi.w	8009b44 <_vfiprintf_r+0x4c>
 8009d20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d22:	e711      	b.n	8009b48 <_vfiprintf_r+0x50>
 8009d24:	ab03      	add	r3, sp, #12
 8009d26:	9300      	str	r3, [sp, #0]
 8009d28:	462a      	mov	r2, r5
 8009d2a:	4b09      	ldr	r3, [pc, #36]	; (8009d50 <_vfiprintf_r+0x258>)
 8009d2c:	a904      	add	r1, sp, #16
 8009d2e:	4630      	mov	r0, r6
 8009d30:	f7fc f858 	bl	8005de4 <_printf_i>
 8009d34:	e7e4      	b.n	8009d00 <_vfiprintf_r+0x208>
 8009d36:	bf00      	nop
 8009d38:	0800b328 	.word	0x0800b328
 8009d3c:	0800b348 	.word	0x0800b348
 8009d40:	0800b308 	.word	0x0800b308
 8009d44:	0800b544 	.word	0x0800b544
 8009d48:	0800b54e 	.word	0x0800b54e
 8009d4c:	0800589d 	.word	0x0800589d
 8009d50:	08009ad3 	.word	0x08009ad3
 8009d54:	0800b54a 	.word	0x0800b54a

08009d58 <nan>:
 8009d58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009d60 <nan+0x8>
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop
 8009d60:	00000000 	.word	0x00000000
 8009d64:	7ff80000 	.word	0x7ff80000

08009d68 <_sbrk_r>:
 8009d68:	b538      	push	{r3, r4, r5, lr}
 8009d6a:	4d06      	ldr	r5, [pc, #24]	; (8009d84 <_sbrk_r+0x1c>)
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	4604      	mov	r4, r0
 8009d70:	4608      	mov	r0, r1
 8009d72:	602b      	str	r3, [r5, #0]
 8009d74:	f7f8 f962 	bl	800203c <_sbrk>
 8009d78:	1c43      	adds	r3, r0, #1
 8009d7a:	d102      	bne.n	8009d82 <_sbrk_r+0x1a>
 8009d7c:	682b      	ldr	r3, [r5, #0]
 8009d7e:	b103      	cbz	r3, 8009d82 <_sbrk_r+0x1a>
 8009d80:	6023      	str	r3, [r4, #0]
 8009d82:	bd38      	pop	{r3, r4, r5, pc}
 8009d84:	200005b4 	.word	0x200005b4

08009d88 <__sread>:
 8009d88:	b510      	push	{r4, lr}
 8009d8a:	460c      	mov	r4, r1
 8009d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d90:	f000 f92e 	bl	8009ff0 <_read_r>
 8009d94:	2800      	cmp	r0, #0
 8009d96:	bfab      	itete	ge
 8009d98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d9a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d9c:	181b      	addge	r3, r3, r0
 8009d9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009da2:	bfac      	ite	ge
 8009da4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009da6:	81a3      	strhlt	r3, [r4, #12]
 8009da8:	bd10      	pop	{r4, pc}

08009daa <__swrite>:
 8009daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dae:	461f      	mov	r7, r3
 8009db0:	898b      	ldrh	r3, [r1, #12]
 8009db2:	05db      	lsls	r3, r3, #23
 8009db4:	4605      	mov	r5, r0
 8009db6:	460c      	mov	r4, r1
 8009db8:	4616      	mov	r6, r2
 8009dba:	d505      	bpl.n	8009dc8 <__swrite+0x1e>
 8009dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dc0:	2302      	movs	r3, #2
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f000 f8b6 	bl	8009f34 <_lseek_r>
 8009dc8:	89a3      	ldrh	r3, [r4, #12]
 8009dca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009dd2:	81a3      	strh	r3, [r4, #12]
 8009dd4:	4632      	mov	r2, r6
 8009dd6:	463b      	mov	r3, r7
 8009dd8:	4628      	mov	r0, r5
 8009dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dde:	f000 b835 	b.w	8009e4c <_write_r>

08009de2 <__sseek>:
 8009de2:	b510      	push	{r4, lr}
 8009de4:	460c      	mov	r4, r1
 8009de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dea:	f000 f8a3 	bl	8009f34 <_lseek_r>
 8009dee:	1c43      	adds	r3, r0, #1
 8009df0:	89a3      	ldrh	r3, [r4, #12]
 8009df2:	bf15      	itete	ne
 8009df4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009df6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009dfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009dfe:	81a3      	strheq	r3, [r4, #12]
 8009e00:	bf18      	it	ne
 8009e02:	81a3      	strhne	r3, [r4, #12]
 8009e04:	bd10      	pop	{r4, pc}

08009e06 <__sclose>:
 8009e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e0a:	f000 b84f 	b.w	8009eac <_close_r>

08009e0e <strncmp>:
 8009e0e:	b510      	push	{r4, lr}
 8009e10:	b16a      	cbz	r2, 8009e2e <strncmp+0x20>
 8009e12:	3901      	subs	r1, #1
 8009e14:	1884      	adds	r4, r0, r2
 8009e16:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009e1a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d103      	bne.n	8009e2a <strncmp+0x1c>
 8009e22:	42a0      	cmp	r0, r4
 8009e24:	d001      	beq.n	8009e2a <strncmp+0x1c>
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1f5      	bne.n	8009e16 <strncmp+0x8>
 8009e2a:	1a98      	subs	r0, r3, r2
 8009e2c:	bd10      	pop	{r4, pc}
 8009e2e:	4610      	mov	r0, r2
 8009e30:	e7fc      	b.n	8009e2c <strncmp+0x1e>

08009e32 <__ascii_wctomb>:
 8009e32:	b149      	cbz	r1, 8009e48 <__ascii_wctomb+0x16>
 8009e34:	2aff      	cmp	r2, #255	; 0xff
 8009e36:	bf85      	ittet	hi
 8009e38:	238a      	movhi	r3, #138	; 0x8a
 8009e3a:	6003      	strhi	r3, [r0, #0]
 8009e3c:	700a      	strbls	r2, [r1, #0]
 8009e3e:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e42:	bf98      	it	ls
 8009e44:	2001      	movls	r0, #1
 8009e46:	4770      	bx	lr
 8009e48:	4608      	mov	r0, r1
 8009e4a:	4770      	bx	lr

08009e4c <_write_r>:
 8009e4c:	b538      	push	{r3, r4, r5, lr}
 8009e4e:	4d07      	ldr	r5, [pc, #28]	; (8009e6c <_write_r+0x20>)
 8009e50:	4604      	mov	r4, r0
 8009e52:	4608      	mov	r0, r1
 8009e54:	4611      	mov	r1, r2
 8009e56:	2200      	movs	r2, #0
 8009e58:	602a      	str	r2, [r5, #0]
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	f7f7 fcea 	bl	8001834 <_write>
 8009e60:	1c43      	adds	r3, r0, #1
 8009e62:	d102      	bne.n	8009e6a <_write_r+0x1e>
 8009e64:	682b      	ldr	r3, [r5, #0]
 8009e66:	b103      	cbz	r3, 8009e6a <_write_r+0x1e>
 8009e68:	6023      	str	r3, [r4, #0]
 8009e6a:	bd38      	pop	{r3, r4, r5, pc}
 8009e6c:	200005b4 	.word	0x200005b4

08009e70 <__assert_func>:
 8009e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e72:	4614      	mov	r4, r2
 8009e74:	461a      	mov	r2, r3
 8009e76:	4b09      	ldr	r3, [pc, #36]	; (8009e9c <__assert_func+0x2c>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4605      	mov	r5, r0
 8009e7c:	68d8      	ldr	r0, [r3, #12]
 8009e7e:	b14c      	cbz	r4, 8009e94 <__assert_func+0x24>
 8009e80:	4b07      	ldr	r3, [pc, #28]	; (8009ea0 <__assert_func+0x30>)
 8009e82:	9100      	str	r1, [sp, #0]
 8009e84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e88:	4906      	ldr	r1, [pc, #24]	; (8009ea4 <__assert_func+0x34>)
 8009e8a:	462b      	mov	r3, r5
 8009e8c:	f000 f81e 	bl	8009ecc <fiprintf>
 8009e90:	f000 f8c0 	bl	800a014 <abort>
 8009e94:	4b04      	ldr	r3, [pc, #16]	; (8009ea8 <__assert_func+0x38>)
 8009e96:	461c      	mov	r4, r3
 8009e98:	e7f3      	b.n	8009e82 <__assert_func+0x12>
 8009e9a:	bf00      	nop
 8009e9c:	20000014 	.word	0x20000014
 8009ea0:	0800b555 	.word	0x0800b555
 8009ea4:	0800b562 	.word	0x0800b562
 8009ea8:	0800b590 	.word	0x0800b590

08009eac <_close_r>:
 8009eac:	b538      	push	{r3, r4, r5, lr}
 8009eae:	4d06      	ldr	r5, [pc, #24]	; (8009ec8 <_close_r+0x1c>)
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	4608      	mov	r0, r1
 8009eb6:	602b      	str	r3, [r5, #0]
 8009eb8:	f7f8 f88b 	bl	8001fd2 <_close>
 8009ebc:	1c43      	adds	r3, r0, #1
 8009ebe:	d102      	bne.n	8009ec6 <_close_r+0x1a>
 8009ec0:	682b      	ldr	r3, [r5, #0]
 8009ec2:	b103      	cbz	r3, 8009ec6 <_close_r+0x1a>
 8009ec4:	6023      	str	r3, [r4, #0]
 8009ec6:	bd38      	pop	{r3, r4, r5, pc}
 8009ec8:	200005b4 	.word	0x200005b4

08009ecc <fiprintf>:
 8009ecc:	b40e      	push	{r1, r2, r3}
 8009ece:	b503      	push	{r0, r1, lr}
 8009ed0:	4601      	mov	r1, r0
 8009ed2:	ab03      	add	r3, sp, #12
 8009ed4:	4805      	ldr	r0, [pc, #20]	; (8009eec <fiprintf+0x20>)
 8009ed6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eda:	6800      	ldr	r0, [r0, #0]
 8009edc:	9301      	str	r3, [sp, #4]
 8009ede:	f7ff fe0b 	bl	8009af8 <_vfiprintf_r>
 8009ee2:	b002      	add	sp, #8
 8009ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ee8:	b003      	add	sp, #12
 8009eea:	4770      	bx	lr
 8009eec:	20000014 	.word	0x20000014

08009ef0 <_fstat_r>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	4d07      	ldr	r5, [pc, #28]	; (8009f10 <_fstat_r+0x20>)
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	4608      	mov	r0, r1
 8009efa:	4611      	mov	r1, r2
 8009efc:	602b      	str	r3, [r5, #0]
 8009efe:	f7f8 f874 	bl	8001fea <_fstat>
 8009f02:	1c43      	adds	r3, r0, #1
 8009f04:	d102      	bne.n	8009f0c <_fstat_r+0x1c>
 8009f06:	682b      	ldr	r3, [r5, #0]
 8009f08:	b103      	cbz	r3, 8009f0c <_fstat_r+0x1c>
 8009f0a:	6023      	str	r3, [r4, #0]
 8009f0c:	bd38      	pop	{r3, r4, r5, pc}
 8009f0e:	bf00      	nop
 8009f10:	200005b4 	.word	0x200005b4

08009f14 <_isatty_r>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	4d06      	ldr	r5, [pc, #24]	; (8009f30 <_isatty_r+0x1c>)
 8009f18:	2300      	movs	r3, #0
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	4608      	mov	r0, r1
 8009f1e:	602b      	str	r3, [r5, #0]
 8009f20:	f7f8 f873 	bl	800200a <_isatty>
 8009f24:	1c43      	adds	r3, r0, #1
 8009f26:	d102      	bne.n	8009f2e <_isatty_r+0x1a>
 8009f28:	682b      	ldr	r3, [r5, #0]
 8009f2a:	b103      	cbz	r3, 8009f2e <_isatty_r+0x1a>
 8009f2c:	6023      	str	r3, [r4, #0]
 8009f2e:	bd38      	pop	{r3, r4, r5, pc}
 8009f30:	200005b4 	.word	0x200005b4

08009f34 <_lseek_r>:
 8009f34:	b538      	push	{r3, r4, r5, lr}
 8009f36:	4d07      	ldr	r5, [pc, #28]	; (8009f54 <_lseek_r+0x20>)
 8009f38:	4604      	mov	r4, r0
 8009f3a:	4608      	mov	r0, r1
 8009f3c:	4611      	mov	r1, r2
 8009f3e:	2200      	movs	r2, #0
 8009f40:	602a      	str	r2, [r5, #0]
 8009f42:	461a      	mov	r2, r3
 8009f44:	f7f8 f86c 	bl	8002020 <_lseek>
 8009f48:	1c43      	adds	r3, r0, #1
 8009f4a:	d102      	bne.n	8009f52 <_lseek_r+0x1e>
 8009f4c:	682b      	ldr	r3, [r5, #0]
 8009f4e:	b103      	cbz	r3, 8009f52 <_lseek_r+0x1e>
 8009f50:	6023      	str	r3, [r4, #0]
 8009f52:	bd38      	pop	{r3, r4, r5, pc}
 8009f54:	200005b4 	.word	0x200005b4

08009f58 <memmove>:
 8009f58:	4288      	cmp	r0, r1
 8009f5a:	b510      	push	{r4, lr}
 8009f5c:	eb01 0402 	add.w	r4, r1, r2
 8009f60:	d902      	bls.n	8009f68 <memmove+0x10>
 8009f62:	4284      	cmp	r4, r0
 8009f64:	4623      	mov	r3, r4
 8009f66:	d807      	bhi.n	8009f78 <memmove+0x20>
 8009f68:	1e43      	subs	r3, r0, #1
 8009f6a:	42a1      	cmp	r1, r4
 8009f6c:	d008      	beq.n	8009f80 <memmove+0x28>
 8009f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f76:	e7f8      	b.n	8009f6a <memmove+0x12>
 8009f78:	4402      	add	r2, r0
 8009f7a:	4601      	mov	r1, r0
 8009f7c:	428a      	cmp	r2, r1
 8009f7e:	d100      	bne.n	8009f82 <memmove+0x2a>
 8009f80:	bd10      	pop	{r4, pc}
 8009f82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f8a:	e7f7      	b.n	8009f7c <memmove+0x24>

08009f8c <__malloc_lock>:
 8009f8c:	4801      	ldr	r0, [pc, #4]	; (8009f94 <__malloc_lock+0x8>)
 8009f8e:	f7fe be2a 	b.w	8008be6 <__retarget_lock_acquire_recursive>
 8009f92:	bf00      	nop
 8009f94:	200005ac 	.word	0x200005ac

08009f98 <__malloc_unlock>:
 8009f98:	4801      	ldr	r0, [pc, #4]	; (8009fa0 <__malloc_unlock+0x8>)
 8009f9a:	f7fe be25 	b.w	8008be8 <__retarget_lock_release_recursive>
 8009f9e:	bf00      	nop
 8009fa0:	200005ac 	.word	0x200005ac

08009fa4 <_realloc_r>:
 8009fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa6:	4607      	mov	r7, r0
 8009fa8:	4614      	mov	r4, r2
 8009faa:	460e      	mov	r6, r1
 8009fac:	b921      	cbnz	r1, 8009fb8 <_realloc_r+0x14>
 8009fae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009fb2:	4611      	mov	r1, r2
 8009fb4:	f7ff bbc0 	b.w	8009738 <_malloc_r>
 8009fb8:	b922      	cbnz	r2, 8009fc4 <_realloc_r+0x20>
 8009fba:	f7ff fb6d 	bl	8009698 <_free_r>
 8009fbe:	4625      	mov	r5, r4
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fc4:	f000 f82d 	bl	800a022 <_malloc_usable_size_r>
 8009fc8:	42a0      	cmp	r0, r4
 8009fca:	d20f      	bcs.n	8009fec <_realloc_r+0x48>
 8009fcc:	4621      	mov	r1, r4
 8009fce:	4638      	mov	r0, r7
 8009fd0:	f7ff fbb2 	bl	8009738 <_malloc_r>
 8009fd4:	4605      	mov	r5, r0
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	d0f2      	beq.n	8009fc0 <_realloc_r+0x1c>
 8009fda:	4631      	mov	r1, r6
 8009fdc:	4622      	mov	r2, r4
 8009fde:	f7fe fe83 	bl	8008ce8 <memcpy>
 8009fe2:	4631      	mov	r1, r6
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	f7ff fb57 	bl	8009698 <_free_r>
 8009fea:	e7e9      	b.n	8009fc0 <_realloc_r+0x1c>
 8009fec:	4635      	mov	r5, r6
 8009fee:	e7e7      	b.n	8009fc0 <_realloc_r+0x1c>

08009ff0 <_read_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	4d07      	ldr	r5, [pc, #28]	; (800a010 <_read_r+0x20>)
 8009ff4:	4604      	mov	r4, r0
 8009ff6:	4608      	mov	r0, r1
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	602a      	str	r2, [r5, #0]
 8009ffe:	461a      	mov	r2, r3
 800a000:	f7f7 ffca 	bl	8001f98 <_read>
 800a004:	1c43      	adds	r3, r0, #1
 800a006:	d102      	bne.n	800a00e <_read_r+0x1e>
 800a008:	682b      	ldr	r3, [r5, #0]
 800a00a:	b103      	cbz	r3, 800a00e <_read_r+0x1e>
 800a00c:	6023      	str	r3, [r4, #0]
 800a00e:	bd38      	pop	{r3, r4, r5, pc}
 800a010:	200005b4 	.word	0x200005b4

0800a014 <abort>:
 800a014:	b508      	push	{r3, lr}
 800a016:	2006      	movs	r0, #6
 800a018:	f000 f834 	bl	800a084 <raise>
 800a01c:	2001      	movs	r0, #1
 800a01e:	f7f7 ffb1 	bl	8001f84 <_exit>

0800a022 <_malloc_usable_size_r>:
 800a022:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a026:	1f18      	subs	r0, r3, #4
 800a028:	2b00      	cmp	r3, #0
 800a02a:	bfbc      	itt	lt
 800a02c:	580b      	ldrlt	r3, [r1, r0]
 800a02e:	18c0      	addlt	r0, r0, r3
 800a030:	4770      	bx	lr

0800a032 <_raise_r>:
 800a032:	291f      	cmp	r1, #31
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	4604      	mov	r4, r0
 800a038:	460d      	mov	r5, r1
 800a03a:	d904      	bls.n	800a046 <_raise_r+0x14>
 800a03c:	2316      	movs	r3, #22
 800a03e:	6003      	str	r3, [r0, #0]
 800a040:	f04f 30ff 	mov.w	r0, #4294967295
 800a044:	bd38      	pop	{r3, r4, r5, pc}
 800a046:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a048:	b112      	cbz	r2, 800a050 <_raise_r+0x1e>
 800a04a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a04e:	b94b      	cbnz	r3, 800a064 <_raise_r+0x32>
 800a050:	4620      	mov	r0, r4
 800a052:	f000 f831 	bl	800a0b8 <_getpid_r>
 800a056:	462a      	mov	r2, r5
 800a058:	4601      	mov	r1, r0
 800a05a:	4620      	mov	r0, r4
 800a05c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a060:	f000 b818 	b.w	800a094 <_kill_r>
 800a064:	2b01      	cmp	r3, #1
 800a066:	d00a      	beq.n	800a07e <_raise_r+0x4c>
 800a068:	1c59      	adds	r1, r3, #1
 800a06a:	d103      	bne.n	800a074 <_raise_r+0x42>
 800a06c:	2316      	movs	r3, #22
 800a06e:	6003      	str	r3, [r0, #0]
 800a070:	2001      	movs	r0, #1
 800a072:	e7e7      	b.n	800a044 <_raise_r+0x12>
 800a074:	2400      	movs	r4, #0
 800a076:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a07a:	4628      	mov	r0, r5
 800a07c:	4798      	blx	r3
 800a07e:	2000      	movs	r0, #0
 800a080:	e7e0      	b.n	800a044 <_raise_r+0x12>
	...

0800a084 <raise>:
 800a084:	4b02      	ldr	r3, [pc, #8]	; (800a090 <raise+0xc>)
 800a086:	4601      	mov	r1, r0
 800a088:	6818      	ldr	r0, [r3, #0]
 800a08a:	f7ff bfd2 	b.w	800a032 <_raise_r>
 800a08e:	bf00      	nop
 800a090:	20000014 	.word	0x20000014

0800a094 <_kill_r>:
 800a094:	b538      	push	{r3, r4, r5, lr}
 800a096:	4d07      	ldr	r5, [pc, #28]	; (800a0b4 <_kill_r+0x20>)
 800a098:	2300      	movs	r3, #0
 800a09a:	4604      	mov	r4, r0
 800a09c:	4608      	mov	r0, r1
 800a09e:	4611      	mov	r1, r2
 800a0a0:	602b      	str	r3, [r5, #0]
 800a0a2:	f7f7 ff5f 	bl	8001f64 <_kill>
 800a0a6:	1c43      	adds	r3, r0, #1
 800a0a8:	d102      	bne.n	800a0b0 <_kill_r+0x1c>
 800a0aa:	682b      	ldr	r3, [r5, #0]
 800a0ac:	b103      	cbz	r3, 800a0b0 <_kill_r+0x1c>
 800a0ae:	6023      	str	r3, [r4, #0]
 800a0b0:	bd38      	pop	{r3, r4, r5, pc}
 800a0b2:	bf00      	nop
 800a0b4:	200005b4 	.word	0x200005b4

0800a0b8 <_getpid_r>:
 800a0b8:	f7f7 bf4c 	b.w	8001f54 <_getpid>

0800a0bc <pow>:
 800a0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0c0:	ec59 8b10 	vmov	r8, r9, d0
 800a0c4:	ec57 6b11 	vmov	r6, r7, d1
 800a0c8:	f000 f8a6 	bl	800a218 <__ieee754_pow>
 800a0cc:	4b4e      	ldr	r3, [pc, #312]	; (800a208 <pow+0x14c>)
 800a0ce:	f993 3000 	ldrsb.w	r3, [r3]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	ec55 4b10 	vmov	r4, r5, d0
 800a0d8:	d015      	beq.n	800a106 <pow+0x4a>
 800a0da:	4632      	mov	r2, r6
 800a0dc:	463b      	mov	r3, r7
 800a0de:	4630      	mov	r0, r6
 800a0e0:	4639      	mov	r1, r7
 800a0e2:	f7f6 fd23 	bl	8000b2c <__aeabi_dcmpun>
 800a0e6:	b970      	cbnz	r0, 800a106 <pow+0x4a>
 800a0e8:	4642      	mov	r2, r8
 800a0ea:	464b      	mov	r3, r9
 800a0ec:	4640      	mov	r0, r8
 800a0ee:	4649      	mov	r1, r9
 800a0f0:	f7f6 fd1c 	bl	8000b2c <__aeabi_dcmpun>
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	b148      	cbz	r0, 800a10e <pow+0x52>
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	4639      	mov	r1, r7
 800a0fe:	f7f6 fce3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a102:	2800      	cmp	r0, #0
 800a104:	d17d      	bne.n	800a202 <pow+0x146>
 800a106:	ec45 4b10 	vmov	d0, r4, r5
 800a10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a10e:	4640      	mov	r0, r8
 800a110:	4649      	mov	r1, r9
 800a112:	f7f6 fcd9 	bl	8000ac8 <__aeabi_dcmpeq>
 800a116:	b1e0      	cbz	r0, 800a152 <pow+0x96>
 800a118:	2200      	movs	r2, #0
 800a11a:	2300      	movs	r3, #0
 800a11c:	4630      	mov	r0, r6
 800a11e:	4639      	mov	r1, r7
 800a120:	f7f6 fcd2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a124:	2800      	cmp	r0, #0
 800a126:	d16c      	bne.n	800a202 <pow+0x146>
 800a128:	ec47 6b10 	vmov	d0, r6, r7
 800a12c:	f000 fe53 	bl	800add6 <finite>
 800a130:	2800      	cmp	r0, #0
 800a132:	d0e8      	beq.n	800a106 <pow+0x4a>
 800a134:	2200      	movs	r2, #0
 800a136:	2300      	movs	r3, #0
 800a138:	4630      	mov	r0, r6
 800a13a:	4639      	mov	r1, r7
 800a13c:	f7f6 fcce 	bl	8000adc <__aeabi_dcmplt>
 800a140:	2800      	cmp	r0, #0
 800a142:	d0e0      	beq.n	800a106 <pow+0x4a>
 800a144:	f7fb fad8 	bl	80056f8 <__errno>
 800a148:	2321      	movs	r3, #33	; 0x21
 800a14a:	6003      	str	r3, [r0, #0]
 800a14c:	2400      	movs	r4, #0
 800a14e:	4d2f      	ldr	r5, [pc, #188]	; (800a20c <pow+0x150>)
 800a150:	e7d9      	b.n	800a106 <pow+0x4a>
 800a152:	ec45 4b10 	vmov	d0, r4, r5
 800a156:	f000 fe3e 	bl	800add6 <finite>
 800a15a:	bbb8      	cbnz	r0, 800a1cc <pow+0x110>
 800a15c:	ec49 8b10 	vmov	d0, r8, r9
 800a160:	f000 fe39 	bl	800add6 <finite>
 800a164:	b390      	cbz	r0, 800a1cc <pow+0x110>
 800a166:	ec47 6b10 	vmov	d0, r6, r7
 800a16a:	f000 fe34 	bl	800add6 <finite>
 800a16e:	b368      	cbz	r0, 800a1cc <pow+0x110>
 800a170:	4622      	mov	r2, r4
 800a172:	462b      	mov	r3, r5
 800a174:	4620      	mov	r0, r4
 800a176:	4629      	mov	r1, r5
 800a178:	f7f6 fcd8 	bl	8000b2c <__aeabi_dcmpun>
 800a17c:	b160      	cbz	r0, 800a198 <pow+0xdc>
 800a17e:	f7fb fabb 	bl	80056f8 <__errno>
 800a182:	2321      	movs	r3, #33	; 0x21
 800a184:	6003      	str	r3, [r0, #0]
 800a186:	2200      	movs	r2, #0
 800a188:	2300      	movs	r3, #0
 800a18a:	4610      	mov	r0, r2
 800a18c:	4619      	mov	r1, r3
 800a18e:	f7f6 fb5d 	bl	800084c <__aeabi_ddiv>
 800a192:	4604      	mov	r4, r0
 800a194:	460d      	mov	r5, r1
 800a196:	e7b6      	b.n	800a106 <pow+0x4a>
 800a198:	f7fb faae 	bl	80056f8 <__errno>
 800a19c:	2322      	movs	r3, #34	; 0x22
 800a19e:	6003      	str	r3, [r0, #0]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	4640      	mov	r0, r8
 800a1a6:	4649      	mov	r1, r9
 800a1a8:	f7f6 fc98 	bl	8000adc <__aeabi_dcmplt>
 800a1ac:	2400      	movs	r4, #0
 800a1ae:	b158      	cbz	r0, 800a1c8 <pow+0x10c>
 800a1b0:	ec47 6b10 	vmov	d0, r6, r7
 800a1b4:	f000 fe1a 	bl	800adec <rint>
 800a1b8:	4632      	mov	r2, r6
 800a1ba:	ec51 0b10 	vmov	r0, r1, d0
 800a1be:	463b      	mov	r3, r7
 800a1c0:	f7f6 fc82 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	d0c2      	beq.n	800a14e <pow+0x92>
 800a1c8:	4d11      	ldr	r5, [pc, #68]	; (800a210 <pow+0x154>)
 800a1ca:	e79c      	b.n	800a106 <pow+0x4a>
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	4629      	mov	r1, r5
 800a1d4:	f7f6 fc78 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	d094      	beq.n	800a106 <pow+0x4a>
 800a1dc:	ec49 8b10 	vmov	d0, r8, r9
 800a1e0:	f000 fdf9 	bl	800add6 <finite>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d08e      	beq.n	800a106 <pow+0x4a>
 800a1e8:	ec47 6b10 	vmov	d0, r6, r7
 800a1ec:	f000 fdf3 	bl	800add6 <finite>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d088      	beq.n	800a106 <pow+0x4a>
 800a1f4:	f7fb fa80 	bl	80056f8 <__errno>
 800a1f8:	2322      	movs	r3, #34	; 0x22
 800a1fa:	6003      	str	r3, [r0, #0]
 800a1fc:	2400      	movs	r4, #0
 800a1fe:	2500      	movs	r5, #0
 800a200:	e781      	b.n	800a106 <pow+0x4a>
 800a202:	4d04      	ldr	r5, [pc, #16]	; (800a214 <pow+0x158>)
 800a204:	2400      	movs	r4, #0
 800a206:	e77e      	b.n	800a106 <pow+0x4a>
 800a208:	200001e8 	.word	0x200001e8
 800a20c:	fff00000 	.word	0xfff00000
 800a210:	7ff00000 	.word	0x7ff00000
 800a214:	3ff00000 	.word	0x3ff00000

0800a218 <__ieee754_pow>:
 800a218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21c:	ed2d 8b06 	vpush	{d8-d10}
 800a220:	b08d      	sub	sp, #52	; 0x34
 800a222:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a226:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800a22a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800a22e:	ea56 0100 	orrs.w	r1, r6, r0
 800a232:	ec53 2b10 	vmov	r2, r3, d0
 800a236:	f000 84d1 	beq.w	800abdc <__ieee754_pow+0x9c4>
 800a23a:	497f      	ldr	r1, [pc, #508]	; (800a438 <__ieee754_pow+0x220>)
 800a23c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800a240:	428c      	cmp	r4, r1
 800a242:	ee10 8a10 	vmov	r8, s0
 800a246:	4699      	mov	r9, r3
 800a248:	dc09      	bgt.n	800a25e <__ieee754_pow+0x46>
 800a24a:	d103      	bne.n	800a254 <__ieee754_pow+0x3c>
 800a24c:	b97a      	cbnz	r2, 800a26e <__ieee754_pow+0x56>
 800a24e:	42a6      	cmp	r6, r4
 800a250:	dd02      	ble.n	800a258 <__ieee754_pow+0x40>
 800a252:	e00c      	b.n	800a26e <__ieee754_pow+0x56>
 800a254:	428e      	cmp	r6, r1
 800a256:	dc02      	bgt.n	800a25e <__ieee754_pow+0x46>
 800a258:	428e      	cmp	r6, r1
 800a25a:	d110      	bne.n	800a27e <__ieee754_pow+0x66>
 800a25c:	b178      	cbz	r0, 800a27e <__ieee754_pow+0x66>
 800a25e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a262:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a266:	ea54 0308 	orrs.w	r3, r4, r8
 800a26a:	f000 84b7 	beq.w	800abdc <__ieee754_pow+0x9c4>
 800a26e:	4873      	ldr	r0, [pc, #460]	; (800a43c <__ieee754_pow+0x224>)
 800a270:	b00d      	add	sp, #52	; 0x34
 800a272:	ecbd 8b06 	vpop	{d8-d10}
 800a276:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a27a:	f7ff bd6d 	b.w	8009d58 <nan>
 800a27e:	f1b9 0f00 	cmp.w	r9, #0
 800a282:	da36      	bge.n	800a2f2 <__ieee754_pow+0xda>
 800a284:	496e      	ldr	r1, [pc, #440]	; (800a440 <__ieee754_pow+0x228>)
 800a286:	428e      	cmp	r6, r1
 800a288:	dc51      	bgt.n	800a32e <__ieee754_pow+0x116>
 800a28a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800a28e:	428e      	cmp	r6, r1
 800a290:	f340 84af 	ble.w	800abf2 <__ieee754_pow+0x9da>
 800a294:	1531      	asrs	r1, r6, #20
 800a296:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a29a:	2914      	cmp	r1, #20
 800a29c:	dd0f      	ble.n	800a2be <__ieee754_pow+0xa6>
 800a29e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800a2a2:	fa20 fc01 	lsr.w	ip, r0, r1
 800a2a6:	fa0c f101 	lsl.w	r1, ip, r1
 800a2aa:	4281      	cmp	r1, r0
 800a2ac:	f040 84a1 	bne.w	800abf2 <__ieee754_pow+0x9da>
 800a2b0:	f00c 0c01 	and.w	ip, ip, #1
 800a2b4:	f1cc 0102 	rsb	r1, ip, #2
 800a2b8:	9100      	str	r1, [sp, #0]
 800a2ba:	b180      	cbz	r0, 800a2de <__ieee754_pow+0xc6>
 800a2bc:	e059      	b.n	800a372 <__ieee754_pow+0x15a>
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	d155      	bne.n	800a36e <__ieee754_pow+0x156>
 800a2c2:	f1c1 0114 	rsb	r1, r1, #20
 800a2c6:	fa46 fc01 	asr.w	ip, r6, r1
 800a2ca:	fa0c f101 	lsl.w	r1, ip, r1
 800a2ce:	42b1      	cmp	r1, r6
 800a2d0:	f040 848c 	bne.w	800abec <__ieee754_pow+0x9d4>
 800a2d4:	f00c 0c01 	and.w	ip, ip, #1
 800a2d8:	f1cc 0102 	rsb	r1, ip, #2
 800a2dc:	9100      	str	r1, [sp, #0]
 800a2de:	4959      	ldr	r1, [pc, #356]	; (800a444 <__ieee754_pow+0x22c>)
 800a2e0:	428e      	cmp	r6, r1
 800a2e2:	d12d      	bne.n	800a340 <__ieee754_pow+0x128>
 800a2e4:	2f00      	cmp	r7, #0
 800a2e6:	da79      	bge.n	800a3dc <__ieee754_pow+0x1c4>
 800a2e8:	4956      	ldr	r1, [pc, #344]	; (800a444 <__ieee754_pow+0x22c>)
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	f7f6 faae 	bl	800084c <__aeabi_ddiv>
 800a2f0:	e016      	b.n	800a320 <__ieee754_pow+0x108>
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	9100      	str	r1, [sp, #0]
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	d13b      	bne.n	800a372 <__ieee754_pow+0x15a>
 800a2fa:	494f      	ldr	r1, [pc, #316]	; (800a438 <__ieee754_pow+0x220>)
 800a2fc:	428e      	cmp	r6, r1
 800a2fe:	d1ee      	bne.n	800a2de <__ieee754_pow+0xc6>
 800a300:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a304:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a308:	ea53 0308 	orrs.w	r3, r3, r8
 800a30c:	f000 8466 	beq.w	800abdc <__ieee754_pow+0x9c4>
 800a310:	4b4d      	ldr	r3, [pc, #308]	; (800a448 <__ieee754_pow+0x230>)
 800a312:	429c      	cmp	r4, r3
 800a314:	dd0d      	ble.n	800a332 <__ieee754_pow+0x11a>
 800a316:	2f00      	cmp	r7, #0
 800a318:	f280 8464 	bge.w	800abe4 <__ieee754_pow+0x9cc>
 800a31c:	2000      	movs	r0, #0
 800a31e:	2100      	movs	r1, #0
 800a320:	ec41 0b10 	vmov	d0, r0, r1
 800a324:	b00d      	add	sp, #52	; 0x34
 800a326:	ecbd 8b06 	vpop	{d8-d10}
 800a32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32e:	2102      	movs	r1, #2
 800a330:	e7e0      	b.n	800a2f4 <__ieee754_pow+0xdc>
 800a332:	2f00      	cmp	r7, #0
 800a334:	daf2      	bge.n	800a31c <__ieee754_pow+0x104>
 800a336:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800a33a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a33e:	e7ef      	b.n	800a320 <__ieee754_pow+0x108>
 800a340:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800a344:	d104      	bne.n	800a350 <__ieee754_pow+0x138>
 800a346:	4610      	mov	r0, r2
 800a348:	4619      	mov	r1, r3
 800a34a:	f7f6 f955 	bl	80005f8 <__aeabi_dmul>
 800a34e:	e7e7      	b.n	800a320 <__ieee754_pow+0x108>
 800a350:	493e      	ldr	r1, [pc, #248]	; (800a44c <__ieee754_pow+0x234>)
 800a352:	428f      	cmp	r7, r1
 800a354:	d10d      	bne.n	800a372 <__ieee754_pow+0x15a>
 800a356:	f1b9 0f00 	cmp.w	r9, #0
 800a35a:	db0a      	blt.n	800a372 <__ieee754_pow+0x15a>
 800a35c:	ec43 2b10 	vmov	d0, r2, r3
 800a360:	b00d      	add	sp, #52	; 0x34
 800a362:	ecbd 8b06 	vpop	{d8-d10}
 800a366:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a36a:	f000 bc77 	b.w	800ac5c <__ieee754_sqrt>
 800a36e:	2100      	movs	r1, #0
 800a370:	9100      	str	r1, [sp, #0]
 800a372:	ec43 2b10 	vmov	d0, r2, r3
 800a376:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a37a:	f000 fd23 	bl	800adc4 <fabs>
 800a37e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a382:	ec51 0b10 	vmov	r0, r1, d0
 800a386:	f1b8 0f00 	cmp.w	r8, #0
 800a38a:	d12a      	bne.n	800a3e2 <__ieee754_pow+0x1ca>
 800a38c:	b12c      	cbz	r4, 800a39a <__ieee754_pow+0x182>
 800a38e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800a444 <__ieee754_pow+0x22c>
 800a392:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800a396:	45e6      	cmp	lr, ip
 800a398:	d123      	bne.n	800a3e2 <__ieee754_pow+0x1ca>
 800a39a:	2f00      	cmp	r7, #0
 800a39c:	da05      	bge.n	800a3aa <__ieee754_pow+0x192>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	2000      	movs	r0, #0
 800a3a4:	4927      	ldr	r1, [pc, #156]	; (800a444 <__ieee754_pow+0x22c>)
 800a3a6:	f7f6 fa51 	bl	800084c <__aeabi_ddiv>
 800a3aa:	f1b9 0f00 	cmp.w	r9, #0
 800a3ae:	dab7      	bge.n	800a320 <__ieee754_pow+0x108>
 800a3b0:	9b00      	ldr	r3, [sp, #0]
 800a3b2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a3b6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a3ba:	4323      	orrs	r3, r4
 800a3bc:	d108      	bne.n	800a3d0 <__ieee754_pow+0x1b8>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	4610      	mov	r0, r2
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	f7f5 ff5f 	bl	8000288 <__aeabi_dsub>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	e78d      	b.n	800a2ec <__ieee754_pow+0xd4>
 800a3d0:	9b00      	ldr	r3, [sp, #0]
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d1a4      	bne.n	800a320 <__ieee754_pow+0x108>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3dc:	4610      	mov	r0, r2
 800a3de:	4619      	mov	r1, r3
 800a3e0:	e79e      	b.n	800a320 <__ieee754_pow+0x108>
 800a3e2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800a3e6:	f10c 35ff 	add.w	r5, ip, #4294967295
 800a3ea:	950a      	str	r5, [sp, #40]	; 0x28
 800a3ec:	9d00      	ldr	r5, [sp, #0]
 800a3ee:	46ac      	mov	ip, r5
 800a3f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a3f2:	ea5c 0505 	orrs.w	r5, ip, r5
 800a3f6:	d0e4      	beq.n	800a3c2 <__ieee754_pow+0x1aa>
 800a3f8:	4b15      	ldr	r3, [pc, #84]	; (800a450 <__ieee754_pow+0x238>)
 800a3fa:	429e      	cmp	r6, r3
 800a3fc:	f340 80fc 	ble.w	800a5f8 <__ieee754_pow+0x3e0>
 800a400:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a404:	429e      	cmp	r6, r3
 800a406:	4b10      	ldr	r3, [pc, #64]	; (800a448 <__ieee754_pow+0x230>)
 800a408:	dd07      	ble.n	800a41a <__ieee754_pow+0x202>
 800a40a:	429c      	cmp	r4, r3
 800a40c:	dc0a      	bgt.n	800a424 <__ieee754_pow+0x20c>
 800a40e:	2f00      	cmp	r7, #0
 800a410:	da84      	bge.n	800a31c <__ieee754_pow+0x104>
 800a412:	a307      	add	r3, pc, #28	; (adr r3, 800a430 <__ieee754_pow+0x218>)
 800a414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a418:	e795      	b.n	800a346 <__ieee754_pow+0x12e>
 800a41a:	429c      	cmp	r4, r3
 800a41c:	dbf7      	blt.n	800a40e <__ieee754_pow+0x1f6>
 800a41e:	4b09      	ldr	r3, [pc, #36]	; (800a444 <__ieee754_pow+0x22c>)
 800a420:	429c      	cmp	r4, r3
 800a422:	dd17      	ble.n	800a454 <__ieee754_pow+0x23c>
 800a424:	2f00      	cmp	r7, #0
 800a426:	dcf4      	bgt.n	800a412 <__ieee754_pow+0x1fa>
 800a428:	e778      	b.n	800a31c <__ieee754_pow+0x104>
 800a42a:	bf00      	nop
 800a42c:	f3af 8000 	nop.w
 800a430:	8800759c 	.word	0x8800759c
 800a434:	7e37e43c 	.word	0x7e37e43c
 800a438:	7ff00000 	.word	0x7ff00000
 800a43c:	0800b590 	.word	0x0800b590
 800a440:	433fffff 	.word	0x433fffff
 800a444:	3ff00000 	.word	0x3ff00000
 800a448:	3fefffff 	.word	0x3fefffff
 800a44c:	3fe00000 	.word	0x3fe00000
 800a450:	41e00000 	.word	0x41e00000
 800a454:	4b64      	ldr	r3, [pc, #400]	; (800a5e8 <__ieee754_pow+0x3d0>)
 800a456:	2200      	movs	r2, #0
 800a458:	f7f5 ff16 	bl	8000288 <__aeabi_dsub>
 800a45c:	a356      	add	r3, pc, #344	; (adr r3, 800a5b8 <__ieee754_pow+0x3a0>)
 800a45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a462:	4604      	mov	r4, r0
 800a464:	460d      	mov	r5, r1
 800a466:	f7f6 f8c7 	bl	80005f8 <__aeabi_dmul>
 800a46a:	a355      	add	r3, pc, #340	; (adr r3, 800a5c0 <__ieee754_pow+0x3a8>)
 800a46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a470:	4606      	mov	r6, r0
 800a472:	460f      	mov	r7, r1
 800a474:	4620      	mov	r0, r4
 800a476:	4629      	mov	r1, r5
 800a478:	f7f6 f8be 	bl	80005f8 <__aeabi_dmul>
 800a47c:	4b5b      	ldr	r3, [pc, #364]	; (800a5ec <__ieee754_pow+0x3d4>)
 800a47e:	4682      	mov	sl, r0
 800a480:	468b      	mov	fp, r1
 800a482:	2200      	movs	r2, #0
 800a484:	4620      	mov	r0, r4
 800a486:	4629      	mov	r1, r5
 800a488:	f7f6 f8b6 	bl	80005f8 <__aeabi_dmul>
 800a48c:	4602      	mov	r2, r0
 800a48e:	460b      	mov	r3, r1
 800a490:	a14d      	add	r1, pc, #308	; (adr r1, 800a5c8 <__ieee754_pow+0x3b0>)
 800a492:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a496:	f7f5 fef7 	bl	8000288 <__aeabi_dsub>
 800a49a:	4622      	mov	r2, r4
 800a49c:	462b      	mov	r3, r5
 800a49e:	f7f6 f8ab 	bl	80005f8 <__aeabi_dmul>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	2000      	movs	r0, #0
 800a4a8:	4951      	ldr	r1, [pc, #324]	; (800a5f0 <__ieee754_pow+0x3d8>)
 800a4aa:	f7f5 feed 	bl	8000288 <__aeabi_dsub>
 800a4ae:	4622      	mov	r2, r4
 800a4b0:	4680      	mov	r8, r0
 800a4b2:	4689      	mov	r9, r1
 800a4b4:	462b      	mov	r3, r5
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	4629      	mov	r1, r5
 800a4ba:	f7f6 f89d 	bl	80005f8 <__aeabi_dmul>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	4640      	mov	r0, r8
 800a4c4:	4649      	mov	r1, r9
 800a4c6:	f7f6 f897 	bl	80005f8 <__aeabi_dmul>
 800a4ca:	a341      	add	r3, pc, #260	; (adr r3, 800a5d0 <__ieee754_pow+0x3b8>)
 800a4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d0:	f7f6 f892 	bl	80005f8 <__aeabi_dmul>
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	4650      	mov	r0, sl
 800a4da:	4659      	mov	r1, fp
 800a4dc:	f7f5 fed4 	bl	8000288 <__aeabi_dsub>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	4680      	mov	r8, r0
 800a4e6:	4689      	mov	r9, r1
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	4639      	mov	r1, r7
 800a4ec:	f7f5 fece 	bl	800028c <__adddf3>
 800a4f0:	2400      	movs	r4, #0
 800a4f2:	4632      	mov	r2, r6
 800a4f4:	463b      	mov	r3, r7
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	460d      	mov	r5, r1
 800a4fa:	f7f5 fec5 	bl	8000288 <__aeabi_dsub>
 800a4fe:	4602      	mov	r2, r0
 800a500:	460b      	mov	r3, r1
 800a502:	4640      	mov	r0, r8
 800a504:	4649      	mov	r1, r9
 800a506:	f7f5 febf 	bl	8000288 <__aeabi_dsub>
 800a50a:	9b00      	ldr	r3, [sp, #0]
 800a50c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a50e:	3b01      	subs	r3, #1
 800a510:	4313      	orrs	r3, r2
 800a512:	4682      	mov	sl, r0
 800a514:	468b      	mov	fp, r1
 800a516:	f040 81f1 	bne.w	800a8fc <__ieee754_pow+0x6e4>
 800a51a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800a5d8 <__ieee754_pow+0x3c0>
 800a51e:	eeb0 8a47 	vmov.f32	s16, s14
 800a522:	eef0 8a67 	vmov.f32	s17, s15
 800a526:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a52a:	2600      	movs	r6, #0
 800a52c:	4632      	mov	r2, r6
 800a52e:	463b      	mov	r3, r7
 800a530:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a534:	f7f5 fea8 	bl	8000288 <__aeabi_dsub>
 800a538:	4622      	mov	r2, r4
 800a53a:	462b      	mov	r3, r5
 800a53c:	f7f6 f85c 	bl	80005f8 <__aeabi_dmul>
 800a540:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a544:	4680      	mov	r8, r0
 800a546:	4689      	mov	r9, r1
 800a548:	4650      	mov	r0, sl
 800a54a:	4659      	mov	r1, fp
 800a54c:	f7f6 f854 	bl	80005f8 <__aeabi_dmul>
 800a550:	4602      	mov	r2, r0
 800a552:	460b      	mov	r3, r1
 800a554:	4640      	mov	r0, r8
 800a556:	4649      	mov	r1, r9
 800a558:	f7f5 fe98 	bl	800028c <__adddf3>
 800a55c:	4632      	mov	r2, r6
 800a55e:	463b      	mov	r3, r7
 800a560:	4680      	mov	r8, r0
 800a562:	4689      	mov	r9, r1
 800a564:	4620      	mov	r0, r4
 800a566:	4629      	mov	r1, r5
 800a568:	f7f6 f846 	bl	80005f8 <__aeabi_dmul>
 800a56c:	460b      	mov	r3, r1
 800a56e:	4604      	mov	r4, r0
 800a570:	460d      	mov	r5, r1
 800a572:	4602      	mov	r2, r0
 800a574:	4649      	mov	r1, r9
 800a576:	4640      	mov	r0, r8
 800a578:	f7f5 fe88 	bl	800028c <__adddf3>
 800a57c:	4b1d      	ldr	r3, [pc, #116]	; (800a5f4 <__ieee754_pow+0x3dc>)
 800a57e:	4299      	cmp	r1, r3
 800a580:	ec45 4b19 	vmov	d9, r4, r5
 800a584:	4606      	mov	r6, r0
 800a586:	460f      	mov	r7, r1
 800a588:	468b      	mov	fp, r1
 800a58a:	f340 82fe 	ble.w	800ab8a <__ieee754_pow+0x972>
 800a58e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a592:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a596:	4303      	orrs	r3, r0
 800a598:	f000 81f0 	beq.w	800a97c <__ieee754_pow+0x764>
 800a59c:	a310      	add	r3, pc, #64	; (adr r3, 800a5e0 <__ieee754_pow+0x3c8>)
 800a59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a2:	ec51 0b18 	vmov	r0, r1, d8
 800a5a6:	f7f6 f827 	bl	80005f8 <__aeabi_dmul>
 800a5aa:	a30d      	add	r3, pc, #52	; (adr r3, 800a5e0 <__ieee754_pow+0x3c8>)
 800a5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b0:	e6cb      	b.n	800a34a <__ieee754_pow+0x132>
 800a5b2:	bf00      	nop
 800a5b4:	f3af 8000 	nop.w
 800a5b8:	60000000 	.word	0x60000000
 800a5bc:	3ff71547 	.word	0x3ff71547
 800a5c0:	f85ddf44 	.word	0xf85ddf44
 800a5c4:	3e54ae0b 	.word	0x3e54ae0b
 800a5c8:	55555555 	.word	0x55555555
 800a5cc:	3fd55555 	.word	0x3fd55555
 800a5d0:	652b82fe 	.word	0x652b82fe
 800a5d4:	3ff71547 	.word	0x3ff71547
 800a5d8:	00000000 	.word	0x00000000
 800a5dc:	bff00000 	.word	0xbff00000
 800a5e0:	8800759c 	.word	0x8800759c
 800a5e4:	7e37e43c 	.word	0x7e37e43c
 800a5e8:	3ff00000 	.word	0x3ff00000
 800a5ec:	3fd00000 	.word	0x3fd00000
 800a5f0:	3fe00000 	.word	0x3fe00000
 800a5f4:	408fffff 	.word	0x408fffff
 800a5f8:	4bd7      	ldr	r3, [pc, #860]	; (800a958 <__ieee754_pow+0x740>)
 800a5fa:	ea03 0309 	and.w	r3, r3, r9
 800a5fe:	2200      	movs	r2, #0
 800a600:	b92b      	cbnz	r3, 800a60e <__ieee754_pow+0x3f6>
 800a602:	4bd6      	ldr	r3, [pc, #856]	; (800a95c <__ieee754_pow+0x744>)
 800a604:	f7f5 fff8 	bl	80005f8 <__aeabi_dmul>
 800a608:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a60c:	460c      	mov	r4, r1
 800a60e:	1523      	asrs	r3, r4, #20
 800a610:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a614:	4413      	add	r3, r2
 800a616:	9309      	str	r3, [sp, #36]	; 0x24
 800a618:	4bd1      	ldr	r3, [pc, #836]	; (800a960 <__ieee754_pow+0x748>)
 800a61a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a61e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a622:	429c      	cmp	r4, r3
 800a624:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a628:	dd08      	ble.n	800a63c <__ieee754_pow+0x424>
 800a62a:	4bce      	ldr	r3, [pc, #824]	; (800a964 <__ieee754_pow+0x74c>)
 800a62c:	429c      	cmp	r4, r3
 800a62e:	f340 8163 	ble.w	800a8f8 <__ieee754_pow+0x6e0>
 800a632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a634:	3301      	adds	r3, #1
 800a636:	9309      	str	r3, [sp, #36]	; 0x24
 800a638:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a63c:	2400      	movs	r4, #0
 800a63e:	00e3      	lsls	r3, r4, #3
 800a640:	930b      	str	r3, [sp, #44]	; 0x2c
 800a642:	4bc9      	ldr	r3, [pc, #804]	; (800a968 <__ieee754_pow+0x750>)
 800a644:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a648:	ed93 7b00 	vldr	d7, [r3]
 800a64c:	4629      	mov	r1, r5
 800a64e:	ec53 2b17 	vmov	r2, r3, d7
 800a652:	eeb0 8a47 	vmov.f32	s16, s14
 800a656:	eef0 8a67 	vmov.f32	s17, s15
 800a65a:	4682      	mov	sl, r0
 800a65c:	f7f5 fe14 	bl	8000288 <__aeabi_dsub>
 800a660:	4652      	mov	r2, sl
 800a662:	4606      	mov	r6, r0
 800a664:	460f      	mov	r7, r1
 800a666:	462b      	mov	r3, r5
 800a668:	ec51 0b18 	vmov	r0, r1, d8
 800a66c:	f7f5 fe0e 	bl	800028c <__adddf3>
 800a670:	4602      	mov	r2, r0
 800a672:	460b      	mov	r3, r1
 800a674:	2000      	movs	r0, #0
 800a676:	49bd      	ldr	r1, [pc, #756]	; (800a96c <__ieee754_pow+0x754>)
 800a678:	f7f6 f8e8 	bl	800084c <__aeabi_ddiv>
 800a67c:	ec41 0b19 	vmov	d9, r0, r1
 800a680:	4602      	mov	r2, r0
 800a682:	460b      	mov	r3, r1
 800a684:	4630      	mov	r0, r6
 800a686:	4639      	mov	r1, r7
 800a688:	f7f5 ffb6 	bl	80005f8 <__aeabi_dmul>
 800a68c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a690:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a694:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a698:	2300      	movs	r3, #0
 800a69a:	9304      	str	r3, [sp, #16]
 800a69c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a6a0:	46ab      	mov	fp, r5
 800a6a2:	106d      	asrs	r5, r5, #1
 800a6a4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a6a8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a6ac:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	4640      	mov	r0, r8
 800a6b4:	4649      	mov	r1, r9
 800a6b6:	4614      	mov	r4, r2
 800a6b8:	461d      	mov	r5, r3
 800a6ba:	f7f5 ff9d 	bl	80005f8 <__aeabi_dmul>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	4639      	mov	r1, r7
 800a6c6:	f7f5 fddf 	bl	8000288 <__aeabi_dsub>
 800a6ca:	ec53 2b18 	vmov	r2, r3, d8
 800a6ce:	4606      	mov	r6, r0
 800a6d0:	460f      	mov	r7, r1
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	4629      	mov	r1, r5
 800a6d6:	f7f5 fdd7 	bl	8000288 <__aeabi_dsub>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	460b      	mov	r3, r1
 800a6de:	4650      	mov	r0, sl
 800a6e0:	4659      	mov	r1, fp
 800a6e2:	f7f5 fdd1 	bl	8000288 <__aeabi_dsub>
 800a6e6:	4642      	mov	r2, r8
 800a6e8:	464b      	mov	r3, r9
 800a6ea:	f7f5 ff85 	bl	80005f8 <__aeabi_dmul>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	4630      	mov	r0, r6
 800a6f4:	4639      	mov	r1, r7
 800a6f6:	f7f5 fdc7 	bl	8000288 <__aeabi_dsub>
 800a6fa:	ec53 2b19 	vmov	r2, r3, d9
 800a6fe:	f7f5 ff7b 	bl	80005f8 <__aeabi_dmul>
 800a702:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a706:	ec41 0b18 	vmov	d8, r0, r1
 800a70a:	4610      	mov	r0, r2
 800a70c:	4619      	mov	r1, r3
 800a70e:	f7f5 ff73 	bl	80005f8 <__aeabi_dmul>
 800a712:	a37d      	add	r3, pc, #500	; (adr r3, 800a908 <__ieee754_pow+0x6f0>)
 800a714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a718:	4604      	mov	r4, r0
 800a71a:	460d      	mov	r5, r1
 800a71c:	f7f5 ff6c 	bl	80005f8 <__aeabi_dmul>
 800a720:	a37b      	add	r3, pc, #492	; (adr r3, 800a910 <__ieee754_pow+0x6f8>)
 800a722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a726:	f7f5 fdb1 	bl	800028c <__adddf3>
 800a72a:	4622      	mov	r2, r4
 800a72c:	462b      	mov	r3, r5
 800a72e:	f7f5 ff63 	bl	80005f8 <__aeabi_dmul>
 800a732:	a379      	add	r3, pc, #484	; (adr r3, 800a918 <__ieee754_pow+0x700>)
 800a734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a738:	f7f5 fda8 	bl	800028c <__adddf3>
 800a73c:	4622      	mov	r2, r4
 800a73e:	462b      	mov	r3, r5
 800a740:	f7f5 ff5a 	bl	80005f8 <__aeabi_dmul>
 800a744:	a376      	add	r3, pc, #472	; (adr r3, 800a920 <__ieee754_pow+0x708>)
 800a746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74a:	f7f5 fd9f 	bl	800028c <__adddf3>
 800a74e:	4622      	mov	r2, r4
 800a750:	462b      	mov	r3, r5
 800a752:	f7f5 ff51 	bl	80005f8 <__aeabi_dmul>
 800a756:	a374      	add	r3, pc, #464	; (adr r3, 800a928 <__ieee754_pow+0x710>)
 800a758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75c:	f7f5 fd96 	bl	800028c <__adddf3>
 800a760:	4622      	mov	r2, r4
 800a762:	462b      	mov	r3, r5
 800a764:	f7f5 ff48 	bl	80005f8 <__aeabi_dmul>
 800a768:	a371      	add	r3, pc, #452	; (adr r3, 800a930 <__ieee754_pow+0x718>)
 800a76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76e:	f7f5 fd8d 	bl	800028c <__adddf3>
 800a772:	4622      	mov	r2, r4
 800a774:	4606      	mov	r6, r0
 800a776:	460f      	mov	r7, r1
 800a778:	462b      	mov	r3, r5
 800a77a:	4620      	mov	r0, r4
 800a77c:	4629      	mov	r1, r5
 800a77e:	f7f5 ff3b 	bl	80005f8 <__aeabi_dmul>
 800a782:	4602      	mov	r2, r0
 800a784:	460b      	mov	r3, r1
 800a786:	4630      	mov	r0, r6
 800a788:	4639      	mov	r1, r7
 800a78a:	f7f5 ff35 	bl	80005f8 <__aeabi_dmul>
 800a78e:	4642      	mov	r2, r8
 800a790:	4604      	mov	r4, r0
 800a792:	460d      	mov	r5, r1
 800a794:	464b      	mov	r3, r9
 800a796:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a79a:	f7f5 fd77 	bl	800028c <__adddf3>
 800a79e:	ec53 2b18 	vmov	r2, r3, d8
 800a7a2:	f7f5 ff29 	bl	80005f8 <__aeabi_dmul>
 800a7a6:	4622      	mov	r2, r4
 800a7a8:	462b      	mov	r3, r5
 800a7aa:	f7f5 fd6f 	bl	800028c <__adddf3>
 800a7ae:	4642      	mov	r2, r8
 800a7b0:	4682      	mov	sl, r0
 800a7b2:	468b      	mov	fp, r1
 800a7b4:	464b      	mov	r3, r9
 800a7b6:	4640      	mov	r0, r8
 800a7b8:	4649      	mov	r1, r9
 800a7ba:	f7f5 ff1d 	bl	80005f8 <__aeabi_dmul>
 800a7be:	4b6c      	ldr	r3, [pc, #432]	; (800a970 <__ieee754_pow+0x758>)
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	4606      	mov	r6, r0
 800a7c4:	460f      	mov	r7, r1
 800a7c6:	f7f5 fd61 	bl	800028c <__adddf3>
 800a7ca:	4652      	mov	r2, sl
 800a7cc:	465b      	mov	r3, fp
 800a7ce:	f7f5 fd5d 	bl	800028c <__adddf3>
 800a7d2:	9c04      	ldr	r4, [sp, #16]
 800a7d4:	460d      	mov	r5, r1
 800a7d6:	4622      	mov	r2, r4
 800a7d8:	460b      	mov	r3, r1
 800a7da:	4640      	mov	r0, r8
 800a7dc:	4649      	mov	r1, r9
 800a7de:	f7f5 ff0b 	bl	80005f8 <__aeabi_dmul>
 800a7e2:	4b63      	ldr	r3, [pc, #396]	; (800a970 <__ieee754_pow+0x758>)
 800a7e4:	4680      	mov	r8, r0
 800a7e6:	4689      	mov	r9, r1
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	4629      	mov	r1, r5
 800a7ee:	f7f5 fd4b 	bl	8000288 <__aeabi_dsub>
 800a7f2:	4632      	mov	r2, r6
 800a7f4:	463b      	mov	r3, r7
 800a7f6:	f7f5 fd47 	bl	8000288 <__aeabi_dsub>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	4650      	mov	r0, sl
 800a800:	4659      	mov	r1, fp
 800a802:	f7f5 fd41 	bl	8000288 <__aeabi_dsub>
 800a806:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a80a:	f7f5 fef5 	bl	80005f8 <__aeabi_dmul>
 800a80e:	4622      	mov	r2, r4
 800a810:	4606      	mov	r6, r0
 800a812:	460f      	mov	r7, r1
 800a814:	462b      	mov	r3, r5
 800a816:	ec51 0b18 	vmov	r0, r1, d8
 800a81a:	f7f5 feed 	bl	80005f8 <__aeabi_dmul>
 800a81e:	4602      	mov	r2, r0
 800a820:	460b      	mov	r3, r1
 800a822:	4630      	mov	r0, r6
 800a824:	4639      	mov	r1, r7
 800a826:	f7f5 fd31 	bl	800028c <__adddf3>
 800a82a:	4606      	mov	r6, r0
 800a82c:	460f      	mov	r7, r1
 800a82e:	4602      	mov	r2, r0
 800a830:	460b      	mov	r3, r1
 800a832:	4640      	mov	r0, r8
 800a834:	4649      	mov	r1, r9
 800a836:	f7f5 fd29 	bl	800028c <__adddf3>
 800a83a:	9c04      	ldr	r4, [sp, #16]
 800a83c:	a33e      	add	r3, pc, #248	; (adr r3, 800a938 <__ieee754_pow+0x720>)
 800a83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a842:	4620      	mov	r0, r4
 800a844:	460d      	mov	r5, r1
 800a846:	f7f5 fed7 	bl	80005f8 <__aeabi_dmul>
 800a84a:	4642      	mov	r2, r8
 800a84c:	ec41 0b18 	vmov	d8, r0, r1
 800a850:	464b      	mov	r3, r9
 800a852:	4620      	mov	r0, r4
 800a854:	4629      	mov	r1, r5
 800a856:	f7f5 fd17 	bl	8000288 <__aeabi_dsub>
 800a85a:	4602      	mov	r2, r0
 800a85c:	460b      	mov	r3, r1
 800a85e:	4630      	mov	r0, r6
 800a860:	4639      	mov	r1, r7
 800a862:	f7f5 fd11 	bl	8000288 <__aeabi_dsub>
 800a866:	a336      	add	r3, pc, #216	; (adr r3, 800a940 <__ieee754_pow+0x728>)
 800a868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86c:	f7f5 fec4 	bl	80005f8 <__aeabi_dmul>
 800a870:	a335      	add	r3, pc, #212	; (adr r3, 800a948 <__ieee754_pow+0x730>)
 800a872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a876:	4606      	mov	r6, r0
 800a878:	460f      	mov	r7, r1
 800a87a:	4620      	mov	r0, r4
 800a87c:	4629      	mov	r1, r5
 800a87e:	f7f5 febb 	bl	80005f8 <__aeabi_dmul>
 800a882:	4602      	mov	r2, r0
 800a884:	460b      	mov	r3, r1
 800a886:	4630      	mov	r0, r6
 800a888:	4639      	mov	r1, r7
 800a88a:	f7f5 fcff 	bl	800028c <__adddf3>
 800a88e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a890:	4b38      	ldr	r3, [pc, #224]	; (800a974 <__ieee754_pow+0x75c>)
 800a892:	4413      	add	r3, r2
 800a894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a898:	f7f5 fcf8 	bl	800028c <__adddf3>
 800a89c:	4682      	mov	sl, r0
 800a89e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8a0:	468b      	mov	fp, r1
 800a8a2:	f7f5 fe3f 	bl	8000524 <__aeabi_i2d>
 800a8a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a8a8:	4b33      	ldr	r3, [pc, #204]	; (800a978 <__ieee754_pow+0x760>)
 800a8aa:	4413      	add	r3, r2
 800a8ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8b0:	4606      	mov	r6, r0
 800a8b2:	460f      	mov	r7, r1
 800a8b4:	4652      	mov	r2, sl
 800a8b6:	465b      	mov	r3, fp
 800a8b8:	ec51 0b18 	vmov	r0, r1, d8
 800a8bc:	f7f5 fce6 	bl	800028c <__adddf3>
 800a8c0:	4642      	mov	r2, r8
 800a8c2:	464b      	mov	r3, r9
 800a8c4:	f7f5 fce2 	bl	800028c <__adddf3>
 800a8c8:	4632      	mov	r2, r6
 800a8ca:	463b      	mov	r3, r7
 800a8cc:	f7f5 fcde 	bl	800028c <__adddf3>
 800a8d0:	9c04      	ldr	r4, [sp, #16]
 800a8d2:	4632      	mov	r2, r6
 800a8d4:	463b      	mov	r3, r7
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	460d      	mov	r5, r1
 800a8da:	f7f5 fcd5 	bl	8000288 <__aeabi_dsub>
 800a8de:	4642      	mov	r2, r8
 800a8e0:	464b      	mov	r3, r9
 800a8e2:	f7f5 fcd1 	bl	8000288 <__aeabi_dsub>
 800a8e6:	ec53 2b18 	vmov	r2, r3, d8
 800a8ea:	f7f5 fccd 	bl	8000288 <__aeabi_dsub>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	4650      	mov	r0, sl
 800a8f4:	4659      	mov	r1, fp
 800a8f6:	e606      	b.n	800a506 <__ieee754_pow+0x2ee>
 800a8f8:	2401      	movs	r4, #1
 800a8fa:	e6a0      	b.n	800a63e <__ieee754_pow+0x426>
 800a8fc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a950 <__ieee754_pow+0x738>
 800a900:	e60d      	b.n	800a51e <__ieee754_pow+0x306>
 800a902:	bf00      	nop
 800a904:	f3af 8000 	nop.w
 800a908:	4a454eef 	.word	0x4a454eef
 800a90c:	3fca7e28 	.word	0x3fca7e28
 800a910:	93c9db65 	.word	0x93c9db65
 800a914:	3fcd864a 	.word	0x3fcd864a
 800a918:	a91d4101 	.word	0xa91d4101
 800a91c:	3fd17460 	.word	0x3fd17460
 800a920:	518f264d 	.word	0x518f264d
 800a924:	3fd55555 	.word	0x3fd55555
 800a928:	db6fabff 	.word	0xdb6fabff
 800a92c:	3fdb6db6 	.word	0x3fdb6db6
 800a930:	33333303 	.word	0x33333303
 800a934:	3fe33333 	.word	0x3fe33333
 800a938:	e0000000 	.word	0xe0000000
 800a93c:	3feec709 	.word	0x3feec709
 800a940:	dc3a03fd 	.word	0xdc3a03fd
 800a944:	3feec709 	.word	0x3feec709
 800a948:	145b01f5 	.word	0x145b01f5
 800a94c:	be3e2fe0 	.word	0xbe3e2fe0
 800a950:	00000000 	.word	0x00000000
 800a954:	3ff00000 	.word	0x3ff00000
 800a958:	7ff00000 	.word	0x7ff00000
 800a95c:	43400000 	.word	0x43400000
 800a960:	0003988e 	.word	0x0003988e
 800a964:	000bb679 	.word	0x000bb679
 800a968:	0800b598 	.word	0x0800b598
 800a96c:	3ff00000 	.word	0x3ff00000
 800a970:	40080000 	.word	0x40080000
 800a974:	0800b5b8 	.word	0x0800b5b8
 800a978:	0800b5a8 	.word	0x0800b5a8
 800a97c:	a3b5      	add	r3, pc, #724	; (adr r3, 800ac54 <__ieee754_pow+0xa3c>)
 800a97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a982:	4640      	mov	r0, r8
 800a984:	4649      	mov	r1, r9
 800a986:	f7f5 fc81 	bl	800028c <__adddf3>
 800a98a:	4622      	mov	r2, r4
 800a98c:	ec41 0b1a 	vmov	d10, r0, r1
 800a990:	462b      	mov	r3, r5
 800a992:	4630      	mov	r0, r6
 800a994:	4639      	mov	r1, r7
 800a996:	f7f5 fc77 	bl	8000288 <__aeabi_dsub>
 800a99a:	4602      	mov	r2, r0
 800a99c:	460b      	mov	r3, r1
 800a99e:	ec51 0b1a 	vmov	r0, r1, d10
 800a9a2:	f7f6 f8b9 	bl	8000b18 <__aeabi_dcmpgt>
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	f47f adf8 	bne.w	800a59c <__ieee754_pow+0x384>
 800a9ac:	4aa4      	ldr	r2, [pc, #656]	; (800ac40 <__ieee754_pow+0xa28>)
 800a9ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	f340 810b 	ble.w	800abce <__ieee754_pow+0x9b6>
 800a9b8:	151b      	asrs	r3, r3, #20
 800a9ba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a9be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a9c2:	fa4a f303 	asr.w	r3, sl, r3
 800a9c6:	445b      	add	r3, fp
 800a9c8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a9cc:	4e9d      	ldr	r6, [pc, #628]	; (800ac44 <__ieee754_pow+0xa2c>)
 800a9ce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a9d2:	4116      	asrs	r6, r2
 800a9d4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a9d8:	2000      	movs	r0, #0
 800a9da:	ea23 0106 	bic.w	r1, r3, r6
 800a9de:	f1c2 0214 	rsb	r2, r2, #20
 800a9e2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a9e6:	fa4a fa02 	asr.w	sl, sl, r2
 800a9ea:	f1bb 0f00 	cmp.w	fp, #0
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	4629      	mov	r1, r5
 800a9f6:	bfb8      	it	lt
 800a9f8:	f1ca 0a00 	rsblt	sl, sl, #0
 800a9fc:	f7f5 fc44 	bl	8000288 <__aeabi_dsub>
 800aa00:	ec41 0b19 	vmov	d9, r0, r1
 800aa04:	4642      	mov	r2, r8
 800aa06:	464b      	mov	r3, r9
 800aa08:	ec51 0b19 	vmov	r0, r1, d9
 800aa0c:	f7f5 fc3e 	bl	800028c <__adddf3>
 800aa10:	2400      	movs	r4, #0
 800aa12:	a379      	add	r3, pc, #484	; (adr r3, 800abf8 <__ieee754_pow+0x9e0>)
 800aa14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa18:	4620      	mov	r0, r4
 800aa1a:	460d      	mov	r5, r1
 800aa1c:	f7f5 fdec 	bl	80005f8 <__aeabi_dmul>
 800aa20:	ec53 2b19 	vmov	r2, r3, d9
 800aa24:	4606      	mov	r6, r0
 800aa26:	460f      	mov	r7, r1
 800aa28:	4620      	mov	r0, r4
 800aa2a:	4629      	mov	r1, r5
 800aa2c:	f7f5 fc2c 	bl	8000288 <__aeabi_dsub>
 800aa30:	4602      	mov	r2, r0
 800aa32:	460b      	mov	r3, r1
 800aa34:	4640      	mov	r0, r8
 800aa36:	4649      	mov	r1, r9
 800aa38:	f7f5 fc26 	bl	8000288 <__aeabi_dsub>
 800aa3c:	a370      	add	r3, pc, #448	; (adr r3, 800ac00 <__ieee754_pow+0x9e8>)
 800aa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa42:	f7f5 fdd9 	bl	80005f8 <__aeabi_dmul>
 800aa46:	a370      	add	r3, pc, #448	; (adr r3, 800ac08 <__ieee754_pow+0x9f0>)
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	4680      	mov	r8, r0
 800aa4e:	4689      	mov	r9, r1
 800aa50:	4620      	mov	r0, r4
 800aa52:	4629      	mov	r1, r5
 800aa54:	f7f5 fdd0 	bl	80005f8 <__aeabi_dmul>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	4640      	mov	r0, r8
 800aa5e:	4649      	mov	r1, r9
 800aa60:	f7f5 fc14 	bl	800028c <__adddf3>
 800aa64:	4604      	mov	r4, r0
 800aa66:	460d      	mov	r5, r1
 800aa68:	4602      	mov	r2, r0
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	4639      	mov	r1, r7
 800aa70:	f7f5 fc0c 	bl	800028c <__adddf3>
 800aa74:	4632      	mov	r2, r6
 800aa76:	463b      	mov	r3, r7
 800aa78:	4680      	mov	r8, r0
 800aa7a:	4689      	mov	r9, r1
 800aa7c:	f7f5 fc04 	bl	8000288 <__aeabi_dsub>
 800aa80:	4602      	mov	r2, r0
 800aa82:	460b      	mov	r3, r1
 800aa84:	4620      	mov	r0, r4
 800aa86:	4629      	mov	r1, r5
 800aa88:	f7f5 fbfe 	bl	8000288 <__aeabi_dsub>
 800aa8c:	4642      	mov	r2, r8
 800aa8e:	4606      	mov	r6, r0
 800aa90:	460f      	mov	r7, r1
 800aa92:	464b      	mov	r3, r9
 800aa94:	4640      	mov	r0, r8
 800aa96:	4649      	mov	r1, r9
 800aa98:	f7f5 fdae 	bl	80005f8 <__aeabi_dmul>
 800aa9c:	a35c      	add	r3, pc, #368	; (adr r3, 800ac10 <__ieee754_pow+0x9f8>)
 800aa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	460d      	mov	r5, r1
 800aaa6:	f7f5 fda7 	bl	80005f8 <__aeabi_dmul>
 800aaaa:	a35b      	add	r3, pc, #364	; (adr r3, 800ac18 <__ieee754_pow+0xa00>)
 800aaac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab0:	f7f5 fbea 	bl	8000288 <__aeabi_dsub>
 800aab4:	4622      	mov	r2, r4
 800aab6:	462b      	mov	r3, r5
 800aab8:	f7f5 fd9e 	bl	80005f8 <__aeabi_dmul>
 800aabc:	a358      	add	r3, pc, #352	; (adr r3, 800ac20 <__ieee754_pow+0xa08>)
 800aabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac2:	f7f5 fbe3 	bl	800028c <__adddf3>
 800aac6:	4622      	mov	r2, r4
 800aac8:	462b      	mov	r3, r5
 800aaca:	f7f5 fd95 	bl	80005f8 <__aeabi_dmul>
 800aace:	a356      	add	r3, pc, #344	; (adr r3, 800ac28 <__ieee754_pow+0xa10>)
 800aad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad4:	f7f5 fbd8 	bl	8000288 <__aeabi_dsub>
 800aad8:	4622      	mov	r2, r4
 800aada:	462b      	mov	r3, r5
 800aadc:	f7f5 fd8c 	bl	80005f8 <__aeabi_dmul>
 800aae0:	a353      	add	r3, pc, #332	; (adr r3, 800ac30 <__ieee754_pow+0xa18>)
 800aae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae6:	f7f5 fbd1 	bl	800028c <__adddf3>
 800aaea:	4622      	mov	r2, r4
 800aaec:	462b      	mov	r3, r5
 800aaee:	f7f5 fd83 	bl	80005f8 <__aeabi_dmul>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	4640      	mov	r0, r8
 800aaf8:	4649      	mov	r1, r9
 800aafa:	f7f5 fbc5 	bl	8000288 <__aeabi_dsub>
 800aafe:	4604      	mov	r4, r0
 800ab00:	460d      	mov	r5, r1
 800ab02:	4602      	mov	r2, r0
 800ab04:	460b      	mov	r3, r1
 800ab06:	4640      	mov	r0, r8
 800ab08:	4649      	mov	r1, r9
 800ab0a:	f7f5 fd75 	bl	80005f8 <__aeabi_dmul>
 800ab0e:	2200      	movs	r2, #0
 800ab10:	ec41 0b19 	vmov	d9, r0, r1
 800ab14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ab18:	4620      	mov	r0, r4
 800ab1a:	4629      	mov	r1, r5
 800ab1c:	f7f5 fbb4 	bl	8000288 <__aeabi_dsub>
 800ab20:	4602      	mov	r2, r0
 800ab22:	460b      	mov	r3, r1
 800ab24:	ec51 0b19 	vmov	r0, r1, d9
 800ab28:	f7f5 fe90 	bl	800084c <__aeabi_ddiv>
 800ab2c:	4632      	mov	r2, r6
 800ab2e:	4604      	mov	r4, r0
 800ab30:	460d      	mov	r5, r1
 800ab32:	463b      	mov	r3, r7
 800ab34:	4640      	mov	r0, r8
 800ab36:	4649      	mov	r1, r9
 800ab38:	f7f5 fd5e 	bl	80005f8 <__aeabi_dmul>
 800ab3c:	4632      	mov	r2, r6
 800ab3e:	463b      	mov	r3, r7
 800ab40:	f7f5 fba4 	bl	800028c <__adddf3>
 800ab44:	4602      	mov	r2, r0
 800ab46:	460b      	mov	r3, r1
 800ab48:	4620      	mov	r0, r4
 800ab4a:	4629      	mov	r1, r5
 800ab4c:	f7f5 fb9c 	bl	8000288 <__aeabi_dsub>
 800ab50:	4642      	mov	r2, r8
 800ab52:	464b      	mov	r3, r9
 800ab54:	f7f5 fb98 	bl	8000288 <__aeabi_dsub>
 800ab58:	460b      	mov	r3, r1
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	493a      	ldr	r1, [pc, #232]	; (800ac48 <__ieee754_pow+0xa30>)
 800ab5e:	2000      	movs	r0, #0
 800ab60:	f7f5 fb92 	bl	8000288 <__aeabi_dsub>
 800ab64:	e9cd 0100 	strd	r0, r1, [sp]
 800ab68:	9b01      	ldr	r3, [sp, #4]
 800ab6a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ab6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab72:	da2f      	bge.n	800abd4 <__ieee754_pow+0x9bc>
 800ab74:	4650      	mov	r0, sl
 800ab76:	ed9d 0b00 	vldr	d0, [sp]
 800ab7a:	f000 f9c1 	bl	800af00 <scalbn>
 800ab7e:	ec51 0b10 	vmov	r0, r1, d0
 800ab82:	ec53 2b18 	vmov	r2, r3, d8
 800ab86:	f7ff bbe0 	b.w	800a34a <__ieee754_pow+0x132>
 800ab8a:	4b30      	ldr	r3, [pc, #192]	; (800ac4c <__ieee754_pow+0xa34>)
 800ab8c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ab90:	429e      	cmp	r6, r3
 800ab92:	f77f af0b 	ble.w	800a9ac <__ieee754_pow+0x794>
 800ab96:	4b2e      	ldr	r3, [pc, #184]	; (800ac50 <__ieee754_pow+0xa38>)
 800ab98:	440b      	add	r3, r1
 800ab9a:	4303      	orrs	r3, r0
 800ab9c:	d00b      	beq.n	800abb6 <__ieee754_pow+0x99e>
 800ab9e:	a326      	add	r3, pc, #152	; (adr r3, 800ac38 <__ieee754_pow+0xa20>)
 800aba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba4:	ec51 0b18 	vmov	r0, r1, d8
 800aba8:	f7f5 fd26 	bl	80005f8 <__aeabi_dmul>
 800abac:	a322      	add	r3, pc, #136	; (adr r3, 800ac38 <__ieee754_pow+0xa20>)
 800abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb2:	f7ff bbca 	b.w	800a34a <__ieee754_pow+0x132>
 800abb6:	4622      	mov	r2, r4
 800abb8:	462b      	mov	r3, r5
 800abba:	f7f5 fb65 	bl	8000288 <__aeabi_dsub>
 800abbe:	4642      	mov	r2, r8
 800abc0:	464b      	mov	r3, r9
 800abc2:	f7f5 ff9f 	bl	8000b04 <__aeabi_dcmpge>
 800abc6:	2800      	cmp	r0, #0
 800abc8:	f43f aef0 	beq.w	800a9ac <__ieee754_pow+0x794>
 800abcc:	e7e7      	b.n	800ab9e <__ieee754_pow+0x986>
 800abce:	f04f 0a00 	mov.w	sl, #0
 800abd2:	e717      	b.n	800aa04 <__ieee754_pow+0x7ec>
 800abd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abd8:	4619      	mov	r1, r3
 800abda:	e7d2      	b.n	800ab82 <__ieee754_pow+0x96a>
 800abdc:	491a      	ldr	r1, [pc, #104]	; (800ac48 <__ieee754_pow+0xa30>)
 800abde:	2000      	movs	r0, #0
 800abe0:	f7ff bb9e 	b.w	800a320 <__ieee754_pow+0x108>
 800abe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abe8:	f7ff bb9a 	b.w	800a320 <__ieee754_pow+0x108>
 800abec:	9000      	str	r0, [sp, #0]
 800abee:	f7ff bb76 	b.w	800a2de <__ieee754_pow+0xc6>
 800abf2:	2100      	movs	r1, #0
 800abf4:	f7ff bb60 	b.w	800a2b8 <__ieee754_pow+0xa0>
 800abf8:	00000000 	.word	0x00000000
 800abfc:	3fe62e43 	.word	0x3fe62e43
 800ac00:	fefa39ef 	.word	0xfefa39ef
 800ac04:	3fe62e42 	.word	0x3fe62e42
 800ac08:	0ca86c39 	.word	0x0ca86c39
 800ac0c:	be205c61 	.word	0xbe205c61
 800ac10:	72bea4d0 	.word	0x72bea4d0
 800ac14:	3e663769 	.word	0x3e663769
 800ac18:	c5d26bf1 	.word	0xc5d26bf1
 800ac1c:	3ebbbd41 	.word	0x3ebbbd41
 800ac20:	af25de2c 	.word	0xaf25de2c
 800ac24:	3f11566a 	.word	0x3f11566a
 800ac28:	16bebd93 	.word	0x16bebd93
 800ac2c:	3f66c16c 	.word	0x3f66c16c
 800ac30:	5555553e 	.word	0x5555553e
 800ac34:	3fc55555 	.word	0x3fc55555
 800ac38:	c2f8f359 	.word	0xc2f8f359
 800ac3c:	01a56e1f 	.word	0x01a56e1f
 800ac40:	3fe00000 	.word	0x3fe00000
 800ac44:	000fffff 	.word	0x000fffff
 800ac48:	3ff00000 	.word	0x3ff00000
 800ac4c:	4090cbff 	.word	0x4090cbff
 800ac50:	3f6f3400 	.word	0x3f6f3400
 800ac54:	652b82fe 	.word	0x652b82fe
 800ac58:	3c971547 	.word	0x3c971547

0800ac5c <__ieee754_sqrt>:
 800ac5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac60:	ec55 4b10 	vmov	r4, r5, d0
 800ac64:	4e56      	ldr	r6, [pc, #344]	; (800adc0 <__ieee754_sqrt+0x164>)
 800ac66:	43ae      	bics	r6, r5
 800ac68:	ee10 0a10 	vmov	r0, s0
 800ac6c:	ee10 3a10 	vmov	r3, s0
 800ac70:	4629      	mov	r1, r5
 800ac72:	462a      	mov	r2, r5
 800ac74:	d110      	bne.n	800ac98 <__ieee754_sqrt+0x3c>
 800ac76:	ee10 2a10 	vmov	r2, s0
 800ac7a:	462b      	mov	r3, r5
 800ac7c:	f7f5 fcbc 	bl	80005f8 <__aeabi_dmul>
 800ac80:	4602      	mov	r2, r0
 800ac82:	460b      	mov	r3, r1
 800ac84:	4620      	mov	r0, r4
 800ac86:	4629      	mov	r1, r5
 800ac88:	f7f5 fb00 	bl	800028c <__adddf3>
 800ac8c:	4604      	mov	r4, r0
 800ac8e:	460d      	mov	r5, r1
 800ac90:	ec45 4b10 	vmov	d0, r4, r5
 800ac94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac98:	2d00      	cmp	r5, #0
 800ac9a:	dc10      	bgt.n	800acbe <__ieee754_sqrt+0x62>
 800ac9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800aca0:	4330      	orrs	r0, r6
 800aca2:	d0f5      	beq.n	800ac90 <__ieee754_sqrt+0x34>
 800aca4:	b15d      	cbz	r5, 800acbe <__ieee754_sqrt+0x62>
 800aca6:	ee10 2a10 	vmov	r2, s0
 800acaa:	462b      	mov	r3, r5
 800acac:	ee10 0a10 	vmov	r0, s0
 800acb0:	f7f5 faea 	bl	8000288 <__aeabi_dsub>
 800acb4:	4602      	mov	r2, r0
 800acb6:	460b      	mov	r3, r1
 800acb8:	f7f5 fdc8 	bl	800084c <__aeabi_ddiv>
 800acbc:	e7e6      	b.n	800ac8c <__ieee754_sqrt+0x30>
 800acbe:	1509      	asrs	r1, r1, #20
 800acc0:	d076      	beq.n	800adb0 <__ieee754_sqrt+0x154>
 800acc2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800acc6:	07ce      	lsls	r6, r1, #31
 800acc8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800accc:	bf5e      	ittt	pl
 800acce:	0fda      	lsrpl	r2, r3, #31
 800acd0:	005b      	lslpl	r3, r3, #1
 800acd2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800acd6:	0fda      	lsrs	r2, r3, #31
 800acd8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800acdc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800ace0:	2000      	movs	r0, #0
 800ace2:	106d      	asrs	r5, r5, #1
 800ace4:	005b      	lsls	r3, r3, #1
 800ace6:	f04f 0e16 	mov.w	lr, #22
 800acea:	4684      	mov	ip, r0
 800acec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800acf0:	eb0c 0401 	add.w	r4, ip, r1
 800acf4:	4294      	cmp	r4, r2
 800acf6:	bfde      	ittt	le
 800acf8:	1b12      	suble	r2, r2, r4
 800acfa:	eb04 0c01 	addle.w	ip, r4, r1
 800acfe:	1840      	addle	r0, r0, r1
 800ad00:	0052      	lsls	r2, r2, #1
 800ad02:	f1be 0e01 	subs.w	lr, lr, #1
 800ad06:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ad0a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ad0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ad12:	d1ed      	bne.n	800acf0 <__ieee754_sqrt+0x94>
 800ad14:	4671      	mov	r1, lr
 800ad16:	2720      	movs	r7, #32
 800ad18:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ad1c:	4562      	cmp	r2, ip
 800ad1e:	eb04 060e 	add.w	r6, r4, lr
 800ad22:	dc02      	bgt.n	800ad2a <__ieee754_sqrt+0xce>
 800ad24:	d113      	bne.n	800ad4e <__ieee754_sqrt+0xf2>
 800ad26:	429e      	cmp	r6, r3
 800ad28:	d811      	bhi.n	800ad4e <__ieee754_sqrt+0xf2>
 800ad2a:	2e00      	cmp	r6, #0
 800ad2c:	eb06 0e04 	add.w	lr, r6, r4
 800ad30:	da43      	bge.n	800adba <__ieee754_sqrt+0x15e>
 800ad32:	f1be 0f00 	cmp.w	lr, #0
 800ad36:	db40      	blt.n	800adba <__ieee754_sqrt+0x15e>
 800ad38:	f10c 0801 	add.w	r8, ip, #1
 800ad3c:	eba2 020c 	sub.w	r2, r2, ip
 800ad40:	429e      	cmp	r6, r3
 800ad42:	bf88      	it	hi
 800ad44:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ad48:	1b9b      	subs	r3, r3, r6
 800ad4a:	4421      	add	r1, r4
 800ad4c:	46c4      	mov	ip, r8
 800ad4e:	0052      	lsls	r2, r2, #1
 800ad50:	3f01      	subs	r7, #1
 800ad52:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ad56:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ad5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ad5e:	d1dd      	bne.n	800ad1c <__ieee754_sqrt+0xc0>
 800ad60:	4313      	orrs	r3, r2
 800ad62:	d006      	beq.n	800ad72 <__ieee754_sqrt+0x116>
 800ad64:	1c4c      	adds	r4, r1, #1
 800ad66:	bf13      	iteet	ne
 800ad68:	3101      	addne	r1, #1
 800ad6a:	3001      	addeq	r0, #1
 800ad6c:	4639      	moveq	r1, r7
 800ad6e:	f021 0101 	bicne.w	r1, r1, #1
 800ad72:	1043      	asrs	r3, r0, #1
 800ad74:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ad78:	0849      	lsrs	r1, r1, #1
 800ad7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ad7e:	07c2      	lsls	r2, r0, #31
 800ad80:	bf48      	it	mi
 800ad82:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ad86:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	463d      	mov	r5, r7
 800ad8e:	e77f      	b.n	800ac90 <__ieee754_sqrt+0x34>
 800ad90:	0ada      	lsrs	r2, r3, #11
 800ad92:	3815      	subs	r0, #21
 800ad94:	055b      	lsls	r3, r3, #21
 800ad96:	2a00      	cmp	r2, #0
 800ad98:	d0fa      	beq.n	800ad90 <__ieee754_sqrt+0x134>
 800ad9a:	02d7      	lsls	r7, r2, #11
 800ad9c:	d50a      	bpl.n	800adb4 <__ieee754_sqrt+0x158>
 800ad9e:	f1c1 0420 	rsb	r4, r1, #32
 800ada2:	fa23 f404 	lsr.w	r4, r3, r4
 800ada6:	1e4d      	subs	r5, r1, #1
 800ada8:	408b      	lsls	r3, r1
 800adaa:	4322      	orrs	r2, r4
 800adac:	1b41      	subs	r1, r0, r5
 800adae:	e788      	b.n	800acc2 <__ieee754_sqrt+0x66>
 800adb0:	4608      	mov	r0, r1
 800adb2:	e7f0      	b.n	800ad96 <__ieee754_sqrt+0x13a>
 800adb4:	0052      	lsls	r2, r2, #1
 800adb6:	3101      	adds	r1, #1
 800adb8:	e7ef      	b.n	800ad9a <__ieee754_sqrt+0x13e>
 800adba:	46e0      	mov	r8, ip
 800adbc:	e7be      	b.n	800ad3c <__ieee754_sqrt+0xe0>
 800adbe:	bf00      	nop
 800adc0:	7ff00000 	.word	0x7ff00000

0800adc4 <fabs>:
 800adc4:	ec51 0b10 	vmov	r0, r1, d0
 800adc8:	ee10 2a10 	vmov	r2, s0
 800adcc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800add0:	ec43 2b10 	vmov	d0, r2, r3
 800add4:	4770      	bx	lr

0800add6 <finite>:
 800add6:	b082      	sub	sp, #8
 800add8:	ed8d 0b00 	vstr	d0, [sp]
 800addc:	9801      	ldr	r0, [sp, #4]
 800adde:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ade2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ade6:	0fc0      	lsrs	r0, r0, #31
 800ade8:	b002      	add	sp, #8
 800adea:	4770      	bx	lr

0800adec <rint>:
 800adec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adee:	ec51 0b10 	vmov	r0, r1, d0
 800adf2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800adf6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800adfa:	2e13      	cmp	r6, #19
 800adfc:	ee10 4a10 	vmov	r4, s0
 800ae00:	460b      	mov	r3, r1
 800ae02:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800ae06:	dc58      	bgt.n	800aeba <rint+0xce>
 800ae08:	2e00      	cmp	r6, #0
 800ae0a:	da2b      	bge.n	800ae64 <rint+0x78>
 800ae0c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ae10:	4302      	orrs	r2, r0
 800ae12:	d023      	beq.n	800ae5c <rint+0x70>
 800ae14:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800ae18:	4302      	orrs	r2, r0
 800ae1a:	4254      	negs	r4, r2
 800ae1c:	4314      	orrs	r4, r2
 800ae1e:	0c4b      	lsrs	r3, r1, #17
 800ae20:	0b24      	lsrs	r4, r4, #12
 800ae22:	045b      	lsls	r3, r3, #17
 800ae24:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800ae28:	ea44 0103 	orr.w	r1, r4, r3
 800ae2c:	4b32      	ldr	r3, [pc, #200]	; (800aef8 <rint+0x10c>)
 800ae2e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ae32:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ae36:	4602      	mov	r2, r0
 800ae38:	460b      	mov	r3, r1
 800ae3a:	4630      	mov	r0, r6
 800ae3c:	4639      	mov	r1, r7
 800ae3e:	f7f5 fa25 	bl	800028c <__adddf3>
 800ae42:	e9cd 0100 	strd	r0, r1, [sp]
 800ae46:	463b      	mov	r3, r7
 800ae48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae4c:	4632      	mov	r2, r6
 800ae4e:	f7f5 fa1b 	bl	8000288 <__aeabi_dsub>
 800ae52:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae56:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800ae5a:	4639      	mov	r1, r7
 800ae5c:	ec41 0b10 	vmov	d0, r0, r1
 800ae60:	b003      	add	sp, #12
 800ae62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae64:	4a25      	ldr	r2, [pc, #148]	; (800aefc <rint+0x110>)
 800ae66:	4132      	asrs	r2, r6
 800ae68:	ea01 0702 	and.w	r7, r1, r2
 800ae6c:	4307      	orrs	r7, r0
 800ae6e:	d0f5      	beq.n	800ae5c <rint+0x70>
 800ae70:	0851      	lsrs	r1, r2, #1
 800ae72:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800ae76:	4314      	orrs	r4, r2
 800ae78:	d00c      	beq.n	800ae94 <rint+0xa8>
 800ae7a:	ea23 0201 	bic.w	r2, r3, r1
 800ae7e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ae82:	2e13      	cmp	r6, #19
 800ae84:	fa43 f606 	asr.w	r6, r3, r6
 800ae88:	bf0c      	ite	eq
 800ae8a:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800ae8e:	2400      	movne	r4, #0
 800ae90:	ea42 0306 	orr.w	r3, r2, r6
 800ae94:	4918      	ldr	r1, [pc, #96]	; (800aef8 <rint+0x10c>)
 800ae96:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ae9a:	4622      	mov	r2, r4
 800ae9c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aea0:	4620      	mov	r0, r4
 800aea2:	4629      	mov	r1, r5
 800aea4:	f7f5 f9f2 	bl	800028c <__adddf3>
 800aea8:	e9cd 0100 	strd	r0, r1, [sp]
 800aeac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aeb0:	4622      	mov	r2, r4
 800aeb2:	462b      	mov	r3, r5
 800aeb4:	f7f5 f9e8 	bl	8000288 <__aeabi_dsub>
 800aeb8:	e7d0      	b.n	800ae5c <rint+0x70>
 800aeba:	2e33      	cmp	r6, #51	; 0x33
 800aebc:	dd07      	ble.n	800aece <rint+0xe2>
 800aebe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800aec2:	d1cb      	bne.n	800ae5c <rint+0x70>
 800aec4:	ee10 2a10 	vmov	r2, s0
 800aec8:	f7f5 f9e0 	bl	800028c <__adddf3>
 800aecc:	e7c6      	b.n	800ae5c <rint+0x70>
 800aece:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800aed2:	f04f 36ff 	mov.w	r6, #4294967295
 800aed6:	40d6      	lsrs	r6, r2
 800aed8:	4230      	tst	r0, r6
 800aeda:	d0bf      	beq.n	800ae5c <rint+0x70>
 800aedc:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800aee0:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800aee4:	bf1f      	itttt	ne
 800aee6:	ea24 0101 	bicne.w	r1, r4, r1
 800aeea:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800aeee:	fa44 f202 	asrne.w	r2, r4, r2
 800aef2:	ea41 0402 	orrne.w	r4, r1, r2
 800aef6:	e7cd      	b.n	800ae94 <rint+0xa8>
 800aef8:	0800b5c8 	.word	0x0800b5c8
 800aefc:	000fffff 	.word	0x000fffff

0800af00 <scalbn>:
 800af00:	b570      	push	{r4, r5, r6, lr}
 800af02:	ec55 4b10 	vmov	r4, r5, d0
 800af06:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800af0a:	4606      	mov	r6, r0
 800af0c:	462b      	mov	r3, r5
 800af0e:	b99a      	cbnz	r2, 800af38 <scalbn+0x38>
 800af10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800af14:	4323      	orrs	r3, r4
 800af16:	d036      	beq.n	800af86 <scalbn+0x86>
 800af18:	4b39      	ldr	r3, [pc, #228]	; (800b000 <scalbn+0x100>)
 800af1a:	4629      	mov	r1, r5
 800af1c:	ee10 0a10 	vmov	r0, s0
 800af20:	2200      	movs	r2, #0
 800af22:	f7f5 fb69 	bl	80005f8 <__aeabi_dmul>
 800af26:	4b37      	ldr	r3, [pc, #220]	; (800b004 <scalbn+0x104>)
 800af28:	429e      	cmp	r6, r3
 800af2a:	4604      	mov	r4, r0
 800af2c:	460d      	mov	r5, r1
 800af2e:	da10      	bge.n	800af52 <scalbn+0x52>
 800af30:	a32b      	add	r3, pc, #172	; (adr r3, 800afe0 <scalbn+0xe0>)
 800af32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af36:	e03a      	b.n	800afae <scalbn+0xae>
 800af38:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800af3c:	428a      	cmp	r2, r1
 800af3e:	d10c      	bne.n	800af5a <scalbn+0x5a>
 800af40:	ee10 2a10 	vmov	r2, s0
 800af44:	4620      	mov	r0, r4
 800af46:	4629      	mov	r1, r5
 800af48:	f7f5 f9a0 	bl	800028c <__adddf3>
 800af4c:	4604      	mov	r4, r0
 800af4e:	460d      	mov	r5, r1
 800af50:	e019      	b.n	800af86 <scalbn+0x86>
 800af52:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800af56:	460b      	mov	r3, r1
 800af58:	3a36      	subs	r2, #54	; 0x36
 800af5a:	4432      	add	r2, r6
 800af5c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800af60:	428a      	cmp	r2, r1
 800af62:	dd08      	ble.n	800af76 <scalbn+0x76>
 800af64:	2d00      	cmp	r5, #0
 800af66:	a120      	add	r1, pc, #128	; (adr r1, 800afe8 <scalbn+0xe8>)
 800af68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af6c:	da1c      	bge.n	800afa8 <scalbn+0xa8>
 800af6e:	a120      	add	r1, pc, #128	; (adr r1, 800aff0 <scalbn+0xf0>)
 800af70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af74:	e018      	b.n	800afa8 <scalbn+0xa8>
 800af76:	2a00      	cmp	r2, #0
 800af78:	dd08      	ble.n	800af8c <scalbn+0x8c>
 800af7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800af82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800af86:	ec45 4b10 	vmov	d0, r4, r5
 800af8a:	bd70      	pop	{r4, r5, r6, pc}
 800af8c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800af90:	da19      	bge.n	800afc6 <scalbn+0xc6>
 800af92:	f24c 3350 	movw	r3, #50000	; 0xc350
 800af96:	429e      	cmp	r6, r3
 800af98:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800af9c:	dd0a      	ble.n	800afb4 <scalbn+0xb4>
 800af9e:	a112      	add	r1, pc, #72	; (adr r1, 800afe8 <scalbn+0xe8>)
 800afa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d1e2      	bne.n	800af6e <scalbn+0x6e>
 800afa8:	a30f      	add	r3, pc, #60	; (adr r3, 800afe8 <scalbn+0xe8>)
 800afaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afae:	f7f5 fb23 	bl	80005f8 <__aeabi_dmul>
 800afb2:	e7cb      	b.n	800af4c <scalbn+0x4c>
 800afb4:	a10a      	add	r1, pc, #40	; (adr r1, 800afe0 <scalbn+0xe0>)
 800afb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d0b8      	beq.n	800af30 <scalbn+0x30>
 800afbe:	a10e      	add	r1, pc, #56	; (adr r1, 800aff8 <scalbn+0xf8>)
 800afc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afc4:	e7b4      	b.n	800af30 <scalbn+0x30>
 800afc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800afca:	3236      	adds	r2, #54	; 0x36
 800afcc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800afd0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800afd4:	4620      	mov	r0, r4
 800afd6:	4b0c      	ldr	r3, [pc, #48]	; (800b008 <scalbn+0x108>)
 800afd8:	2200      	movs	r2, #0
 800afda:	e7e8      	b.n	800afae <scalbn+0xae>
 800afdc:	f3af 8000 	nop.w
 800afe0:	c2f8f359 	.word	0xc2f8f359
 800afe4:	01a56e1f 	.word	0x01a56e1f
 800afe8:	8800759c 	.word	0x8800759c
 800afec:	7e37e43c 	.word	0x7e37e43c
 800aff0:	8800759c 	.word	0x8800759c
 800aff4:	fe37e43c 	.word	0xfe37e43c
 800aff8:	c2f8f359 	.word	0xc2f8f359
 800affc:	81a56e1f 	.word	0x81a56e1f
 800b000:	43500000 	.word	0x43500000
 800b004:	ffff3cb0 	.word	0xffff3cb0
 800b008:	3c900000 	.word	0x3c900000

0800b00c <_init>:
 800b00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00e:	bf00      	nop
 800b010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b012:	bc08      	pop	{r3}
 800b014:	469e      	mov	lr, r3
 800b016:	4770      	bx	lr

0800b018 <_fini>:
 800b018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01a:	bf00      	nop
 800b01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b01e:	bc08      	pop	{r3}
 800b020:	469e      	mov	lr, r3
 800b022:	4770      	bx	lr
