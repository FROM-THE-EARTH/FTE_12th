
GPSDownLink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000900c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  080091a0  080091a0  000191a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009760  08009760  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08009760  08009760  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009760  08009760  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009760  08009760  00019760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009764  08009764  00019764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          000002e4  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004c8  200004c8  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d54d  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fce  00000000  00000000  0002d761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000848  00000000  00000000  0002f730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007a8  00000000  00000000  0002ff78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bacb  00000000  00000000  00030720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b33f  00000000  00000000  0004c1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d138  00000000  00000000  0005752a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000f4662  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003754  00000000  00000000  000f46b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009184 	.word	0x08009184

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08009184 	.word	0x08009184

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cfc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d00:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d013      	beq.n	8000d34 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d10:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d14:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d00b      	beq.n	8000d34 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d1c:	e000      	b.n	8000d20 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d1e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d20:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0f9      	beq.n	8000d1e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d2a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d34:	687b      	ldr	r3, [r7, #4]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <HAL_UART_RxCpltCallback>:
//RM92A parameters
#define MAX_DIGITS_INT 11 // Max digits in a 32-bit integer, including sign
#define MAX_DIGITS_FLOAT 10 // Max digits in a typical float
#define CHAR_CR     (0x0d)

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	flagRcved = TRUE; /* receive finish flag callback */
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <HAL_UART_RxCpltCallback+0x1c>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	200004b0 	.word	0x200004b0

08000d64 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d64:	b5b0      	push	{r4, r5, r7, lr}
 8000d66:	b08e      	sub	sp, #56	; 0x38
 8000d68:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	double latitude = 0;
 8000d6a:	f04f 0200 	mov.w	r2, #0
 8000d6e:	f04f 0300 	mov.w	r3, #0
 8000d72:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double longitude = 0;
 8000d76:	f04f 0200 	mov.w	r2, #0
 8000d7a:	f04f 0300 	mov.w	r3, #0
 8000d7e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int fpState = 1; //flightPin state
 8000d82:	2301      	movs	r3, #1
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c

	char ErrorInfo[] = "cant't get GPS data\n";
 8000d86:	4b33      	ldr	r3, [pc, #204]	; (8000e54 <main+0xf0>)
 8000d88:	463c      	mov	r4, r7
 8000d8a:	461d      	mov	r5, r3
 8000d8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d94:	6020      	str	r0, [r4, #0]
 8000d96:	3404      	adds	r4, #4
 8000d98:	7021      	strb	r1, [r4, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d9a:	f000 fc4d 	bl	8001638 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d9e:	f000 f86b 	bl	8000e78 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000da2:	f000 f921 	bl	8000fe8 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000da6:	f000 f8bf 	bl	8000f28 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000daa:	f000 f8ed 	bl	8000f88 <MX_USART2_UART_Init>

		/* USER CODE BEGIN 3 */

		do {
			/* interrupt start */
			HAL_UART_Receive_IT(&huart2, rcvBuffer, 1);
 8000dae:	2201      	movs	r2, #1
 8000db0:	4929      	ldr	r1, [pc, #164]	; (8000e58 <main+0xf4>)
 8000db2:	482a      	ldr	r0, [pc, #168]	; (8000e5c <main+0xf8>)
 8000db4:	f002 fa6a 	bl	800328c <HAL_UART_Receive_IT>

			/* wait for interrupt */
			while (flagRcved == FALSE) {
 8000db8:	bf00      	nop
 8000dba:	4b29      	ldr	r3, [pc, #164]	; (8000e60 <main+0xfc>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d0fb      	beq.n	8000dba <main+0x56>
				//HAL_UART_Transmit(&huart1, (uint8_t*) ErrorInfo,
						//sizeof(ErrorInfo), 3000); //send by RM92A
				;
			}
			sndBuffer[rcvLength] = rcvBuffer[0];
 8000dc2:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <main+0x100>)
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <main+0xf4>)
 8000dca:	7819      	ldrb	r1, [r3, #0]
 8000dcc:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <main+0x104>)
 8000dce:	5499      	strb	r1, [r3, r2]
			rcvLength++;
 8000dd0:	4b24      	ldr	r3, [pc, #144]	; (8000e64 <main+0x100>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <main+0x100>)
 8000dda:	801a      	strh	r2, [r3, #0]
			flagRcved = FALSE;
 8000ddc:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <main+0xfc>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
		} while ((rcvBuffer[0] != CHAR_CR) && (rcvLength < BUFF_SIZE));
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <main+0xf4>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b0d      	cmp	r3, #13
 8000de8:	d003      	beq.n	8000df2 <main+0x8e>
 8000dea:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <main+0x100>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	2bc7      	cmp	r3, #199	; 0xc7
 8000df0:	d9dd      	bls.n	8000dae <main+0x4a>

		rcvLength = 0;
 8000df2:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <main+0x100>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	801a      	strh	r2, [r3, #0]

		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8000df8:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <main+0xf8>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <main+0xf8>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f022 0220 	bic.w	r2, r2, #32
 8000e06:	601a      	str	r2, [r3, #0]

		printf("received data = %s\n", sndBuffer);
 8000e08:	4917      	ldr	r1, [pc, #92]	; (8000e68 <main+0x104>)
 8000e0a:	4818      	ldr	r0, [pc, #96]	; (8000e6c <main+0x108>)
 8000e0c:	f004 fa3c 	bl	8005288 <iprintf>

		//calculate longitude and latitude from raw data
		extractLatitudeLongitude(sndBuffer, &latitude, &longitude);
 8000e10:	f107 0218 	add.w	r2, r7, #24
 8000e14:	f107 0320 	add.w	r3, r7, #32
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4813      	ldr	r0, [pc, #76]	; (8000e68 <main+0x104>)
 8000e1c:	f000 f938 	bl	8001090 <extractLatitudeLongitude>
		printf("longitude = %f, latitude = %f\n", longitude, latitude);
 8000e20:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000e24:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000e28:	e9cd 2300 	strd	r2, r3, [sp]
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	480f      	ldr	r0, [pc, #60]	; (8000e70 <main+0x10c>)
 8000e32:	f004 fa29 	bl	8005288 <iprintf>
		//getLatitudeLongitude(sndBuffer, &latitude, &longitude);

		fpState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000e36:	2110      	movs	r1, #16
 8000e38:	480e      	ldr	r0, [pc, #56]	; (8000e74 <main+0x110>)
 8000e3a:	f000 ff5d 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
		//printf("Formatted data: %s\n", transmitBuffer);

		//HAL_UART_Transmit(&huart1, (uint8_t*) transmitBuffer,
				//sizeof(transmitBuffer), 3000); //send by RM92A

		__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); //resume uart2
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <main+0xf8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <main+0xf8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f042 0220 	orr.w	r2, r2, #32
 8000e50:	601a      	str	r2, [r3, #0]
	while (1) {
 8000e52:	e7ac      	b.n	8000dae <main+0x4a>
 8000e54:	080091d4 	.word	0x080091d4
 8000e58:	20000360 	.word	0x20000360
 8000e5c:	20000428 	.word	0x20000428
 8000e60:	200004b0 	.word	0x200004b0
 8000e64:	2000020c 	.word	0x2000020c
 8000e68:	20000210 	.word	0x20000210
 8000e6c:	080091a0 	.word	0x080091a0
 8000e70:	080091b4 	.word	0x080091b4
 8000e74:	48000400 	.word	0x48000400

08000e78 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b096      	sub	sp, #88	; 0x58
 8000e7c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e82:	2228      	movs	r2, #40	; 0x28
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 fb7c 	bl	8004584 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]
 8000eaa:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eac:	2302      	movs	r3, #2
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb4:	2310      	movs	r3, #16
 8000eb6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000ec0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000ec4:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ec6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 ff2c 	bl	8001d28 <HAL_RCC_OscConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0x62>
		Error_Handler();
 8000ed6:	f000 f9dd 	bl	8001294 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000eda:	230f      	movs	r3, #15
 8000edc:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f001 fe1e 	bl	8002b38 <HAL_RCC_ClockConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0x8e>
		Error_Handler();
 8000f02:	f000 f9c7 	bl	8001294 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f06:	2301      	movs	r3, #1
 8000f08:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 f847 	bl	8002fa4 <HAL_RCCEx_PeriphCLKConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0xa8>
		Error_Handler();
 8000f1c:	f000 f9ba 	bl	8001294 <Error_Handler>
	}
}
 8000f20:	bf00      	nop
 8000f22:	3758      	adds	r7, #88	; 0x58
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <MX_USART1_UART_Init+0x58>)
 8000f2e:	4a15      	ldr	r2, [pc, #84]	; (8000f84 <MX_USART1_UART_Init+0x5c>)
 8000f30:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000f32:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <MX_USART1_UART_Init+0x58>)
 8000f34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f38:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_USART1_UART_Init+0x58>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <MX_USART1_UART_Init+0x58>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <MX_USART1_UART_Init+0x58>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_USART1_UART_Init+0x58>)
 8000f4e:	220c      	movs	r2, #12
 8000f50:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <MX_USART1_UART_Init+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_USART1_UART_Init+0x58>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <MX_USART1_UART_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_USART1_UART_Init+0x58>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_USART1_UART_Init+0x58>)
 8000f6c:	f002 f940 	bl	80031f0 <HAL_UART_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000f76:	f000 f98d 	bl	8001294 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200002d8 	.word	0x200002d8
 8000f84:	40013800 	.word	0x40013800

08000f88 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000f8e:	4a15      	ldr	r2, [pc, #84]	; (8000fe4 <MX_USART2_UART_Init+0x5c>)
 8000f90:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000f94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f98:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fcc:	f002 f910 	bl	80031f0 <HAL_UART_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000fd6:	f000 f95d 	bl	8001294 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000428 	.word	0x20000428
 8000fe4:	40004400 	.word	0x40004400

08000fe8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_GPIO_Init+0x68>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4a13      	ldr	r2, [pc, #76]	; (8001050 <MX_GPIO_Init+0x68>)
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	6153      	str	r3, [r2, #20]
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_GPIO_Init+0x68>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_GPIO_Init+0x68>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <MX_GPIO_Init+0x68>)
 800101c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001020:	6153      	str	r3, [r2, #20]
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <MX_GPIO_Init+0x68>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800102e:	2310      	movs	r3, #16
 8001030:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001036:	2301      	movs	r3, #1
 8001038:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	4619      	mov	r1, r3
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_GPIO_Init+0x6c>)
 8001042:	f000 fce7 	bl	8001a14 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001046:	bf00      	nop
 8001048:	3720      	adds	r7, #32
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000
 8001054:	48000400 	.word	0x48000400

08001058 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	e009      	b.n	800107e <_write+0x26>
		ITM_SendChar(*ptr++);
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1c5a      	adds	r2, r3, #1
 800106e:	60ba      	str	r2, [r7, #8]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fe3e 	bl	8000cf4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	3301      	adds	r3, #1
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	429a      	cmp	r2, r3
 8001084:	dbf1      	blt.n	800106a <_write+0x12>
	}
	return len;
 8001086:	687b      	ldr	r3, [r7, #4]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <extractLatitudeLongitude>:
float extractFloat(const char *str) {
	return atof(str);
}

//extract longitude and latitude
void extractLatitudeLongitude(uint8_t *data, double *latitude, double *longitude) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b0c2      	sub	sp, #264	; 0x108
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	6019      	str	r1, [r3, #0]
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	601a      	str	r2, [r3, #0]
    if (strncmp((const char*)data, "GPGGA,", 6) == 0) {
 80010a2:	2206      	movs	r2, #6
 80010a4:	4978      	ldr	r1, [pc, #480]	; (8001288 <extractLatitudeLongitude+0x1f8>)
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f004 f934 	bl	8005314 <strncmp>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f040 80ce 	bne.w	8001250 <extractLatitudeLongitude+0x1c0>
        char delimiter[] = ",";
 80010b4:	232c      	movs	r3, #44	; 0x2c
 80010b6:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
        char *token;

        // バッファから文字列をコピーしてトークン化
        char temp[BUFF_SIZE];
        strcpy(temp, (const char*)data);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	68f9      	ldr	r1, [r7, #12]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f004 f91f 	bl	8005304 <strcpy>

        // 先頭のトークン（"GPGGA"）を無視
        token = strtok(temp, delimiter);
 80010c6:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f004 ff69 	bl	8005fa8 <strtok>
 80010d6:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

        // 次のトークンから緯度を抽出
        token = strtok(NULL, delimiter);
 80010da:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010de:	4619      	mov	r1, r3
 80010e0:	2000      	movs	r0, #0
 80010e2:	f004 ff61 	bl	8005fa8 <strtok>
 80010e6:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
        if (token != NULL) {
 80010ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d036      	beq.n	8001160 <extractLatitudeLongitude+0xd0>
            double lat_degrees = atof(token) / 100.0;
 80010f2:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 80010f6:	f003 fa17 	bl	8004528 <atof>
 80010fa:	ec51 0b10 	vmov	r0, r1, d0
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	4b62      	ldr	r3, [pc, #392]	; (800128c <extractLatitudeLongitude+0x1fc>)
 8001104:	f7ff fba2 	bl	800084c <__aeabi_ddiv>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
            double lat_minutes = fmod(atof(token), 100.0);
 8001110:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8001114:	f003 fa08 	bl	8004528 <atof>
 8001118:	eeb0 7a40 	vmov.f32	s14, s0
 800111c:	eef0 7a60 	vmov.f32	s15, s1
 8001120:	ed9f 1b57 	vldr	d1, [pc, #348]	; 8001280 <extractLatitudeLongitude+0x1f0>
 8001124:	eeb0 0a47 	vmov.f32	s0, s14
 8001128:	eef0 0a67 	vmov.f32	s1, s15
 800112c:	f007 fedc 	bl	8008ee8 <fmod>
 8001130:	ed87 0b3c 	vstr	d0, [r7, #240]	; 0xf0
            *latitude = lat_degrees + (lat_minutes / 60.0);
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	4b55      	ldr	r3, [pc, #340]	; (8001290 <extractLatitudeLongitude+0x200>)
 800113a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800113e:	f7ff fb85 	bl	800084c <__aeabi_ddiv>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800114e:	f7ff f89d 	bl	800028c <__adddf3>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	f107 0108 	add.w	r1, r7, #8
 800115a:	6809      	ldr	r1, [r1, #0]
 800115c:	e9c1 2300 	strd	r2, r3, [r1]
        }

        // 次のトークンから南北情報を無視
        token = strtok(NULL, delimiter);
 8001160:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001164:	4619      	mov	r1, r3
 8001166:	2000      	movs	r0, #0
 8001168:	f004 ff1e 	bl	8005fa8 <strtok>
 800116c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

        // 次のトークンから経度を抽出
        token = strtok(NULL, delimiter);
 8001170:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001174:	4619      	mov	r1, r3
 8001176:	2000      	movs	r0, #0
 8001178:	f004 ff16 	bl	8005fa8 <strtok>
 800117c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
        if (token != NULL) {
 8001180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001184:	2b00      	cmp	r3, #0
 8001186:	d035      	beq.n	80011f4 <extractLatitudeLongitude+0x164>
            double lon_degrees = atof(token) / 100.0;
 8001188:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 800118c:	f003 f9cc 	bl	8004528 <atof>
 8001190:	ec51 0b10 	vmov	r0, r1, d0
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b3c      	ldr	r3, [pc, #240]	; (800128c <extractLatitudeLongitude+0x1fc>)
 800119a:	f7ff fb57 	bl	800084c <__aeabi_ddiv>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
            double lon_minutes = fmod(atof(token), 100.0);
 80011a6:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 80011aa:	f003 f9bd 	bl	8004528 <atof>
 80011ae:	eeb0 7a40 	vmov.f32	s14, s0
 80011b2:	eef0 7a60 	vmov.f32	s15, s1
 80011b6:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8001280 <extractLatitudeLongitude+0x1f0>
 80011ba:	eeb0 0a47 	vmov.f32	s0, s14
 80011be:	eef0 0a67 	vmov.f32	s1, s15
 80011c2:	f007 fe91 	bl	8008ee8 <fmod>
 80011c6:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
            *longitude = lon_degrees + (lon_minutes / 60.0);
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	4b30      	ldr	r3, [pc, #192]	; (8001290 <extractLatitudeLongitude+0x200>)
 80011d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80011d4:	f7ff fb3a 	bl	800084c <__aeabi_ddiv>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80011e4:	f7ff f852 	bl	800028c <__adddf3>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	1d39      	adds	r1, r7, #4
 80011ee:	6809      	ldr	r1, [r1, #0]
 80011f0:	e9c1 2300 	strd	r2, r3, [r1]

        // 次のトークンから東西情報を無視
        // 他のデータも取り出す場合は続けて処理を行う

        // データが存在しない場合は0.0を代入
        if (*latitude == 0.0) {
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	f04f 0300 	mov.w	r3, #0
 8001206:	f7ff fc5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d008      	beq.n	8001222 <extractLatitudeLongitude+0x192>
            *latitude = 0.0;
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	6819      	ldr	r1, [r3, #0]
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	e9c1 2300 	strd	r2, r3, [r1]
        }
        if (*longitude == 0.0) {
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	e9d3 0100 	ldrd	r0, r1, [r3]
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	f7ff fc49 	bl	8000ac8 <__aeabi_dcmpeq>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d100      	bne.n	800123e <extractLatitudeLongitude+0x1ae>
    } else {
        // "GPGGA" ではない場合は何もしない
        *latitude = 0.0;
        *longitude = 0.0;
    }
}
 800123c:	e019      	b.n	8001272 <extractLatitudeLongitude+0x1e2>
            *longitude = 0.0;
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	6819      	ldr	r1, [r3, #0]
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800124e:	e010      	b.n	8001272 <extractLatitudeLongitude+0x1e2>
        *latitude = 0.0;
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	6819      	ldr	r1, [r3, #0]
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	e9c1 2300 	strd	r2, r3, [r1]
        *longitude = 0.0;
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	6819      	ldr	r1, [r3, #0]
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	f04f 0300 	mov.w	r3, #0
 800126e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001272:	bf00      	nop
 8001274:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	f3af 8000 	nop.w
 8001280:	00000000 	.word	0x00000000
 8001284:	40590000 	.word	0x40590000
 8001288:	080091ec 	.word	0x080091ec
 800128c:	40590000 	.word	0x40590000
 8001290:	404e0000 	.word	0x404e0000

08001294 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800129c:	e7fe      	b.n	800129c <Error_Handler+0x8>
	...

080012a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <HAL_MspInit+0x44>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <HAL_MspInit+0x44>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6193      	str	r3, [r2, #24]
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_MspInit+0x44>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_MspInit+0x44>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	4a08      	ldr	r2, [pc, #32]	; (80012e4 <HAL_MspInit+0x44>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	61d3      	str	r3, [r2, #28]
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_MspInit+0x44>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000

080012e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08c      	sub	sp, #48	; 0x30
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a37      	ldr	r2, [pc, #220]	; (80013e4 <HAL_UART_MspInit+0xfc>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d132      	bne.n	8001370 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800130a:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <HAL_UART_MspInit+0x100>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	4a36      	ldr	r2, [pc, #216]	; (80013e8 <HAL_UART_MspInit+0x100>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001314:	6193      	str	r3, [r2, #24]
 8001316:	4b34      	ldr	r3, [pc, #208]	; (80013e8 <HAL_UART_MspInit+0x100>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131e:	61bb      	str	r3, [r7, #24]
 8001320:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b31      	ldr	r3, [pc, #196]	; (80013e8 <HAL_UART_MspInit+0x100>)
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	4a30      	ldr	r2, [pc, #192]	; (80013e8 <HAL_UART_MspInit+0x100>)
 8001328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132c:	6153      	str	r3, [r2, #20]
 800132e:	4b2e      	ldr	r3, [pc, #184]	; (80013e8 <HAL_UART_MspInit+0x100>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800133a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800133e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800134c:	2307      	movs	r3, #7
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	f107 031c 	add.w	r3, r7, #28
 8001354:	4619      	mov	r1, r3
 8001356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135a:	f000 fb5b 	bl	8001a14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	2025      	movs	r0, #37	; 0x25
 8001364:	f000 faa9 	bl	80018ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001368:	2025      	movs	r0, #37	; 0x25
 800136a:	f000 fac2 	bl	80018f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800136e:	e035      	b.n	80013dc <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a1d      	ldr	r2, [pc, #116]	; (80013ec <HAL_UART_MspInit+0x104>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d130      	bne.n	80013dc <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <HAL_UART_MspInit+0x100>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	4a1a      	ldr	r2, [pc, #104]	; (80013e8 <HAL_UART_MspInit+0x100>)
 8001380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001384:	61d3      	str	r3, [r2, #28]
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_UART_MspInit+0x100>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_UART_MspInit+0x100>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <HAL_UART_MspInit+0x100>)
 8001398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800139c:	6153      	str	r3, [r2, #20]
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_UART_MspInit+0x100>)
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013aa:	230c      	movs	r3, #12
 80013ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ba:	2307      	movs	r3, #7
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c8:	f000 fb24 	bl	8001a14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	2026      	movs	r0, #38	; 0x26
 80013d2:	f000 fa72 	bl	80018ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013d6:	2026      	movs	r0, #38	; 0x26
 80013d8:	f000 fa8b 	bl	80018f2 <HAL_NVIC_EnableIRQ>
}
 80013dc:	bf00      	nop
 80013de:	3730      	adds	r7, #48	; 0x30
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40013800 	.word	0x40013800
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40004400 	.word	0x40004400

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <NMI_Handler+0x4>

080013f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <HardFault_Handler+0x4>

080013fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <MemManage_Handler+0x4>

08001402 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <UsageFault_Handler+0x4>

0800140e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143c:	f000 f942 	bl	80016c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}

08001444 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <USART1_IRQHandler+0x10>)
 800144a:	f001 ff63 	bl	8003314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200002d8 	.word	0x200002d8

08001458 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <USART2_IRQHandler+0x10>)
 800145e:	f001 ff59 	bl	8003314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000428 	.word	0x20000428

0800146c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
	return 1;
 8001470:	2301      	movs	r3, #1
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <_kill>:

int _kill(int pid, int sig)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001486:	f003 f853 	bl	8004530 <__errno>
 800148a:	4603      	mov	r3, r0
 800148c:	2216      	movs	r2, #22
 800148e:	601a      	str	r2, [r3, #0]
	return -1;
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <_exit>:

void _exit (int status)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ffe7 	bl	800147c <_kill>
	while (1) {}		/* Make sure we hang here */
 80014ae:	e7fe      	b.n	80014ae <_exit+0x12>

080014b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	e00a      	b.n	80014d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014c2:	f3af 8000 	nop.w
 80014c6:	4601      	mov	r1, r0
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	1c5a      	adds	r2, r3, #1
 80014cc:	60ba      	str	r2, [r7, #8]
 80014ce:	b2ca      	uxtb	r2, r1
 80014d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3301      	adds	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	dbf0      	blt.n	80014c2 <_read+0x12>
	}

return len;
 80014e0:	687b      	ldr	r3, [r7, #4]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <_close>:
	}
	return len;
}

int _close(int file)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
	return -1;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001512:	605a      	str	r2, [r3, #4]
	return 0;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <_isatty>:

int _isatty(int file)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
	return 1;
 800152a:	2301      	movs	r3, #1
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
	return 0;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800155c:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <_sbrk+0x5c>)
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <_sbrk+0x60>)
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d102      	bne.n	8001576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <_sbrk+0x64>)
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <_sbrk+0x68>)
 8001574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <_sbrk+0x64>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	429a      	cmp	r2, r3
 8001582:	d207      	bcs.n	8001594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001584:	f002 ffd4 	bl	8004530 <__errno>
 8001588:	4603      	mov	r3, r0
 800158a:	220c      	movs	r2, #12
 800158c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
 8001592:	e009      	b.n	80015a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <_sbrk+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <_sbrk+0x64>)
 80015a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a6:	68fb      	ldr	r3, [r7, #12]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20003000 	.word	0x20003000
 80015b4:	00000400 	.word	0x00000400
 80015b8:	20000200 	.word	0x20000200
 80015bc:	200004c8 	.word	0x200004c8

080015c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <SystemInit+0x20>)
 80015c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <SystemInit+0x20>)
 80015cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800161c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80015e8:	f7ff ffea 	bl	80015c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015ec:	480c      	ldr	r0, [pc, #48]	; (8001620 <LoopForever+0x6>)
  ldr r1, =_edata
 80015ee:	490d      	ldr	r1, [pc, #52]	; (8001624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015f0:	4a0d      	ldr	r2, [pc, #52]	; (8001628 <LoopForever+0xe>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f4:	e002      	b.n	80015fc <LoopCopyDataInit>

080015f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fa:	3304      	adds	r3, #4

080015fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001600:	d3f9      	bcc.n	80015f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001604:	4c0a      	ldr	r4, [pc, #40]	; (8001630 <LoopForever+0x16>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001608:	e001      	b.n	800160e <LoopFillZerobss>

0800160a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800160c:	3204      	adds	r2, #4

0800160e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001610:	d3fb      	bcc.n	800160a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001612:	f002 ff93 	bl	800453c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001616:	f7ff fba5 	bl	8000d64 <main>

0800161a <LoopForever>:

LoopForever:
    b LoopForever
 800161a:	e7fe      	b.n	800161a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800161c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001624:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001628:	08009768 	.word	0x08009768
  ldr r2, =_sbss
 800162c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001630:	200004c8 	.word	0x200004c8

08001634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC1_2_IRQHandler>
	...

08001638 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_Init+0x28>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <HAL_Init+0x28>)
 8001642:	f043 0310 	orr.w	r3, r3, #16
 8001646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001648:	2003      	movs	r0, #3
 800164a:	f000 f92b 	bl	80018a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164e:	200f      	movs	r0, #15
 8001650:	f000 f808 	bl	8001664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001654:	f7ff fe24 	bl	80012a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40022000 	.word	0x40022000

08001664 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x54>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_InitTick+0x58>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f943 	bl	800190e <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e00e      	b.n	80016b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d80a      	bhi.n	80016ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f000 f90b 	bl	80018ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a4:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <HAL_InitTick+0x5c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000000 	.word	0x20000000
 80016bc:	20000008 	.word	0x20000008
 80016c0:	20000004 	.word	0x20000004

080016c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x20>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x24>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <HAL_IncTick+0x24>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000008 	.word	0x20000008
 80016e8:	200004b4 	.word	0x200004b4

080016ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <HAL_GetTick+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	200004b4 	.word	0x200004b4

08001704 <__NVIC_SetPriorityGrouping>:
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001720:	4013      	ands	r3, r2
 8001722:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800172c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001736:	4a04      	ldr	r2, [pc, #16]	; (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	60d3      	str	r3, [r2, #12]
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_GetPriorityGrouping>:
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <__NVIC_GetPriorityGrouping+0x18>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	f003 0307 	and.w	r3, r3, #7
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_EnableIRQ>:
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	2b00      	cmp	r3, #0
 8001778:	db0b      	blt.n	8001792 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	f003 021f 	and.w	r2, r3, #31
 8001780:	4907      	ldr	r1, [pc, #28]	; (80017a0 <__NVIC_EnableIRQ+0x38>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	2001      	movs	r0, #1
 800178a:	fa00 f202 	lsl.w	r2, r0, r2
 800178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000e100 	.word	0xe000e100

080017a4 <__NVIC_SetPriority>:
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	6039      	str	r1, [r7, #0]
 80017ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	db0a      	blt.n	80017ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	490c      	ldr	r1, [pc, #48]	; (80017f0 <__NVIC_SetPriority+0x4c>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	0112      	lsls	r2, r2, #4
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	440b      	add	r3, r1
 80017c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80017cc:	e00a      	b.n	80017e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4908      	ldr	r1, [pc, #32]	; (80017f4 <__NVIC_SetPriority+0x50>)
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	3b04      	subs	r3, #4
 80017dc:	0112      	lsls	r2, r2, #4
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	440b      	add	r3, r1
 80017e2:	761a      	strb	r2, [r3, #24]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000e100 	.word	0xe000e100
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <NVIC_EncodePriority>:
{
 80017f8:	b480      	push	{r7}
 80017fa:	b089      	sub	sp, #36	; 0x24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f1c3 0307 	rsb	r3, r3, #7
 8001812:	2b04      	cmp	r3, #4
 8001814:	bf28      	it	cs
 8001816:	2304      	movcs	r3, #4
 8001818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3304      	adds	r3, #4
 800181e:	2b06      	cmp	r3, #6
 8001820:	d902      	bls.n	8001828 <NVIC_EncodePriority+0x30>
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3b03      	subs	r3, #3
 8001826:	e000      	b.n	800182a <NVIC_EncodePriority+0x32>
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	f04f 32ff 	mov.w	r2, #4294967295
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43da      	mvns	r2, r3
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	401a      	ands	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001840:	f04f 31ff 	mov.w	r1, #4294967295
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	43d9      	mvns	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	4313      	orrs	r3, r2
}
 8001852:	4618      	mov	r0, r3
 8001854:	3724      	adds	r7, #36	; 0x24
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <SysTick_Config>:
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001870:	d301      	bcc.n	8001876 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001872:	2301      	movs	r3, #1
 8001874:	e00f      	b.n	8001896 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <SysTick_Config+0x40>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3b01      	subs	r3, #1
 800187c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187e:	210f      	movs	r1, #15
 8001880:	f04f 30ff 	mov.w	r0, #4294967295
 8001884:	f7ff ff8e 	bl	80017a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <SysTick_Config+0x40>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188e:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <SysTick_Config+0x40>)
 8001890:	2207      	movs	r2, #7
 8001892:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	e000e010 	.word	0xe000e010

080018a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff29 	bl	8001704 <__NVIC_SetPriorityGrouping>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018cc:	f7ff ff3e 	bl	800174c <__NVIC_GetPriorityGrouping>
 80018d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	68b9      	ldr	r1, [r7, #8]
 80018d6:	6978      	ldr	r0, [r7, #20]
 80018d8:	f7ff ff8e 	bl	80017f8 <NVIC_EncodePriority>
 80018dc:	4602      	mov	r2, r0
 80018de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff5d 	bl	80017a4 <__NVIC_SetPriority>
}
 80018ea:	bf00      	nop
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff31 	bl	8001768 <__NVIC_EnableIRQ>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ffa2 	bl	8001860 <SysTick_Config>
 800191c:	4603      	mov	r3, r0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001934:	2b02      	cmp	r3, #2
 8001936:	d008      	beq.n	800194a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2204      	movs	r2, #4
 800193c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e020      	b.n	800198c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 020e 	bic.w	r2, r2, #14
 8001958:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0201 	bic.w	r2, r2, #1
 8001968:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001972:	2101      	movs	r1, #1
 8001974:	fa01 f202 	lsl.w	r2, r1, r2
 8001978:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d005      	beq.n	80019ba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2204      	movs	r2, #4
 80019b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
 80019b8:	e027      	b.n	8001a0a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 020e 	bic.w	r2, r2, #14
 80019c8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0201 	bic.w	r2, r2, #1
 80019d8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e2:	2101      	movs	r1, #1
 80019e4:	fa01 f202 	lsl.w	r2, r1, r2
 80019e8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	4798      	blx	r3
    } 
  }
  return status;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a22:	e14e      	b.n	8001cc2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	2101      	movs	r1, #1
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a30:	4013      	ands	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 8140 	beq.w	8001cbc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d005      	beq.n	8001a54 <HAL_GPIO_Init+0x40>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d130      	bne.n	8001ab6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	091b      	lsrs	r3, r3, #4
 8001aa0:	f003 0201 	and.w	r2, r3, #1
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d017      	beq.n	8001af2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	2203      	movs	r2, #3
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d123      	bne.n	8001b46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	08da      	lsrs	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3208      	adds	r2, #8
 8001b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	220f      	movs	r2, #15
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	691a      	ldr	r2, [r3, #16]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	08da      	lsrs	r2, r3, #3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3208      	adds	r2, #8
 8001b40:	6939      	ldr	r1, [r7, #16]
 8001b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	2203      	movs	r2, #3
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0203 	and.w	r2, r3, #3
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 809a 	beq.w	8001cbc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b88:	4b55      	ldr	r3, [pc, #340]	; (8001ce0 <HAL_GPIO_Init+0x2cc>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	4a54      	ldr	r2, [pc, #336]	; (8001ce0 <HAL_GPIO_Init+0x2cc>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6193      	str	r3, [r2, #24]
 8001b94:	4b52      	ldr	r3, [pc, #328]	; (8001ce0 <HAL_GPIO_Init+0x2cc>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ba0:	4a50      	ldr	r2, [pc, #320]	; (8001ce4 <HAL_GPIO_Init+0x2d0>)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	089b      	lsrs	r3, r3, #2
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	220f      	movs	r2, #15
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bca:	d013      	beq.n	8001bf4 <HAL_GPIO_Init+0x1e0>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a46      	ldr	r2, [pc, #280]	; (8001ce8 <HAL_GPIO_Init+0x2d4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d00d      	beq.n	8001bf0 <HAL_GPIO_Init+0x1dc>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a45      	ldr	r2, [pc, #276]	; (8001cec <HAL_GPIO_Init+0x2d8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d007      	beq.n	8001bec <HAL_GPIO_Init+0x1d8>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a44      	ldr	r2, [pc, #272]	; (8001cf0 <HAL_GPIO_Init+0x2dc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d101      	bne.n	8001be8 <HAL_GPIO_Init+0x1d4>
 8001be4:	2303      	movs	r3, #3
 8001be6:	e006      	b.n	8001bf6 <HAL_GPIO_Init+0x1e2>
 8001be8:	2305      	movs	r3, #5
 8001bea:	e004      	b.n	8001bf6 <HAL_GPIO_Init+0x1e2>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e002      	b.n	8001bf6 <HAL_GPIO_Init+0x1e2>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <HAL_GPIO_Init+0x1e2>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	f002 0203 	and.w	r2, r2, #3
 8001bfc:	0092      	lsls	r2, r2, #2
 8001bfe:	4093      	lsls	r3, r2
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c06:	4937      	ldr	r1, [pc, #220]	; (8001ce4 <HAL_GPIO_Init+0x2d0>)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c14:	4b37      	ldr	r3, [pc, #220]	; (8001cf4 <HAL_GPIO_Init+0x2e0>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c38:	4a2e      	ldr	r2, [pc, #184]	; (8001cf4 <HAL_GPIO_Init+0x2e0>)
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c3e:	4b2d      	ldr	r3, [pc, #180]	; (8001cf4 <HAL_GPIO_Init+0x2e0>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c62:	4a24      	ldr	r2, [pc, #144]	; (8001cf4 <HAL_GPIO_Init+0x2e0>)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c68:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <HAL_GPIO_Init+0x2e0>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c8c:	4a19      	ldr	r2, [pc, #100]	; (8001cf4 <HAL_GPIO_Init+0x2e0>)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <HAL_GPIO_Init+0x2e0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cb6:	4a0f      	ldr	r2, [pc, #60]	; (8001cf4 <HAL_GPIO_Init+0x2e0>)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f47f aea9 	bne.w	8001a24 <HAL_GPIO_Init+0x10>
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	bf00      	nop
 8001cd6:	371c      	adds	r7, #28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40010000 	.word	0x40010000
 8001ce8:	48000400 	.word	0x48000400
 8001cec:	48000800 	.word	0x48000800
 8001cf0:	48000c00 	.word	0x48000c00
 8001cf4:	40010400 	.word	0x40010400

08001cf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	887b      	ldrh	r3, [r7, #2]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d002      	beq.n	8001d16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d10:	2301      	movs	r3, #1
 8001d12:	73fb      	strb	r3, [r7, #15]
 8001d14:	e001      	b.n	8001d1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d16:	2300      	movs	r3, #0
 8001d18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	1d3b      	adds	r3, r7, #4
 8001d32:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d102      	bne.n	8001d42 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	f000 bef4 	b.w	8002b2a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 816a 	beq.w	8002026 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d52:	4bb3      	ldr	r3, [pc, #716]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d00c      	beq.n	8001d78 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d5e:	4bb0      	ldr	r3, [pc, #704]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d159      	bne.n	8001e1e <HAL_RCC_OscConfig+0xf6>
 8001d6a:	4bad      	ldr	r3, [pc, #692]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d76:	d152      	bne.n	8001e1e <HAL_RCC_OscConfig+0xf6>
 8001d78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d7c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d8c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d90:	fab3 f383 	clz	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	095b      	lsrs	r3, r3, #5
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d102      	bne.n	8001daa <HAL_RCC_OscConfig+0x82>
 8001da4:	4b9e      	ldr	r3, [pc, #632]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	e015      	b.n	8001dd6 <HAL_RCC_OscConfig+0xae>
 8001daa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dae:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001dbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dc2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001dc6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001dca:	fa93 f3a3 	rbit	r3, r3
 8001dce:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001dd2:	4b93      	ldr	r3, [pc, #588]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dda:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001dde:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001de2:	fa92 f2a2 	rbit	r2, r2
 8001de6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001dea:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001dee:	fab2 f282 	clz	r2, r2
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	f042 0220 	orr.w	r2, r2, #32
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	f002 021f 	and.w	r2, r2, #31
 8001dfe:	2101      	movs	r1, #1
 8001e00:	fa01 f202 	lsl.w	r2, r1, r2
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 810c 	beq.w	8002024 <HAL_RCC_OscConfig+0x2fc>
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f040 8106 	bne.w	8002024 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	f000 be86 	b.w	8002b2a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e28:	d106      	bne.n	8001e38 <HAL_RCC_OscConfig+0x110>
 8001e2a:	4b7d      	ldr	r3, [pc, #500]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a7c      	ldr	r2, [pc, #496]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e030      	b.n	8001e9a <HAL_RCC_OscConfig+0x172>
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x134>
 8001e42:	4b77      	ldr	r3, [pc, #476]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a76      	ldr	r2, [pc, #472]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	4b74      	ldr	r3, [pc, #464]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a73      	ldr	r2, [pc, #460]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	e01e      	b.n	8001e9a <HAL_RCC_OscConfig+0x172>
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e66:	d10c      	bne.n	8001e82 <HAL_RCC_OscConfig+0x15a>
 8001e68:	4b6d      	ldr	r3, [pc, #436]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a6c      	ldr	r2, [pc, #432]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001e6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	4b6a      	ldr	r3, [pc, #424]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a69      	ldr	r2, [pc, #420]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	e00b      	b.n	8001e9a <HAL_RCC_OscConfig+0x172>
 8001e82:	4b67      	ldr	r3, [pc, #412]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a66      	ldr	r2, [pc, #408]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	4b64      	ldr	r3, [pc, #400]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a63      	ldr	r2, [pc, #396]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e98:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e9a:	4b61      	ldr	r3, [pc, #388]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	f023 020f 	bic.w	r2, r3, #15
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	495d      	ldr	r1, [pc, #372]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d059      	beq.n	8001f6c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fc18 	bl	80016ec <HAL_GetTick>
 8001ebc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec0:	e00a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec2:	f7ff fc13 	bl	80016ec <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b64      	cmp	r3, #100	; 0x64
 8001ed0:	d902      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	f000 be29 	b.w	8002b2a <HAL_RCC_OscConfig+0xe02>
 8001ed8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001edc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001eec:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef0:	fab3 f383 	clz	r3, r3
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d102      	bne.n	8001f0a <HAL_RCC_OscConfig+0x1e2>
 8001f04:	4b46      	ldr	r3, [pc, #280]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	e015      	b.n	8001f36 <HAL_RCC_OscConfig+0x20e>
 8001f0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f0e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f22:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f26:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001f32:	4b3b      	ldr	r3, [pc, #236]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f3a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001f3e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f42:	fa92 f2a2 	rbit	r2, r2
 8001f46:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001f4a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001f4e:	fab2 f282 	clz	r2, r2
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	f042 0220 	orr.w	r2, r2, #32
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	f002 021f 	and.w	r2, r2, #31
 8001f5e:	2101      	movs	r1, #1
 8001f60:	fa01 f202 	lsl.w	r2, r1, r2
 8001f64:	4013      	ands	r3, r2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0ab      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x19a>
 8001f6a:	e05c      	b.n	8002026 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6c:	f7ff fbbe 	bl	80016ec <HAL_GetTick>
 8001f70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f74:	e00a      	b.n	8001f8c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f76:	f7ff fbb9 	bl	80016ec <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	; 0x64
 8001f84:	d902      	bls.n	8001f8c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	f000 bdcf 	b.w	8002b2a <HAL_RCC_OscConfig+0xe02>
 8001f8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f90:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f94:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001fa0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa4:	fab3 f383 	clz	r3, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d102      	bne.n	8001fbe <HAL_RCC_OscConfig+0x296>
 8001fb8:	4b19      	ldr	r3, [pc, #100]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	e015      	b.n	8001fea <HAL_RCC_OscConfig+0x2c2>
 8001fbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001fca:	fa93 f3a3 	rbit	r3, r3
 8001fce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001fd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001fda:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <HAL_RCC_OscConfig+0x2f8>)
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fee:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001ff2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001ff6:	fa92 f2a2 	rbit	r2, r2
 8001ffa:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001ffe:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002002:	fab2 f282 	clz	r2, r2
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	f042 0220 	orr.w	r2, r2, #32
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	f002 021f 	and.w	r2, r2, #31
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f202 	lsl.w	r2, r1, r2
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1ab      	bne.n	8001f76 <HAL_RCC_OscConfig+0x24e>
 800201e:	e002      	b.n	8002026 <HAL_RCC_OscConfig+0x2fe>
 8002020:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 816f 	beq.w	8002314 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002036:	4bd0      	ldr	r3, [pc, #832]	; (8002378 <HAL_RCC_OscConfig+0x650>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00b      	beq.n	800205a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002042:	4bcd      	ldr	r3, [pc, #820]	; (8002378 <HAL_RCC_OscConfig+0x650>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b08      	cmp	r3, #8
 800204c:	d16c      	bne.n	8002128 <HAL_RCC_OscConfig+0x400>
 800204e:	4bca      	ldr	r3, [pc, #808]	; (8002378 <HAL_RCC_OscConfig+0x650>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d166      	bne.n	8002128 <HAL_RCC_OscConfig+0x400>
 800205a:	2302      	movs	r3, #2
 800205c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800206c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002070:	fab3 f383 	clz	r3, r3
 8002074:	b2db      	uxtb	r3, r3
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	b2db      	uxtb	r3, r3
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b01      	cmp	r3, #1
 8002082:	d102      	bne.n	800208a <HAL_RCC_OscConfig+0x362>
 8002084:	4bbc      	ldr	r3, [pc, #752]	; (8002378 <HAL_RCC_OscConfig+0x650>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	e013      	b.n	80020b2 <HAL_RCC_OscConfig+0x38a>
 800208a:	2302      	movs	r3, #2
 800208c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002094:	fa93 f3a3 	rbit	r3, r3
 8002098:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800209c:	2302      	movs	r3, #2
 800209e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80020a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80020ae:	4bb2      	ldr	r3, [pc, #712]	; (8002378 <HAL_RCC_OscConfig+0x650>)
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	2202      	movs	r2, #2
 80020b4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80020b8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80020bc:	fa92 f2a2 	rbit	r2, r2
 80020c0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80020c4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80020c8:	fab2 f282 	clz	r2, r2
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	f042 0220 	orr.w	r2, r2, #32
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	f002 021f 	and.w	r2, r2, #31
 80020d8:	2101      	movs	r1, #1
 80020da:	fa01 f202 	lsl.w	r2, r1, r2
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d007      	beq.n	80020f4 <HAL_RCC_OscConfig+0x3cc>
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d002      	beq.n	80020f4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	f000 bd1b 	b.w	8002b2a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f4:	4ba0      	ldr	r3, [pc, #640]	; (8002378 <HAL_RCC_OscConfig+0x650>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	21f8      	movs	r1, #248	; 0xf8
 8002104:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002108:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800210c:	fa91 f1a1 	rbit	r1, r1
 8002110:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002114:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002118:	fab1 f181 	clz	r1, r1
 800211c:	b2c9      	uxtb	r1, r1
 800211e:	408b      	lsls	r3, r1
 8002120:	4995      	ldr	r1, [pc, #596]	; (8002378 <HAL_RCC_OscConfig+0x650>)
 8002122:	4313      	orrs	r3, r2
 8002124:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002126:	e0f5      	b.n	8002314 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 8085 	beq.w	800223e <HAL_RCC_OscConfig+0x516>
 8002134:	2301      	movs	r3, #1
 8002136:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002146:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002154:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	461a      	mov	r2, r3
 800215c:	2301      	movs	r3, #1
 800215e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7ff fac4 	bl	80016ec <HAL_GetTick>
 8002164:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002168:	e00a      	b.n	8002180 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800216a:	f7ff fabf 	bl	80016ec <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d902      	bls.n	8002180 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	f000 bcd5 	b.w	8002b2a <HAL_RCC_OscConfig+0xe02>
 8002180:	2302      	movs	r3, #2
 8002182:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002192:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	095b      	lsrs	r3, r3, #5
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d102      	bne.n	80021b0 <HAL_RCC_OscConfig+0x488>
 80021aa:	4b73      	ldr	r3, [pc, #460]	; (8002378 <HAL_RCC_OscConfig+0x650>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	e013      	b.n	80021d8 <HAL_RCC_OscConfig+0x4b0>
 80021b0:	2302      	movs	r3, #2
 80021b2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80021ba:	fa93 f3a3 	rbit	r3, r3
 80021be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80021c2:	2302      	movs	r3, #2
 80021c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80021c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80021cc:	fa93 f3a3 	rbit	r3, r3
 80021d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80021d4:	4b68      	ldr	r3, [pc, #416]	; (8002378 <HAL_RCC_OscConfig+0x650>)
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	2202      	movs	r2, #2
 80021da:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80021de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80021e2:	fa92 f2a2 	rbit	r2, r2
 80021e6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80021ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80021ee:	fab2 f282 	clz	r2, r2
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	f042 0220 	orr.w	r2, r2, #32
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	f002 021f 	and.w	r2, r2, #31
 80021fe:	2101      	movs	r1, #1
 8002200:	fa01 f202 	lsl.w	r2, r1, r2
 8002204:	4013      	ands	r3, r2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0af      	beq.n	800216a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220a:	4b5b      	ldr	r3, [pc, #364]	; (8002378 <HAL_RCC_OscConfig+0x650>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	21f8      	movs	r1, #248	; 0xf8
 800221a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002222:	fa91 f1a1 	rbit	r1, r1
 8002226:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800222a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800222e:	fab1 f181 	clz	r1, r1
 8002232:	b2c9      	uxtb	r1, r1
 8002234:	408b      	lsls	r3, r1
 8002236:	4950      	ldr	r1, [pc, #320]	; (8002378 <HAL_RCC_OscConfig+0x650>)
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]
 800223c:	e06a      	b.n	8002314 <HAL_RCC_OscConfig+0x5ec>
 800223e:	2301      	movs	r3, #1
 8002240:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002248:	fa93 f3a3 	rbit	r3, r3
 800224c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002250:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002254:	fab3 f383 	clz	r3, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800225e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	461a      	mov	r2, r3
 8002266:	2300      	movs	r3, #0
 8002268:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7ff fa3f 	bl	80016ec <HAL_GetTick>
 800226e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002272:	e00a      	b.n	800228a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002274:	f7ff fa3a 	bl	80016ec <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d902      	bls.n	800228a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	f000 bc50 	b.w	8002b2a <HAL_RCC_OscConfig+0xe02>
 800228a:	2302      	movs	r3, #2
 800228c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002294:	fa93 f3a3 	rbit	r3, r3
 8002298:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800229c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	095b      	lsrs	r3, r3, #5
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d102      	bne.n	80022ba <HAL_RCC_OscConfig+0x592>
 80022b4:	4b30      	ldr	r3, [pc, #192]	; (8002378 <HAL_RCC_OscConfig+0x650>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	e013      	b.n	80022e2 <HAL_RCC_OscConfig+0x5ba>
 80022ba:	2302      	movs	r3, #2
 80022bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80022c4:	fa93 f3a3 	rbit	r3, r3
 80022c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80022cc:	2302      	movs	r3, #2
 80022ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80022d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80022de:	4b26      	ldr	r3, [pc, #152]	; (8002378 <HAL_RCC_OscConfig+0x650>)
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	2202      	movs	r2, #2
 80022e4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80022e8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80022ec:	fa92 f2a2 	rbit	r2, r2
 80022f0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80022f4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80022f8:	fab2 f282 	clz	r2, r2
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	f042 0220 	orr.w	r2, r2, #32
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	f002 021f 	and.w	r2, r2, #31
 8002308:	2101      	movs	r1, #1
 800230a:	fa01 f202 	lsl.w	r2, r1, r2
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1af      	bne.n	8002274 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002314:	1d3b      	adds	r3, r7, #4
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 80da 	beq.w	80024d8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d069      	beq.n	8002402 <HAL_RCC_OscConfig+0x6da>
 800232e:	2301      	movs	r3, #1
 8002330:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002340:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002344:	fab3 f383 	clz	r3, r3
 8002348:	b2db      	uxtb	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_RCC_OscConfig+0x654>)
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	461a      	mov	r2, r3
 8002354:	2301      	movs	r3, #1
 8002356:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002358:	f7ff f9c8 	bl	80016ec <HAL_GetTick>
 800235c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002360:	e00e      	b.n	8002380 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002362:	f7ff f9c3 	bl	80016ec <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d906      	bls.n	8002380 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e3d9      	b.n	8002b2a <HAL_RCC_OscConfig+0xe02>
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	10908120 	.word	0x10908120
 8002380:	2302      	movs	r3, #2
 8002382:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002392:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002396:	2202      	movs	r2, #2
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	fa93 f2a3 	rbit	r2, r3
 80023a4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80023ae:	2202      	movs	r2, #2
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	fa93 f2a3 	rbit	r2, r3
 80023bc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80023c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c2:	4ba5      	ldr	r3, [pc, #660]	; (8002658 <HAL_RCC_OscConfig+0x930>)
 80023c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023c6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80023ca:	2102      	movs	r1, #2
 80023cc:	6019      	str	r1, [r3, #0]
 80023ce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	fa93 f1a3 	rbit	r1, r3
 80023d8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80023dc:	6019      	str	r1, [r3, #0]
  return result;
 80023de:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	fab3 f383 	clz	r3, r3
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	2101      	movs	r1, #1
 80023f6:	fa01 f303 	lsl.w	r3, r1, r3
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0b0      	beq.n	8002362 <HAL_RCC_OscConfig+0x63a>
 8002400:	e06a      	b.n	80024d8 <HAL_RCC_OscConfig+0x7b0>
 8002402:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002406:	2201      	movs	r2, #1
 8002408:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	fa93 f2a3 	rbit	r2, r3
 8002414:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002418:	601a      	str	r2, [r3, #0]
  return result;
 800241a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800241e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002420:	fab3 f383 	clz	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	4b8c      	ldr	r3, [pc, #560]	; (800265c <HAL_RCC_OscConfig+0x934>)
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	461a      	mov	r2, r3
 8002430:	2300      	movs	r3, #0
 8002432:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002434:	f7ff f95a 	bl	80016ec <HAL_GetTick>
 8002438:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800243c:	e009      	b.n	8002452 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800243e:	f7ff f955 	bl	80016ec <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e36b      	b.n	8002b2a <HAL_RCC_OscConfig+0xe02>
 8002452:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002456:	2202      	movs	r2, #2
 8002458:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	fa93 f2a3 	rbit	r2, r3
 8002464:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800246e:	2202      	movs	r2, #2
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	fa93 f2a3 	rbit	r2, r3
 800247c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002486:	2202      	movs	r2, #2
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	fa93 f2a3 	rbit	r2, r3
 8002494:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002498:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800249a:	4b6f      	ldr	r3, [pc, #444]	; (8002658 <HAL_RCC_OscConfig+0x930>)
 800249c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800249e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80024a2:	2102      	movs	r1, #2
 80024a4:	6019      	str	r1, [r3, #0]
 80024a6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	fa93 f1a3 	rbit	r1, r3
 80024b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80024b4:	6019      	str	r1, [r3, #0]
  return result;
 80024b6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	fab3 f383 	clz	r3, r3
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	2101      	movs	r1, #1
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1b2      	bne.n	800243e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d8:	1d3b      	adds	r3, r7, #4
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 8158 	beq.w	8002798 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ee:	4b5a      	ldr	r3, [pc, #360]	; (8002658 <HAL_RCC_OscConfig+0x930>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d112      	bne.n	8002520 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	4b57      	ldr	r3, [pc, #348]	; (8002658 <HAL_RCC_OscConfig+0x930>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	4a56      	ldr	r2, [pc, #344]	; (8002658 <HAL_RCC_OscConfig+0x930>)
 8002500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002504:	61d3      	str	r3, [r2, #28]
 8002506:	4b54      	ldr	r3, [pc, #336]	; (8002658 <HAL_RCC_OscConfig+0x930>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800250e:	f107 0308 	add.w	r3, r7, #8
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	f107 0308 	add.w	r3, r7, #8
 8002518:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800251a:	2301      	movs	r3, #1
 800251c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002520:	4b4f      	ldr	r3, [pc, #316]	; (8002660 <HAL_RCC_OscConfig+0x938>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d11a      	bne.n	8002562 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800252c:	4b4c      	ldr	r3, [pc, #304]	; (8002660 <HAL_RCC_OscConfig+0x938>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a4b      	ldr	r2, [pc, #300]	; (8002660 <HAL_RCC_OscConfig+0x938>)
 8002532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002536:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002538:	f7ff f8d8 	bl	80016ec <HAL_GetTick>
 800253c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002540:	e009      	b.n	8002556 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002542:	f7ff f8d3 	bl	80016ec <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	; 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e2e9      	b.n	8002b2a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <HAL_RCC_OscConfig+0x938>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0ef      	beq.n	8002542 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002562:	1d3b      	adds	r3, r7, #4
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d106      	bne.n	800257a <HAL_RCC_OscConfig+0x852>
 800256c:	4b3a      	ldr	r3, [pc, #232]	; (8002658 <HAL_RCC_OscConfig+0x930>)
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	4a39      	ldr	r2, [pc, #228]	; (8002658 <HAL_RCC_OscConfig+0x930>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6213      	str	r3, [r2, #32]
 8002578:	e02f      	b.n	80025da <HAL_RCC_OscConfig+0x8b2>
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10c      	bne.n	800259e <HAL_RCC_OscConfig+0x876>
 8002584:	4b34      	ldr	r3, [pc, #208]	; (8002658 <HAL_RCC_OscConfig+0x930>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	4a33      	ldr	r2, [pc, #204]	; (8002658 <HAL_RCC_OscConfig+0x930>)
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	6213      	str	r3, [r2, #32]
 8002590:	4b31      	ldr	r3, [pc, #196]	; (8002658 <HAL_RCC_OscConfig+0x930>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	4a30      	ldr	r2, [pc, #192]	; (8002658 <HAL_RCC_OscConfig+0x930>)
 8002596:	f023 0304 	bic.w	r3, r3, #4
 800259a:	6213      	str	r3, [r2, #32]
 800259c:	e01d      	b.n	80025da <HAL_RCC_OscConfig+0x8b2>
 800259e:	1d3b      	adds	r3, r7, #4
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	d10c      	bne.n	80025c2 <HAL_RCC_OscConfig+0x89a>
 80025a8:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <HAL_RCC_OscConfig+0x930>)
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	4a2a      	ldr	r2, [pc, #168]	; (8002658 <HAL_RCC_OscConfig+0x930>)
 80025ae:	f043 0304 	orr.w	r3, r3, #4
 80025b2:	6213      	str	r3, [r2, #32]
 80025b4:	4b28      	ldr	r3, [pc, #160]	; (8002658 <HAL_RCC_OscConfig+0x930>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	4a27      	ldr	r2, [pc, #156]	; (8002658 <HAL_RCC_OscConfig+0x930>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6213      	str	r3, [r2, #32]
 80025c0:	e00b      	b.n	80025da <HAL_RCC_OscConfig+0x8b2>
 80025c2:	4b25      	ldr	r3, [pc, #148]	; (8002658 <HAL_RCC_OscConfig+0x930>)
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	4a24      	ldr	r2, [pc, #144]	; (8002658 <HAL_RCC_OscConfig+0x930>)
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	6213      	str	r3, [r2, #32]
 80025ce:	4b22      	ldr	r3, [pc, #136]	; (8002658 <HAL_RCC_OscConfig+0x930>)
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	4a21      	ldr	r2, [pc, #132]	; (8002658 <HAL_RCC_OscConfig+0x930>)
 80025d4:	f023 0304 	bic.w	r3, r3, #4
 80025d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d06b      	beq.n	80026bc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e4:	f7ff f882 	bl	80016ec <HAL_GetTick>
 80025e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ec:	e00b      	b.n	8002606 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ee:	f7ff f87d 	bl	80016ec <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e291      	b.n	8002b2a <HAL_RCC_OscConfig+0xe02>
 8002606:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800260a:	2202      	movs	r2, #2
 800260c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	fa93 f2a3 	rbit	r2, r3
 8002618:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002622:	2202      	movs	r2, #2
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	fa93 f2a3 	rbit	r2, r3
 8002630:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002634:	601a      	str	r2, [r3, #0]
  return result;
 8002636:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800263a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263c:	fab3 f383 	clz	r3, r3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	095b      	lsrs	r3, r3, #5
 8002644:	b2db      	uxtb	r3, r3
 8002646:	f043 0302 	orr.w	r3, r3, #2
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d109      	bne.n	8002664 <HAL_RCC_OscConfig+0x93c>
 8002650:	4b01      	ldr	r3, [pc, #4]	; (8002658 <HAL_RCC_OscConfig+0x930>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	e014      	b.n	8002680 <HAL_RCC_OscConfig+0x958>
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000
 800265c:	10908120 	.word	0x10908120
 8002660:	40007000 	.word	0x40007000
 8002664:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002668:	2202      	movs	r2, #2
 800266a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	fa93 f2a3 	rbit	r2, r3
 8002676:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	4bbb      	ldr	r3, [pc, #748]	; (800296c <HAL_RCC_OscConfig+0xc44>)
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002684:	2102      	movs	r1, #2
 8002686:	6011      	str	r1, [r2, #0]
 8002688:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	fa92 f1a2 	rbit	r1, r2
 8002692:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002696:	6011      	str	r1, [r2, #0]
  return result;
 8002698:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	fab2 f282 	clz	r2, r2
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	f002 021f 	and.w	r2, r2, #31
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f202 	lsl.w	r2, r1, r2
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d099      	beq.n	80025ee <HAL_RCC_OscConfig+0x8c6>
 80026ba:	e063      	b.n	8002784 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026bc:	f7ff f816 	bl	80016ec <HAL_GetTick>
 80026c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c4:	e00b      	b.n	80026de <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7ff f811 	bl	80016ec <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e225      	b.n	8002b2a <HAL_RCC_OscConfig+0xe02>
 80026de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80026e2:	2202      	movs	r2, #2
 80026e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	fa93 f2a3 	rbit	r2, r3
 80026f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80026fa:	2202      	movs	r2, #2
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	fa93 f2a3 	rbit	r2, r3
 8002708:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800270c:	601a      	str	r2, [r3, #0]
  return result;
 800270e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002712:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002714:	fab3 f383 	clz	r3, r3
 8002718:	b2db      	uxtb	r3, r3
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f043 0302 	orr.w	r3, r3, #2
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d102      	bne.n	800272e <HAL_RCC_OscConfig+0xa06>
 8002728:	4b90      	ldr	r3, [pc, #576]	; (800296c <HAL_RCC_OscConfig+0xc44>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	e00d      	b.n	800274a <HAL_RCC_OscConfig+0xa22>
 800272e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002732:	2202      	movs	r2, #2
 8002734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	fa93 f2a3 	rbit	r2, r3
 8002740:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	4b89      	ldr	r3, [pc, #548]	; (800296c <HAL_RCC_OscConfig+0xc44>)
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800274e:	2102      	movs	r1, #2
 8002750:	6011      	str	r1, [r2, #0]
 8002752:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	fa92 f1a2 	rbit	r1, r2
 800275c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002760:	6011      	str	r1, [r2, #0]
  return result;
 8002762:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	fab2 f282 	clz	r2, r2
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	f002 021f 	and.w	r2, r2, #31
 8002778:	2101      	movs	r1, #1
 800277a:	fa01 f202 	lsl.w	r2, r1, r2
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1a0      	bne.n	80026c6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002784:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002788:	2b01      	cmp	r3, #1
 800278a:	d105      	bne.n	8002798 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278c:	4b77      	ldr	r3, [pc, #476]	; (800296c <HAL_RCC_OscConfig+0xc44>)
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	4a76      	ldr	r2, [pc, #472]	; (800296c <HAL_RCC_OscConfig+0xc44>)
 8002792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002796:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 81c2 	beq.w	8002b28 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a4:	4b71      	ldr	r3, [pc, #452]	; (800296c <HAL_RCC_OscConfig+0xc44>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	f000 819c 	beq.w	8002aea <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b2:	1d3b      	adds	r3, r7, #4
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	f040 8114 	bne.w	80029e6 <HAL_RCC_OscConfig+0xcbe>
 80027be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80027c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	fa93 f2a3 	rbit	r2, r3
 80027d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80027d6:	601a      	str	r2, [r3, #0]
  return result;
 80027d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80027dc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	461a      	mov	r2, r3
 80027f0:	2300      	movs	r3, #0
 80027f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7fe ff7a 	bl	80016ec <HAL_GetTick>
 80027f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027fc:	e009      	b.n	8002812 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fe:	f7fe ff75 	bl	80016ec <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e18b      	b.n	8002b2a <HAL_RCC_OscConfig+0xe02>
 8002812:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002816:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800281a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	fa93 f2a3 	rbit	r2, r3
 8002826:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800282a:	601a      	str	r2, [r3, #0]
  return result;
 800282c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002830:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002832:	fab3 f383 	clz	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	095b      	lsrs	r3, r3, #5
 800283a:	b2db      	uxtb	r3, r3
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b01      	cmp	r3, #1
 8002844:	d102      	bne.n	800284c <HAL_RCC_OscConfig+0xb24>
 8002846:	4b49      	ldr	r3, [pc, #292]	; (800296c <HAL_RCC_OscConfig+0xc44>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	e01b      	b.n	8002884 <HAL_RCC_OscConfig+0xb5c>
 800284c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002850:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002854:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	fa93 f2a3 	rbit	r2, r3
 8002860:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800286a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	fa93 f2a3 	rbit	r2, r3
 800287a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	4b3a      	ldr	r3, [pc, #232]	; (800296c <HAL_RCC_OscConfig+0xc44>)
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002888:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800288c:	6011      	str	r1, [r2, #0]
 800288e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	fa92 f1a2 	rbit	r1, r2
 8002898:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800289c:	6011      	str	r1, [r2, #0]
  return result;
 800289e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	fab2 f282 	clz	r2, r2
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	f042 0220 	orr.w	r2, r2, #32
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	f002 021f 	and.w	r2, r2, #31
 80028b4:	2101      	movs	r1, #1
 80028b6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d19e      	bne.n	80027fe <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c0:	4b2a      	ldr	r3, [pc, #168]	; (800296c <HAL_RCC_OscConfig+0xc44>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028c8:	1d3b      	adds	r3, r7, #4
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	430b      	orrs	r3, r1
 80028d6:	4925      	ldr	r1, [pc, #148]	; (800296c <HAL_RCC_OscConfig+0xc44>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]
 80028dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80028e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	fa93 f2a3 	rbit	r2, r3
 80028f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028f4:	601a      	str	r2, [r3, #0]
  return result;
 80028f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028fa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028fc:	fab3 f383 	clz	r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002906:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	461a      	mov	r2, r3
 800290e:	2301      	movs	r3, #1
 8002910:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002912:	f7fe feeb 	bl	80016ec <HAL_GetTick>
 8002916:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800291a:	e009      	b.n	8002930 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800291c:	f7fe fee6 	bl	80016ec <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e0fc      	b.n	8002b2a <HAL_RCC_OscConfig+0xe02>
 8002930:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002934:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002938:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	fa93 f2a3 	rbit	r2, r3
 8002944:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002948:	601a      	str	r2, [r3, #0]
  return result;
 800294a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800294e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002950:	fab3 f383 	clz	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	b2db      	uxtb	r3, r3
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	d105      	bne.n	8002970 <HAL_RCC_OscConfig+0xc48>
 8002964:	4b01      	ldr	r3, [pc, #4]	; (800296c <HAL_RCC_OscConfig+0xc44>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	e01e      	b.n	80029a8 <HAL_RCC_OscConfig+0xc80>
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000
 8002970:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002974:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	fa93 f2a3 	rbit	r2, r3
 8002984:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800298e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	fa93 f2a3 	rbit	r2, r3
 800299e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	4b63      	ldr	r3, [pc, #396]	; (8002b34 <HAL_RCC_OscConfig+0xe0c>)
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80029ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029b0:	6011      	str	r1, [r2, #0]
 80029b2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	fa92 f1a2 	rbit	r1, r2
 80029bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80029c0:	6011      	str	r1, [r2, #0]
  return result;
 80029c2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	fab2 f282 	clz	r2, r2
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	f042 0220 	orr.w	r2, r2, #32
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	f002 021f 	and.w	r2, r2, #31
 80029d8:	2101      	movs	r1, #1
 80029da:	fa01 f202 	lsl.w	r2, r1, r2
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d09b      	beq.n	800291c <HAL_RCC_OscConfig+0xbf4>
 80029e4:	e0a0      	b.n	8002b28 <HAL_RCC_OscConfig+0xe00>
 80029e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	fa93 f2a3 	rbit	r2, r3
 80029fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029fe:	601a      	str	r2, [r3, #0]
  return result;
 8002a00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a04:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	461a      	mov	r2, r3
 8002a18:	2300      	movs	r3, #0
 8002a1a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fe66 	bl	80016ec <HAL_GetTick>
 8002a20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a24:	e009      	b.n	8002a3a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a26:	f7fe fe61 	bl	80016ec <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e077      	b.n	8002b2a <HAL_RCC_OscConfig+0xe02>
 8002a3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	fa93 f2a3 	rbit	r2, r3
 8002a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a52:	601a      	str	r2, [r3, #0]
  return result;
 8002a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a5a:	fab3 f383 	clz	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	095b      	lsrs	r3, r3, #5
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d102      	bne.n	8002a74 <HAL_RCC_OscConfig+0xd4c>
 8002a6e:	4b31      	ldr	r3, [pc, #196]	; (8002b34 <HAL_RCC_OscConfig+0xe0c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	e01b      	b.n	8002aac <HAL_RCC_OscConfig+0xd84>
 8002a74:	f107 0320 	add.w	r3, r7, #32
 8002a78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	f107 0320 	add.w	r3, r7, #32
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	fa93 f2a3 	rbit	r2, r3
 8002a88:	f107 031c 	add.w	r3, r7, #28
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	f107 0318 	add.w	r3, r7, #24
 8002a92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	f107 0318 	add.w	r3, r7, #24
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	fa93 f2a3 	rbit	r2, r3
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <HAL_RCC_OscConfig+0xe0c>)
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	f107 0210 	add.w	r2, r7, #16
 8002ab0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ab4:	6011      	str	r1, [r2, #0]
 8002ab6:	f107 0210 	add.w	r2, r7, #16
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	fa92 f1a2 	rbit	r1, r2
 8002ac0:	f107 020c 	add.w	r2, r7, #12
 8002ac4:	6011      	str	r1, [r2, #0]
  return result;
 8002ac6:	f107 020c 	add.w	r2, r7, #12
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	fab2 f282 	clz	r2, r2
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	f042 0220 	orr.w	r2, r2, #32
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	f002 021f 	and.w	r2, r2, #31
 8002adc:	2101      	movs	r1, #1
 8002ade:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d19e      	bne.n	8002a26 <HAL_RCC_OscConfig+0xcfe>
 8002ae8:	e01e      	b.n	8002b28 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e018      	b.n	8002b2a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <HAL_RCC_OscConfig+0xe0c>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b00:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d108      	bne.n	8002b24 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b1a:	1d3b      	adds	r3, r7, #4
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40021000 	.word	0x40021000

08002b38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b09e      	sub	sp, #120	; 0x78
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e162      	b.n	8002e16 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b50:	4b90      	ldr	r3, [pc, #576]	; (8002d94 <HAL_RCC_ClockConfig+0x25c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d910      	bls.n	8002b80 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5e:	4b8d      	ldr	r3, [pc, #564]	; (8002d94 <HAL_RCC_ClockConfig+0x25c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 0207 	bic.w	r2, r3, #7
 8002b66:	498b      	ldr	r1, [pc, #556]	; (8002d94 <HAL_RCC_ClockConfig+0x25c>)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6e:	4b89      	ldr	r3, [pc, #548]	; (8002d94 <HAL_RCC_ClockConfig+0x25c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e14a      	b.n	8002e16 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b8c:	4b82      	ldr	r3, [pc, #520]	; (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	497f      	ldr	r1, [pc, #508]	; (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 80dc 	beq.w	8002d64 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d13c      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xf6>
 8002bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bb8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bbc:	fa93 f3a3 	rbit	r3, r3
 8002bc0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc4:	fab3 f383 	clz	r3, r3
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d102      	bne.n	8002bde <HAL_RCC_ClockConfig+0xa6>
 8002bd8:	4b6f      	ldr	r3, [pc, #444]	; (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	e00f      	b.n	8002bfe <HAL_RCC_ClockConfig+0xc6>
 8002bde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002be2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002be6:	fa93 f3a3 	rbit	r3, r3
 8002bea:	667b      	str	r3, [r7, #100]	; 0x64
 8002bec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bf0:	663b      	str	r3, [r7, #96]	; 0x60
 8002bf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bf4:	fa93 f3a3 	rbit	r3, r3
 8002bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bfa:	4b67      	ldr	r3, [pc, #412]	; (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c02:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c06:	fa92 f2a2 	rbit	r2, r2
 8002c0a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002c0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c0e:	fab2 f282 	clz	r2, r2
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	f042 0220 	orr.w	r2, r2, #32
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	f002 021f 	and.w	r2, r2, #31
 8002c1e:	2101      	movs	r1, #1
 8002c20:	fa01 f202 	lsl.w	r2, r1, r2
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d17b      	bne.n	8002d22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e0f3      	b.n	8002e16 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d13c      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0x178>
 8002c36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c3a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	095b      	lsrs	r3, r3, #5
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d102      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x128>
 8002c5a:	4b4f      	ldr	r3, [pc, #316]	; (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	e00f      	b.n	8002c80 <HAL_RCC_ClockConfig+0x148>
 8002c60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c64:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c68:	fa93 f3a3 	rbit	r3, r3
 8002c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c72:	643b      	str	r3, [r7, #64]	; 0x40
 8002c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c7c:	4b46      	ldr	r3, [pc, #280]	; (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c84:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c88:	fa92 f2a2 	rbit	r2, r2
 8002c8c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c90:	fab2 f282 	clz	r2, r2
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	f042 0220 	orr.w	r2, r2, #32
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	f002 021f 	and.w	r2, r2, #31
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d13a      	bne.n	8002d22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0b2      	b.n	8002e16 <HAL_RCC_ClockConfig+0x2de>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb6:	fa93 f3a3 	rbit	r3, r3
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	095b      	lsrs	r3, r3, #5
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d102      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x1a0>
 8002cd2:	4b31      	ldr	r3, [pc, #196]	; (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	e00d      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x1bc>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	623b      	str	r3, [r7, #32]
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	4b29      	ldr	r3, [pc, #164]	; (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	61ba      	str	r2, [r7, #24]
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	fa92 f2a2 	rbit	r2, r2
 8002cfe:	617a      	str	r2, [r7, #20]
  return result;
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	fab2 f282 	clz	r2, r2
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	f042 0220 	orr.w	r2, r2, #32
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	f002 021f 	and.w	r2, r2, #31
 8002d12:	2101      	movs	r1, #1
 8002d14:	fa01 f202 	lsl.w	r2, r1, r2
 8002d18:	4013      	ands	r3, r2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e079      	b.n	8002e16 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d22:	4b1d      	ldr	r3, [pc, #116]	; (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f023 0203 	bic.w	r2, r3, #3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	491a      	ldr	r1, [pc, #104]	; (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d34:	f7fe fcda 	bl	80016ec <HAL_GetTick>
 8002d38:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3a:	e00a      	b.n	8002d52 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d3c:	f7fe fcd6 	bl	80016ec <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e061      	b.n	8002e16 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <HAL_RCC_ClockConfig+0x260>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 020c 	and.w	r2, r3, #12
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d1eb      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_RCC_ClockConfig+0x25c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d214      	bcs.n	8002d9c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d72:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <HAL_RCC_ClockConfig+0x25c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 0207 	bic.w	r2, r3, #7
 8002d7a:	4906      	ldr	r1, [pc, #24]	; (8002d94 <HAL_RCC_ClockConfig+0x25c>)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <HAL_RCC_ClockConfig+0x25c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d005      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e040      	b.n	8002e16 <HAL_RCC_ClockConfig+0x2de>
 8002d94:	40022000 	.word	0x40022000
 8002d98:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da8:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <HAL_RCC_ClockConfig+0x2e8>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	491a      	ldr	r1, [pc, #104]	; (8002e20 <HAL_RCC_ClockConfig+0x2e8>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d009      	beq.n	8002dda <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dc6:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <HAL_RCC_ClockConfig+0x2e8>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4912      	ldr	r1, [pc, #72]	; (8002e20 <HAL_RCC_ClockConfig+0x2e8>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002dda:	f000 f829 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 8002dde:	4601      	mov	r1, r0
 8002de0:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <HAL_RCC_ClockConfig+0x2e8>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de8:	22f0      	movs	r2, #240	; 0xf0
 8002dea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	fa92 f2a2 	rbit	r2, r2
 8002df2:	60fa      	str	r2, [r7, #12]
  return result;
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	fab2 f282 	clz	r2, r2
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	40d3      	lsrs	r3, r2
 8002dfe:	4a09      	ldr	r2, [pc, #36]	; (8002e24 <HAL_RCC_ClockConfig+0x2ec>)
 8002e00:	5cd3      	ldrb	r3, [r2, r3]
 8002e02:	fa21 f303 	lsr.w	r3, r1, r3
 8002e06:	4a08      	ldr	r2, [pc, #32]	; (8002e28 <HAL_RCC_ClockConfig+0x2f0>)
 8002e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e0a:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <HAL_RCC_ClockConfig+0x2f4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe fc28 	bl	8001664 <HAL_InitTick>
  
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3778      	adds	r7, #120	; 0x78
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40021000 	.word	0x40021000
 8002e24:	080091fc 	.word	0x080091fc
 8002e28:	20000000 	.word	0x20000000
 8002e2c:	20000004 	.word	0x20000004

08002e30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b08b      	sub	sp, #44	; 0x2c
 8002e34:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61bb      	str	r3, [r7, #24]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002e4a:	4b29      	ldr	r3, [pc, #164]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d002      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0x30>
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d003      	beq.n	8002e66 <HAL_RCC_GetSysClockFreq+0x36>
 8002e5e:	e03c      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e60:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e62:	623b      	str	r3, [r7, #32]
      break;
 8002e64:	e03c      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e6c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002e70:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	fa92 f2a2 	rbit	r2, r2
 8002e78:	607a      	str	r2, [r7, #4]
  return result;
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	fab2 f282 	clz	r2, r2
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	40d3      	lsrs	r3, r2
 8002e84:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e86:	5cd3      	ldrb	r3, [r2, r3]
 8002e88:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e8a:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	220f      	movs	r2, #15
 8002e94:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	fa92 f2a2 	rbit	r2, r2
 8002e9c:	60fa      	str	r2, [r7, #12]
  return result;
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	fab2 f282 	clz	r2, r2
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	40d3      	lsrs	r3, r2
 8002ea8:	4a14      	ldr	r2, [pc, #80]	; (8002efc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002eaa:	5cd3      	ldrb	r3, [r2, r3]
 8002eac:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002eb8:	4a0e      	ldr	r2, [pc, #56]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	fb02 f303 	mul.w	r3, r2, r3
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec8:	e004      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	4a0c      	ldr	r2, [pc, #48]	; (8002f00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ece:	fb02 f303 	mul.w	r3, r2, r3
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	623b      	str	r3, [r7, #32]
      break;
 8002ed8:	e002      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002edc:	623b      	str	r3, [r7, #32]
      break;
 8002ede:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	372c      	adds	r7, #44	; 0x2c
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	007a1200 	.word	0x007a1200
 8002ef8:	08009214 	.word	0x08009214
 8002efc:	08009224 	.word	0x08009224
 8002f00:	003d0900 	.word	0x003d0900

08002f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f08:	4b03      	ldr	r3, [pc, #12]	; (8002f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	20000000 	.word	0x20000000

08002f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f22:	f7ff ffef 	bl	8002f04 <HAL_RCC_GetHCLKFreq>
 8002f26:	4601      	mov	r1, r0
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f30:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	fa92 f2a2 	rbit	r2, r2
 8002f3c:	603a      	str	r2, [r7, #0]
  return result;
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	fab2 f282 	clz	r2, r2
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	40d3      	lsrs	r3, r2
 8002f48:	4a04      	ldr	r2, [pc, #16]	; (8002f5c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f4a:	5cd3      	ldrb	r3, [r2, r3]
 8002f4c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	0800920c 	.word	0x0800920c

08002f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f66:	f7ff ffcd 	bl	8002f04 <HAL_RCC_GetHCLKFreq>
 8002f6a:	4601      	mov	r1, r0
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002f74:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002f78:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	fa92 f2a2 	rbit	r2, r2
 8002f80:	603a      	str	r2, [r7, #0]
  return result;
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	fab2 f282 	clz	r2, r2
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	40d3      	lsrs	r3, r2
 8002f8c:	4a04      	ldr	r2, [pc, #16]	; (8002fa0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f8e:	5cd3      	ldrb	r3, [r2, r3]
 8002f90:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	0800920c 	.word	0x0800920c

08002fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b092      	sub	sp, #72	; 0x48
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 80cd 	beq.w	8003162 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc8:	4b86      	ldr	r3, [pc, #536]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10e      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd4:	4b83      	ldr	r3, [pc, #524]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	4a82      	ldr	r2, [pc, #520]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fde:	61d3      	str	r3, [r2, #28]
 8002fe0:	4b80      	ldr	r3, [pc, #512]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fec:	2301      	movs	r3, #1
 8002fee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff2:	4b7d      	ldr	r3, [pc, #500]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d118      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ffe:	4b7a      	ldr	r3, [pc, #488]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a79      	ldr	r2, [pc, #484]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003008:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800300a:	f7fe fb6f 	bl	80016ec <HAL_GetTick>
 800300e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003010:	e008      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003012:	f7fe fb6b 	bl	80016ec <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b64      	cmp	r3, #100	; 0x64
 800301e:	d901      	bls.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e0db      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003024:	4b70      	ldr	r3, [pc, #448]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003030:	4b6c      	ldr	r3, [pc, #432]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003038:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800303a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303c:	2b00      	cmp	r3, #0
 800303e:	d07d      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003048:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800304a:	429a      	cmp	r2, r3
 800304c:	d076      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800304e:	4b65      	ldr	r3, [pc, #404]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800305c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003060:	fa93 f3a3 	rbit	r3, r3
 8003064:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003068:	fab3 f383 	clz	r3, r3
 800306c:	b2db      	uxtb	r3, r3
 800306e:	461a      	mov	r2, r3
 8003070:	4b5e      	ldr	r3, [pc, #376]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	461a      	mov	r2, r3
 8003078:	2301      	movs	r3, #1
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003080:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003084:	fa93 f3a3 	rbit	r3, r3
 8003088:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800308a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800308c:	fab3 f383 	clz	r3, r3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	4b55      	ldr	r3, [pc, #340]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	461a      	mov	r2, r3
 800309c:	2300      	movs	r3, #0
 800309e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030a0:	4a50      	ldr	r2, [pc, #320]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d045      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b0:	f7fe fb1c 	bl	80016ec <HAL_GetTick>
 80030b4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b6:	e00a      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b8:	f7fe fb18 	bl	80016ec <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d901      	bls.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e086      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x238>
 80030ce:	2302      	movs	r3, #2
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d4:	fa93 f3a3 	rbit	r3, r3
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
 80030da:	2302      	movs	r3, #2
 80030dc:	623b      	str	r3, [r7, #32]
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	fa93 f3a3 	rbit	r3, r3
 80030e4:	61fb      	str	r3, [r7, #28]
  return result;
 80030e6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e8:	fab3 f383 	clz	r3, r3
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	f043 0302 	orr.w	r3, r3, #2
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d102      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80030fc:	4b39      	ldr	r3, [pc, #228]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	e007      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003102:	2302      	movs	r3, #2
 8003104:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	4b35      	ldr	r3, [pc, #212]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	2202      	movs	r2, #2
 8003114:	613a      	str	r2, [r7, #16]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	fa92 f2a2 	rbit	r2, r2
 800311c:	60fa      	str	r2, [r7, #12]
  return result;
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	fab2 f282 	clz	r2, r2
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	f002 021f 	and.w	r2, r2, #31
 8003130:	2101      	movs	r1, #1
 8003132:	fa01 f202 	lsl.w	r2, r1, r2
 8003136:	4013      	ands	r3, r2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0bd      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800313c:	4b29      	ldr	r3, [pc, #164]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4926      	ldr	r1, [pc, #152]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800314a:	4313      	orrs	r3, r2
 800314c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800314e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003152:	2b01      	cmp	r3, #1
 8003154:	d105      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003156:	4b23      	ldr	r3, [pc, #140]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	4a22      	ldr	r2, [pc, #136]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800315c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003160:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800316e:	4b1d      	ldr	r3, [pc, #116]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	f023 0203 	bic.w	r2, r3, #3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	491a      	ldr	r1, [pc, #104]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800317c:	4313      	orrs	r3, r2
 800317e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800318c:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	f023 0210 	bic.w	r2, r3, #16
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4912      	ldr	r1, [pc, #72]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800319a:	4313      	orrs	r3, r2
 800319c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d008      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80031aa:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	490b      	ldr	r1, [pc, #44]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	4903      	ldr	r1, [pc, #12]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3748      	adds	r7, #72	; 0x48
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40007000 	.word	0x40007000
 80031ec:	10908100 	.word	0x10908100

080031f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e040      	b.n	8003284 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7fe f868 	bl	80012e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2224      	movs	r2, #36	; 0x24
 800321c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0201 	bic.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fb76 	bl	8003920 <UART_SetConfig>
 8003234:	4603      	mov	r3, r0
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e022      	b.n	8003284 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fca0 	bl	8003b8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800325a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800326a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 fd27 	bl	8003cd0 <UART_CheckIdleState>
 8003282:	4603      	mov	r3, r0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08a      	sub	sp, #40	; 0x28
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	4613      	mov	r3, r2
 8003298:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	d132      	bne.n	800330a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_UART_Receive_IT+0x24>
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e02b      	b.n	800330c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d018      	beq.n	80032fa <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	e853 3f00 	ldrex	r3, [r3]
 80032d4:	613b      	str	r3, [r7, #16]
   return(result);
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	623b      	str	r3, [r7, #32]
 80032e8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ea:	69f9      	ldr	r1, [r7, #28]
 80032ec:	6a3a      	ldr	r2, [r7, #32]
 80032ee:	e841 2300 	strex	r3, r2, [r1]
 80032f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1e6      	bne.n	80032c8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032fa:	88fb      	ldrh	r3, [r7, #6]
 80032fc:	461a      	mov	r2, r3
 80032fe:	68b9      	ldr	r1, [r7, #8]
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 fdf5 	bl	8003ef0 <UART_Start_Receive_IT>
 8003306:	4603      	mov	r3, r0
 8003308:	e000      	b.n	800330c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800330a:	2302      	movs	r3, #2
  }
}
 800330c:	4618      	mov	r0, r3
 800330e:	3728      	adds	r7, #40	; 0x28
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b0ba      	sub	sp, #232	; 0xe8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800333a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800333e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003342:	4013      	ands	r3, r2
 8003344:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003348:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d115      	bne.n	800337c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003354:	f003 0320 	and.w	r3, r3, #32
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00f      	beq.n	800337c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800335c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003360:	f003 0320 	and.w	r3, r3, #32
 8003364:	2b00      	cmp	r3, #0
 8003366:	d009      	beq.n	800337c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 82ab 	beq.w	80038c8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	4798      	blx	r3
      }
      return;
 800337a:	e2a5      	b.n	80038c8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800337c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 8117 	beq.w	80035b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003392:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003396:	4b85      	ldr	r3, [pc, #532]	; (80035ac <HAL_UART_IRQHandler+0x298>)
 8003398:	4013      	ands	r3, r2
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 810a 	beq.w	80035b4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80033a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d011      	beq.n	80033d0 <HAL_UART_IRQHandler+0xbc>
 80033ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00b      	beq.n	80033d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2201      	movs	r2, #1
 80033be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c6:	f043 0201 	orr.w	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d011      	beq.n	8003400 <HAL_UART_IRQHandler+0xec>
 80033dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00b      	beq.n	8003400 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2202      	movs	r2, #2
 80033ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f6:	f043 0204 	orr.w	r2, r3, #4
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d011      	beq.n	8003430 <HAL_UART_IRQHandler+0x11c>
 800340c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00b      	beq.n	8003430 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2204      	movs	r2, #4
 800341e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003426:	f043 0202 	orr.w	r2, r3, #2
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d017      	beq.n	800346c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800343c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b00      	cmp	r3, #0
 8003446:	d105      	bne.n	8003454 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800344c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00b      	beq.n	800346c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2208      	movs	r2, #8
 800345a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003462:	f043 0208 	orr.w	r2, r3, #8
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800346c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003474:	2b00      	cmp	r3, #0
 8003476:	d012      	beq.n	800349e <HAL_UART_IRQHandler+0x18a>
 8003478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800347c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00c      	beq.n	800349e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800348c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003494:	f043 0220 	orr.w	r2, r3, #32
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 8211 	beq.w	80038cc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80034aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00d      	beq.n	80034d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034ba:	f003 0320 	and.w	r3, r3, #32
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d007      	beq.n	80034d2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e6:	2b40      	cmp	r3, #64	; 0x40
 80034e8:	d005      	beq.n	80034f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80034ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d04f      	beq.n	8003596 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fdc0 	bl	800407c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003506:	2b40      	cmp	r3, #64	; 0x40
 8003508:	d141      	bne.n	800358e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	3308      	adds	r3, #8
 8003510:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003514:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003518:	e853 3f00 	ldrex	r3, [r3]
 800351c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003520:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003528:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3308      	adds	r3, #8
 8003532:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003536:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800353a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003542:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003546:	e841 2300 	strex	r3, r2, [r1]
 800354a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800354e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1d9      	bne.n	800350a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355a:	2b00      	cmp	r3, #0
 800355c:	d013      	beq.n	8003586 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003562:	4a13      	ldr	r2, [pc, #76]	; (80035b0 <HAL_UART_IRQHandler+0x29c>)
 8003564:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800356a:	4618      	mov	r0, r3
 800356c:	f7fe fa14 	bl	8001998 <HAL_DMA_Abort_IT>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d017      	beq.n	80035a6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003580:	4610      	mov	r0, r2
 8003582:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003584:	e00f      	b.n	80035a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f9b4 	bl	80038f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800358c:	e00b      	b.n	80035a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f9b0 	bl	80038f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003594:	e007      	b.n	80035a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f9ac 	bl	80038f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80035a4:	e192      	b.n	80038cc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a6:	bf00      	nop
    return;
 80035a8:	e190      	b.n	80038cc <HAL_UART_IRQHandler+0x5b8>
 80035aa:	bf00      	nop
 80035ac:	04000120 	.word	0x04000120
 80035b0:	08004145 	.word	0x08004145

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	f040 814b 	bne.w	8003854 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80035be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c2:	f003 0310 	and.w	r3, r3, #16
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 8144 	beq.w	8003854 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80035cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 813d 	beq.w	8003854 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2210      	movs	r2, #16
 80035e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ec:	2b40      	cmp	r3, #64	; 0x40
 80035ee:	f040 80b5 	bne.w	800375c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 8164 	beq.w	80038d0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800360e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003612:	429a      	cmp	r2, r3
 8003614:	f080 815c 	bcs.w	80038d0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800361e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	2b20      	cmp	r3, #32
 800362a:	f000 8086 	beq.w	800373a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003636:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800363a:	e853 3f00 	ldrex	r3, [r3]
 800363e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003642:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003646:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800364a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003658:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800365c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003660:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003664:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003668:	e841 2300 	strex	r3, r2, [r1]
 800366c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003670:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1da      	bne.n	800362e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3308      	adds	r3, #8
 800367e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003682:	e853 3f00 	ldrex	r3, [r3]
 8003686:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003688:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800368a:	f023 0301 	bic.w	r3, r3, #1
 800368e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3308      	adds	r3, #8
 8003698:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800369c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036a0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036a8:	e841 2300 	strex	r3, r2, [r1]
 80036ac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1e1      	bne.n	8003678 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	3308      	adds	r3, #8
 80036ba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036be:	e853 3f00 	ldrex	r3, [r3]
 80036c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3308      	adds	r3, #8
 80036d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036d8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036e0:	e841 2300 	strex	r3, r2, [r1]
 80036e4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80036e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1e3      	bne.n	80036b4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003702:	e853 3f00 	ldrex	r3, [r3]
 8003706:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800370a:	f023 0310 	bic.w	r3, r3, #16
 800370e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800371c:	65bb      	str	r3, [r7, #88]	; 0x58
 800371e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003720:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003722:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003724:	e841 2300 	strex	r3, r2, [r1]
 8003728:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800372a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1e4      	bne.n	80036fa <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003734:	4618      	mov	r0, r3
 8003736:	f7fe f8f6 	bl	8001926 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2202      	movs	r2, #2
 800373e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800374c:	b29b      	uxth	r3, r3
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	b29b      	uxth	r3, r3
 8003752:	4619      	mov	r1, r3
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f8d7 	bl	8003908 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800375a:	e0b9      	b.n	80038d0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003768:	b29b      	uxth	r3, r3
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80ab 	beq.w	80038d4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800377e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80a6 	beq.w	80038d4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003798:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800379c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	461a      	mov	r2, r3
 80037a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80037aa:	647b      	str	r3, [r7, #68]	; 0x44
 80037ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037b2:	e841 2300 	strex	r3, r2, [r1]
 80037b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1e4      	bne.n	8003788 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3308      	adds	r3, #8
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	e853 3f00 	ldrex	r3, [r3]
 80037cc:	623b      	str	r3, [r7, #32]
   return(result);
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	f023 0301 	bic.w	r3, r3, #1
 80037d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3308      	adds	r3, #8
 80037de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037e2:	633a      	str	r2, [r7, #48]	; 0x30
 80037e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ea:	e841 2300 	strex	r3, r2, [r1]
 80037ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1e3      	bne.n	80037be <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	e853 3f00 	ldrex	r3, [r3]
 8003816:	60fb      	str	r3, [r7, #12]
   return(result);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 0310 	bic.w	r3, r3, #16
 800381e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800382c:	61fb      	str	r3, [r7, #28]
 800382e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003830:	69b9      	ldr	r1, [r7, #24]
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	e841 2300 	strex	r3, r2, [r1]
 8003838:	617b      	str	r3, [r7, #20]
   return(result);
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e4      	bne.n	800380a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003846:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800384a:	4619      	mov	r1, r3
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f85b 	bl	8003908 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003852:	e03f      	b.n	80038d4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003858:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00e      	beq.n	800387e <HAL_UART_IRQHandler+0x56a>
 8003860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003874:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fe4c 	bl	8004514 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800387c:	e02d      	b.n	80038da <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800387e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00e      	beq.n	80038a8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800388a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800388e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003892:	2b00      	cmp	r3, #0
 8003894:	d008      	beq.n	80038a8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800389a:	2b00      	cmp	r3, #0
 800389c:	d01c      	beq.n	80038d8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	4798      	blx	r3
    }
    return;
 80038a6:	e017      	b.n	80038d8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80038a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d012      	beq.n	80038da <HAL_UART_IRQHandler+0x5c6>
 80038b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00c      	beq.n	80038da <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 fc55 	bl	8004170 <UART_EndTransmit_IT>
    return;
 80038c6:	e008      	b.n	80038da <HAL_UART_IRQHandler+0x5c6>
      return;
 80038c8:	bf00      	nop
 80038ca:	e006      	b.n	80038da <HAL_UART_IRQHandler+0x5c6>
    return;
 80038cc:	bf00      	nop
 80038ce:	e004      	b.n	80038da <HAL_UART_IRQHandler+0x5c6>
      return;
 80038d0:	bf00      	nop
 80038d2:	e002      	b.n	80038da <HAL_UART_IRQHandler+0x5c6>
      return;
 80038d4:	bf00      	nop
 80038d6:	e000      	b.n	80038da <HAL_UART_IRQHandler+0x5c6>
    return;
 80038d8:	bf00      	nop
  }

}
 80038da:	37e8      	adds	r7, #232	; 0xe8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b088      	sub	sp, #32
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	431a      	orrs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4b8a      	ldr	r3, [pc, #552]	; (8003b74 <UART_SetConfig+0x254>)
 800394c:	4013      	ands	r3, r2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	6979      	ldr	r1, [r7, #20]
 8003954:	430b      	orrs	r3, r1
 8003956:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	430a      	orrs	r2, r1
 8003990:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a78      	ldr	r2, [pc, #480]	; (8003b78 <UART_SetConfig+0x258>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d120      	bne.n	80039de <UART_SetConfig+0xbe>
 800399c:	4b77      	ldr	r3, [pc, #476]	; (8003b7c <UART_SetConfig+0x25c>)
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d817      	bhi.n	80039d8 <UART_SetConfig+0xb8>
 80039a8:	a201      	add	r2, pc, #4	; (adr r2, 80039b0 <UART_SetConfig+0x90>)
 80039aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ae:	bf00      	nop
 80039b0:	080039c1 	.word	0x080039c1
 80039b4:	080039cd 	.word	0x080039cd
 80039b8:	080039d3 	.word	0x080039d3
 80039bc:	080039c7 	.word	0x080039c7
 80039c0:	2300      	movs	r3, #0
 80039c2:	77fb      	strb	r3, [r7, #31]
 80039c4:	e01d      	b.n	8003a02 <UART_SetConfig+0xe2>
 80039c6:	2302      	movs	r3, #2
 80039c8:	77fb      	strb	r3, [r7, #31]
 80039ca:	e01a      	b.n	8003a02 <UART_SetConfig+0xe2>
 80039cc:	2304      	movs	r3, #4
 80039ce:	77fb      	strb	r3, [r7, #31]
 80039d0:	e017      	b.n	8003a02 <UART_SetConfig+0xe2>
 80039d2:	2308      	movs	r3, #8
 80039d4:	77fb      	strb	r3, [r7, #31]
 80039d6:	e014      	b.n	8003a02 <UART_SetConfig+0xe2>
 80039d8:	2310      	movs	r3, #16
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	e011      	b.n	8003a02 <UART_SetConfig+0xe2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a67      	ldr	r2, [pc, #412]	; (8003b80 <UART_SetConfig+0x260>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d102      	bne.n	80039ee <UART_SetConfig+0xce>
 80039e8:	2300      	movs	r3, #0
 80039ea:	77fb      	strb	r3, [r7, #31]
 80039ec:	e009      	b.n	8003a02 <UART_SetConfig+0xe2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a64      	ldr	r2, [pc, #400]	; (8003b84 <UART_SetConfig+0x264>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d102      	bne.n	80039fe <UART_SetConfig+0xde>
 80039f8:	2300      	movs	r3, #0
 80039fa:	77fb      	strb	r3, [r7, #31]
 80039fc:	e001      	b.n	8003a02 <UART_SetConfig+0xe2>
 80039fe:	2310      	movs	r3, #16
 8003a00:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a0a:	d15a      	bne.n	8003ac2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003a0c:	7ffb      	ldrb	r3, [r7, #31]
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d827      	bhi.n	8003a62 <UART_SetConfig+0x142>
 8003a12:	a201      	add	r2, pc, #4	; (adr r2, 8003a18 <UART_SetConfig+0xf8>)
 8003a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a18:	08003a3d 	.word	0x08003a3d
 8003a1c:	08003a45 	.word	0x08003a45
 8003a20:	08003a4d 	.word	0x08003a4d
 8003a24:	08003a63 	.word	0x08003a63
 8003a28:	08003a53 	.word	0x08003a53
 8003a2c:	08003a63 	.word	0x08003a63
 8003a30:	08003a63 	.word	0x08003a63
 8003a34:	08003a63 	.word	0x08003a63
 8003a38:	08003a5b 	.word	0x08003a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a3c:	f7ff fa6e 	bl	8002f1c <HAL_RCC_GetPCLK1Freq>
 8003a40:	61b8      	str	r0, [r7, #24]
        break;
 8003a42:	e013      	b.n	8003a6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a44:	f7ff fa8c 	bl	8002f60 <HAL_RCC_GetPCLK2Freq>
 8003a48:	61b8      	str	r0, [r7, #24]
        break;
 8003a4a:	e00f      	b.n	8003a6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a4c:	4b4e      	ldr	r3, [pc, #312]	; (8003b88 <UART_SetConfig+0x268>)
 8003a4e:	61bb      	str	r3, [r7, #24]
        break;
 8003a50:	e00c      	b.n	8003a6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a52:	f7ff f9ed 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 8003a56:	61b8      	str	r0, [r7, #24]
        break;
 8003a58:	e008      	b.n	8003a6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a5e:	61bb      	str	r3, [r7, #24]
        break;
 8003a60:	e004      	b.n	8003a6c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	77bb      	strb	r3, [r7, #30]
        break;
 8003a6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d074      	beq.n	8003b5c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	005a      	lsls	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	085b      	lsrs	r3, r3, #1
 8003a7c:	441a      	add	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	2b0f      	cmp	r3, #15
 8003a8c:	d916      	bls.n	8003abc <UART_SetConfig+0x19c>
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a94:	d212      	bcs.n	8003abc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	f023 030f 	bic.w	r3, r3, #15
 8003a9e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	085b      	lsrs	r3, r3, #1
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	89fb      	ldrh	r3, [r7, #14]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	89fa      	ldrh	r2, [r7, #14]
 8003ab8:	60da      	str	r2, [r3, #12]
 8003aba:	e04f      	b.n	8003b5c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	77bb      	strb	r3, [r7, #30]
 8003ac0:	e04c      	b.n	8003b5c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ac2:	7ffb      	ldrb	r3, [r7, #31]
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d828      	bhi.n	8003b1a <UART_SetConfig+0x1fa>
 8003ac8:	a201      	add	r2, pc, #4	; (adr r2, 8003ad0 <UART_SetConfig+0x1b0>)
 8003aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ace:	bf00      	nop
 8003ad0:	08003af5 	.word	0x08003af5
 8003ad4:	08003afd 	.word	0x08003afd
 8003ad8:	08003b05 	.word	0x08003b05
 8003adc:	08003b1b 	.word	0x08003b1b
 8003ae0:	08003b0b 	.word	0x08003b0b
 8003ae4:	08003b1b 	.word	0x08003b1b
 8003ae8:	08003b1b 	.word	0x08003b1b
 8003aec:	08003b1b 	.word	0x08003b1b
 8003af0:	08003b13 	.word	0x08003b13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003af4:	f7ff fa12 	bl	8002f1c <HAL_RCC_GetPCLK1Freq>
 8003af8:	61b8      	str	r0, [r7, #24]
        break;
 8003afa:	e013      	b.n	8003b24 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003afc:	f7ff fa30 	bl	8002f60 <HAL_RCC_GetPCLK2Freq>
 8003b00:	61b8      	str	r0, [r7, #24]
        break;
 8003b02:	e00f      	b.n	8003b24 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b04:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <UART_SetConfig+0x268>)
 8003b06:	61bb      	str	r3, [r7, #24]
        break;
 8003b08:	e00c      	b.n	8003b24 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b0a:	f7ff f991 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 8003b0e:	61b8      	str	r0, [r7, #24]
        break;
 8003b10:	e008      	b.n	8003b24 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b16:	61bb      	str	r3, [r7, #24]
        break;
 8003b18:	e004      	b.n	8003b24 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	77bb      	strb	r3, [r7, #30]
        break;
 8003b22:	bf00      	nop
    }

    if (pclk != 0U)
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d018      	beq.n	8003b5c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	085a      	lsrs	r2, r3, #1
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	441a      	add	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	2b0f      	cmp	r3, #15
 8003b42:	d909      	bls.n	8003b58 <UART_SetConfig+0x238>
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b4a:	d205      	bcs.n	8003b58 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60da      	str	r2, [r3, #12]
 8003b56:	e001      	b.n	8003b5c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003b68:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3720      	adds	r7, #32
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	efff69f3 	.word	0xefff69f3
 8003b78:	40013800 	.word	0x40013800
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	40004400 	.word	0x40004400
 8003b84:	40004800 	.word	0x40004800
 8003b88:	007a1200 	.word	0x007a1200

08003b8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	f003 0320 	and.w	r3, r3, #32
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d01a      	beq.n	8003ca2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c8a:	d10a      	bne.n	8003ca2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	605a      	str	r2, [r3, #4]
  }
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b098      	sub	sp, #96	; 0x60
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ce0:	f7fd fd04 	bl	80016ec <HAL_GetTick>
 8003ce4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d12e      	bne.n	8003d52 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f88c 	bl	8003e20 <UART_WaitOnFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d021      	beq.n	8003d52 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d16:	e853 3f00 	ldrex	r3, [r3]
 8003d1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d22:	653b      	str	r3, [r7, #80]	; 0x50
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d2c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d34:	e841 2300 	strex	r3, r2, [r1]
 8003d38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1e6      	bne.n	8003d0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e062      	b.n	8003e18 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d149      	bne.n	8003df4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f856 	bl	8003e20 <UART_WaitOnFlagUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d03c      	beq.n	8003df4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	e853 3f00 	ldrex	r3, [r3]
 8003d86:	623b      	str	r3, [r7, #32]
   return(result);
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	461a      	mov	r2, r3
 8003d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d98:	633b      	str	r3, [r7, #48]	; 0x30
 8003d9a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003da0:	e841 2300 	strex	r3, r2, [r1]
 8003da4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1e6      	bne.n	8003d7a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3308      	adds	r3, #8
 8003db2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	e853 3f00 	ldrex	r3, [r3]
 8003dba:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f023 0301 	bic.w	r3, r3, #1
 8003dc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3308      	adds	r3, #8
 8003dca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dcc:	61fa      	str	r2, [r7, #28]
 8003dce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd0:	69b9      	ldr	r1, [r7, #24]
 8003dd2:	69fa      	ldr	r2, [r7, #28]
 8003dd4:	e841 2300 	strex	r3, r2, [r1]
 8003dd8:	617b      	str	r3, [r7, #20]
   return(result);
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e5      	bne.n	8003dac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e011      	b.n	8003e18 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2220      	movs	r2, #32
 8003df8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3758      	adds	r7, #88	; 0x58
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e30:	e049      	b.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e38:	d045      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e3a:	f7fd fc57 	bl	80016ec <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d302      	bcc.n	8003e50 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e048      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d031      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d110      	bne.n	8003e92 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2208      	movs	r2, #8
 8003e76:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 f8ff 	bl	800407c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2208      	movs	r2, #8
 8003e82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e029      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea0:	d111      	bne.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003eaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f8e5 	bl	800407c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e00f      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69da      	ldr	r2, [r3, #28]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	bf0c      	ite	eq
 8003ed6:	2301      	moveq	r3, #1
 8003ed8:	2300      	movne	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d0a6      	beq.n	8003e32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b097      	sub	sp, #92	; 0x5c
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	4613      	mov	r3, r2
 8003efc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	88fa      	ldrh	r2, [r7, #6]
 8003f08:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	88fa      	ldrh	r2, [r7, #6]
 8003f10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f22:	d10e      	bne.n	8003f42 <UART_Start_Receive_IT+0x52>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d105      	bne.n	8003f38 <UART_Start_Receive_IT+0x48>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003f32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f36:	e02d      	b.n	8003f94 <UART_Start_Receive_IT+0xa4>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	22ff      	movs	r2, #255	; 0xff
 8003f3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f40:	e028      	b.n	8003f94 <UART_Start_Receive_IT+0xa4>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10d      	bne.n	8003f66 <UART_Start_Receive_IT+0x76>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d104      	bne.n	8003f5c <UART_Start_Receive_IT+0x6c>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	22ff      	movs	r2, #255	; 0xff
 8003f56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f5a:	e01b      	b.n	8003f94 <UART_Start_Receive_IT+0xa4>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	227f      	movs	r2, #127	; 0x7f
 8003f60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f64:	e016      	b.n	8003f94 <UART_Start_Receive_IT+0xa4>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f6e:	d10d      	bne.n	8003f8c <UART_Start_Receive_IT+0x9c>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d104      	bne.n	8003f82 <UART_Start_Receive_IT+0x92>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	227f      	movs	r2, #127	; 0x7f
 8003f7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f80:	e008      	b.n	8003f94 <UART_Start_Receive_IT+0xa4>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	223f      	movs	r2, #63	; 0x3f
 8003f86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f8a:	e003      	b.n	8003f94 <UART_Start_Receive_IT+0xa4>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2222      	movs	r2, #34	; 0x22
 8003fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3308      	adds	r3, #8
 8003faa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fae:	e853 3f00 	ldrex	r3, [r3]
 8003fb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	657b      	str	r3, [r7, #84]	; 0x54
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3308      	adds	r3, #8
 8003fc2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003fc4:	64ba      	str	r2, [r7, #72]	; 0x48
 8003fc6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003fca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e5      	bne.n	8003fa4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe0:	d107      	bne.n	8003ff2 <UART_Start_Receive_IT+0x102>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d103      	bne.n	8003ff2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4a21      	ldr	r2, [pc, #132]	; (8004074 <UART_Start_Receive_IT+0x184>)
 8003fee:	669a      	str	r2, [r3, #104]	; 0x68
 8003ff0:	e002      	b.n	8003ff8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4a20      	ldr	r2, [pc, #128]	; (8004078 <UART_Start_Receive_IT+0x188>)
 8003ff6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d019      	beq.n	8004034 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004008:	e853 3f00 	ldrex	r3, [r3]
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004014:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800401e:	637b      	str	r3, [r7, #52]	; 0x34
 8004020:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004022:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004024:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004026:	e841 2300 	strex	r3, r2, [r1]
 800402a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800402c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1e6      	bne.n	8004000 <UART_Start_Receive_IT+0x110>
 8004032:	e018      	b.n	8004066 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	e853 3f00 	ldrex	r3, [r3]
 8004040:	613b      	str	r3, [r7, #16]
   return(result);
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f043 0320 	orr.w	r3, r3, #32
 8004048:	653b      	str	r3, [r7, #80]	; 0x50
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004052:	623b      	str	r3, [r7, #32]
 8004054:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004056:	69f9      	ldr	r1, [r7, #28]
 8004058:	6a3a      	ldr	r2, [r7, #32]
 800405a:	e841 2300 	strex	r3, r2, [r1]
 800405e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1e6      	bne.n	8004034 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	375c      	adds	r7, #92	; 0x5c
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	0800436d 	.word	0x0800436d
 8004078:	080041c5 	.word	0x080041c5

0800407c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800407c:	b480      	push	{r7}
 800407e:	b095      	sub	sp, #84	; 0x54
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408c:	e853 3f00 	ldrex	r3, [r3]
 8004090:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004094:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004098:	64fb      	str	r3, [r7, #76]	; 0x4c
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040a2:	643b      	str	r3, [r7, #64]	; 0x40
 80040a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040aa:	e841 2300 	strex	r3, r2, [r1]
 80040ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1e6      	bne.n	8004084 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3308      	adds	r3, #8
 80040bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	e853 3f00 	ldrex	r3, [r3]
 80040c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3308      	adds	r3, #8
 80040d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040de:	e841 2300 	strex	r3, r2, [r1]
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1e5      	bne.n	80040b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d118      	bne.n	8004124 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	e853 3f00 	ldrex	r3, [r3]
 80040fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f023 0310 	bic.w	r3, r3, #16
 8004106:	647b      	str	r3, [r7, #68]	; 0x44
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	461a      	mov	r2, r3
 800410e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004114:	6979      	ldr	r1, [r7, #20]
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	e841 2300 	strex	r3, r2, [r1]
 800411c:	613b      	str	r3, [r7, #16]
   return(result);
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e6      	bne.n	80040f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004138:	bf00      	nop
 800413a:	3754      	adds	r7, #84	; 0x54
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f7ff fbc6 	bl	80038f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004168:	bf00      	nop
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	e853 3f00 	ldrex	r3, [r3]
 8004184:	60bb      	str	r3, [r7, #8]
   return(result);
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800418c:	61fb      	str	r3, [r7, #28]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	61bb      	str	r3, [r7, #24]
 8004198:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419a:	6979      	ldr	r1, [r7, #20]
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	e841 2300 	strex	r3, r2, [r1]
 80041a2:	613b      	str	r3, [r7, #16]
   return(result);
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1e6      	bne.n	8004178 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2220      	movs	r2, #32
 80041ae:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff fb92 	bl	80038e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041bc:	bf00      	nop
 80041be:	3720      	adds	r7, #32
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b09c      	sub	sp, #112	; 0x70
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80041d2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041dc:	2b22      	cmp	r3, #34	; 0x22
 80041de:	f040 80b9 	bne.w	8004354 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80041e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80041ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80041f0:	b2d9      	uxtb	r1, r3
 80041f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fc:	400a      	ands	r2, r1
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	f040 809c 	bne.w	8004364 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004234:	e853 3f00 	ldrex	r3, [r3]
 8004238:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800423a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800423c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004240:	66bb      	str	r3, [r7, #104]	; 0x68
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	461a      	mov	r2, r3
 8004248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800424a:	65bb      	str	r3, [r7, #88]	; 0x58
 800424c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004250:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004252:	e841 2300 	strex	r3, r2, [r1]
 8004256:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1e6      	bne.n	800422c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3308      	adds	r3, #8
 8004264:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800426e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004270:	f023 0301 	bic.w	r3, r3, #1
 8004274:	667b      	str	r3, [r7, #100]	; 0x64
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3308      	adds	r3, #8
 800427c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800427e:	647a      	str	r2, [r7, #68]	; 0x44
 8004280:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004284:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004286:	e841 2300 	strex	r3, r2, [r1]
 800428a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800428c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e5      	bne.n	800425e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2220      	movs	r2, #32
 8004296:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d018      	beq.n	80042e6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	e853 3f00 	ldrex	r3, [r3]
 80042c0:	623b      	str	r3, [r7, #32]
   return(result);
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042c8:	663b      	str	r3, [r7, #96]	; 0x60
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042d2:	633b      	str	r3, [r7, #48]	; 0x30
 80042d4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042da:	e841 2300 	strex	r3, r2, [r1]
 80042de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1e6      	bne.n	80042b4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d12e      	bne.n	800434c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	60fb      	str	r3, [r7, #12]
   return(result);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f023 0310 	bic.w	r3, r3, #16
 8004308:	65fb      	str	r3, [r7, #92]	; 0x5c
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004312:	61fb      	str	r3, [r7, #28]
 8004314:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	69b9      	ldr	r1, [r7, #24]
 8004318:	69fa      	ldr	r2, [r7, #28]
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	617b      	str	r3, [r7, #20]
   return(result);
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e6      	bne.n	80042f4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f003 0310 	and.w	r3, r3, #16
 8004330:	2b10      	cmp	r3, #16
 8004332:	d103      	bne.n	800433c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2210      	movs	r2, #16
 800433a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004342:	4619      	mov	r1, r3
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7ff fadf 	bl	8003908 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800434a:	e00b      	b.n	8004364 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7fc fcf9 	bl	8000d44 <HAL_UART_RxCpltCallback>
}
 8004352:	e007      	b.n	8004364 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699a      	ldr	r2, [r3, #24]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0208 	orr.w	r2, r2, #8
 8004362:	619a      	str	r2, [r3, #24]
}
 8004364:	bf00      	nop
 8004366:	3770      	adds	r7, #112	; 0x70
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b09c      	sub	sp, #112	; 0x70
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800437a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004384:	2b22      	cmp	r3, #34	; 0x22
 8004386:	f040 80b9 	bne.w	80044fc <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004390:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004398:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800439a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800439e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80043a2:	4013      	ands	r3, r2
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ae:	1c9a      	adds	r2, r3, #2
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f040 809c 	bne.w	800450c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80043e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043e8:	667b      	str	r3, [r7, #100]	; 0x64
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043f2:	657b      	str	r3, [r7, #84]	; 0x54
 80043f4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80043f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e6      	bne.n	80043d4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3308      	adds	r3, #8
 800440c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	f023 0301 	bic.w	r3, r3, #1
 800441c:	663b      	str	r3, [r7, #96]	; 0x60
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3308      	adds	r3, #8
 8004424:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004426:	643a      	str	r2, [r7, #64]	; 0x40
 8004428:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800442c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800442e:	e841 2300 	strex	r3, r2, [r1]
 8004432:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1e5      	bne.n	8004406 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2220      	movs	r2, #32
 800443e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d018      	beq.n	800448e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	e853 3f00 	ldrex	r3, [r3]
 8004468:	61fb      	str	r3, [r7, #28]
   return(result);
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004470:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	461a      	mov	r2, r3
 8004478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800447a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800447c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004482:	e841 2300 	strex	r3, r2, [r1]
 8004486:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1e6      	bne.n	800445c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004492:	2b01      	cmp	r3, #1
 8004494:	d12e      	bne.n	80044f4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f023 0310 	bic.w	r3, r3, #16
 80044b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044ba:	61bb      	str	r3, [r7, #24]
 80044bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	6979      	ldr	r1, [r7, #20]
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	e841 2300 	strex	r3, r2, [r1]
 80044c6:	613b      	str	r3, [r7, #16]
   return(result);
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1e6      	bne.n	800449c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	f003 0310 	and.w	r3, r3, #16
 80044d8:	2b10      	cmp	r3, #16
 80044da:	d103      	bne.n	80044e4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2210      	movs	r2, #16
 80044e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044ea:	4619      	mov	r1, r3
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff fa0b 	bl	8003908 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044f2:	e00b      	b.n	800450c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7fc fc25 	bl	8000d44 <HAL_UART_RxCpltCallback>
}
 80044fa:	e007      	b.n	800450c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0208 	orr.w	r2, r2, #8
 800450a:	619a      	str	r2, [r3, #24]
}
 800450c:	bf00      	nop
 800450e:	3770      	adds	r7, #112	; 0x70
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <atof>:
 8004528:	2100      	movs	r1, #0
 800452a:	f001 bd31 	b.w	8005f90 <strtod>
	...

08004530 <__errno>:
 8004530:	4b01      	ldr	r3, [pc, #4]	; (8004538 <__errno+0x8>)
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	2000000c 	.word	0x2000000c

0800453c <__libc_init_array>:
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	4d0d      	ldr	r5, [pc, #52]	; (8004574 <__libc_init_array+0x38>)
 8004540:	4c0d      	ldr	r4, [pc, #52]	; (8004578 <__libc_init_array+0x3c>)
 8004542:	1b64      	subs	r4, r4, r5
 8004544:	10a4      	asrs	r4, r4, #2
 8004546:	2600      	movs	r6, #0
 8004548:	42a6      	cmp	r6, r4
 800454a:	d109      	bne.n	8004560 <__libc_init_array+0x24>
 800454c:	4d0b      	ldr	r5, [pc, #44]	; (800457c <__libc_init_array+0x40>)
 800454e:	4c0c      	ldr	r4, [pc, #48]	; (8004580 <__libc_init_array+0x44>)
 8004550:	f004 fe18 	bl	8009184 <_init>
 8004554:	1b64      	subs	r4, r4, r5
 8004556:	10a4      	asrs	r4, r4, #2
 8004558:	2600      	movs	r6, #0
 800455a:	42a6      	cmp	r6, r4
 800455c:	d105      	bne.n	800456a <__libc_init_array+0x2e>
 800455e:	bd70      	pop	{r4, r5, r6, pc}
 8004560:	f855 3b04 	ldr.w	r3, [r5], #4
 8004564:	4798      	blx	r3
 8004566:	3601      	adds	r6, #1
 8004568:	e7ee      	b.n	8004548 <__libc_init_array+0xc>
 800456a:	f855 3b04 	ldr.w	r3, [r5], #4
 800456e:	4798      	blx	r3
 8004570:	3601      	adds	r6, #1
 8004572:	e7f2      	b.n	800455a <__libc_init_array+0x1e>
 8004574:	08009760 	.word	0x08009760
 8004578:	08009760 	.word	0x08009760
 800457c:	08009760 	.word	0x08009760
 8004580:	08009764 	.word	0x08009764

08004584 <memset>:
 8004584:	4402      	add	r2, r0
 8004586:	4603      	mov	r3, r0
 8004588:	4293      	cmp	r3, r2
 800458a:	d100      	bne.n	800458e <memset+0xa>
 800458c:	4770      	bx	lr
 800458e:	f803 1b01 	strb.w	r1, [r3], #1
 8004592:	e7f9      	b.n	8004588 <memset+0x4>

08004594 <__cvt>:
 8004594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004598:	ec55 4b10 	vmov	r4, r5, d0
 800459c:	2d00      	cmp	r5, #0
 800459e:	460e      	mov	r6, r1
 80045a0:	4619      	mov	r1, r3
 80045a2:	462b      	mov	r3, r5
 80045a4:	bfbb      	ittet	lt
 80045a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80045aa:	461d      	movlt	r5, r3
 80045ac:	2300      	movge	r3, #0
 80045ae:	232d      	movlt	r3, #45	; 0x2d
 80045b0:	700b      	strb	r3, [r1, #0]
 80045b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80045b8:	4691      	mov	r9, r2
 80045ba:	f023 0820 	bic.w	r8, r3, #32
 80045be:	bfbc      	itt	lt
 80045c0:	4622      	movlt	r2, r4
 80045c2:	4614      	movlt	r4, r2
 80045c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045c8:	d005      	beq.n	80045d6 <__cvt+0x42>
 80045ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80045ce:	d100      	bne.n	80045d2 <__cvt+0x3e>
 80045d0:	3601      	adds	r6, #1
 80045d2:	2102      	movs	r1, #2
 80045d4:	e000      	b.n	80045d8 <__cvt+0x44>
 80045d6:	2103      	movs	r1, #3
 80045d8:	ab03      	add	r3, sp, #12
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	ab02      	add	r3, sp, #8
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	ec45 4b10 	vmov	d0, r4, r5
 80045e4:	4653      	mov	r3, sl
 80045e6:	4632      	mov	r2, r6
 80045e8:	f001 fe6a 	bl	80062c0 <_dtoa_r>
 80045ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80045f0:	4607      	mov	r7, r0
 80045f2:	d102      	bne.n	80045fa <__cvt+0x66>
 80045f4:	f019 0f01 	tst.w	r9, #1
 80045f8:	d022      	beq.n	8004640 <__cvt+0xac>
 80045fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045fe:	eb07 0906 	add.w	r9, r7, r6
 8004602:	d110      	bne.n	8004626 <__cvt+0x92>
 8004604:	783b      	ldrb	r3, [r7, #0]
 8004606:	2b30      	cmp	r3, #48	; 0x30
 8004608:	d10a      	bne.n	8004620 <__cvt+0x8c>
 800460a:	2200      	movs	r2, #0
 800460c:	2300      	movs	r3, #0
 800460e:	4620      	mov	r0, r4
 8004610:	4629      	mov	r1, r5
 8004612:	f7fc fa59 	bl	8000ac8 <__aeabi_dcmpeq>
 8004616:	b918      	cbnz	r0, 8004620 <__cvt+0x8c>
 8004618:	f1c6 0601 	rsb	r6, r6, #1
 800461c:	f8ca 6000 	str.w	r6, [sl]
 8004620:	f8da 3000 	ldr.w	r3, [sl]
 8004624:	4499      	add	r9, r3
 8004626:	2200      	movs	r2, #0
 8004628:	2300      	movs	r3, #0
 800462a:	4620      	mov	r0, r4
 800462c:	4629      	mov	r1, r5
 800462e:	f7fc fa4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004632:	b108      	cbz	r0, 8004638 <__cvt+0xa4>
 8004634:	f8cd 900c 	str.w	r9, [sp, #12]
 8004638:	2230      	movs	r2, #48	; 0x30
 800463a:	9b03      	ldr	r3, [sp, #12]
 800463c:	454b      	cmp	r3, r9
 800463e:	d307      	bcc.n	8004650 <__cvt+0xbc>
 8004640:	9b03      	ldr	r3, [sp, #12]
 8004642:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004644:	1bdb      	subs	r3, r3, r7
 8004646:	4638      	mov	r0, r7
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	b004      	add	sp, #16
 800464c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004650:	1c59      	adds	r1, r3, #1
 8004652:	9103      	str	r1, [sp, #12]
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	e7f0      	b.n	800463a <__cvt+0xa6>

08004658 <__exponent>:
 8004658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800465a:	4603      	mov	r3, r0
 800465c:	2900      	cmp	r1, #0
 800465e:	bfb8      	it	lt
 8004660:	4249      	neglt	r1, r1
 8004662:	f803 2b02 	strb.w	r2, [r3], #2
 8004666:	bfb4      	ite	lt
 8004668:	222d      	movlt	r2, #45	; 0x2d
 800466a:	222b      	movge	r2, #43	; 0x2b
 800466c:	2909      	cmp	r1, #9
 800466e:	7042      	strb	r2, [r0, #1]
 8004670:	dd2a      	ble.n	80046c8 <__exponent+0x70>
 8004672:	f10d 0407 	add.w	r4, sp, #7
 8004676:	46a4      	mov	ip, r4
 8004678:	270a      	movs	r7, #10
 800467a:	46a6      	mov	lr, r4
 800467c:	460a      	mov	r2, r1
 800467e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004682:	fb07 1516 	mls	r5, r7, r6, r1
 8004686:	3530      	adds	r5, #48	; 0x30
 8004688:	2a63      	cmp	r2, #99	; 0x63
 800468a:	f104 34ff 	add.w	r4, r4, #4294967295
 800468e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004692:	4631      	mov	r1, r6
 8004694:	dcf1      	bgt.n	800467a <__exponent+0x22>
 8004696:	3130      	adds	r1, #48	; 0x30
 8004698:	f1ae 0502 	sub.w	r5, lr, #2
 800469c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80046a0:	1c44      	adds	r4, r0, #1
 80046a2:	4629      	mov	r1, r5
 80046a4:	4561      	cmp	r1, ip
 80046a6:	d30a      	bcc.n	80046be <__exponent+0x66>
 80046a8:	f10d 0209 	add.w	r2, sp, #9
 80046ac:	eba2 020e 	sub.w	r2, r2, lr
 80046b0:	4565      	cmp	r5, ip
 80046b2:	bf88      	it	hi
 80046b4:	2200      	movhi	r2, #0
 80046b6:	4413      	add	r3, r2
 80046b8:	1a18      	subs	r0, r3, r0
 80046ba:	b003      	add	sp, #12
 80046bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80046c6:	e7ed      	b.n	80046a4 <__exponent+0x4c>
 80046c8:	2330      	movs	r3, #48	; 0x30
 80046ca:	3130      	adds	r1, #48	; 0x30
 80046cc:	7083      	strb	r3, [r0, #2]
 80046ce:	70c1      	strb	r1, [r0, #3]
 80046d0:	1d03      	adds	r3, r0, #4
 80046d2:	e7f1      	b.n	80046b8 <__exponent+0x60>

080046d4 <_printf_float>:
 80046d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d8:	ed2d 8b02 	vpush	{d8}
 80046dc:	b08d      	sub	sp, #52	; 0x34
 80046de:	460c      	mov	r4, r1
 80046e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80046e4:	4616      	mov	r6, r2
 80046e6:	461f      	mov	r7, r3
 80046e8:	4605      	mov	r5, r0
 80046ea:	f003 f84b 	bl	8007784 <_localeconv_r>
 80046ee:	f8d0 a000 	ldr.w	sl, [r0]
 80046f2:	4650      	mov	r0, sl
 80046f4:	f7fb fd6c 	bl	80001d0 <strlen>
 80046f8:	2300      	movs	r3, #0
 80046fa:	930a      	str	r3, [sp, #40]	; 0x28
 80046fc:	6823      	ldr	r3, [r4, #0]
 80046fe:	9305      	str	r3, [sp, #20]
 8004700:	f8d8 3000 	ldr.w	r3, [r8]
 8004704:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004708:	3307      	adds	r3, #7
 800470a:	f023 0307 	bic.w	r3, r3, #7
 800470e:	f103 0208 	add.w	r2, r3, #8
 8004712:	f8c8 2000 	str.w	r2, [r8]
 8004716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800471e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004722:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004726:	9307      	str	r3, [sp, #28]
 8004728:	f8cd 8018 	str.w	r8, [sp, #24]
 800472c:	ee08 0a10 	vmov	s16, r0
 8004730:	4b9f      	ldr	r3, [pc, #636]	; (80049b0 <_printf_float+0x2dc>)
 8004732:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004736:	f04f 32ff 	mov.w	r2, #4294967295
 800473a:	f7fc f9f7 	bl	8000b2c <__aeabi_dcmpun>
 800473e:	bb88      	cbnz	r0, 80047a4 <_printf_float+0xd0>
 8004740:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004744:	4b9a      	ldr	r3, [pc, #616]	; (80049b0 <_printf_float+0x2dc>)
 8004746:	f04f 32ff 	mov.w	r2, #4294967295
 800474a:	f7fc f9d1 	bl	8000af0 <__aeabi_dcmple>
 800474e:	bb48      	cbnz	r0, 80047a4 <_printf_float+0xd0>
 8004750:	2200      	movs	r2, #0
 8004752:	2300      	movs	r3, #0
 8004754:	4640      	mov	r0, r8
 8004756:	4649      	mov	r1, r9
 8004758:	f7fc f9c0 	bl	8000adc <__aeabi_dcmplt>
 800475c:	b110      	cbz	r0, 8004764 <_printf_float+0x90>
 800475e:	232d      	movs	r3, #45	; 0x2d
 8004760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004764:	4b93      	ldr	r3, [pc, #588]	; (80049b4 <_printf_float+0x2e0>)
 8004766:	4894      	ldr	r0, [pc, #592]	; (80049b8 <_printf_float+0x2e4>)
 8004768:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800476c:	bf94      	ite	ls
 800476e:	4698      	movls	r8, r3
 8004770:	4680      	movhi	r8, r0
 8004772:	2303      	movs	r3, #3
 8004774:	6123      	str	r3, [r4, #16]
 8004776:	9b05      	ldr	r3, [sp, #20]
 8004778:	f023 0204 	bic.w	r2, r3, #4
 800477c:	6022      	str	r2, [r4, #0]
 800477e:	f04f 0900 	mov.w	r9, #0
 8004782:	9700      	str	r7, [sp, #0]
 8004784:	4633      	mov	r3, r6
 8004786:	aa0b      	add	r2, sp, #44	; 0x2c
 8004788:	4621      	mov	r1, r4
 800478a:	4628      	mov	r0, r5
 800478c:	f000 f9d8 	bl	8004b40 <_printf_common>
 8004790:	3001      	adds	r0, #1
 8004792:	f040 8090 	bne.w	80048b6 <_printf_float+0x1e2>
 8004796:	f04f 30ff 	mov.w	r0, #4294967295
 800479a:	b00d      	add	sp, #52	; 0x34
 800479c:	ecbd 8b02 	vpop	{d8}
 80047a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a4:	4642      	mov	r2, r8
 80047a6:	464b      	mov	r3, r9
 80047a8:	4640      	mov	r0, r8
 80047aa:	4649      	mov	r1, r9
 80047ac:	f7fc f9be 	bl	8000b2c <__aeabi_dcmpun>
 80047b0:	b140      	cbz	r0, 80047c4 <_printf_float+0xf0>
 80047b2:	464b      	mov	r3, r9
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	bfbc      	itt	lt
 80047b8:	232d      	movlt	r3, #45	; 0x2d
 80047ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80047be:	487f      	ldr	r0, [pc, #508]	; (80049bc <_printf_float+0x2e8>)
 80047c0:	4b7f      	ldr	r3, [pc, #508]	; (80049c0 <_printf_float+0x2ec>)
 80047c2:	e7d1      	b.n	8004768 <_printf_float+0x94>
 80047c4:	6863      	ldr	r3, [r4, #4]
 80047c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80047ca:	9206      	str	r2, [sp, #24]
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	d13f      	bne.n	8004850 <_printf_float+0x17c>
 80047d0:	2306      	movs	r3, #6
 80047d2:	6063      	str	r3, [r4, #4]
 80047d4:	9b05      	ldr	r3, [sp, #20]
 80047d6:	6861      	ldr	r1, [r4, #4]
 80047d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80047dc:	2300      	movs	r3, #0
 80047de:	9303      	str	r3, [sp, #12]
 80047e0:	ab0a      	add	r3, sp, #40	; 0x28
 80047e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80047e6:	ab09      	add	r3, sp, #36	; 0x24
 80047e8:	ec49 8b10 	vmov	d0, r8, r9
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	6022      	str	r2, [r4, #0]
 80047f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80047f4:	4628      	mov	r0, r5
 80047f6:	f7ff fecd 	bl	8004594 <__cvt>
 80047fa:	9b06      	ldr	r3, [sp, #24]
 80047fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047fe:	2b47      	cmp	r3, #71	; 0x47
 8004800:	4680      	mov	r8, r0
 8004802:	d108      	bne.n	8004816 <_printf_float+0x142>
 8004804:	1cc8      	adds	r0, r1, #3
 8004806:	db02      	blt.n	800480e <_printf_float+0x13a>
 8004808:	6863      	ldr	r3, [r4, #4]
 800480a:	4299      	cmp	r1, r3
 800480c:	dd41      	ble.n	8004892 <_printf_float+0x1be>
 800480e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004812:	fa5f fb8b 	uxtb.w	fp, fp
 8004816:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800481a:	d820      	bhi.n	800485e <_printf_float+0x18a>
 800481c:	3901      	subs	r1, #1
 800481e:	465a      	mov	r2, fp
 8004820:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004824:	9109      	str	r1, [sp, #36]	; 0x24
 8004826:	f7ff ff17 	bl	8004658 <__exponent>
 800482a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800482c:	1813      	adds	r3, r2, r0
 800482e:	2a01      	cmp	r2, #1
 8004830:	4681      	mov	r9, r0
 8004832:	6123      	str	r3, [r4, #16]
 8004834:	dc02      	bgt.n	800483c <_printf_float+0x168>
 8004836:	6822      	ldr	r2, [r4, #0]
 8004838:	07d2      	lsls	r2, r2, #31
 800483a:	d501      	bpl.n	8004840 <_printf_float+0x16c>
 800483c:	3301      	adds	r3, #1
 800483e:	6123      	str	r3, [r4, #16]
 8004840:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004844:	2b00      	cmp	r3, #0
 8004846:	d09c      	beq.n	8004782 <_printf_float+0xae>
 8004848:	232d      	movs	r3, #45	; 0x2d
 800484a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800484e:	e798      	b.n	8004782 <_printf_float+0xae>
 8004850:	9a06      	ldr	r2, [sp, #24]
 8004852:	2a47      	cmp	r2, #71	; 0x47
 8004854:	d1be      	bne.n	80047d4 <_printf_float+0x100>
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1bc      	bne.n	80047d4 <_printf_float+0x100>
 800485a:	2301      	movs	r3, #1
 800485c:	e7b9      	b.n	80047d2 <_printf_float+0xfe>
 800485e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004862:	d118      	bne.n	8004896 <_printf_float+0x1c2>
 8004864:	2900      	cmp	r1, #0
 8004866:	6863      	ldr	r3, [r4, #4]
 8004868:	dd0b      	ble.n	8004882 <_printf_float+0x1ae>
 800486a:	6121      	str	r1, [r4, #16]
 800486c:	b913      	cbnz	r3, 8004874 <_printf_float+0x1a0>
 800486e:	6822      	ldr	r2, [r4, #0]
 8004870:	07d0      	lsls	r0, r2, #31
 8004872:	d502      	bpl.n	800487a <_printf_float+0x1a6>
 8004874:	3301      	adds	r3, #1
 8004876:	440b      	add	r3, r1
 8004878:	6123      	str	r3, [r4, #16]
 800487a:	65a1      	str	r1, [r4, #88]	; 0x58
 800487c:	f04f 0900 	mov.w	r9, #0
 8004880:	e7de      	b.n	8004840 <_printf_float+0x16c>
 8004882:	b913      	cbnz	r3, 800488a <_printf_float+0x1b6>
 8004884:	6822      	ldr	r2, [r4, #0]
 8004886:	07d2      	lsls	r2, r2, #31
 8004888:	d501      	bpl.n	800488e <_printf_float+0x1ba>
 800488a:	3302      	adds	r3, #2
 800488c:	e7f4      	b.n	8004878 <_printf_float+0x1a4>
 800488e:	2301      	movs	r3, #1
 8004890:	e7f2      	b.n	8004878 <_printf_float+0x1a4>
 8004892:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004898:	4299      	cmp	r1, r3
 800489a:	db05      	blt.n	80048a8 <_printf_float+0x1d4>
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	6121      	str	r1, [r4, #16]
 80048a0:	07d8      	lsls	r0, r3, #31
 80048a2:	d5ea      	bpl.n	800487a <_printf_float+0x1a6>
 80048a4:	1c4b      	adds	r3, r1, #1
 80048a6:	e7e7      	b.n	8004878 <_printf_float+0x1a4>
 80048a8:	2900      	cmp	r1, #0
 80048aa:	bfd4      	ite	le
 80048ac:	f1c1 0202 	rsble	r2, r1, #2
 80048b0:	2201      	movgt	r2, #1
 80048b2:	4413      	add	r3, r2
 80048b4:	e7e0      	b.n	8004878 <_printf_float+0x1a4>
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	055a      	lsls	r2, r3, #21
 80048ba:	d407      	bmi.n	80048cc <_printf_float+0x1f8>
 80048bc:	6923      	ldr	r3, [r4, #16]
 80048be:	4642      	mov	r2, r8
 80048c0:	4631      	mov	r1, r6
 80048c2:	4628      	mov	r0, r5
 80048c4:	47b8      	blx	r7
 80048c6:	3001      	adds	r0, #1
 80048c8:	d12c      	bne.n	8004924 <_printf_float+0x250>
 80048ca:	e764      	b.n	8004796 <_printf_float+0xc2>
 80048cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80048d0:	f240 80e0 	bls.w	8004a94 <_printf_float+0x3c0>
 80048d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048d8:	2200      	movs	r2, #0
 80048da:	2300      	movs	r3, #0
 80048dc:	f7fc f8f4 	bl	8000ac8 <__aeabi_dcmpeq>
 80048e0:	2800      	cmp	r0, #0
 80048e2:	d034      	beq.n	800494e <_printf_float+0x27a>
 80048e4:	4a37      	ldr	r2, [pc, #220]	; (80049c4 <_printf_float+0x2f0>)
 80048e6:	2301      	movs	r3, #1
 80048e8:	4631      	mov	r1, r6
 80048ea:	4628      	mov	r0, r5
 80048ec:	47b8      	blx	r7
 80048ee:	3001      	adds	r0, #1
 80048f0:	f43f af51 	beq.w	8004796 <_printf_float+0xc2>
 80048f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048f8:	429a      	cmp	r2, r3
 80048fa:	db02      	blt.n	8004902 <_printf_float+0x22e>
 80048fc:	6823      	ldr	r3, [r4, #0]
 80048fe:	07d8      	lsls	r0, r3, #31
 8004900:	d510      	bpl.n	8004924 <_printf_float+0x250>
 8004902:	ee18 3a10 	vmov	r3, s16
 8004906:	4652      	mov	r2, sl
 8004908:	4631      	mov	r1, r6
 800490a:	4628      	mov	r0, r5
 800490c:	47b8      	blx	r7
 800490e:	3001      	adds	r0, #1
 8004910:	f43f af41 	beq.w	8004796 <_printf_float+0xc2>
 8004914:	f04f 0800 	mov.w	r8, #0
 8004918:	f104 091a 	add.w	r9, r4, #26
 800491c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800491e:	3b01      	subs	r3, #1
 8004920:	4543      	cmp	r3, r8
 8004922:	dc09      	bgt.n	8004938 <_printf_float+0x264>
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	079b      	lsls	r3, r3, #30
 8004928:	f100 8105 	bmi.w	8004b36 <_printf_float+0x462>
 800492c:	68e0      	ldr	r0, [r4, #12]
 800492e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004930:	4298      	cmp	r0, r3
 8004932:	bfb8      	it	lt
 8004934:	4618      	movlt	r0, r3
 8004936:	e730      	b.n	800479a <_printf_float+0xc6>
 8004938:	2301      	movs	r3, #1
 800493a:	464a      	mov	r2, r9
 800493c:	4631      	mov	r1, r6
 800493e:	4628      	mov	r0, r5
 8004940:	47b8      	blx	r7
 8004942:	3001      	adds	r0, #1
 8004944:	f43f af27 	beq.w	8004796 <_printf_float+0xc2>
 8004948:	f108 0801 	add.w	r8, r8, #1
 800494c:	e7e6      	b.n	800491c <_printf_float+0x248>
 800494e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004950:	2b00      	cmp	r3, #0
 8004952:	dc39      	bgt.n	80049c8 <_printf_float+0x2f4>
 8004954:	4a1b      	ldr	r2, [pc, #108]	; (80049c4 <_printf_float+0x2f0>)
 8004956:	2301      	movs	r3, #1
 8004958:	4631      	mov	r1, r6
 800495a:	4628      	mov	r0, r5
 800495c:	47b8      	blx	r7
 800495e:	3001      	adds	r0, #1
 8004960:	f43f af19 	beq.w	8004796 <_printf_float+0xc2>
 8004964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004968:	4313      	orrs	r3, r2
 800496a:	d102      	bne.n	8004972 <_printf_float+0x29e>
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	07d9      	lsls	r1, r3, #31
 8004970:	d5d8      	bpl.n	8004924 <_printf_float+0x250>
 8004972:	ee18 3a10 	vmov	r3, s16
 8004976:	4652      	mov	r2, sl
 8004978:	4631      	mov	r1, r6
 800497a:	4628      	mov	r0, r5
 800497c:	47b8      	blx	r7
 800497e:	3001      	adds	r0, #1
 8004980:	f43f af09 	beq.w	8004796 <_printf_float+0xc2>
 8004984:	f04f 0900 	mov.w	r9, #0
 8004988:	f104 0a1a 	add.w	sl, r4, #26
 800498c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800498e:	425b      	negs	r3, r3
 8004990:	454b      	cmp	r3, r9
 8004992:	dc01      	bgt.n	8004998 <_printf_float+0x2c4>
 8004994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004996:	e792      	b.n	80048be <_printf_float+0x1ea>
 8004998:	2301      	movs	r3, #1
 800499a:	4652      	mov	r2, sl
 800499c:	4631      	mov	r1, r6
 800499e:	4628      	mov	r0, r5
 80049a0:	47b8      	blx	r7
 80049a2:	3001      	adds	r0, #1
 80049a4:	f43f aef7 	beq.w	8004796 <_printf_float+0xc2>
 80049a8:	f109 0901 	add.w	r9, r9, #1
 80049ac:	e7ee      	b.n	800498c <_printf_float+0x2b8>
 80049ae:	bf00      	nop
 80049b0:	7fefffff 	.word	0x7fefffff
 80049b4:	08009238 	.word	0x08009238
 80049b8:	0800923c 	.word	0x0800923c
 80049bc:	08009244 	.word	0x08009244
 80049c0:	08009240 	.word	0x08009240
 80049c4:	08009248 	.word	0x08009248
 80049c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049cc:	429a      	cmp	r2, r3
 80049ce:	bfa8      	it	ge
 80049d0:	461a      	movge	r2, r3
 80049d2:	2a00      	cmp	r2, #0
 80049d4:	4691      	mov	r9, r2
 80049d6:	dc37      	bgt.n	8004a48 <_printf_float+0x374>
 80049d8:	f04f 0b00 	mov.w	fp, #0
 80049dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049e0:	f104 021a 	add.w	r2, r4, #26
 80049e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049e6:	9305      	str	r3, [sp, #20]
 80049e8:	eba3 0309 	sub.w	r3, r3, r9
 80049ec:	455b      	cmp	r3, fp
 80049ee:	dc33      	bgt.n	8004a58 <_printf_float+0x384>
 80049f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049f4:	429a      	cmp	r2, r3
 80049f6:	db3b      	blt.n	8004a70 <_printf_float+0x39c>
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	07da      	lsls	r2, r3, #31
 80049fc:	d438      	bmi.n	8004a70 <_printf_float+0x39c>
 80049fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a00:	9b05      	ldr	r3, [sp, #20]
 8004a02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	eba2 0901 	sub.w	r9, r2, r1
 8004a0a:	4599      	cmp	r9, r3
 8004a0c:	bfa8      	it	ge
 8004a0e:	4699      	movge	r9, r3
 8004a10:	f1b9 0f00 	cmp.w	r9, #0
 8004a14:	dc35      	bgt.n	8004a82 <_printf_float+0x3ae>
 8004a16:	f04f 0800 	mov.w	r8, #0
 8004a1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a1e:	f104 0a1a 	add.w	sl, r4, #26
 8004a22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a26:	1a9b      	subs	r3, r3, r2
 8004a28:	eba3 0309 	sub.w	r3, r3, r9
 8004a2c:	4543      	cmp	r3, r8
 8004a2e:	f77f af79 	ble.w	8004924 <_printf_float+0x250>
 8004a32:	2301      	movs	r3, #1
 8004a34:	4652      	mov	r2, sl
 8004a36:	4631      	mov	r1, r6
 8004a38:	4628      	mov	r0, r5
 8004a3a:	47b8      	blx	r7
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	f43f aeaa 	beq.w	8004796 <_printf_float+0xc2>
 8004a42:	f108 0801 	add.w	r8, r8, #1
 8004a46:	e7ec      	b.n	8004a22 <_printf_float+0x34e>
 8004a48:	4613      	mov	r3, r2
 8004a4a:	4631      	mov	r1, r6
 8004a4c:	4642      	mov	r2, r8
 8004a4e:	4628      	mov	r0, r5
 8004a50:	47b8      	blx	r7
 8004a52:	3001      	adds	r0, #1
 8004a54:	d1c0      	bne.n	80049d8 <_printf_float+0x304>
 8004a56:	e69e      	b.n	8004796 <_printf_float+0xc2>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	4631      	mov	r1, r6
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	9205      	str	r2, [sp, #20]
 8004a60:	47b8      	blx	r7
 8004a62:	3001      	adds	r0, #1
 8004a64:	f43f ae97 	beq.w	8004796 <_printf_float+0xc2>
 8004a68:	9a05      	ldr	r2, [sp, #20]
 8004a6a:	f10b 0b01 	add.w	fp, fp, #1
 8004a6e:	e7b9      	b.n	80049e4 <_printf_float+0x310>
 8004a70:	ee18 3a10 	vmov	r3, s16
 8004a74:	4652      	mov	r2, sl
 8004a76:	4631      	mov	r1, r6
 8004a78:	4628      	mov	r0, r5
 8004a7a:	47b8      	blx	r7
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	d1be      	bne.n	80049fe <_printf_float+0x32a>
 8004a80:	e689      	b.n	8004796 <_printf_float+0xc2>
 8004a82:	9a05      	ldr	r2, [sp, #20]
 8004a84:	464b      	mov	r3, r9
 8004a86:	4442      	add	r2, r8
 8004a88:	4631      	mov	r1, r6
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	47b8      	blx	r7
 8004a8e:	3001      	adds	r0, #1
 8004a90:	d1c1      	bne.n	8004a16 <_printf_float+0x342>
 8004a92:	e680      	b.n	8004796 <_printf_float+0xc2>
 8004a94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a96:	2a01      	cmp	r2, #1
 8004a98:	dc01      	bgt.n	8004a9e <_printf_float+0x3ca>
 8004a9a:	07db      	lsls	r3, r3, #31
 8004a9c:	d538      	bpl.n	8004b10 <_printf_float+0x43c>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	4642      	mov	r2, r8
 8004aa2:	4631      	mov	r1, r6
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	47b8      	blx	r7
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	f43f ae74 	beq.w	8004796 <_printf_float+0xc2>
 8004aae:	ee18 3a10 	vmov	r3, s16
 8004ab2:	4652      	mov	r2, sl
 8004ab4:	4631      	mov	r1, r6
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	47b8      	blx	r7
 8004aba:	3001      	adds	r0, #1
 8004abc:	f43f ae6b 	beq.w	8004796 <_printf_float+0xc2>
 8004ac0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f7fb fffe 	bl	8000ac8 <__aeabi_dcmpeq>
 8004acc:	b9d8      	cbnz	r0, 8004b06 <_printf_float+0x432>
 8004ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ad0:	f108 0201 	add.w	r2, r8, #1
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	4631      	mov	r1, r6
 8004ad8:	4628      	mov	r0, r5
 8004ada:	47b8      	blx	r7
 8004adc:	3001      	adds	r0, #1
 8004ade:	d10e      	bne.n	8004afe <_printf_float+0x42a>
 8004ae0:	e659      	b.n	8004796 <_printf_float+0xc2>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	4652      	mov	r2, sl
 8004ae6:	4631      	mov	r1, r6
 8004ae8:	4628      	mov	r0, r5
 8004aea:	47b8      	blx	r7
 8004aec:	3001      	adds	r0, #1
 8004aee:	f43f ae52 	beq.w	8004796 <_printf_float+0xc2>
 8004af2:	f108 0801 	add.w	r8, r8, #1
 8004af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004af8:	3b01      	subs	r3, #1
 8004afa:	4543      	cmp	r3, r8
 8004afc:	dcf1      	bgt.n	8004ae2 <_printf_float+0x40e>
 8004afe:	464b      	mov	r3, r9
 8004b00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b04:	e6dc      	b.n	80048c0 <_printf_float+0x1ec>
 8004b06:	f04f 0800 	mov.w	r8, #0
 8004b0a:	f104 0a1a 	add.w	sl, r4, #26
 8004b0e:	e7f2      	b.n	8004af6 <_printf_float+0x422>
 8004b10:	2301      	movs	r3, #1
 8004b12:	4642      	mov	r2, r8
 8004b14:	e7df      	b.n	8004ad6 <_printf_float+0x402>
 8004b16:	2301      	movs	r3, #1
 8004b18:	464a      	mov	r2, r9
 8004b1a:	4631      	mov	r1, r6
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	47b8      	blx	r7
 8004b20:	3001      	adds	r0, #1
 8004b22:	f43f ae38 	beq.w	8004796 <_printf_float+0xc2>
 8004b26:	f108 0801 	add.w	r8, r8, #1
 8004b2a:	68e3      	ldr	r3, [r4, #12]
 8004b2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b2e:	1a5b      	subs	r3, r3, r1
 8004b30:	4543      	cmp	r3, r8
 8004b32:	dcf0      	bgt.n	8004b16 <_printf_float+0x442>
 8004b34:	e6fa      	b.n	800492c <_printf_float+0x258>
 8004b36:	f04f 0800 	mov.w	r8, #0
 8004b3a:	f104 0919 	add.w	r9, r4, #25
 8004b3e:	e7f4      	b.n	8004b2a <_printf_float+0x456>

08004b40 <_printf_common>:
 8004b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b44:	4616      	mov	r6, r2
 8004b46:	4699      	mov	r9, r3
 8004b48:	688a      	ldr	r2, [r1, #8]
 8004b4a:	690b      	ldr	r3, [r1, #16]
 8004b4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b50:	4293      	cmp	r3, r2
 8004b52:	bfb8      	it	lt
 8004b54:	4613      	movlt	r3, r2
 8004b56:	6033      	str	r3, [r6, #0]
 8004b58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b5c:	4607      	mov	r7, r0
 8004b5e:	460c      	mov	r4, r1
 8004b60:	b10a      	cbz	r2, 8004b66 <_printf_common+0x26>
 8004b62:	3301      	adds	r3, #1
 8004b64:	6033      	str	r3, [r6, #0]
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	0699      	lsls	r1, r3, #26
 8004b6a:	bf42      	ittt	mi
 8004b6c:	6833      	ldrmi	r3, [r6, #0]
 8004b6e:	3302      	addmi	r3, #2
 8004b70:	6033      	strmi	r3, [r6, #0]
 8004b72:	6825      	ldr	r5, [r4, #0]
 8004b74:	f015 0506 	ands.w	r5, r5, #6
 8004b78:	d106      	bne.n	8004b88 <_printf_common+0x48>
 8004b7a:	f104 0a19 	add.w	sl, r4, #25
 8004b7e:	68e3      	ldr	r3, [r4, #12]
 8004b80:	6832      	ldr	r2, [r6, #0]
 8004b82:	1a9b      	subs	r3, r3, r2
 8004b84:	42ab      	cmp	r3, r5
 8004b86:	dc26      	bgt.n	8004bd6 <_printf_common+0x96>
 8004b88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b8c:	1e13      	subs	r3, r2, #0
 8004b8e:	6822      	ldr	r2, [r4, #0]
 8004b90:	bf18      	it	ne
 8004b92:	2301      	movne	r3, #1
 8004b94:	0692      	lsls	r2, r2, #26
 8004b96:	d42b      	bmi.n	8004bf0 <_printf_common+0xb0>
 8004b98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b9c:	4649      	mov	r1, r9
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	47c0      	blx	r8
 8004ba2:	3001      	adds	r0, #1
 8004ba4:	d01e      	beq.n	8004be4 <_printf_common+0xa4>
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	68e5      	ldr	r5, [r4, #12]
 8004baa:	6832      	ldr	r2, [r6, #0]
 8004bac:	f003 0306 	and.w	r3, r3, #6
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	bf08      	it	eq
 8004bb4:	1aad      	subeq	r5, r5, r2
 8004bb6:	68a3      	ldr	r3, [r4, #8]
 8004bb8:	6922      	ldr	r2, [r4, #16]
 8004bba:	bf0c      	ite	eq
 8004bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bc0:	2500      	movne	r5, #0
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	bfc4      	itt	gt
 8004bc6:	1a9b      	subgt	r3, r3, r2
 8004bc8:	18ed      	addgt	r5, r5, r3
 8004bca:	2600      	movs	r6, #0
 8004bcc:	341a      	adds	r4, #26
 8004bce:	42b5      	cmp	r5, r6
 8004bd0:	d11a      	bne.n	8004c08 <_printf_common+0xc8>
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	e008      	b.n	8004be8 <_printf_common+0xa8>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	4652      	mov	r2, sl
 8004bda:	4649      	mov	r1, r9
 8004bdc:	4638      	mov	r0, r7
 8004bde:	47c0      	blx	r8
 8004be0:	3001      	adds	r0, #1
 8004be2:	d103      	bne.n	8004bec <_printf_common+0xac>
 8004be4:	f04f 30ff 	mov.w	r0, #4294967295
 8004be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bec:	3501      	adds	r5, #1
 8004bee:	e7c6      	b.n	8004b7e <_printf_common+0x3e>
 8004bf0:	18e1      	adds	r1, r4, r3
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	2030      	movs	r0, #48	; 0x30
 8004bf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bfa:	4422      	add	r2, r4
 8004bfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c04:	3302      	adds	r3, #2
 8004c06:	e7c7      	b.n	8004b98 <_printf_common+0x58>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	4622      	mov	r2, r4
 8004c0c:	4649      	mov	r1, r9
 8004c0e:	4638      	mov	r0, r7
 8004c10:	47c0      	blx	r8
 8004c12:	3001      	adds	r0, #1
 8004c14:	d0e6      	beq.n	8004be4 <_printf_common+0xa4>
 8004c16:	3601      	adds	r6, #1
 8004c18:	e7d9      	b.n	8004bce <_printf_common+0x8e>
	...

08004c1c <_printf_i>:
 8004c1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c20:	460c      	mov	r4, r1
 8004c22:	4691      	mov	r9, r2
 8004c24:	7e27      	ldrb	r7, [r4, #24]
 8004c26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c28:	2f78      	cmp	r7, #120	; 0x78
 8004c2a:	4680      	mov	r8, r0
 8004c2c:	469a      	mov	sl, r3
 8004c2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c32:	d807      	bhi.n	8004c44 <_printf_i+0x28>
 8004c34:	2f62      	cmp	r7, #98	; 0x62
 8004c36:	d80a      	bhi.n	8004c4e <_printf_i+0x32>
 8004c38:	2f00      	cmp	r7, #0
 8004c3a:	f000 80d8 	beq.w	8004dee <_printf_i+0x1d2>
 8004c3e:	2f58      	cmp	r7, #88	; 0x58
 8004c40:	f000 80a3 	beq.w	8004d8a <_printf_i+0x16e>
 8004c44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c4c:	e03a      	b.n	8004cc4 <_printf_i+0xa8>
 8004c4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c52:	2b15      	cmp	r3, #21
 8004c54:	d8f6      	bhi.n	8004c44 <_printf_i+0x28>
 8004c56:	a001      	add	r0, pc, #4	; (adr r0, 8004c5c <_printf_i+0x40>)
 8004c58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c5c:	08004cb5 	.word	0x08004cb5
 8004c60:	08004cc9 	.word	0x08004cc9
 8004c64:	08004c45 	.word	0x08004c45
 8004c68:	08004c45 	.word	0x08004c45
 8004c6c:	08004c45 	.word	0x08004c45
 8004c70:	08004c45 	.word	0x08004c45
 8004c74:	08004cc9 	.word	0x08004cc9
 8004c78:	08004c45 	.word	0x08004c45
 8004c7c:	08004c45 	.word	0x08004c45
 8004c80:	08004c45 	.word	0x08004c45
 8004c84:	08004c45 	.word	0x08004c45
 8004c88:	08004dd5 	.word	0x08004dd5
 8004c8c:	08004cf9 	.word	0x08004cf9
 8004c90:	08004db7 	.word	0x08004db7
 8004c94:	08004c45 	.word	0x08004c45
 8004c98:	08004c45 	.word	0x08004c45
 8004c9c:	08004df7 	.word	0x08004df7
 8004ca0:	08004c45 	.word	0x08004c45
 8004ca4:	08004cf9 	.word	0x08004cf9
 8004ca8:	08004c45 	.word	0x08004c45
 8004cac:	08004c45 	.word	0x08004c45
 8004cb0:	08004dbf 	.word	0x08004dbf
 8004cb4:	680b      	ldr	r3, [r1, #0]
 8004cb6:	1d1a      	adds	r2, r3, #4
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	600a      	str	r2, [r1, #0]
 8004cbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0a3      	b.n	8004e10 <_printf_i+0x1f4>
 8004cc8:	6825      	ldr	r5, [r4, #0]
 8004cca:	6808      	ldr	r0, [r1, #0]
 8004ccc:	062e      	lsls	r6, r5, #24
 8004cce:	f100 0304 	add.w	r3, r0, #4
 8004cd2:	d50a      	bpl.n	8004cea <_printf_i+0xce>
 8004cd4:	6805      	ldr	r5, [r0, #0]
 8004cd6:	600b      	str	r3, [r1, #0]
 8004cd8:	2d00      	cmp	r5, #0
 8004cda:	da03      	bge.n	8004ce4 <_printf_i+0xc8>
 8004cdc:	232d      	movs	r3, #45	; 0x2d
 8004cde:	426d      	negs	r5, r5
 8004ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ce4:	485e      	ldr	r0, [pc, #376]	; (8004e60 <_printf_i+0x244>)
 8004ce6:	230a      	movs	r3, #10
 8004ce8:	e019      	b.n	8004d1e <_printf_i+0x102>
 8004cea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004cee:	6805      	ldr	r5, [r0, #0]
 8004cf0:	600b      	str	r3, [r1, #0]
 8004cf2:	bf18      	it	ne
 8004cf4:	b22d      	sxthne	r5, r5
 8004cf6:	e7ef      	b.n	8004cd8 <_printf_i+0xbc>
 8004cf8:	680b      	ldr	r3, [r1, #0]
 8004cfa:	6825      	ldr	r5, [r4, #0]
 8004cfc:	1d18      	adds	r0, r3, #4
 8004cfe:	6008      	str	r0, [r1, #0]
 8004d00:	0628      	lsls	r0, r5, #24
 8004d02:	d501      	bpl.n	8004d08 <_printf_i+0xec>
 8004d04:	681d      	ldr	r5, [r3, #0]
 8004d06:	e002      	b.n	8004d0e <_printf_i+0xf2>
 8004d08:	0669      	lsls	r1, r5, #25
 8004d0a:	d5fb      	bpl.n	8004d04 <_printf_i+0xe8>
 8004d0c:	881d      	ldrh	r5, [r3, #0]
 8004d0e:	4854      	ldr	r0, [pc, #336]	; (8004e60 <_printf_i+0x244>)
 8004d10:	2f6f      	cmp	r7, #111	; 0x6f
 8004d12:	bf0c      	ite	eq
 8004d14:	2308      	moveq	r3, #8
 8004d16:	230a      	movne	r3, #10
 8004d18:	2100      	movs	r1, #0
 8004d1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d1e:	6866      	ldr	r6, [r4, #4]
 8004d20:	60a6      	str	r6, [r4, #8]
 8004d22:	2e00      	cmp	r6, #0
 8004d24:	bfa2      	ittt	ge
 8004d26:	6821      	ldrge	r1, [r4, #0]
 8004d28:	f021 0104 	bicge.w	r1, r1, #4
 8004d2c:	6021      	strge	r1, [r4, #0]
 8004d2e:	b90d      	cbnz	r5, 8004d34 <_printf_i+0x118>
 8004d30:	2e00      	cmp	r6, #0
 8004d32:	d04d      	beq.n	8004dd0 <_printf_i+0x1b4>
 8004d34:	4616      	mov	r6, r2
 8004d36:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d3a:	fb03 5711 	mls	r7, r3, r1, r5
 8004d3e:	5dc7      	ldrb	r7, [r0, r7]
 8004d40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d44:	462f      	mov	r7, r5
 8004d46:	42bb      	cmp	r3, r7
 8004d48:	460d      	mov	r5, r1
 8004d4a:	d9f4      	bls.n	8004d36 <_printf_i+0x11a>
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d10b      	bne.n	8004d68 <_printf_i+0x14c>
 8004d50:	6823      	ldr	r3, [r4, #0]
 8004d52:	07df      	lsls	r7, r3, #31
 8004d54:	d508      	bpl.n	8004d68 <_printf_i+0x14c>
 8004d56:	6923      	ldr	r3, [r4, #16]
 8004d58:	6861      	ldr	r1, [r4, #4]
 8004d5a:	4299      	cmp	r1, r3
 8004d5c:	bfde      	ittt	le
 8004d5e:	2330      	movle	r3, #48	; 0x30
 8004d60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d68:	1b92      	subs	r2, r2, r6
 8004d6a:	6122      	str	r2, [r4, #16]
 8004d6c:	f8cd a000 	str.w	sl, [sp]
 8004d70:	464b      	mov	r3, r9
 8004d72:	aa03      	add	r2, sp, #12
 8004d74:	4621      	mov	r1, r4
 8004d76:	4640      	mov	r0, r8
 8004d78:	f7ff fee2 	bl	8004b40 <_printf_common>
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	d14c      	bne.n	8004e1a <_printf_i+0x1fe>
 8004d80:	f04f 30ff 	mov.w	r0, #4294967295
 8004d84:	b004      	add	sp, #16
 8004d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d8a:	4835      	ldr	r0, [pc, #212]	; (8004e60 <_printf_i+0x244>)
 8004d8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	680e      	ldr	r6, [r1, #0]
 8004d94:	061f      	lsls	r7, r3, #24
 8004d96:	f856 5b04 	ldr.w	r5, [r6], #4
 8004d9a:	600e      	str	r6, [r1, #0]
 8004d9c:	d514      	bpl.n	8004dc8 <_printf_i+0x1ac>
 8004d9e:	07d9      	lsls	r1, r3, #31
 8004da0:	bf44      	itt	mi
 8004da2:	f043 0320 	orrmi.w	r3, r3, #32
 8004da6:	6023      	strmi	r3, [r4, #0]
 8004da8:	b91d      	cbnz	r5, 8004db2 <_printf_i+0x196>
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	f023 0320 	bic.w	r3, r3, #32
 8004db0:	6023      	str	r3, [r4, #0]
 8004db2:	2310      	movs	r3, #16
 8004db4:	e7b0      	b.n	8004d18 <_printf_i+0xfc>
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	f043 0320 	orr.w	r3, r3, #32
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	2378      	movs	r3, #120	; 0x78
 8004dc0:	4828      	ldr	r0, [pc, #160]	; (8004e64 <_printf_i+0x248>)
 8004dc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dc6:	e7e3      	b.n	8004d90 <_printf_i+0x174>
 8004dc8:	065e      	lsls	r6, r3, #25
 8004dca:	bf48      	it	mi
 8004dcc:	b2ad      	uxthmi	r5, r5
 8004dce:	e7e6      	b.n	8004d9e <_printf_i+0x182>
 8004dd0:	4616      	mov	r6, r2
 8004dd2:	e7bb      	b.n	8004d4c <_printf_i+0x130>
 8004dd4:	680b      	ldr	r3, [r1, #0]
 8004dd6:	6826      	ldr	r6, [r4, #0]
 8004dd8:	6960      	ldr	r0, [r4, #20]
 8004dda:	1d1d      	adds	r5, r3, #4
 8004ddc:	600d      	str	r5, [r1, #0]
 8004dde:	0635      	lsls	r5, r6, #24
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	d501      	bpl.n	8004de8 <_printf_i+0x1cc>
 8004de4:	6018      	str	r0, [r3, #0]
 8004de6:	e002      	b.n	8004dee <_printf_i+0x1d2>
 8004de8:	0671      	lsls	r1, r6, #25
 8004dea:	d5fb      	bpl.n	8004de4 <_printf_i+0x1c8>
 8004dec:	8018      	strh	r0, [r3, #0]
 8004dee:	2300      	movs	r3, #0
 8004df0:	6123      	str	r3, [r4, #16]
 8004df2:	4616      	mov	r6, r2
 8004df4:	e7ba      	b.n	8004d6c <_printf_i+0x150>
 8004df6:	680b      	ldr	r3, [r1, #0]
 8004df8:	1d1a      	adds	r2, r3, #4
 8004dfa:	600a      	str	r2, [r1, #0]
 8004dfc:	681e      	ldr	r6, [r3, #0]
 8004dfe:	6862      	ldr	r2, [r4, #4]
 8004e00:	2100      	movs	r1, #0
 8004e02:	4630      	mov	r0, r6
 8004e04:	f7fb f9ec 	bl	80001e0 <memchr>
 8004e08:	b108      	cbz	r0, 8004e0e <_printf_i+0x1f2>
 8004e0a:	1b80      	subs	r0, r0, r6
 8004e0c:	6060      	str	r0, [r4, #4]
 8004e0e:	6863      	ldr	r3, [r4, #4]
 8004e10:	6123      	str	r3, [r4, #16]
 8004e12:	2300      	movs	r3, #0
 8004e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e18:	e7a8      	b.n	8004d6c <_printf_i+0x150>
 8004e1a:	6923      	ldr	r3, [r4, #16]
 8004e1c:	4632      	mov	r2, r6
 8004e1e:	4649      	mov	r1, r9
 8004e20:	4640      	mov	r0, r8
 8004e22:	47d0      	blx	sl
 8004e24:	3001      	adds	r0, #1
 8004e26:	d0ab      	beq.n	8004d80 <_printf_i+0x164>
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	079b      	lsls	r3, r3, #30
 8004e2c:	d413      	bmi.n	8004e56 <_printf_i+0x23a>
 8004e2e:	68e0      	ldr	r0, [r4, #12]
 8004e30:	9b03      	ldr	r3, [sp, #12]
 8004e32:	4298      	cmp	r0, r3
 8004e34:	bfb8      	it	lt
 8004e36:	4618      	movlt	r0, r3
 8004e38:	e7a4      	b.n	8004d84 <_printf_i+0x168>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	4632      	mov	r2, r6
 8004e3e:	4649      	mov	r1, r9
 8004e40:	4640      	mov	r0, r8
 8004e42:	47d0      	blx	sl
 8004e44:	3001      	adds	r0, #1
 8004e46:	d09b      	beq.n	8004d80 <_printf_i+0x164>
 8004e48:	3501      	adds	r5, #1
 8004e4a:	68e3      	ldr	r3, [r4, #12]
 8004e4c:	9903      	ldr	r1, [sp, #12]
 8004e4e:	1a5b      	subs	r3, r3, r1
 8004e50:	42ab      	cmp	r3, r5
 8004e52:	dcf2      	bgt.n	8004e3a <_printf_i+0x21e>
 8004e54:	e7eb      	b.n	8004e2e <_printf_i+0x212>
 8004e56:	2500      	movs	r5, #0
 8004e58:	f104 0619 	add.w	r6, r4, #25
 8004e5c:	e7f5      	b.n	8004e4a <_printf_i+0x22e>
 8004e5e:	bf00      	nop
 8004e60:	0800924a 	.word	0x0800924a
 8004e64:	0800925b 	.word	0x0800925b

08004e68 <_scanf_float>:
 8004e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e6c:	b087      	sub	sp, #28
 8004e6e:	4617      	mov	r7, r2
 8004e70:	9303      	str	r3, [sp, #12]
 8004e72:	688b      	ldr	r3, [r1, #8]
 8004e74:	1e5a      	subs	r2, r3, #1
 8004e76:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004e7a:	bf83      	ittte	hi
 8004e7c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004e80:	195b      	addhi	r3, r3, r5
 8004e82:	9302      	strhi	r3, [sp, #8]
 8004e84:	2300      	movls	r3, #0
 8004e86:	bf86      	itte	hi
 8004e88:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004e8c:	608b      	strhi	r3, [r1, #8]
 8004e8e:	9302      	strls	r3, [sp, #8]
 8004e90:	680b      	ldr	r3, [r1, #0]
 8004e92:	468b      	mov	fp, r1
 8004e94:	2500      	movs	r5, #0
 8004e96:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004e9a:	f84b 3b1c 	str.w	r3, [fp], #28
 8004e9e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004ea2:	4680      	mov	r8, r0
 8004ea4:	460c      	mov	r4, r1
 8004ea6:	465e      	mov	r6, fp
 8004ea8:	46aa      	mov	sl, r5
 8004eaa:	46a9      	mov	r9, r5
 8004eac:	9501      	str	r5, [sp, #4]
 8004eae:	68a2      	ldr	r2, [r4, #8]
 8004eb0:	b152      	cbz	r2, 8004ec8 <_scanf_float+0x60>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b4e      	cmp	r3, #78	; 0x4e
 8004eb8:	d864      	bhi.n	8004f84 <_scanf_float+0x11c>
 8004eba:	2b40      	cmp	r3, #64	; 0x40
 8004ebc:	d83c      	bhi.n	8004f38 <_scanf_float+0xd0>
 8004ebe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004ec2:	b2c8      	uxtb	r0, r1
 8004ec4:	280e      	cmp	r0, #14
 8004ec6:	d93a      	bls.n	8004f3e <_scanf_float+0xd6>
 8004ec8:	f1b9 0f00 	cmp.w	r9, #0
 8004ecc:	d003      	beq.n	8004ed6 <_scanf_float+0x6e>
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004eda:	f1ba 0f01 	cmp.w	sl, #1
 8004ede:	f200 8113 	bhi.w	8005108 <_scanf_float+0x2a0>
 8004ee2:	455e      	cmp	r6, fp
 8004ee4:	f200 8105 	bhi.w	80050f2 <_scanf_float+0x28a>
 8004ee8:	2501      	movs	r5, #1
 8004eea:	4628      	mov	r0, r5
 8004eec:	b007      	add	sp, #28
 8004eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ef2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004ef6:	2a0d      	cmp	r2, #13
 8004ef8:	d8e6      	bhi.n	8004ec8 <_scanf_float+0x60>
 8004efa:	a101      	add	r1, pc, #4	; (adr r1, 8004f00 <_scanf_float+0x98>)
 8004efc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004f00:	0800503f 	.word	0x0800503f
 8004f04:	08004ec9 	.word	0x08004ec9
 8004f08:	08004ec9 	.word	0x08004ec9
 8004f0c:	08004ec9 	.word	0x08004ec9
 8004f10:	0800509f 	.word	0x0800509f
 8004f14:	08005077 	.word	0x08005077
 8004f18:	08004ec9 	.word	0x08004ec9
 8004f1c:	08004ec9 	.word	0x08004ec9
 8004f20:	0800504d 	.word	0x0800504d
 8004f24:	08004ec9 	.word	0x08004ec9
 8004f28:	08004ec9 	.word	0x08004ec9
 8004f2c:	08004ec9 	.word	0x08004ec9
 8004f30:	08004ec9 	.word	0x08004ec9
 8004f34:	08005005 	.word	0x08005005
 8004f38:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004f3c:	e7db      	b.n	8004ef6 <_scanf_float+0x8e>
 8004f3e:	290e      	cmp	r1, #14
 8004f40:	d8c2      	bhi.n	8004ec8 <_scanf_float+0x60>
 8004f42:	a001      	add	r0, pc, #4	; (adr r0, 8004f48 <_scanf_float+0xe0>)
 8004f44:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004f48:	08004ff7 	.word	0x08004ff7
 8004f4c:	08004ec9 	.word	0x08004ec9
 8004f50:	08004ff7 	.word	0x08004ff7
 8004f54:	0800508b 	.word	0x0800508b
 8004f58:	08004ec9 	.word	0x08004ec9
 8004f5c:	08004fa5 	.word	0x08004fa5
 8004f60:	08004fe1 	.word	0x08004fe1
 8004f64:	08004fe1 	.word	0x08004fe1
 8004f68:	08004fe1 	.word	0x08004fe1
 8004f6c:	08004fe1 	.word	0x08004fe1
 8004f70:	08004fe1 	.word	0x08004fe1
 8004f74:	08004fe1 	.word	0x08004fe1
 8004f78:	08004fe1 	.word	0x08004fe1
 8004f7c:	08004fe1 	.word	0x08004fe1
 8004f80:	08004fe1 	.word	0x08004fe1
 8004f84:	2b6e      	cmp	r3, #110	; 0x6e
 8004f86:	d809      	bhi.n	8004f9c <_scanf_float+0x134>
 8004f88:	2b60      	cmp	r3, #96	; 0x60
 8004f8a:	d8b2      	bhi.n	8004ef2 <_scanf_float+0x8a>
 8004f8c:	2b54      	cmp	r3, #84	; 0x54
 8004f8e:	d077      	beq.n	8005080 <_scanf_float+0x218>
 8004f90:	2b59      	cmp	r3, #89	; 0x59
 8004f92:	d199      	bne.n	8004ec8 <_scanf_float+0x60>
 8004f94:	2d07      	cmp	r5, #7
 8004f96:	d197      	bne.n	8004ec8 <_scanf_float+0x60>
 8004f98:	2508      	movs	r5, #8
 8004f9a:	e029      	b.n	8004ff0 <_scanf_float+0x188>
 8004f9c:	2b74      	cmp	r3, #116	; 0x74
 8004f9e:	d06f      	beq.n	8005080 <_scanf_float+0x218>
 8004fa0:	2b79      	cmp	r3, #121	; 0x79
 8004fa2:	e7f6      	b.n	8004f92 <_scanf_float+0x12a>
 8004fa4:	6821      	ldr	r1, [r4, #0]
 8004fa6:	05c8      	lsls	r0, r1, #23
 8004fa8:	d51a      	bpl.n	8004fe0 <_scanf_float+0x178>
 8004faa:	9b02      	ldr	r3, [sp, #8]
 8004fac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004fb0:	6021      	str	r1, [r4, #0]
 8004fb2:	f109 0901 	add.w	r9, r9, #1
 8004fb6:	b11b      	cbz	r3, 8004fc0 <_scanf_float+0x158>
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	3201      	adds	r2, #1
 8004fbc:	9302      	str	r3, [sp, #8]
 8004fbe:	60a2      	str	r2, [r4, #8]
 8004fc0:	68a3      	ldr	r3, [r4, #8]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	60a3      	str	r3, [r4, #8]
 8004fc6:	6923      	ldr	r3, [r4, #16]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	6123      	str	r3, [r4, #16]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	607b      	str	r3, [r7, #4]
 8004fd4:	f340 8084 	ble.w	80050e0 <_scanf_float+0x278>
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	603b      	str	r3, [r7, #0]
 8004fde:	e766      	b.n	8004eae <_scanf_float+0x46>
 8004fe0:	eb1a 0f05 	cmn.w	sl, r5
 8004fe4:	f47f af70 	bne.w	8004ec8 <_scanf_float+0x60>
 8004fe8:	6822      	ldr	r2, [r4, #0]
 8004fea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004fee:	6022      	str	r2, [r4, #0]
 8004ff0:	f806 3b01 	strb.w	r3, [r6], #1
 8004ff4:	e7e4      	b.n	8004fc0 <_scanf_float+0x158>
 8004ff6:	6822      	ldr	r2, [r4, #0]
 8004ff8:	0610      	lsls	r0, r2, #24
 8004ffa:	f57f af65 	bpl.w	8004ec8 <_scanf_float+0x60>
 8004ffe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005002:	e7f4      	b.n	8004fee <_scanf_float+0x186>
 8005004:	f1ba 0f00 	cmp.w	sl, #0
 8005008:	d10e      	bne.n	8005028 <_scanf_float+0x1c0>
 800500a:	f1b9 0f00 	cmp.w	r9, #0
 800500e:	d10e      	bne.n	800502e <_scanf_float+0x1c6>
 8005010:	6822      	ldr	r2, [r4, #0]
 8005012:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005016:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800501a:	d108      	bne.n	800502e <_scanf_float+0x1c6>
 800501c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005020:	6022      	str	r2, [r4, #0]
 8005022:	f04f 0a01 	mov.w	sl, #1
 8005026:	e7e3      	b.n	8004ff0 <_scanf_float+0x188>
 8005028:	f1ba 0f02 	cmp.w	sl, #2
 800502c:	d055      	beq.n	80050da <_scanf_float+0x272>
 800502e:	2d01      	cmp	r5, #1
 8005030:	d002      	beq.n	8005038 <_scanf_float+0x1d0>
 8005032:	2d04      	cmp	r5, #4
 8005034:	f47f af48 	bne.w	8004ec8 <_scanf_float+0x60>
 8005038:	3501      	adds	r5, #1
 800503a:	b2ed      	uxtb	r5, r5
 800503c:	e7d8      	b.n	8004ff0 <_scanf_float+0x188>
 800503e:	f1ba 0f01 	cmp.w	sl, #1
 8005042:	f47f af41 	bne.w	8004ec8 <_scanf_float+0x60>
 8005046:	f04f 0a02 	mov.w	sl, #2
 800504a:	e7d1      	b.n	8004ff0 <_scanf_float+0x188>
 800504c:	b97d      	cbnz	r5, 800506e <_scanf_float+0x206>
 800504e:	f1b9 0f00 	cmp.w	r9, #0
 8005052:	f47f af3c 	bne.w	8004ece <_scanf_float+0x66>
 8005056:	6822      	ldr	r2, [r4, #0]
 8005058:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800505c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005060:	f47f af39 	bne.w	8004ed6 <_scanf_float+0x6e>
 8005064:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005068:	6022      	str	r2, [r4, #0]
 800506a:	2501      	movs	r5, #1
 800506c:	e7c0      	b.n	8004ff0 <_scanf_float+0x188>
 800506e:	2d03      	cmp	r5, #3
 8005070:	d0e2      	beq.n	8005038 <_scanf_float+0x1d0>
 8005072:	2d05      	cmp	r5, #5
 8005074:	e7de      	b.n	8005034 <_scanf_float+0x1cc>
 8005076:	2d02      	cmp	r5, #2
 8005078:	f47f af26 	bne.w	8004ec8 <_scanf_float+0x60>
 800507c:	2503      	movs	r5, #3
 800507e:	e7b7      	b.n	8004ff0 <_scanf_float+0x188>
 8005080:	2d06      	cmp	r5, #6
 8005082:	f47f af21 	bne.w	8004ec8 <_scanf_float+0x60>
 8005086:	2507      	movs	r5, #7
 8005088:	e7b2      	b.n	8004ff0 <_scanf_float+0x188>
 800508a:	6822      	ldr	r2, [r4, #0]
 800508c:	0591      	lsls	r1, r2, #22
 800508e:	f57f af1b 	bpl.w	8004ec8 <_scanf_float+0x60>
 8005092:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005096:	6022      	str	r2, [r4, #0]
 8005098:	f8cd 9004 	str.w	r9, [sp, #4]
 800509c:	e7a8      	b.n	8004ff0 <_scanf_float+0x188>
 800509e:	6822      	ldr	r2, [r4, #0]
 80050a0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80050a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80050a8:	d006      	beq.n	80050b8 <_scanf_float+0x250>
 80050aa:	0550      	lsls	r0, r2, #21
 80050ac:	f57f af0c 	bpl.w	8004ec8 <_scanf_float+0x60>
 80050b0:	f1b9 0f00 	cmp.w	r9, #0
 80050b4:	f43f af0f 	beq.w	8004ed6 <_scanf_float+0x6e>
 80050b8:	0591      	lsls	r1, r2, #22
 80050ba:	bf58      	it	pl
 80050bc:	9901      	ldrpl	r1, [sp, #4]
 80050be:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80050c2:	bf58      	it	pl
 80050c4:	eba9 0101 	subpl.w	r1, r9, r1
 80050c8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80050cc:	bf58      	it	pl
 80050ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80050d2:	6022      	str	r2, [r4, #0]
 80050d4:	f04f 0900 	mov.w	r9, #0
 80050d8:	e78a      	b.n	8004ff0 <_scanf_float+0x188>
 80050da:	f04f 0a03 	mov.w	sl, #3
 80050de:	e787      	b.n	8004ff0 <_scanf_float+0x188>
 80050e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80050e4:	4639      	mov	r1, r7
 80050e6:	4640      	mov	r0, r8
 80050e8:	4798      	blx	r3
 80050ea:	2800      	cmp	r0, #0
 80050ec:	f43f aedf 	beq.w	8004eae <_scanf_float+0x46>
 80050f0:	e6ea      	b.n	8004ec8 <_scanf_float+0x60>
 80050f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80050fa:	463a      	mov	r2, r7
 80050fc:	4640      	mov	r0, r8
 80050fe:	4798      	blx	r3
 8005100:	6923      	ldr	r3, [r4, #16]
 8005102:	3b01      	subs	r3, #1
 8005104:	6123      	str	r3, [r4, #16]
 8005106:	e6ec      	b.n	8004ee2 <_scanf_float+0x7a>
 8005108:	1e6b      	subs	r3, r5, #1
 800510a:	2b06      	cmp	r3, #6
 800510c:	d825      	bhi.n	800515a <_scanf_float+0x2f2>
 800510e:	2d02      	cmp	r5, #2
 8005110:	d836      	bhi.n	8005180 <_scanf_float+0x318>
 8005112:	455e      	cmp	r6, fp
 8005114:	f67f aee8 	bls.w	8004ee8 <_scanf_float+0x80>
 8005118:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800511c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005120:	463a      	mov	r2, r7
 8005122:	4640      	mov	r0, r8
 8005124:	4798      	blx	r3
 8005126:	6923      	ldr	r3, [r4, #16]
 8005128:	3b01      	subs	r3, #1
 800512a:	6123      	str	r3, [r4, #16]
 800512c:	e7f1      	b.n	8005112 <_scanf_float+0x2aa>
 800512e:	9802      	ldr	r0, [sp, #8]
 8005130:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005134:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005138:	9002      	str	r0, [sp, #8]
 800513a:	463a      	mov	r2, r7
 800513c:	4640      	mov	r0, r8
 800513e:	4798      	blx	r3
 8005140:	6923      	ldr	r3, [r4, #16]
 8005142:	3b01      	subs	r3, #1
 8005144:	6123      	str	r3, [r4, #16]
 8005146:	f10a 3aff 	add.w	sl, sl, #4294967295
 800514a:	fa5f fa8a 	uxtb.w	sl, sl
 800514e:	f1ba 0f02 	cmp.w	sl, #2
 8005152:	d1ec      	bne.n	800512e <_scanf_float+0x2c6>
 8005154:	3d03      	subs	r5, #3
 8005156:	b2ed      	uxtb	r5, r5
 8005158:	1b76      	subs	r6, r6, r5
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	05da      	lsls	r2, r3, #23
 800515e:	d52f      	bpl.n	80051c0 <_scanf_float+0x358>
 8005160:	055b      	lsls	r3, r3, #21
 8005162:	d510      	bpl.n	8005186 <_scanf_float+0x31e>
 8005164:	455e      	cmp	r6, fp
 8005166:	f67f aebf 	bls.w	8004ee8 <_scanf_float+0x80>
 800516a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800516e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005172:	463a      	mov	r2, r7
 8005174:	4640      	mov	r0, r8
 8005176:	4798      	blx	r3
 8005178:	6923      	ldr	r3, [r4, #16]
 800517a:	3b01      	subs	r3, #1
 800517c:	6123      	str	r3, [r4, #16]
 800517e:	e7f1      	b.n	8005164 <_scanf_float+0x2fc>
 8005180:	46aa      	mov	sl, r5
 8005182:	9602      	str	r6, [sp, #8]
 8005184:	e7df      	b.n	8005146 <_scanf_float+0x2de>
 8005186:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800518a:	6923      	ldr	r3, [r4, #16]
 800518c:	2965      	cmp	r1, #101	; 0x65
 800518e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005192:	f106 35ff 	add.w	r5, r6, #4294967295
 8005196:	6123      	str	r3, [r4, #16]
 8005198:	d00c      	beq.n	80051b4 <_scanf_float+0x34c>
 800519a:	2945      	cmp	r1, #69	; 0x45
 800519c:	d00a      	beq.n	80051b4 <_scanf_float+0x34c>
 800519e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80051a2:	463a      	mov	r2, r7
 80051a4:	4640      	mov	r0, r8
 80051a6:	4798      	blx	r3
 80051a8:	6923      	ldr	r3, [r4, #16]
 80051aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	1eb5      	subs	r5, r6, #2
 80051b2:	6123      	str	r3, [r4, #16]
 80051b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80051b8:	463a      	mov	r2, r7
 80051ba:	4640      	mov	r0, r8
 80051bc:	4798      	blx	r3
 80051be:	462e      	mov	r6, r5
 80051c0:	6825      	ldr	r5, [r4, #0]
 80051c2:	f015 0510 	ands.w	r5, r5, #16
 80051c6:	d158      	bne.n	800527a <_scanf_float+0x412>
 80051c8:	7035      	strb	r5, [r6, #0]
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d4:	d11c      	bne.n	8005210 <_scanf_float+0x3a8>
 80051d6:	9b01      	ldr	r3, [sp, #4]
 80051d8:	454b      	cmp	r3, r9
 80051da:	eba3 0209 	sub.w	r2, r3, r9
 80051de:	d124      	bne.n	800522a <_scanf_float+0x3c2>
 80051e0:	2200      	movs	r2, #0
 80051e2:	4659      	mov	r1, fp
 80051e4:	4640      	mov	r0, r8
 80051e6:	f000 fecd 	bl	8005f84 <_strtod_r>
 80051ea:	9b03      	ldr	r3, [sp, #12]
 80051ec:	6821      	ldr	r1, [r4, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f011 0f02 	tst.w	r1, #2
 80051f4:	ec57 6b10 	vmov	r6, r7, d0
 80051f8:	f103 0204 	add.w	r2, r3, #4
 80051fc:	d020      	beq.n	8005240 <_scanf_float+0x3d8>
 80051fe:	9903      	ldr	r1, [sp, #12]
 8005200:	600a      	str	r2, [r1, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	e9c3 6700 	strd	r6, r7, [r3]
 8005208:	68e3      	ldr	r3, [r4, #12]
 800520a:	3301      	adds	r3, #1
 800520c:	60e3      	str	r3, [r4, #12]
 800520e:	e66c      	b.n	8004eea <_scanf_float+0x82>
 8005210:	9b04      	ldr	r3, [sp, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0e4      	beq.n	80051e0 <_scanf_float+0x378>
 8005216:	9905      	ldr	r1, [sp, #20]
 8005218:	230a      	movs	r3, #10
 800521a:	462a      	mov	r2, r5
 800521c:	3101      	adds	r1, #1
 800521e:	4640      	mov	r0, r8
 8005220:	f000 ffa2 	bl	8006168 <_strtol_r>
 8005224:	9b04      	ldr	r3, [sp, #16]
 8005226:	9e05      	ldr	r6, [sp, #20]
 8005228:	1ac2      	subs	r2, r0, r3
 800522a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800522e:	429e      	cmp	r6, r3
 8005230:	bf28      	it	cs
 8005232:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005236:	4912      	ldr	r1, [pc, #72]	; (8005280 <_scanf_float+0x418>)
 8005238:	4630      	mov	r0, r6
 800523a:	f000 f843 	bl	80052c4 <siprintf>
 800523e:	e7cf      	b.n	80051e0 <_scanf_float+0x378>
 8005240:	f011 0f04 	tst.w	r1, #4
 8005244:	9903      	ldr	r1, [sp, #12]
 8005246:	600a      	str	r2, [r1, #0]
 8005248:	d1db      	bne.n	8005202 <_scanf_float+0x39a>
 800524a:	f8d3 8000 	ldr.w	r8, [r3]
 800524e:	ee10 2a10 	vmov	r2, s0
 8005252:	ee10 0a10 	vmov	r0, s0
 8005256:	463b      	mov	r3, r7
 8005258:	4639      	mov	r1, r7
 800525a:	f7fb fc67 	bl	8000b2c <__aeabi_dcmpun>
 800525e:	b128      	cbz	r0, 800526c <_scanf_float+0x404>
 8005260:	4808      	ldr	r0, [pc, #32]	; (8005284 <_scanf_float+0x41c>)
 8005262:	f000 f829 	bl	80052b8 <nanf>
 8005266:	ed88 0a00 	vstr	s0, [r8]
 800526a:	e7cd      	b.n	8005208 <_scanf_float+0x3a0>
 800526c:	4630      	mov	r0, r6
 800526e:	4639      	mov	r1, r7
 8005270:	f7fb fcba 	bl	8000be8 <__aeabi_d2f>
 8005274:	f8c8 0000 	str.w	r0, [r8]
 8005278:	e7c6      	b.n	8005208 <_scanf_float+0x3a0>
 800527a:	2500      	movs	r5, #0
 800527c:	e635      	b.n	8004eea <_scanf_float+0x82>
 800527e:	bf00      	nop
 8005280:	0800926c 	.word	0x0800926c
 8005284:	0800937b 	.word	0x0800937b

08005288 <iprintf>:
 8005288:	b40f      	push	{r0, r1, r2, r3}
 800528a:	4b0a      	ldr	r3, [pc, #40]	; (80052b4 <iprintf+0x2c>)
 800528c:	b513      	push	{r0, r1, r4, lr}
 800528e:	681c      	ldr	r4, [r3, #0]
 8005290:	b124      	cbz	r4, 800529c <iprintf+0x14>
 8005292:	69a3      	ldr	r3, [r4, #24]
 8005294:	b913      	cbnz	r3, 800529c <iprintf+0x14>
 8005296:	4620      	mov	r0, r4
 8005298:	f001 fe56 	bl	8006f48 <__sinit>
 800529c:	ab05      	add	r3, sp, #20
 800529e:	9a04      	ldr	r2, [sp, #16]
 80052a0:	68a1      	ldr	r1, [r4, #8]
 80052a2:	9301      	str	r3, [sp, #4]
 80052a4:	4620      	mov	r0, r4
 80052a6:	f003 f997 	bl	80085d8 <_vfiprintf_r>
 80052aa:	b002      	add	sp, #8
 80052ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052b0:	b004      	add	sp, #16
 80052b2:	4770      	bx	lr
 80052b4:	2000000c 	.word	0x2000000c

080052b8 <nanf>:
 80052b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80052c0 <nanf+0x8>
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	7fc00000 	.word	0x7fc00000

080052c4 <siprintf>:
 80052c4:	b40e      	push	{r1, r2, r3}
 80052c6:	b500      	push	{lr}
 80052c8:	b09c      	sub	sp, #112	; 0x70
 80052ca:	ab1d      	add	r3, sp, #116	; 0x74
 80052cc:	9002      	str	r0, [sp, #8]
 80052ce:	9006      	str	r0, [sp, #24]
 80052d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052d4:	4809      	ldr	r0, [pc, #36]	; (80052fc <siprintf+0x38>)
 80052d6:	9107      	str	r1, [sp, #28]
 80052d8:	9104      	str	r1, [sp, #16]
 80052da:	4909      	ldr	r1, [pc, #36]	; (8005300 <siprintf+0x3c>)
 80052dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80052e0:	9105      	str	r1, [sp, #20]
 80052e2:	6800      	ldr	r0, [r0, #0]
 80052e4:	9301      	str	r3, [sp, #4]
 80052e6:	a902      	add	r1, sp, #8
 80052e8:	f003 f84c 	bl	8008384 <_svfiprintf_r>
 80052ec:	9b02      	ldr	r3, [sp, #8]
 80052ee:	2200      	movs	r2, #0
 80052f0:	701a      	strb	r2, [r3, #0]
 80052f2:	b01c      	add	sp, #112	; 0x70
 80052f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80052f8:	b003      	add	sp, #12
 80052fa:	4770      	bx	lr
 80052fc:	2000000c 	.word	0x2000000c
 8005300:	ffff0208 	.word	0xffff0208

08005304 <strcpy>:
 8005304:	4603      	mov	r3, r0
 8005306:	f811 2b01 	ldrb.w	r2, [r1], #1
 800530a:	f803 2b01 	strb.w	r2, [r3], #1
 800530e:	2a00      	cmp	r2, #0
 8005310:	d1f9      	bne.n	8005306 <strcpy+0x2>
 8005312:	4770      	bx	lr

08005314 <strncmp>:
 8005314:	b510      	push	{r4, lr}
 8005316:	b16a      	cbz	r2, 8005334 <strncmp+0x20>
 8005318:	3901      	subs	r1, #1
 800531a:	1884      	adds	r4, r0, r2
 800531c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005320:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005324:	4293      	cmp	r3, r2
 8005326:	d103      	bne.n	8005330 <strncmp+0x1c>
 8005328:	42a0      	cmp	r0, r4
 800532a:	d001      	beq.n	8005330 <strncmp+0x1c>
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1f5      	bne.n	800531c <strncmp+0x8>
 8005330:	1a98      	subs	r0, r3, r2
 8005332:	bd10      	pop	{r4, pc}
 8005334:	4610      	mov	r0, r2
 8005336:	e7fc      	b.n	8005332 <strncmp+0x1e>

08005338 <sulp>:
 8005338:	b570      	push	{r4, r5, r6, lr}
 800533a:	4604      	mov	r4, r0
 800533c:	460d      	mov	r5, r1
 800533e:	ec45 4b10 	vmov	d0, r4, r5
 8005342:	4616      	mov	r6, r2
 8005344:	f002 fdba 	bl	8007ebc <__ulp>
 8005348:	ec51 0b10 	vmov	r0, r1, d0
 800534c:	b17e      	cbz	r6, 800536e <sulp+0x36>
 800534e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005352:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005356:	2b00      	cmp	r3, #0
 8005358:	dd09      	ble.n	800536e <sulp+0x36>
 800535a:	051b      	lsls	r3, r3, #20
 800535c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005360:	2400      	movs	r4, #0
 8005362:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005366:	4622      	mov	r2, r4
 8005368:	462b      	mov	r3, r5
 800536a:	f7fb f945 	bl	80005f8 <__aeabi_dmul>
 800536e:	bd70      	pop	{r4, r5, r6, pc}

08005370 <_strtod_l>:
 8005370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005374:	b0a3      	sub	sp, #140	; 0x8c
 8005376:	461f      	mov	r7, r3
 8005378:	2300      	movs	r3, #0
 800537a:	931e      	str	r3, [sp, #120]	; 0x78
 800537c:	4ba4      	ldr	r3, [pc, #656]	; (8005610 <_strtod_l+0x2a0>)
 800537e:	9219      	str	r2, [sp, #100]	; 0x64
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	9307      	str	r3, [sp, #28]
 8005384:	4604      	mov	r4, r0
 8005386:	4618      	mov	r0, r3
 8005388:	4688      	mov	r8, r1
 800538a:	f7fa ff21 	bl	80001d0 <strlen>
 800538e:	f04f 0a00 	mov.w	sl, #0
 8005392:	4605      	mov	r5, r0
 8005394:	f04f 0b00 	mov.w	fp, #0
 8005398:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800539c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800539e:	781a      	ldrb	r2, [r3, #0]
 80053a0:	2a2b      	cmp	r2, #43	; 0x2b
 80053a2:	d04c      	beq.n	800543e <_strtod_l+0xce>
 80053a4:	d839      	bhi.n	800541a <_strtod_l+0xaa>
 80053a6:	2a0d      	cmp	r2, #13
 80053a8:	d832      	bhi.n	8005410 <_strtod_l+0xa0>
 80053aa:	2a08      	cmp	r2, #8
 80053ac:	d832      	bhi.n	8005414 <_strtod_l+0xa4>
 80053ae:	2a00      	cmp	r2, #0
 80053b0:	d03c      	beq.n	800542c <_strtod_l+0xbc>
 80053b2:	2300      	movs	r3, #0
 80053b4:	930e      	str	r3, [sp, #56]	; 0x38
 80053b6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80053b8:	7833      	ldrb	r3, [r6, #0]
 80053ba:	2b30      	cmp	r3, #48	; 0x30
 80053bc:	f040 80b4 	bne.w	8005528 <_strtod_l+0x1b8>
 80053c0:	7873      	ldrb	r3, [r6, #1]
 80053c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80053c6:	2b58      	cmp	r3, #88	; 0x58
 80053c8:	d16c      	bne.n	80054a4 <_strtod_l+0x134>
 80053ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053cc:	9301      	str	r3, [sp, #4]
 80053ce:	ab1e      	add	r3, sp, #120	; 0x78
 80053d0:	9702      	str	r7, [sp, #8]
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	4a8f      	ldr	r2, [pc, #572]	; (8005614 <_strtod_l+0x2a4>)
 80053d6:	ab1f      	add	r3, sp, #124	; 0x7c
 80053d8:	a91d      	add	r1, sp, #116	; 0x74
 80053da:	4620      	mov	r0, r4
 80053dc:	f001 feca 	bl	8007174 <__gethex>
 80053e0:	f010 0707 	ands.w	r7, r0, #7
 80053e4:	4605      	mov	r5, r0
 80053e6:	d005      	beq.n	80053f4 <_strtod_l+0x84>
 80053e8:	2f06      	cmp	r7, #6
 80053ea:	d12a      	bne.n	8005442 <_strtod_l+0xd2>
 80053ec:	3601      	adds	r6, #1
 80053ee:	2300      	movs	r3, #0
 80053f0:	961d      	str	r6, [sp, #116]	; 0x74
 80053f2:	930e      	str	r3, [sp, #56]	; 0x38
 80053f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f040 8596 	bne.w	8005f28 <_strtod_l+0xbb8>
 80053fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053fe:	b1db      	cbz	r3, 8005438 <_strtod_l+0xc8>
 8005400:	4652      	mov	r2, sl
 8005402:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005406:	ec43 2b10 	vmov	d0, r2, r3
 800540a:	b023      	add	sp, #140	; 0x8c
 800540c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005410:	2a20      	cmp	r2, #32
 8005412:	d1ce      	bne.n	80053b2 <_strtod_l+0x42>
 8005414:	3301      	adds	r3, #1
 8005416:	931d      	str	r3, [sp, #116]	; 0x74
 8005418:	e7c0      	b.n	800539c <_strtod_l+0x2c>
 800541a:	2a2d      	cmp	r2, #45	; 0x2d
 800541c:	d1c9      	bne.n	80053b2 <_strtod_l+0x42>
 800541e:	2201      	movs	r2, #1
 8005420:	920e      	str	r2, [sp, #56]	; 0x38
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	921d      	str	r2, [sp, #116]	; 0x74
 8005426:	785b      	ldrb	r3, [r3, #1]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1c4      	bne.n	80053b6 <_strtod_l+0x46>
 800542c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800542e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005432:	2b00      	cmp	r3, #0
 8005434:	f040 8576 	bne.w	8005f24 <_strtod_l+0xbb4>
 8005438:	4652      	mov	r2, sl
 800543a:	465b      	mov	r3, fp
 800543c:	e7e3      	b.n	8005406 <_strtod_l+0x96>
 800543e:	2200      	movs	r2, #0
 8005440:	e7ee      	b.n	8005420 <_strtod_l+0xb0>
 8005442:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005444:	b13a      	cbz	r2, 8005456 <_strtod_l+0xe6>
 8005446:	2135      	movs	r1, #53	; 0x35
 8005448:	a820      	add	r0, sp, #128	; 0x80
 800544a:	f002 fe42 	bl	80080d2 <__copybits>
 800544e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005450:	4620      	mov	r0, r4
 8005452:	f002 fa07 	bl	8007864 <_Bfree>
 8005456:	3f01      	subs	r7, #1
 8005458:	2f05      	cmp	r7, #5
 800545a:	d807      	bhi.n	800546c <_strtod_l+0xfc>
 800545c:	e8df f007 	tbb	[pc, r7]
 8005460:	1d180b0e 	.word	0x1d180b0e
 8005464:	030e      	.short	0x030e
 8005466:	f04f 0b00 	mov.w	fp, #0
 800546a:	46da      	mov	sl, fp
 800546c:	0728      	lsls	r0, r5, #28
 800546e:	d5c1      	bpl.n	80053f4 <_strtod_l+0x84>
 8005470:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005474:	e7be      	b.n	80053f4 <_strtod_l+0x84>
 8005476:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800547a:	e7f7      	b.n	800546c <_strtod_l+0xfc>
 800547c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8005480:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005482:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005486:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800548a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800548e:	e7ed      	b.n	800546c <_strtod_l+0xfc>
 8005490:	f8df b184 	ldr.w	fp, [pc, #388]	; 8005618 <_strtod_l+0x2a8>
 8005494:	f04f 0a00 	mov.w	sl, #0
 8005498:	e7e8      	b.n	800546c <_strtod_l+0xfc>
 800549a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800549e:	f04f 3aff 	mov.w	sl, #4294967295
 80054a2:	e7e3      	b.n	800546c <_strtod_l+0xfc>
 80054a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	921d      	str	r2, [sp, #116]	; 0x74
 80054aa:	785b      	ldrb	r3, [r3, #1]
 80054ac:	2b30      	cmp	r3, #48	; 0x30
 80054ae:	d0f9      	beq.n	80054a4 <_strtod_l+0x134>
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d09f      	beq.n	80053f4 <_strtod_l+0x84>
 80054b4:	2301      	movs	r3, #1
 80054b6:	f04f 0900 	mov.w	r9, #0
 80054ba:	9304      	str	r3, [sp, #16]
 80054bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80054be:	930a      	str	r3, [sp, #40]	; 0x28
 80054c0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80054c4:	464f      	mov	r7, r9
 80054c6:	220a      	movs	r2, #10
 80054c8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80054ca:	7806      	ldrb	r6, [r0, #0]
 80054cc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80054d0:	b2d9      	uxtb	r1, r3
 80054d2:	2909      	cmp	r1, #9
 80054d4:	d92a      	bls.n	800552c <_strtod_l+0x1bc>
 80054d6:	9907      	ldr	r1, [sp, #28]
 80054d8:	462a      	mov	r2, r5
 80054da:	f7ff ff1b 	bl	8005314 <strncmp>
 80054de:	b398      	cbz	r0, 8005548 <_strtod_l+0x1d8>
 80054e0:	2000      	movs	r0, #0
 80054e2:	4633      	mov	r3, r6
 80054e4:	463d      	mov	r5, r7
 80054e6:	9007      	str	r0, [sp, #28]
 80054e8:	4602      	mov	r2, r0
 80054ea:	2b65      	cmp	r3, #101	; 0x65
 80054ec:	d001      	beq.n	80054f2 <_strtod_l+0x182>
 80054ee:	2b45      	cmp	r3, #69	; 0x45
 80054f0:	d118      	bne.n	8005524 <_strtod_l+0x1b4>
 80054f2:	b91d      	cbnz	r5, 80054fc <_strtod_l+0x18c>
 80054f4:	9b04      	ldr	r3, [sp, #16]
 80054f6:	4303      	orrs	r3, r0
 80054f8:	d098      	beq.n	800542c <_strtod_l+0xbc>
 80054fa:	2500      	movs	r5, #0
 80054fc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8005500:	f108 0301 	add.w	r3, r8, #1
 8005504:	931d      	str	r3, [sp, #116]	; 0x74
 8005506:	f898 3001 	ldrb.w	r3, [r8, #1]
 800550a:	2b2b      	cmp	r3, #43	; 0x2b
 800550c:	d075      	beq.n	80055fa <_strtod_l+0x28a>
 800550e:	2b2d      	cmp	r3, #45	; 0x2d
 8005510:	d07b      	beq.n	800560a <_strtod_l+0x29a>
 8005512:	f04f 0c00 	mov.w	ip, #0
 8005516:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800551a:	2909      	cmp	r1, #9
 800551c:	f240 8082 	bls.w	8005624 <_strtod_l+0x2b4>
 8005520:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005524:	2600      	movs	r6, #0
 8005526:	e09d      	b.n	8005664 <_strtod_l+0x2f4>
 8005528:	2300      	movs	r3, #0
 800552a:	e7c4      	b.n	80054b6 <_strtod_l+0x146>
 800552c:	2f08      	cmp	r7, #8
 800552e:	bfd8      	it	le
 8005530:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8005532:	f100 0001 	add.w	r0, r0, #1
 8005536:	bfda      	itte	le
 8005538:	fb02 3301 	mlale	r3, r2, r1, r3
 800553c:	9309      	strle	r3, [sp, #36]	; 0x24
 800553e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005542:	3701      	adds	r7, #1
 8005544:	901d      	str	r0, [sp, #116]	; 0x74
 8005546:	e7bf      	b.n	80054c8 <_strtod_l+0x158>
 8005548:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800554a:	195a      	adds	r2, r3, r5
 800554c:	921d      	str	r2, [sp, #116]	; 0x74
 800554e:	5d5b      	ldrb	r3, [r3, r5]
 8005550:	2f00      	cmp	r7, #0
 8005552:	d037      	beq.n	80055c4 <_strtod_l+0x254>
 8005554:	9007      	str	r0, [sp, #28]
 8005556:	463d      	mov	r5, r7
 8005558:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800555c:	2a09      	cmp	r2, #9
 800555e:	d912      	bls.n	8005586 <_strtod_l+0x216>
 8005560:	2201      	movs	r2, #1
 8005562:	e7c2      	b.n	80054ea <_strtod_l+0x17a>
 8005564:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	921d      	str	r2, [sp, #116]	; 0x74
 800556a:	785b      	ldrb	r3, [r3, #1]
 800556c:	3001      	adds	r0, #1
 800556e:	2b30      	cmp	r3, #48	; 0x30
 8005570:	d0f8      	beq.n	8005564 <_strtod_l+0x1f4>
 8005572:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005576:	2a08      	cmp	r2, #8
 8005578:	f200 84db 	bhi.w	8005f32 <_strtod_l+0xbc2>
 800557c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800557e:	9007      	str	r0, [sp, #28]
 8005580:	2000      	movs	r0, #0
 8005582:	920a      	str	r2, [sp, #40]	; 0x28
 8005584:	4605      	mov	r5, r0
 8005586:	3b30      	subs	r3, #48	; 0x30
 8005588:	f100 0201 	add.w	r2, r0, #1
 800558c:	d014      	beq.n	80055b8 <_strtod_l+0x248>
 800558e:	9907      	ldr	r1, [sp, #28]
 8005590:	4411      	add	r1, r2
 8005592:	9107      	str	r1, [sp, #28]
 8005594:	462a      	mov	r2, r5
 8005596:	eb00 0e05 	add.w	lr, r0, r5
 800559a:	210a      	movs	r1, #10
 800559c:	4572      	cmp	r2, lr
 800559e:	d113      	bne.n	80055c8 <_strtod_l+0x258>
 80055a0:	182a      	adds	r2, r5, r0
 80055a2:	2a08      	cmp	r2, #8
 80055a4:	f105 0501 	add.w	r5, r5, #1
 80055a8:	4405      	add	r5, r0
 80055aa:	dc1c      	bgt.n	80055e6 <_strtod_l+0x276>
 80055ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055ae:	220a      	movs	r2, #10
 80055b0:	fb02 3301 	mla	r3, r2, r1, r3
 80055b4:	9309      	str	r3, [sp, #36]	; 0x24
 80055b6:	2200      	movs	r2, #0
 80055b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80055ba:	1c59      	adds	r1, r3, #1
 80055bc:	911d      	str	r1, [sp, #116]	; 0x74
 80055be:	785b      	ldrb	r3, [r3, #1]
 80055c0:	4610      	mov	r0, r2
 80055c2:	e7c9      	b.n	8005558 <_strtod_l+0x1e8>
 80055c4:	4638      	mov	r0, r7
 80055c6:	e7d2      	b.n	800556e <_strtod_l+0x1fe>
 80055c8:	2a08      	cmp	r2, #8
 80055ca:	dc04      	bgt.n	80055d6 <_strtod_l+0x266>
 80055cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80055ce:	434e      	muls	r6, r1
 80055d0:	9609      	str	r6, [sp, #36]	; 0x24
 80055d2:	3201      	adds	r2, #1
 80055d4:	e7e2      	b.n	800559c <_strtod_l+0x22c>
 80055d6:	f102 0c01 	add.w	ip, r2, #1
 80055da:	f1bc 0f10 	cmp.w	ip, #16
 80055de:	bfd8      	it	le
 80055e0:	fb01 f909 	mulle.w	r9, r1, r9
 80055e4:	e7f5      	b.n	80055d2 <_strtod_l+0x262>
 80055e6:	2d10      	cmp	r5, #16
 80055e8:	bfdc      	itt	le
 80055ea:	220a      	movle	r2, #10
 80055ec:	fb02 3909 	mlale	r9, r2, r9, r3
 80055f0:	e7e1      	b.n	80055b6 <_strtod_l+0x246>
 80055f2:	2300      	movs	r3, #0
 80055f4:	9307      	str	r3, [sp, #28]
 80055f6:	2201      	movs	r2, #1
 80055f8:	e77c      	b.n	80054f4 <_strtod_l+0x184>
 80055fa:	f04f 0c00 	mov.w	ip, #0
 80055fe:	f108 0302 	add.w	r3, r8, #2
 8005602:	931d      	str	r3, [sp, #116]	; 0x74
 8005604:	f898 3002 	ldrb.w	r3, [r8, #2]
 8005608:	e785      	b.n	8005516 <_strtod_l+0x1a6>
 800560a:	f04f 0c01 	mov.w	ip, #1
 800560e:	e7f6      	b.n	80055fe <_strtod_l+0x28e>
 8005610:	080095c8 	.word	0x080095c8
 8005614:	08009274 	.word	0x08009274
 8005618:	7ff00000 	.word	0x7ff00000
 800561c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800561e:	1c59      	adds	r1, r3, #1
 8005620:	911d      	str	r1, [sp, #116]	; 0x74
 8005622:	785b      	ldrb	r3, [r3, #1]
 8005624:	2b30      	cmp	r3, #48	; 0x30
 8005626:	d0f9      	beq.n	800561c <_strtod_l+0x2ac>
 8005628:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800562c:	2908      	cmp	r1, #8
 800562e:	f63f af79 	bhi.w	8005524 <_strtod_l+0x1b4>
 8005632:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005636:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005638:	9308      	str	r3, [sp, #32]
 800563a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800563c:	1c59      	adds	r1, r3, #1
 800563e:	911d      	str	r1, [sp, #116]	; 0x74
 8005640:	785b      	ldrb	r3, [r3, #1]
 8005642:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8005646:	2e09      	cmp	r6, #9
 8005648:	d937      	bls.n	80056ba <_strtod_l+0x34a>
 800564a:	9e08      	ldr	r6, [sp, #32]
 800564c:	1b89      	subs	r1, r1, r6
 800564e:	2908      	cmp	r1, #8
 8005650:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005654:	dc02      	bgt.n	800565c <_strtod_l+0x2ec>
 8005656:	4576      	cmp	r6, lr
 8005658:	bfa8      	it	ge
 800565a:	4676      	movge	r6, lr
 800565c:	f1bc 0f00 	cmp.w	ip, #0
 8005660:	d000      	beq.n	8005664 <_strtod_l+0x2f4>
 8005662:	4276      	negs	r6, r6
 8005664:	2d00      	cmp	r5, #0
 8005666:	d14f      	bne.n	8005708 <_strtod_l+0x398>
 8005668:	9904      	ldr	r1, [sp, #16]
 800566a:	4301      	orrs	r1, r0
 800566c:	f47f aec2 	bne.w	80053f4 <_strtod_l+0x84>
 8005670:	2a00      	cmp	r2, #0
 8005672:	f47f aedb 	bne.w	800542c <_strtod_l+0xbc>
 8005676:	2b69      	cmp	r3, #105	; 0x69
 8005678:	d027      	beq.n	80056ca <_strtod_l+0x35a>
 800567a:	dc24      	bgt.n	80056c6 <_strtod_l+0x356>
 800567c:	2b49      	cmp	r3, #73	; 0x49
 800567e:	d024      	beq.n	80056ca <_strtod_l+0x35a>
 8005680:	2b4e      	cmp	r3, #78	; 0x4e
 8005682:	f47f aed3 	bne.w	800542c <_strtod_l+0xbc>
 8005686:	499e      	ldr	r1, [pc, #632]	; (8005900 <_strtod_l+0x590>)
 8005688:	a81d      	add	r0, sp, #116	; 0x74
 800568a:	f001 ffcb 	bl	8007624 <__match>
 800568e:	2800      	cmp	r0, #0
 8005690:	f43f aecc 	beq.w	800542c <_strtod_l+0xbc>
 8005694:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b28      	cmp	r3, #40	; 0x28
 800569a:	d12d      	bne.n	80056f8 <_strtod_l+0x388>
 800569c:	4999      	ldr	r1, [pc, #612]	; (8005904 <_strtod_l+0x594>)
 800569e:	aa20      	add	r2, sp, #128	; 0x80
 80056a0:	a81d      	add	r0, sp, #116	; 0x74
 80056a2:	f001 ffd3 	bl	800764c <__hexnan>
 80056a6:	2805      	cmp	r0, #5
 80056a8:	d126      	bne.n	80056f8 <_strtod_l+0x388>
 80056aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056ac:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80056b0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80056b4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80056b8:	e69c      	b.n	80053f4 <_strtod_l+0x84>
 80056ba:	210a      	movs	r1, #10
 80056bc:	fb01 3e0e 	mla	lr, r1, lr, r3
 80056c0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80056c4:	e7b9      	b.n	800563a <_strtod_l+0x2ca>
 80056c6:	2b6e      	cmp	r3, #110	; 0x6e
 80056c8:	e7db      	b.n	8005682 <_strtod_l+0x312>
 80056ca:	498f      	ldr	r1, [pc, #572]	; (8005908 <_strtod_l+0x598>)
 80056cc:	a81d      	add	r0, sp, #116	; 0x74
 80056ce:	f001 ffa9 	bl	8007624 <__match>
 80056d2:	2800      	cmp	r0, #0
 80056d4:	f43f aeaa 	beq.w	800542c <_strtod_l+0xbc>
 80056d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80056da:	498c      	ldr	r1, [pc, #560]	; (800590c <_strtod_l+0x59c>)
 80056dc:	3b01      	subs	r3, #1
 80056de:	a81d      	add	r0, sp, #116	; 0x74
 80056e0:	931d      	str	r3, [sp, #116]	; 0x74
 80056e2:	f001 ff9f 	bl	8007624 <__match>
 80056e6:	b910      	cbnz	r0, 80056ee <_strtod_l+0x37e>
 80056e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80056ea:	3301      	adds	r3, #1
 80056ec:	931d      	str	r3, [sp, #116]	; 0x74
 80056ee:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800591c <_strtod_l+0x5ac>
 80056f2:	f04f 0a00 	mov.w	sl, #0
 80056f6:	e67d      	b.n	80053f4 <_strtod_l+0x84>
 80056f8:	4885      	ldr	r0, [pc, #532]	; (8005910 <_strtod_l+0x5a0>)
 80056fa:	f003 f89d 	bl	8008838 <nan>
 80056fe:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005702:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005706:	e675      	b.n	80053f4 <_strtod_l+0x84>
 8005708:	9b07      	ldr	r3, [sp, #28]
 800570a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800570c:	1af3      	subs	r3, r6, r3
 800570e:	2f00      	cmp	r7, #0
 8005710:	bf08      	it	eq
 8005712:	462f      	moveq	r7, r5
 8005714:	2d10      	cmp	r5, #16
 8005716:	9308      	str	r3, [sp, #32]
 8005718:	46a8      	mov	r8, r5
 800571a:	bfa8      	it	ge
 800571c:	f04f 0810 	movge.w	r8, #16
 8005720:	f7fa fef0 	bl	8000504 <__aeabi_ui2d>
 8005724:	2d09      	cmp	r5, #9
 8005726:	4682      	mov	sl, r0
 8005728:	468b      	mov	fp, r1
 800572a:	dd13      	ble.n	8005754 <_strtod_l+0x3e4>
 800572c:	4b79      	ldr	r3, [pc, #484]	; (8005914 <_strtod_l+0x5a4>)
 800572e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005732:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005736:	f7fa ff5f 	bl	80005f8 <__aeabi_dmul>
 800573a:	4682      	mov	sl, r0
 800573c:	4648      	mov	r0, r9
 800573e:	468b      	mov	fp, r1
 8005740:	f7fa fee0 	bl	8000504 <__aeabi_ui2d>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	4650      	mov	r0, sl
 800574a:	4659      	mov	r1, fp
 800574c:	f7fa fd9e 	bl	800028c <__adddf3>
 8005750:	4682      	mov	sl, r0
 8005752:	468b      	mov	fp, r1
 8005754:	2d0f      	cmp	r5, #15
 8005756:	dc38      	bgt.n	80057ca <_strtod_l+0x45a>
 8005758:	9b08      	ldr	r3, [sp, #32]
 800575a:	2b00      	cmp	r3, #0
 800575c:	f43f ae4a 	beq.w	80053f4 <_strtod_l+0x84>
 8005760:	dd24      	ble.n	80057ac <_strtod_l+0x43c>
 8005762:	2b16      	cmp	r3, #22
 8005764:	dc0b      	bgt.n	800577e <_strtod_l+0x40e>
 8005766:	4d6b      	ldr	r5, [pc, #428]	; (8005914 <_strtod_l+0x5a4>)
 8005768:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800576c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005770:	4652      	mov	r2, sl
 8005772:	465b      	mov	r3, fp
 8005774:	f7fa ff40 	bl	80005f8 <__aeabi_dmul>
 8005778:	4682      	mov	sl, r0
 800577a:	468b      	mov	fp, r1
 800577c:	e63a      	b.n	80053f4 <_strtod_l+0x84>
 800577e:	9a08      	ldr	r2, [sp, #32]
 8005780:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005784:	4293      	cmp	r3, r2
 8005786:	db20      	blt.n	80057ca <_strtod_l+0x45a>
 8005788:	4c62      	ldr	r4, [pc, #392]	; (8005914 <_strtod_l+0x5a4>)
 800578a:	f1c5 050f 	rsb	r5, r5, #15
 800578e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005792:	4652      	mov	r2, sl
 8005794:	465b      	mov	r3, fp
 8005796:	e9d1 0100 	ldrd	r0, r1, [r1]
 800579a:	f7fa ff2d 	bl	80005f8 <__aeabi_dmul>
 800579e:	9b08      	ldr	r3, [sp, #32]
 80057a0:	1b5d      	subs	r5, r3, r5
 80057a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80057a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80057aa:	e7e3      	b.n	8005774 <_strtod_l+0x404>
 80057ac:	9b08      	ldr	r3, [sp, #32]
 80057ae:	3316      	adds	r3, #22
 80057b0:	db0b      	blt.n	80057ca <_strtod_l+0x45a>
 80057b2:	9b07      	ldr	r3, [sp, #28]
 80057b4:	4a57      	ldr	r2, [pc, #348]	; (8005914 <_strtod_l+0x5a4>)
 80057b6:	1b9e      	subs	r6, r3, r6
 80057b8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80057bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80057c0:	4650      	mov	r0, sl
 80057c2:	4659      	mov	r1, fp
 80057c4:	f7fb f842 	bl	800084c <__aeabi_ddiv>
 80057c8:	e7d6      	b.n	8005778 <_strtod_l+0x408>
 80057ca:	9b08      	ldr	r3, [sp, #32]
 80057cc:	eba5 0808 	sub.w	r8, r5, r8
 80057d0:	4498      	add	r8, r3
 80057d2:	f1b8 0f00 	cmp.w	r8, #0
 80057d6:	dd71      	ble.n	80058bc <_strtod_l+0x54c>
 80057d8:	f018 030f 	ands.w	r3, r8, #15
 80057dc:	d00a      	beq.n	80057f4 <_strtod_l+0x484>
 80057de:	494d      	ldr	r1, [pc, #308]	; (8005914 <_strtod_l+0x5a4>)
 80057e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80057e4:	4652      	mov	r2, sl
 80057e6:	465b      	mov	r3, fp
 80057e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057ec:	f7fa ff04 	bl	80005f8 <__aeabi_dmul>
 80057f0:	4682      	mov	sl, r0
 80057f2:	468b      	mov	fp, r1
 80057f4:	f038 080f 	bics.w	r8, r8, #15
 80057f8:	d04d      	beq.n	8005896 <_strtod_l+0x526>
 80057fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80057fe:	dd22      	ble.n	8005846 <_strtod_l+0x4d6>
 8005800:	2500      	movs	r5, #0
 8005802:	462e      	mov	r6, r5
 8005804:	9509      	str	r5, [sp, #36]	; 0x24
 8005806:	9507      	str	r5, [sp, #28]
 8005808:	2322      	movs	r3, #34	; 0x22
 800580a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800591c <_strtod_l+0x5ac>
 800580e:	6023      	str	r3, [r4, #0]
 8005810:	f04f 0a00 	mov.w	sl, #0
 8005814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005816:	2b00      	cmp	r3, #0
 8005818:	f43f adec 	beq.w	80053f4 <_strtod_l+0x84>
 800581c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800581e:	4620      	mov	r0, r4
 8005820:	f002 f820 	bl	8007864 <_Bfree>
 8005824:	9907      	ldr	r1, [sp, #28]
 8005826:	4620      	mov	r0, r4
 8005828:	f002 f81c 	bl	8007864 <_Bfree>
 800582c:	4631      	mov	r1, r6
 800582e:	4620      	mov	r0, r4
 8005830:	f002 f818 	bl	8007864 <_Bfree>
 8005834:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005836:	4620      	mov	r0, r4
 8005838:	f002 f814 	bl	8007864 <_Bfree>
 800583c:	4629      	mov	r1, r5
 800583e:	4620      	mov	r0, r4
 8005840:	f002 f810 	bl	8007864 <_Bfree>
 8005844:	e5d6      	b.n	80053f4 <_strtod_l+0x84>
 8005846:	2300      	movs	r3, #0
 8005848:	ea4f 1828 	mov.w	r8, r8, asr #4
 800584c:	4650      	mov	r0, sl
 800584e:	4659      	mov	r1, fp
 8005850:	4699      	mov	r9, r3
 8005852:	f1b8 0f01 	cmp.w	r8, #1
 8005856:	dc21      	bgt.n	800589c <_strtod_l+0x52c>
 8005858:	b10b      	cbz	r3, 800585e <_strtod_l+0x4ee>
 800585a:	4682      	mov	sl, r0
 800585c:	468b      	mov	fp, r1
 800585e:	4b2e      	ldr	r3, [pc, #184]	; (8005918 <_strtod_l+0x5a8>)
 8005860:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005864:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005868:	4652      	mov	r2, sl
 800586a:	465b      	mov	r3, fp
 800586c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005870:	f7fa fec2 	bl	80005f8 <__aeabi_dmul>
 8005874:	4b29      	ldr	r3, [pc, #164]	; (800591c <_strtod_l+0x5ac>)
 8005876:	460a      	mov	r2, r1
 8005878:	400b      	ands	r3, r1
 800587a:	4929      	ldr	r1, [pc, #164]	; (8005920 <_strtod_l+0x5b0>)
 800587c:	428b      	cmp	r3, r1
 800587e:	4682      	mov	sl, r0
 8005880:	d8be      	bhi.n	8005800 <_strtod_l+0x490>
 8005882:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005886:	428b      	cmp	r3, r1
 8005888:	bf86      	itte	hi
 800588a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005924 <_strtod_l+0x5b4>
 800588e:	f04f 3aff 	movhi.w	sl, #4294967295
 8005892:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005896:	2300      	movs	r3, #0
 8005898:	9304      	str	r3, [sp, #16]
 800589a:	e081      	b.n	80059a0 <_strtod_l+0x630>
 800589c:	f018 0f01 	tst.w	r8, #1
 80058a0:	d007      	beq.n	80058b2 <_strtod_l+0x542>
 80058a2:	4b1d      	ldr	r3, [pc, #116]	; (8005918 <_strtod_l+0x5a8>)
 80058a4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80058a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ac:	f7fa fea4 	bl	80005f8 <__aeabi_dmul>
 80058b0:	2301      	movs	r3, #1
 80058b2:	f109 0901 	add.w	r9, r9, #1
 80058b6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80058ba:	e7ca      	b.n	8005852 <_strtod_l+0x4e2>
 80058bc:	d0eb      	beq.n	8005896 <_strtod_l+0x526>
 80058be:	f1c8 0800 	rsb	r8, r8, #0
 80058c2:	f018 020f 	ands.w	r2, r8, #15
 80058c6:	d00a      	beq.n	80058de <_strtod_l+0x56e>
 80058c8:	4b12      	ldr	r3, [pc, #72]	; (8005914 <_strtod_l+0x5a4>)
 80058ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058ce:	4650      	mov	r0, sl
 80058d0:	4659      	mov	r1, fp
 80058d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d6:	f7fa ffb9 	bl	800084c <__aeabi_ddiv>
 80058da:	4682      	mov	sl, r0
 80058dc:	468b      	mov	fp, r1
 80058de:	ea5f 1828 	movs.w	r8, r8, asr #4
 80058e2:	d0d8      	beq.n	8005896 <_strtod_l+0x526>
 80058e4:	f1b8 0f1f 	cmp.w	r8, #31
 80058e8:	dd1e      	ble.n	8005928 <_strtod_l+0x5b8>
 80058ea:	2500      	movs	r5, #0
 80058ec:	462e      	mov	r6, r5
 80058ee:	9509      	str	r5, [sp, #36]	; 0x24
 80058f0:	9507      	str	r5, [sp, #28]
 80058f2:	2322      	movs	r3, #34	; 0x22
 80058f4:	f04f 0a00 	mov.w	sl, #0
 80058f8:	f04f 0b00 	mov.w	fp, #0
 80058fc:	6023      	str	r3, [r4, #0]
 80058fe:	e789      	b.n	8005814 <_strtod_l+0x4a4>
 8005900:	08009245 	.word	0x08009245
 8005904:	08009288 	.word	0x08009288
 8005908:	0800923d 	.word	0x0800923d
 800590c:	08009480 	.word	0x08009480
 8005910:	0800937b 	.word	0x0800937b
 8005914:	08009668 	.word	0x08009668
 8005918:	08009640 	.word	0x08009640
 800591c:	7ff00000 	.word	0x7ff00000
 8005920:	7ca00000 	.word	0x7ca00000
 8005924:	7fefffff 	.word	0x7fefffff
 8005928:	f018 0310 	ands.w	r3, r8, #16
 800592c:	bf18      	it	ne
 800592e:	236a      	movne	r3, #106	; 0x6a
 8005930:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8005ce8 <_strtod_l+0x978>
 8005934:	9304      	str	r3, [sp, #16]
 8005936:	4650      	mov	r0, sl
 8005938:	4659      	mov	r1, fp
 800593a:	2300      	movs	r3, #0
 800593c:	f018 0f01 	tst.w	r8, #1
 8005940:	d004      	beq.n	800594c <_strtod_l+0x5dc>
 8005942:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005946:	f7fa fe57 	bl	80005f8 <__aeabi_dmul>
 800594a:	2301      	movs	r3, #1
 800594c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005950:	f109 0908 	add.w	r9, r9, #8
 8005954:	d1f2      	bne.n	800593c <_strtod_l+0x5cc>
 8005956:	b10b      	cbz	r3, 800595c <_strtod_l+0x5ec>
 8005958:	4682      	mov	sl, r0
 800595a:	468b      	mov	fp, r1
 800595c:	9b04      	ldr	r3, [sp, #16]
 800595e:	b1bb      	cbz	r3, 8005990 <_strtod_l+0x620>
 8005960:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005964:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005968:	2b00      	cmp	r3, #0
 800596a:	4659      	mov	r1, fp
 800596c:	dd10      	ble.n	8005990 <_strtod_l+0x620>
 800596e:	2b1f      	cmp	r3, #31
 8005970:	f340 8128 	ble.w	8005bc4 <_strtod_l+0x854>
 8005974:	2b34      	cmp	r3, #52	; 0x34
 8005976:	bfde      	ittt	le
 8005978:	3b20      	suble	r3, #32
 800597a:	f04f 32ff 	movle.w	r2, #4294967295
 800597e:	fa02 f303 	lslle.w	r3, r2, r3
 8005982:	f04f 0a00 	mov.w	sl, #0
 8005986:	bfcc      	ite	gt
 8005988:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800598c:	ea03 0b01 	andle.w	fp, r3, r1
 8005990:	2200      	movs	r2, #0
 8005992:	2300      	movs	r3, #0
 8005994:	4650      	mov	r0, sl
 8005996:	4659      	mov	r1, fp
 8005998:	f7fb f896 	bl	8000ac8 <__aeabi_dcmpeq>
 800599c:	2800      	cmp	r0, #0
 800599e:	d1a4      	bne.n	80058ea <_strtod_l+0x57a>
 80059a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059a6:	462b      	mov	r3, r5
 80059a8:	463a      	mov	r2, r7
 80059aa:	4620      	mov	r0, r4
 80059ac:	f001 ffc6 	bl	800793c <__s2b>
 80059b0:	9009      	str	r0, [sp, #36]	; 0x24
 80059b2:	2800      	cmp	r0, #0
 80059b4:	f43f af24 	beq.w	8005800 <_strtod_l+0x490>
 80059b8:	9b07      	ldr	r3, [sp, #28]
 80059ba:	1b9e      	subs	r6, r3, r6
 80059bc:	9b08      	ldr	r3, [sp, #32]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	bfb4      	ite	lt
 80059c2:	4633      	movlt	r3, r6
 80059c4:	2300      	movge	r3, #0
 80059c6:	9310      	str	r3, [sp, #64]	; 0x40
 80059c8:	9b08      	ldr	r3, [sp, #32]
 80059ca:	2500      	movs	r5, #0
 80059cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80059d0:	9318      	str	r3, [sp, #96]	; 0x60
 80059d2:	462e      	mov	r6, r5
 80059d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059d6:	4620      	mov	r0, r4
 80059d8:	6859      	ldr	r1, [r3, #4]
 80059da:	f001 ff03 	bl	80077e4 <_Balloc>
 80059de:	9007      	str	r0, [sp, #28]
 80059e0:	2800      	cmp	r0, #0
 80059e2:	f43f af11 	beq.w	8005808 <_strtod_l+0x498>
 80059e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e8:	691a      	ldr	r2, [r3, #16]
 80059ea:	3202      	adds	r2, #2
 80059ec:	f103 010c 	add.w	r1, r3, #12
 80059f0:	0092      	lsls	r2, r2, #2
 80059f2:	300c      	adds	r0, #12
 80059f4:	f001 fee8 	bl	80077c8 <memcpy>
 80059f8:	ec4b ab10 	vmov	d0, sl, fp
 80059fc:	aa20      	add	r2, sp, #128	; 0x80
 80059fe:	a91f      	add	r1, sp, #124	; 0x7c
 8005a00:	4620      	mov	r0, r4
 8005a02:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005a06:	f002 fad5 	bl	8007fb4 <__d2b>
 8005a0a:	901e      	str	r0, [sp, #120]	; 0x78
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	f43f aefb 	beq.w	8005808 <_strtod_l+0x498>
 8005a12:	2101      	movs	r1, #1
 8005a14:	4620      	mov	r0, r4
 8005a16:	f002 f82b 	bl	8007a70 <__i2b>
 8005a1a:	4606      	mov	r6, r0
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	f43f aef3 	beq.w	8005808 <_strtod_l+0x498>
 8005a22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005a24:	9904      	ldr	r1, [sp, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	bfab      	itete	ge
 8005a2a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8005a2c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8005a2e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8005a30:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8005a34:	bfac      	ite	ge
 8005a36:	eb03 0902 	addge.w	r9, r3, r2
 8005a3a:	1ad7      	sublt	r7, r2, r3
 8005a3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a3e:	eba3 0801 	sub.w	r8, r3, r1
 8005a42:	4490      	add	r8, r2
 8005a44:	4ba3      	ldr	r3, [pc, #652]	; (8005cd4 <_strtod_l+0x964>)
 8005a46:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a4a:	4598      	cmp	r8, r3
 8005a4c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005a50:	f280 80cc 	bge.w	8005bec <_strtod_l+0x87c>
 8005a54:	eba3 0308 	sub.w	r3, r3, r8
 8005a58:	2b1f      	cmp	r3, #31
 8005a5a:	eba2 0203 	sub.w	r2, r2, r3
 8005a5e:	f04f 0101 	mov.w	r1, #1
 8005a62:	f300 80b6 	bgt.w	8005bd2 <_strtod_l+0x862>
 8005a66:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6a:	9311      	str	r3, [sp, #68]	; 0x44
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	930c      	str	r3, [sp, #48]	; 0x30
 8005a70:	eb09 0802 	add.w	r8, r9, r2
 8005a74:	9b04      	ldr	r3, [sp, #16]
 8005a76:	45c1      	cmp	r9, r8
 8005a78:	4417      	add	r7, r2
 8005a7a:	441f      	add	r7, r3
 8005a7c:	464b      	mov	r3, r9
 8005a7e:	bfa8      	it	ge
 8005a80:	4643      	movge	r3, r8
 8005a82:	42bb      	cmp	r3, r7
 8005a84:	bfa8      	it	ge
 8005a86:	463b      	movge	r3, r7
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	bfc2      	ittt	gt
 8005a8c:	eba8 0803 	subgt.w	r8, r8, r3
 8005a90:	1aff      	subgt	r7, r7, r3
 8005a92:	eba9 0903 	subgt.w	r9, r9, r3
 8005a96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	dd17      	ble.n	8005acc <_strtod_l+0x75c>
 8005a9c:	4631      	mov	r1, r6
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	f002 f8a1 	bl	8007be8 <__pow5mult>
 8005aa6:	4606      	mov	r6, r0
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	f43f aead 	beq.w	8005808 <_strtod_l+0x498>
 8005aae:	4601      	mov	r1, r0
 8005ab0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f001 fff2 	bl	8007a9c <__multiply>
 8005ab8:	900f      	str	r0, [sp, #60]	; 0x3c
 8005aba:	2800      	cmp	r0, #0
 8005abc:	f43f aea4 	beq.w	8005808 <_strtod_l+0x498>
 8005ac0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f001 fece 	bl	8007864 <_Bfree>
 8005ac8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005aca:	931e      	str	r3, [sp, #120]	; 0x78
 8005acc:	f1b8 0f00 	cmp.w	r8, #0
 8005ad0:	f300 8091 	bgt.w	8005bf6 <_strtod_l+0x886>
 8005ad4:	9b08      	ldr	r3, [sp, #32]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	dd08      	ble.n	8005aec <_strtod_l+0x77c>
 8005ada:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005adc:	9907      	ldr	r1, [sp, #28]
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f002 f882 	bl	8007be8 <__pow5mult>
 8005ae4:	9007      	str	r0, [sp, #28]
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	f43f ae8e 	beq.w	8005808 <_strtod_l+0x498>
 8005aec:	2f00      	cmp	r7, #0
 8005aee:	dd08      	ble.n	8005b02 <_strtod_l+0x792>
 8005af0:	9907      	ldr	r1, [sp, #28]
 8005af2:	463a      	mov	r2, r7
 8005af4:	4620      	mov	r0, r4
 8005af6:	f002 f8d1 	bl	8007c9c <__lshift>
 8005afa:	9007      	str	r0, [sp, #28]
 8005afc:	2800      	cmp	r0, #0
 8005afe:	f43f ae83 	beq.w	8005808 <_strtod_l+0x498>
 8005b02:	f1b9 0f00 	cmp.w	r9, #0
 8005b06:	dd08      	ble.n	8005b1a <_strtod_l+0x7aa>
 8005b08:	4631      	mov	r1, r6
 8005b0a:	464a      	mov	r2, r9
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	f002 f8c5 	bl	8007c9c <__lshift>
 8005b12:	4606      	mov	r6, r0
 8005b14:	2800      	cmp	r0, #0
 8005b16:	f43f ae77 	beq.w	8005808 <_strtod_l+0x498>
 8005b1a:	9a07      	ldr	r2, [sp, #28]
 8005b1c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005b1e:	4620      	mov	r0, r4
 8005b20:	f002 f944 	bl	8007dac <__mdiff>
 8005b24:	4605      	mov	r5, r0
 8005b26:	2800      	cmp	r0, #0
 8005b28:	f43f ae6e 	beq.w	8005808 <_strtod_l+0x498>
 8005b2c:	68c3      	ldr	r3, [r0, #12]
 8005b2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b30:	2300      	movs	r3, #0
 8005b32:	60c3      	str	r3, [r0, #12]
 8005b34:	4631      	mov	r1, r6
 8005b36:	f002 f91d 	bl	8007d74 <__mcmp>
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	da65      	bge.n	8005c0a <_strtod_l+0x89a>
 8005b3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b40:	ea53 030a 	orrs.w	r3, r3, sl
 8005b44:	f040 8087 	bne.w	8005c56 <_strtod_l+0x8e6>
 8005b48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f040 8082 	bne.w	8005c56 <_strtod_l+0x8e6>
 8005b52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005b56:	0d1b      	lsrs	r3, r3, #20
 8005b58:	051b      	lsls	r3, r3, #20
 8005b5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005b5e:	d97a      	bls.n	8005c56 <_strtod_l+0x8e6>
 8005b60:	696b      	ldr	r3, [r5, #20]
 8005b62:	b913      	cbnz	r3, 8005b6a <_strtod_l+0x7fa>
 8005b64:	692b      	ldr	r3, [r5, #16]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	dd75      	ble.n	8005c56 <_strtod_l+0x8e6>
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f002 f894 	bl	8007c9c <__lshift>
 8005b74:	4631      	mov	r1, r6
 8005b76:	4605      	mov	r5, r0
 8005b78:	f002 f8fc 	bl	8007d74 <__mcmp>
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	dd6a      	ble.n	8005c56 <_strtod_l+0x8e6>
 8005b80:	9904      	ldr	r1, [sp, #16]
 8005b82:	4a55      	ldr	r2, [pc, #340]	; (8005cd8 <_strtod_l+0x968>)
 8005b84:	465b      	mov	r3, fp
 8005b86:	2900      	cmp	r1, #0
 8005b88:	f000 8085 	beq.w	8005c96 <_strtod_l+0x926>
 8005b8c:	ea02 010b 	and.w	r1, r2, fp
 8005b90:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005b94:	dc7f      	bgt.n	8005c96 <_strtod_l+0x926>
 8005b96:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005b9a:	f77f aeaa 	ble.w	80058f2 <_strtod_l+0x582>
 8005b9e:	4a4f      	ldr	r2, [pc, #316]	; (8005cdc <_strtod_l+0x96c>)
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8005ba6:	4650      	mov	r0, sl
 8005ba8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8005bac:	4659      	mov	r1, fp
 8005bae:	f7fa fd23 	bl	80005f8 <__aeabi_dmul>
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4303      	orrs	r3, r0
 8005bb6:	bf08      	it	eq
 8005bb8:	2322      	moveq	r3, #34	; 0x22
 8005bba:	4682      	mov	sl, r0
 8005bbc:	468b      	mov	fp, r1
 8005bbe:	bf08      	it	eq
 8005bc0:	6023      	streq	r3, [r4, #0]
 8005bc2:	e62b      	b.n	800581c <_strtod_l+0x4ac>
 8005bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bcc:	ea03 0a0a 	and.w	sl, r3, sl
 8005bd0:	e6de      	b.n	8005990 <_strtod_l+0x620>
 8005bd2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005bd6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005bda:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005bde:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005be2:	fa01 f308 	lsl.w	r3, r1, r8
 8005be6:	930c      	str	r3, [sp, #48]	; 0x30
 8005be8:	9111      	str	r1, [sp, #68]	; 0x44
 8005bea:	e741      	b.n	8005a70 <_strtod_l+0x700>
 8005bec:	2300      	movs	r3, #0
 8005bee:	930c      	str	r3, [sp, #48]	; 0x30
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	9311      	str	r3, [sp, #68]	; 0x44
 8005bf4:	e73c      	b.n	8005a70 <_strtod_l+0x700>
 8005bf6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005bf8:	4642      	mov	r2, r8
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	f002 f84e 	bl	8007c9c <__lshift>
 8005c00:	901e      	str	r0, [sp, #120]	; 0x78
 8005c02:	2800      	cmp	r0, #0
 8005c04:	f47f af66 	bne.w	8005ad4 <_strtod_l+0x764>
 8005c08:	e5fe      	b.n	8005808 <_strtod_l+0x498>
 8005c0a:	465f      	mov	r7, fp
 8005c0c:	d16e      	bne.n	8005cec <_strtod_l+0x97c>
 8005c0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c14:	b342      	cbz	r2, 8005c68 <_strtod_l+0x8f8>
 8005c16:	4a32      	ldr	r2, [pc, #200]	; (8005ce0 <_strtod_l+0x970>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d128      	bne.n	8005c6e <_strtod_l+0x8fe>
 8005c1c:	9b04      	ldr	r3, [sp, #16]
 8005c1e:	4650      	mov	r0, sl
 8005c20:	b1eb      	cbz	r3, 8005c5e <_strtod_l+0x8ee>
 8005c22:	4a2d      	ldr	r2, [pc, #180]	; (8005cd8 <_strtod_l+0x968>)
 8005c24:	403a      	ands	r2, r7
 8005c26:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005c2a:	f04f 31ff 	mov.w	r1, #4294967295
 8005c2e:	d819      	bhi.n	8005c64 <_strtod_l+0x8f4>
 8005c30:	0d12      	lsrs	r2, r2, #20
 8005c32:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005c36:	fa01 f303 	lsl.w	r3, r1, r3
 8005c3a:	4298      	cmp	r0, r3
 8005c3c:	d117      	bne.n	8005c6e <_strtod_l+0x8fe>
 8005c3e:	4b29      	ldr	r3, [pc, #164]	; (8005ce4 <_strtod_l+0x974>)
 8005c40:	429f      	cmp	r7, r3
 8005c42:	d102      	bne.n	8005c4a <_strtod_l+0x8da>
 8005c44:	3001      	adds	r0, #1
 8005c46:	f43f addf 	beq.w	8005808 <_strtod_l+0x498>
 8005c4a:	4b23      	ldr	r3, [pc, #140]	; (8005cd8 <_strtod_l+0x968>)
 8005c4c:	403b      	ands	r3, r7
 8005c4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005c52:	f04f 0a00 	mov.w	sl, #0
 8005c56:	9b04      	ldr	r3, [sp, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1a0      	bne.n	8005b9e <_strtod_l+0x82e>
 8005c5c:	e5de      	b.n	800581c <_strtod_l+0x4ac>
 8005c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c62:	e7ea      	b.n	8005c3a <_strtod_l+0x8ca>
 8005c64:	460b      	mov	r3, r1
 8005c66:	e7e8      	b.n	8005c3a <_strtod_l+0x8ca>
 8005c68:	ea53 030a 	orrs.w	r3, r3, sl
 8005c6c:	d088      	beq.n	8005b80 <_strtod_l+0x810>
 8005c6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c70:	b1db      	cbz	r3, 8005caa <_strtod_l+0x93a>
 8005c72:	423b      	tst	r3, r7
 8005c74:	d0ef      	beq.n	8005c56 <_strtod_l+0x8e6>
 8005c76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c78:	9a04      	ldr	r2, [sp, #16]
 8005c7a:	4650      	mov	r0, sl
 8005c7c:	4659      	mov	r1, fp
 8005c7e:	b1c3      	cbz	r3, 8005cb2 <_strtod_l+0x942>
 8005c80:	f7ff fb5a 	bl	8005338 <sulp>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c8c:	f7fa fafe 	bl	800028c <__adddf3>
 8005c90:	4682      	mov	sl, r0
 8005c92:	468b      	mov	fp, r1
 8005c94:	e7df      	b.n	8005c56 <_strtod_l+0x8e6>
 8005c96:	4013      	ands	r3, r2
 8005c98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005c9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005ca0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005ca4:	f04f 3aff 	mov.w	sl, #4294967295
 8005ca8:	e7d5      	b.n	8005c56 <_strtod_l+0x8e6>
 8005caa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005cac:	ea13 0f0a 	tst.w	r3, sl
 8005cb0:	e7e0      	b.n	8005c74 <_strtod_l+0x904>
 8005cb2:	f7ff fb41 	bl	8005338 <sulp>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	460b      	mov	r3, r1
 8005cba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005cbe:	f7fa fae3 	bl	8000288 <__aeabi_dsub>
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	4682      	mov	sl, r0
 8005cc8:	468b      	mov	fp, r1
 8005cca:	f7fa fefd 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	d0c1      	beq.n	8005c56 <_strtod_l+0x8e6>
 8005cd2:	e60e      	b.n	80058f2 <_strtod_l+0x582>
 8005cd4:	fffffc02 	.word	0xfffffc02
 8005cd8:	7ff00000 	.word	0x7ff00000
 8005cdc:	39500000 	.word	0x39500000
 8005ce0:	000fffff 	.word	0x000fffff
 8005ce4:	7fefffff 	.word	0x7fefffff
 8005ce8:	080092a0 	.word	0x080092a0
 8005cec:	4631      	mov	r1, r6
 8005cee:	4628      	mov	r0, r5
 8005cf0:	f002 f9bc 	bl	800806c <__ratio>
 8005cf4:	ec59 8b10 	vmov	r8, r9, d0
 8005cf8:	ee10 0a10 	vmov	r0, s0
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d02:	4649      	mov	r1, r9
 8005d04:	f7fa fef4 	bl	8000af0 <__aeabi_dcmple>
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	d07c      	beq.n	8005e06 <_strtod_l+0xa96>
 8005d0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d04c      	beq.n	8005dac <_strtod_l+0xa3c>
 8005d12:	4b95      	ldr	r3, [pc, #596]	; (8005f68 <_strtod_l+0xbf8>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005d1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005f68 <_strtod_l+0xbf8>
 8005d1e:	f04f 0800 	mov.w	r8, #0
 8005d22:	4b92      	ldr	r3, [pc, #584]	; (8005f6c <_strtod_l+0xbfc>)
 8005d24:	403b      	ands	r3, r7
 8005d26:	9311      	str	r3, [sp, #68]	; 0x44
 8005d28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005d2a:	4b91      	ldr	r3, [pc, #580]	; (8005f70 <_strtod_l+0xc00>)
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	f040 80b2 	bne.w	8005e96 <_strtod_l+0xb26>
 8005d32:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d3a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005d3e:	ec4b ab10 	vmov	d0, sl, fp
 8005d42:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8005d46:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005d4a:	f002 f8b7 	bl	8007ebc <__ulp>
 8005d4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d52:	ec53 2b10 	vmov	r2, r3, d0
 8005d56:	f7fa fc4f 	bl	80005f8 <__aeabi_dmul>
 8005d5a:	4652      	mov	r2, sl
 8005d5c:	465b      	mov	r3, fp
 8005d5e:	f7fa fa95 	bl	800028c <__adddf3>
 8005d62:	460b      	mov	r3, r1
 8005d64:	4981      	ldr	r1, [pc, #516]	; (8005f6c <_strtod_l+0xbfc>)
 8005d66:	4a83      	ldr	r2, [pc, #524]	; (8005f74 <_strtod_l+0xc04>)
 8005d68:	4019      	ands	r1, r3
 8005d6a:	4291      	cmp	r1, r2
 8005d6c:	4682      	mov	sl, r0
 8005d6e:	d95e      	bls.n	8005e2e <_strtod_l+0xabe>
 8005d70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d72:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d103      	bne.n	8005d82 <_strtod_l+0xa12>
 8005d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	f43f ad43 	beq.w	8005808 <_strtod_l+0x498>
 8005d82:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8005f80 <_strtod_l+0xc10>
 8005d86:	f04f 3aff 	mov.w	sl, #4294967295
 8005d8a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	f001 fd69 	bl	8007864 <_Bfree>
 8005d92:	9907      	ldr	r1, [sp, #28]
 8005d94:	4620      	mov	r0, r4
 8005d96:	f001 fd65 	bl	8007864 <_Bfree>
 8005d9a:	4631      	mov	r1, r6
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f001 fd61 	bl	8007864 <_Bfree>
 8005da2:	4629      	mov	r1, r5
 8005da4:	4620      	mov	r0, r4
 8005da6:	f001 fd5d 	bl	8007864 <_Bfree>
 8005daa:	e613      	b.n	80059d4 <_strtod_l+0x664>
 8005dac:	f1ba 0f00 	cmp.w	sl, #0
 8005db0:	d11b      	bne.n	8005dea <_strtod_l+0xa7a>
 8005db2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005db6:	b9f3      	cbnz	r3, 8005df6 <_strtod_l+0xa86>
 8005db8:	4b6b      	ldr	r3, [pc, #428]	; (8005f68 <_strtod_l+0xbf8>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	4640      	mov	r0, r8
 8005dbe:	4649      	mov	r1, r9
 8005dc0:	f7fa fe8c 	bl	8000adc <__aeabi_dcmplt>
 8005dc4:	b9d0      	cbnz	r0, 8005dfc <_strtod_l+0xa8c>
 8005dc6:	4640      	mov	r0, r8
 8005dc8:	4649      	mov	r1, r9
 8005dca:	4b6b      	ldr	r3, [pc, #428]	; (8005f78 <_strtod_l+0xc08>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f7fa fc13 	bl	80005f8 <__aeabi_dmul>
 8005dd2:	4680      	mov	r8, r0
 8005dd4:	4689      	mov	r9, r1
 8005dd6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005dda:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8005dde:	931b      	str	r3, [sp, #108]	; 0x6c
 8005de0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8005de4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005de8:	e79b      	b.n	8005d22 <_strtod_l+0x9b2>
 8005dea:	f1ba 0f01 	cmp.w	sl, #1
 8005dee:	d102      	bne.n	8005df6 <_strtod_l+0xa86>
 8005df0:	2f00      	cmp	r7, #0
 8005df2:	f43f ad7e 	beq.w	80058f2 <_strtod_l+0x582>
 8005df6:	4b61      	ldr	r3, [pc, #388]	; (8005f7c <_strtod_l+0xc0c>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	e78c      	b.n	8005d16 <_strtod_l+0x9a6>
 8005dfc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005f78 <_strtod_l+0xc08>
 8005e00:	f04f 0800 	mov.w	r8, #0
 8005e04:	e7e7      	b.n	8005dd6 <_strtod_l+0xa66>
 8005e06:	4b5c      	ldr	r3, [pc, #368]	; (8005f78 <_strtod_l+0xc08>)
 8005e08:	4640      	mov	r0, r8
 8005e0a:	4649      	mov	r1, r9
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f7fa fbf3 	bl	80005f8 <__aeabi_dmul>
 8005e12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e14:	4680      	mov	r8, r0
 8005e16:	4689      	mov	r9, r1
 8005e18:	b933      	cbnz	r3, 8005e28 <_strtod_l+0xab8>
 8005e1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e1e:	9012      	str	r0, [sp, #72]	; 0x48
 8005e20:	9313      	str	r3, [sp, #76]	; 0x4c
 8005e22:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005e26:	e7dd      	b.n	8005de4 <_strtod_l+0xa74>
 8005e28:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8005e2c:	e7f9      	b.n	8005e22 <_strtod_l+0xab2>
 8005e2e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005e32:	9b04      	ldr	r3, [sp, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1a8      	bne.n	8005d8a <_strtod_l+0xa1a>
 8005e38:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005e3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005e3e:	0d1b      	lsrs	r3, r3, #20
 8005e40:	051b      	lsls	r3, r3, #20
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d1a1      	bne.n	8005d8a <_strtod_l+0xa1a>
 8005e46:	4640      	mov	r0, r8
 8005e48:	4649      	mov	r1, r9
 8005e4a:	f7fa ff1d 	bl	8000c88 <__aeabi_d2lz>
 8005e4e:	f7fa fba5 	bl	800059c <__aeabi_l2d>
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	4640      	mov	r0, r8
 8005e58:	4649      	mov	r1, r9
 8005e5a:	f7fa fa15 	bl	8000288 <__aeabi_dsub>
 8005e5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e64:	ea43 030a 	orr.w	r3, r3, sl
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	4680      	mov	r8, r0
 8005e6c:	4689      	mov	r9, r1
 8005e6e:	d053      	beq.n	8005f18 <_strtod_l+0xba8>
 8005e70:	a335      	add	r3, pc, #212	; (adr r3, 8005f48 <_strtod_l+0xbd8>)
 8005e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e76:	f7fa fe31 	bl	8000adc <__aeabi_dcmplt>
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	f47f acce 	bne.w	800581c <_strtod_l+0x4ac>
 8005e80:	a333      	add	r3, pc, #204	; (adr r3, 8005f50 <_strtod_l+0xbe0>)
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	4640      	mov	r0, r8
 8005e88:	4649      	mov	r1, r9
 8005e8a:	f7fa fe45 	bl	8000b18 <__aeabi_dcmpgt>
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	f43f af7b 	beq.w	8005d8a <_strtod_l+0xa1a>
 8005e94:	e4c2      	b.n	800581c <_strtod_l+0x4ac>
 8005e96:	9b04      	ldr	r3, [sp, #16]
 8005e98:	b333      	cbz	r3, 8005ee8 <_strtod_l+0xb78>
 8005e9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e9c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005ea0:	d822      	bhi.n	8005ee8 <_strtod_l+0xb78>
 8005ea2:	a32d      	add	r3, pc, #180	; (adr r3, 8005f58 <_strtod_l+0xbe8>)
 8005ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea8:	4640      	mov	r0, r8
 8005eaa:	4649      	mov	r1, r9
 8005eac:	f7fa fe20 	bl	8000af0 <__aeabi_dcmple>
 8005eb0:	b1a0      	cbz	r0, 8005edc <_strtod_l+0xb6c>
 8005eb2:	4649      	mov	r1, r9
 8005eb4:	4640      	mov	r0, r8
 8005eb6:	f7fa fe77 	bl	8000ba8 <__aeabi_d2uiz>
 8005eba:	2801      	cmp	r0, #1
 8005ebc:	bf38      	it	cc
 8005ebe:	2001      	movcc	r0, #1
 8005ec0:	f7fa fb20 	bl	8000504 <__aeabi_ui2d>
 8005ec4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ec6:	4680      	mov	r8, r0
 8005ec8:	4689      	mov	r9, r1
 8005eca:	bb13      	cbnz	r3, 8005f12 <_strtod_l+0xba2>
 8005ecc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ed0:	9014      	str	r0, [sp, #80]	; 0x50
 8005ed2:	9315      	str	r3, [sp, #84]	; 0x54
 8005ed4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005ed8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ede:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005ee0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005ee4:	1a9b      	subs	r3, r3, r2
 8005ee6:	930d      	str	r3, [sp, #52]	; 0x34
 8005ee8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005eec:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005ef0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005ef4:	f001 ffe2 	bl	8007ebc <__ulp>
 8005ef8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005efc:	ec53 2b10 	vmov	r2, r3, d0
 8005f00:	f7fa fb7a 	bl	80005f8 <__aeabi_dmul>
 8005f04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f08:	f7fa f9c0 	bl	800028c <__adddf3>
 8005f0c:	4682      	mov	sl, r0
 8005f0e:	468b      	mov	fp, r1
 8005f10:	e78f      	b.n	8005e32 <_strtod_l+0xac2>
 8005f12:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8005f16:	e7dd      	b.n	8005ed4 <_strtod_l+0xb64>
 8005f18:	a311      	add	r3, pc, #68	; (adr r3, 8005f60 <_strtod_l+0xbf0>)
 8005f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1e:	f7fa fddd 	bl	8000adc <__aeabi_dcmplt>
 8005f22:	e7b4      	b.n	8005e8e <_strtod_l+0xb1e>
 8005f24:	2300      	movs	r3, #0
 8005f26:	930e      	str	r3, [sp, #56]	; 0x38
 8005f28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005f2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005f2c:	6013      	str	r3, [r2, #0]
 8005f2e:	f7ff ba65 	b.w	80053fc <_strtod_l+0x8c>
 8005f32:	2b65      	cmp	r3, #101	; 0x65
 8005f34:	f43f ab5d 	beq.w	80055f2 <_strtod_l+0x282>
 8005f38:	2b45      	cmp	r3, #69	; 0x45
 8005f3a:	f43f ab5a 	beq.w	80055f2 <_strtod_l+0x282>
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f7ff bb92 	b.w	8005668 <_strtod_l+0x2f8>
 8005f44:	f3af 8000 	nop.w
 8005f48:	94a03595 	.word	0x94a03595
 8005f4c:	3fdfffff 	.word	0x3fdfffff
 8005f50:	35afe535 	.word	0x35afe535
 8005f54:	3fe00000 	.word	0x3fe00000
 8005f58:	ffc00000 	.word	0xffc00000
 8005f5c:	41dfffff 	.word	0x41dfffff
 8005f60:	94a03595 	.word	0x94a03595
 8005f64:	3fcfffff 	.word	0x3fcfffff
 8005f68:	3ff00000 	.word	0x3ff00000
 8005f6c:	7ff00000 	.word	0x7ff00000
 8005f70:	7fe00000 	.word	0x7fe00000
 8005f74:	7c9fffff 	.word	0x7c9fffff
 8005f78:	3fe00000 	.word	0x3fe00000
 8005f7c:	bff00000 	.word	0xbff00000
 8005f80:	7fefffff 	.word	0x7fefffff

08005f84 <_strtod_r>:
 8005f84:	4b01      	ldr	r3, [pc, #4]	; (8005f8c <_strtod_r+0x8>)
 8005f86:	f7ff b9f3 	b.w	8005370 <_strtod_l>
 8005f8a:	bf00      	nop
 8005f8c:	20000074 	.word	0x20000074

08005f90 <strtod>:
 8005f90:	460a      	mov	r2, r1
 8005f92:	4601      	mov	r1, r0
 8005f94:	4802      	ldr	r0, [pc, #8]	; (8005fa0 <strtod+0x10>)
 8005f96:	4b03      	ldr	r3, [pc, #12]	; (8005fa4 <strtod+0x14>)
 8005f98:	6800      	ldr	r0, [r0, #0]
 8005f9a:	f7ff b9e9 	b.w	8005370 <_strtod_l>
 8005f9e:	bf00      	nop
 8005fa0:	2000000c 	.word	0x2000000c
 8005fa4:	20000074 	.word	0x20000074

08005fa8 <strtok>:
 8005fa8:	4b16      	ldr	r3, [pc, #88]	; (8006004 <strtok+0x5c>)
 8005faa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005fac:	681e      	ldr	r6, [r3, #0]
 8005fae:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005fb0:	4605      	mov	r5, r0
 8005fb2:	b9fc      	cbnz	r4, 8005ff4 <strtok+0x4c>
 8005fb4:	2050      	movs	r0, #80	; 0x50
 8005fb6:	9101      	str	r1, [sp, #4]
 8005fb8:	f001 fbec 	bl	8007794 <malloc>
 8005fbc:	9901      	ldr	r1, [sp, #4]
 8005fbe:	65b0      	str	r0, [r6, #88]	; 0x58
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	b920      	cbnz	r0, 8005fce <strtok+0x26>
 8005fc4:	4b10      	ldr	r3, [pc, #64]	; (8006008 <strtok+0x60>)
 8005fc6:	4811      	ldr	r0, [pc, #68]	; (800600c <strtok+0x64>)
 8005fc8:	2157      	movs	r1, #87	; 0x57
 8005fca:	f000 f8cf 	bl	800616c <__assert_func>
 8005fce:	e9c0 4400 	strd	r4, r4, [r0]
 8005fd2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005fd6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005fda:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005fde:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005fe2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005fe6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005fea:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005fee:	6184      	str	r4, [r0, #24]
 8005ff0:	7704      	strb	r4, [r0, #28]
 8005ff2:	6244      	str	r4, [r0, #36]	; 0x24
 8005ff4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	b002      	add	sp, #8
 8005ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006000:	f000 b806 	b.w	8006010 <__strtok_r>
 8006004:	2000000c 	.word	0x2000000c
 8006008:	080092c8 	.word	0x080092c8
 800600c:	080092df 	.word	0x080092df

08006010 <__strtok_r>:
 8006010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006012:	b908      	cbnz	r0, 8006018 <__strtok_r+0x8>
 8006014:	6810      	ldr	r0, [r2, #0]
 8006016:	b188      	cbz	r0, 800603c <__strtok_r+0x2c>
 8006018:	4604      	mov	r4, r0
 800601a:	4620      	mov	r0, r4
 800601c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006020:	460f      	mov	r7, r1
 8006022:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006026:	b91e      	cbnz	r6, 8006030 <__strtok_r+0x20>
 8006028:	b965      	cbnz	r5, 8006044 <__strtok_r+0x34>
 800602a:	6015      	str	r5, [r2, #0]
 800602c:	4628      	mov	r0, r5
 800602e:	e005      	b.n	800603c <__strtok_r+0x2c>
 8006030:	42b5      	cmp	r5, r6
 8006032:	d1f6      	bne.n	8006022 <__strtok_r+0x12>
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1f0      	bne.n	800601a <__strtok_r+0xa>
 8006038:	6014      	str	r4, [r2, #0]
 800603a:	7003      	strb	r3, [r0, #0]
 800603c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800603e:	461c      	mov	r4, r3
 8006040:	e00c      	b.n	800605c <__strtok_r+0x4c>
 8006042:	b915      	cbnz	r5, 800604a <__strtok_r+0x3a>
 8006044:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006048:	460e      	mov	r6, r1
 800604a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800604e:	42ab      	cmp	r3, r5
 8006050:	d1f7      	bne.n	8006042 <__strtok_r+0x32>
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0f3      	beq.n	800603e <__strtok_r+0x2e>
 8006056:	2300      	movs	r3, #0
 8006058:	f804 3c01 	strb.w	r3, [r4, #-1]
 800605c:	6014      	str	r4, [r2, #0]
 800605e:	e7ed      	b.n	800603c <__strtok_r+0x2c>

08006060 <_strtol_l.isra.0>:
 8006060:	2b01      	cmp	r3, #1
 8006062:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006066:	d001      	beq.n	800606c <_strtol_l.isra.0+0xc>
 8006068:	2b24      	cmp	r3, #36	; 0x24
 800606a:	d906      	bls.n	800607a <_strtol_l.isra.0+0x1a>
 800606c:	f7fe fa60 	bl	8004530 <__errno>
 8006070:	2316      	movs	r3, #22
 8006072:	6003      	str	r3, [r0, #0]
 8006074:	2000      	movs	r0, #0
 8006076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800607a:	4f3a      	ldr	r7, [pc, #232]	; (8006164 <_strtol_l.isra.0+0x104>)
 800607c:	468e      	mov	lr, r1
 800607e:	4676      	mov	r6, lr
 8006080:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006084:	5de5      	ldrb	r5, [r4, r7]
 8006086:	f015 0508 	ands.w	r5, r5, #8
 800608a:	d1f8      	bne.n	800607e <_strtol_l.isra.0+0x1e>
 800608c:	2c2d      	cmp	r4, #45	; 0x2d
 800608e:	d134      	bne.n	80060fa <_strtol_l.isra.0+0x9a>
 8006090:	f89e 4000 	ldrb.w	r4, [lr]
 8006094:	f04f 0801 	mov.w	r8, #1
 8006098:	f106 0e02 	add.w	lr, r6, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d05c      	beq.n	800615a <_strtol_l.isra.0+0xfa>
 80060a0:	2b10      	cmp	r3, #16
 80060a2:	d10c      	bne.n	80060be <_strtol_l.isra.0+0x5e>
 80060a4:	2c30      	cmp	r4, #48	; 0x30
 80060a6:	d10a      	bne.n	80060be <_strtol_l.isra.0+0x5e>
 80060a8:	f89e 4000 	ldrb.w	r4, [lr]
 80060ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80060b0:	2c58      	cmp	r4, #88	; 0x58
 80060b2:	d14d      	bne.n	8006150 <_strtol_l.isra.0+0xf0>
 80060b4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80060b8:	2310      	movs	r3, #16
 80060ba:	f10e 0e02 	add.w	lr, lr, #2
 80060be:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80060c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80060c6:	2600      	movs	r6, #0
 80060c8:	fbbc f9f3 	udiv	r9, ip, r3
 80060cc:	4635      	mov	r5, r6
 80060ce:	fb03 ca19 	mls	sl, r3, r9, ip
 80060d2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80060d6:	2f09      	cmp	r7, #9
 80060d8:	d818      	bhi.n	800610c <_strtol_l.isra.0+0xac>
 80060da:	463c      	mov	r4, r7
 80060dc:	42a3      	cmp	r3, r4
 80060de:	dd24      	ble.n	800612a <_strtol_l.isra.0+0xca>
 80060e0:	2e00      	cmp	r6, #0
 80060e2:	db1f      	blt.n	8006124 <_strtol_l.isra.0+0xc4>
 80060e4:	45a9      	cmp	r9, r5
 80060e6:	d31d      	bcc.n	8006124 <_strtol_l.isra.0+0xc4>
 80060e8:	d101      	bne.n	80060ee <_strtol_l.isra.0+0x8e>
 80060ea:	45a2      	cmp	sl, r4
 80060ec:	db1a      	blt.n	8006124 <_strtol_l.isra.0+0xc4>
 80060ee:	fb05 4503 	mla	r5, r5, r3, r4
 80060f2:	2601      	movs	r6, #1
 80060f4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80060f8:	e7eb      	b.n	80060d2 <_strtol_l.isra.0+0x72>
 80060fa:	2c2b      	cmp	r4, #43	; 0x2b
 80060fc:	bf08      	it	eq
 80060fe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006102:	46a8      	mov	r8, r5
 8006104:	bf08      	it	eq
 8006106:	f106 0e02 	addeq.w	lr, r6, #2
 800610a:	e7c7      	b.n	800609c <_strtol_l.isra.0+0x3c>
 800610c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006110:	2f19      	cmp	r7, #25
 8006112:	d801      	bhi.n	8006118 <_strtol_l.isra.0+0xb8>
 8006114:	3c37      	subs	r4, #55	; 0x37
 8006116:	e7e1      	b.n	80060dc <_strtol_l.isra.0+0x7c>
 8006118:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800611c:	2f19      	cmp	r7, #25
 800611e:	d804      	bhi.n	800612a <_strtol_l.isra.0+0xca>
 8006120:	3c57      	subs	r4, #87	; 0x57
 8006122:	e7db      	b.n	80060dc <_strtol_l.isra.0+0x7c>
 8006124:	f04f 36ff 	mov.w	r6, #4294967295
 8006128:	e7e4      	b.n	80060f4 <_strtol_l.isra.0+0x94>
 800612a:	2e00      	cmp	r6, #0
 800612c:	da05      	bge.n	800613a <_strtol_l.isra.0+0xda>
 800612e:	2322      	movs	r3, #34	; 0x22
 8006130:	6003      	str	r3, [r0, #0]
 8006132:	4665      	mov	r5, ip
 8006134:	b942      	cbnz	r2, 8006148 <_strtol_l.isra.0+0xe8>
 8006136:	4628      	mov	r0, r5
 8006138:	e79d      	b.n	8006076 <_strtol_l.isra.0+0x16>
 800613a:	f1b8 0f00 	cmp.w	r8, #0
 800613e:	d000      	beq.n	8006142 <_strtol_l.isra.0+0xe2>
 8006140:	426d      	negs	r5, r5
 8006142:	2a00      	cmp	r2, #0
 8006144:	d0f7      	beq.n	8006136 <_strtol_l.isra.0+0xd6>
 8006146:	b10e      	cbz	r6, 800614c <_strtol_l.isra.0+0xec>
 8006148:	f10e 31ff 	add.w	r1, lr, #4294967295
 800614c:	6011      	str	r1, [r2, #0]
 800614e:	e7f2      	b.n	8006136 <_strtol_l.isra.0+0xd6>
 8006150:	2430      	movs	r4, #48	; 0x30
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1b3      	bne.n	80060be <_strtol_l.isra.0+0x5e>
 8006156:	2308      	movs	r3, #8
 8006158:	e7b1      	b.n	80060be <_strtol_l.isra.0+0x5e>
 800615a:	2c30      	cmp	r4, #48	; 0x30
 800615c:	d0a4      	beq.n	80060a8 <_strtol_l.isra.0+0x48>
 800615e:	230a      	movs	r3, #10
 8006160:	e7ad      	b.n	80060be <_strtol_l.isra.0+0x5e>
 8006162:	bf00      	nop
 8006164:	0800937d 	.word	0x0800937d

08006168 <_strtol_r>:
 8006168:	f7ff bf7a 	b.w	8006060 <_strtol_l.isra.0>

0800616c <__assert_func>:
 800616c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800616e:	4614      	mov	r4, r2
 8006170:	461a      	mov	r2, r3
 8006172:	4b09      	ldr	r3, [pc, #36]	; (8006198 <__assert_func+0x2c>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4605      	mov	r5, r0
 8006178:	68d8      	ldr	r0, [r3, #12]
 800617a:	b14c      	cbz	r4, 8006190 <__assert_func+0x24>
 800617c:	4b07      	ldr	r3, [pc, #28]	; (800619c <__assert_func+0x30>)
 800617e:	9100      	str	r1, [sp, #0]
 8006180:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006184:	4906      	ldr	r1, [pc, #24]	; (80061a0 <__assert_func+0x34>)
 8006186:	462b      	mov	r3, r5
 8006188:	f000 ff5c 	bl	8007044 <fiprintf>
 800618c:	f002 fc90 	bl	8008ab0 <abort>
 8006190:	4b04      	ldr	r3, [pc, #16]	; (80061a4 <__assert_func+0x38>)
 8006192:	461c      	mov	r4, r3
 8006194:	e7f3      	b.n	800617e <__assert_func+0x12>
 8006196:	bf00      	nop
 8006198:	2000000c 	.word	0x2000000c
 800619c:	08009340 	.word	0x08009340
 80061a0:	0800934d 	.word	0x0800934d
 80061a4:	0800937b 	.word	0x0800937b

080061a8 <quorem>:
 80061a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ac:	6903      	ldr	r3, [r0, #16]
 80061ae:	690c      	ldr	r4, [r1, #16]
 80061b0:	42a3      	cmp	r3, r4
 80061b2:	4607      	mov	r7, r0
 80061b4:	f2c0 8081 	blt.w	80062ba <quorem+0x112>
 80061b8:	3c01      	subs	r4, #1
 80061ba:	f101 0814 	add.w	r8, r1, #20
 80061be:	f100 0514 	add.w	r5, r0, #20
 80061c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061c6:	9301      	str	r3, [sp, #4]
 80061c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061d0:	3301      	adds	r3, #1
 80061d2:	429a      	cmp	r2, r3
 80061d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80061e0:	d331      	bcc.n	8006246 <quorem+0x9e>
 80061e2:	f04f 0e00 	mov.w	lr, #0
 80061e6:	4640      	mov	r0, r8
 80061e8:	46ac      	mov	ip, r5
 80061ea:	46f2      	mov	sl, lr
 80061ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80061f0:	b293      	uxth	r3, r2
 80061f2:	fb06 e303 	mla	r3, r6, r3, lr
 80061f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	ebaa 0303 	sub.w	r3, sl, r3
 8006200:	0c12      	lsrs	r2, r2, #16
 8006202:	f8dc a000 	ldr.w	sl, [ip]
 8006206:	fb06 e202 	mla	r2, r6, r2, lr
 800620a:	fa13 f38a 	uxtah	r3, r3, sl
 800620e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006212:	fa1f fa82 	uxth.w	sl, r2
 8006216:	f8dc 2000 	ldr.w	r2, [ip]
 800621a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800621e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006222:	b29b      	uxth	r3, r3
 8006224:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006228:	4581      	cmp	r9, r0
 800622a:	f84c 3b04 	str.w	r3, [ip], #4
 800622e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006232:	d2db      	bcs.n	80061ec <quorem+0x44>
 8006234:	f855 300b 	ldr.w	r3, [r5, fp]
 8006238:	b92b      	cbnz	r3, 8006246 <quorem+0x9e>
 800623a:	9b01      	ldr	r3, [sp, #4]
 800623c:	3b04      	subs	r3, #4
 800623e:	429d      	cmp	r5, r3
 8006240:	461a      	mov	r2, r3
 8006242:	d32e      	bcc.n	80062a2 <quorem+0xfa>
 8006244:	613c      	str	r4, [r7, #16]
 8006246:	4638      	mov	r0, r7
 8006248:	f001 fd94 	bl	8007d74 <__mcmp>
 800624c:	2800      	cmp	r0, #0
 800624e:	db24      	blt.n	800629a <quorem+0xf2>
 8006250:	3601      	adds	r6, #1
 8006252:	4628      	mov	r0, r5
 8006254:	f04f 0c00 	mov.w	ip, #0
 8006258:	f858 2b04 	ldr.w	r2, [r8], #4
 800625c:	f8d0 e000 	ldr.w	lr, [r0]
 8006260:	b293      	uxth	r3, r2
 8006262:	ebac 0303 	sub.w	r3, ip, r3
 8006266:	0c12      	lsrs	r2, r2, #16
 8006268:	fa13 f38e 	uxtah	r3, r3, lr
 800626c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006270:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006274:	b29b      	uxth	r3, r3
 8006276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800627a:	45c1      	cmp	r9, r8
 800627c:	f840 3b04 	str.w	r3, [r0], #4
 8006280:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006284:	d2e8      	bcs.n	8006258 <quorem+0xb0>
 8006286:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800628a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800628e:	b922      	cbnz	r2, 800629a <quorem+0xf2>
 8006290:	3b04      	subs	r3, #4
 8006292:	429d      	cmp	r5, r3
 8006294:	461a      	mov	r2, r3
 8006296:	d30a      	bcc.n	80062ae <quorem+0x106>
 8006298:	613c      	str	r4, [r7, #16]
 800629a:	4630      	mov	r0, r6
 800629c:	b003      	add	sp, #12
 800629e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a2:	6812      	ldr	r2, [r2, #0]
 80062a4:	3b04      	subs	r3, #4
 80062a6:	2a00      	cmp	r2, #0
 80062a8:	d1cc      	bne.n	8006244 <quorem+0x9c>
 80062aa:	3c01      	subs	r4, #1
 80062ac:	e7c7      	b.n	800623e <quorem+0x96>
 80062ae:	6812      	ldr	r2, [r2, #0]
 80062b0:	3b04      	subs	r3, #4
 80062b2:	2a00      	cmp	r2, #0
 80062b4:	d1f0      	bne.n	8006298 <quorem+0xf0>
 80062b6:	3c01      	subs	r4, #1
 80062b8:	e7eb      	b.n	8006292 <quorem+0xea>
 80062ba:	2000      	movs	r0, #0
 80062bc:	e7ee      	b.n	800629c <quorem+0xf4>
	...

080062c0 <_dtoa_r>:
 80062c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c4:	ed2d 8b02 	vpush	{d8}
 80062c8:	ec57 6b10 	vmov	r6, r7, d0
 80062cc:	b095      	sub	sp, #84	; 0x54
 80062ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80062d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80062d4:	9105      	str	r1, [sp, #20]
 80062d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80062da:	4604      	mov	r4, r0
 80062dc:	9209      	str	r2, [sp, #36]	; 0x24
 80062de:	930f      	str	r3, [sp, #60]	; 0x3c
 80062e0:	b975      	cbnz	r5, 8006300 <_dtoa_r+0x40>
 80062e2:	2010      	movs	r0, #16
 80062e4:	f001 fa56 	bl	8007794 <malloc>
 80062e8:	4602      	mov	r2, r0
 80062ea:	6260      	str	r0, [r4, #36]	; 0x24
 80062ec:	b920      	cbnz	r0, 80062f8 <_dtoa_r+0x38>
 80062ee:	4bb2      	ldr	r3, [pc, #712]	; (80065b8 <_dtoa_r+0x2f8>)
 80062f0:	21ea      	movs	r1, #234	; 0xea
 80062f2:	48b2      	ldr	r0, [pc, #712]	; (80065bc <_dtoa_r+0x2fc>)
 80062f4:	f7ff ff3a 	bl	800616c <__assert_func>
 80062f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80062fc:	6005      	str	r5, [r0, #0]
 80062fe:	60c5      	str	r5, [r0, #12]
 8006300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006302:	6819      	ldr	r1, [r3, #0]
 8006304:	b151      	cbz	r1, 800631c <_dtoa_r+0x5c>
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	604a      	str	r2, [r1, #4]
 800630a:	2301      	movs	r3, #1
 800630c:	4093      	lsls	r3, r2
 800630e:	608b      	str	r3, [r1, #8]
 8006310:	4620      	mov	r0, r4
 8006312:	f001 faa7 	bl	8007864 <_Bfree>
 8006316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006318:	2200      	movs	r2, #0
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	1e3b      	subs	r3, r7, #0
 800631e:	bfb9      	ittee	lt
 8006320:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006324:	9303      	strlt	r3, [sp, #12]
 8006326:	2300      	movge	r3, #0
 8006328:	f8c8 3000 	strge.w	r3, [r8]
 800632c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006330:	4ba3      	ldr	r3, [pc, #652]	; (80065c0 <_dtoa_r+0x300>)
 8006332:	bfbc      	itt	lt
 8006334:	2201      	movlt	r2, #1
 8006336:	f8c8 2000 	strlt.w	r2, [r8]
 800633a:	ea33 0309 	bics.w	r3, r3, r9
 800633e:	d11b      	bne.n	8006378 <_dtoa_r+0xb8>
 8006340:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006342:	f242 730f 	movw	r3, #9999	; 0x270f
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800634c:	4333      	orrs	r3, r6
 800634e:	f000 857a 	beq.w	8006e46 <_dtoa_r+0xb86>
 8006352:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006354:	b963      	cbnz	r3, 8006370 <_dtoa_r+0xb0>
 8006356:	4b9b      	ldr	r3, [pc, #620]	; (80065c4 <_dtoa_r+0x304>)
 8006358:	e024      	b.n	80063a4 <_dtoa_r+0xe4>
 800635a:	4b9b      	ldr	r3, [pc, #620]	; (80065c8 <_dtoa_r+0x308>)
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	3308      	adds	r3, #8
 8006360:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	9800      	ldr	r0, [sp, #0]
 8006366:	b015      	add	sp, #84	; 0x54
 8006368:	ecbd 8b02 	vpop	{d8}
 800636c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006370:	4b94      	ldr	r3, [pc, #592]	; (80065c4 <_dtoa_r+0x304>)
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	3303      	adds	r3, #3
 8006376:	e7f3      	b.n	8006360 <_dtoa_r+0xa0>
 8006378:	ed9d 7b02 	vldr	d7, [sp, #8]
 800637c:	2200      	movs	r2, #0
 800637e:	ec51 0b17 	vmov	r0, r1, d7
 8006382:	2300      	movs	r3, #0
 8006384:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006388:	f7fa fb9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800638c:	4680      	mov	r8, r0
 800638e:	b158      	cbz	r0, 80063a8 <_dtoa_r+0xe8>
 8006390:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006392:	2301      	movs	r3, #1
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 8551 	beq.w	8006e40 <_dtoa_r+0xb80>
 800639e:	488b      	ldr	r0, [pc, #556]	; (80065cc <_dtoa_r+0x30c>)
 80063a0:	6018      	str	r0, [r3, #0]
 80063a2:	1e43      	subs	r3, r0, #1
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	e7dd      	b.n	8006364 <_dtoa_r+0xa4>
 80063a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80063ac:	aa12      	add	r2, sp, #72	; 0x48
 80063ae:	a913      	add	r1, sp, #76	; 0x4c
 80063b0:	4620      	mov	r0, r4
 80063b2:	f001 fdff 	bl	8007fb4 <__d2b>
 80063b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80063ba:	4683      	mov	fp, r0
 80063bc:	2d00      	cmp	r5, #0
 80063be:	d07c      	beq.n	80064ba <_dtoa_r+0x1fa>
 80063c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80063c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80063ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80063d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80063d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80063da:	4b7d      	ldr	r3, [pc, #500]	; (80065d0 <_dtoa_r+0x310>)
 80063dc:	2200      	movs	r2, #0
 80063de:	4630      	mov	r0, r6
 80063e0:	4639      	mov	r1, r7
 80063e2:	f7f9 ff51 	bl	8000288 <__aeabi_dsub>
 80063e6:	a36e      	add	r3, pc, #440	; (adr r3, 80065a0 <_dtoa_r+0x2e0>)
 80063e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ec:	f7fa f904 	bl	80005f8 <__aeabi_dmul>
 80063f0:	a36d      	add	r3, pc, #436	; (adr r3, 80065a8 <_dtoa_r+0x2e8>)
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	f7f9 ff49 	bl	800028c <__adddf3>
 80063fa:	4606      	mov	r6, r0
 80063fc:	4628      	mov	r0, r5
 80063fe:	460f      	mov	r7, r1
 8006400:	f7fa f890 	bl	8000524 <__aeabi_i2d>
 8006404:	a36a      	add	r3, pc, #424	; (adr r3, 80065b0 <_dtoa_r+0x2f0>)
 8006406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640a:	f7fa f8f5 	bl	80005f8 <__aeabi_dmul>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	4630      	mov	r0, r6
 8006414:	4639      	mov	r1, r7
 8006416:	f7f9 ff39 	bl	800028c <__adddf3>
 800641a:	4606      	mov	r6, r0
 800641c:	460f      	mov	r7, r1
 800641e:	f7fa fb9b 	bl	8000b58 <__aeabi_d2iz>
 8006422:	2200      	movs	r2, #0
 8006424:	4682      	mov	sl, r0
 8006426:	2300      	movs	r3, #0
 8006428:	4630      	mov	r0, r6
 800642a:	4639      	mov	r1, r7
 800642c:	f7fa fb56 	bl	8000adc <__aeabi_dcmplt>
 8006430:	b148      	cbz	r0, 8006446 <_dtoa_r+0x186>
 8006432:	4650      	mov	r0, sl
 8006434:	f7fa f876 	bl	8000524 <__aeabi_i2d>
 8006438:	4632      	mov	r2, r6
 800643a:	463b      	mov	r3, r7
 800643c:	f7fa fb44 	bl	8000ac8 <__aeabi_dcmpeq>
 8006440:	b908      	cbnz	r0, 8006446 <_dtoa_r+0x186>
 8006442:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006446:	f1ba 0f16 	cmp.w	sl, #22
 800644a:	d854      	bhi.n	80064f6 <_dtoa_r+0x236>
 800644c:	4b61      	ldr	r3, [pc, #388]	; (80065d4 <_dtoa_r+0x314>)
 800644e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800645a:	f7fa fb3f 	bl	8000adc <__aeabi_dcmplt>
 800645e:	2800      	cmp	r0, #0
 8006460:	d04b      	beq.n	80064fa <_dtoa_r+0x23a>
 8006462:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006466:	2300      	movs	r3, #0
 8006468:	930e      	str	r3, [sp, #56]	; 0x38
 800646a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800646c:	1b5d      	subs	r5, r3, r5
 800646e:	1e6b      	subs	r3, r5, #1
 8006470:	9304      	str	r3, [sp, #16]
 8006472:	bf43      	ittte	mi
 8006474:	2300      	movmi	r3, #0
 8006476:	f1c5 0801 	rsbmi	r8, r5, #1
 800647a:	9304      	strmi	r3, [sp, #16]
 800647c:	f04f 0800 	movpl.w	r8, #0
 8006480:	f1ba 0f00 	cmp.w	sl, #0
 8006484:	db3b      	blt.n	80064fe <_dtoa_r+0x23e>
 8006486:	9b04      	ldr	r3, [sp, #16]
 8006488:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800648c:	4453      	add	r3, sl
 800648e:	9304      	str	r3, [sp, #16]
 8006490:	2300      	movs	r3, #0
 8006492:	9306      	str	r3, [sp, #24]
 8006494:	9b05      	ldr	r3, [sp, #20]
 8006496:	2b09      	cmp	r3, #9
 8006498:	d869      	bhi.n	800656e <_dtoa_r+0x2ae>
 800649a:	2b05      	cmp	r3, #5
 800649c:	bfc4      	itt	gt
 800649e:	3b04      	subgt	r3, #4
 80064a0:	9305      	strgt	r3, [sp, #20]
 80064a2:	9b05      	ldr	r3, [sp, #20]
 80064a4:	f1a3 0302 	sub.w	r3, r3, #2
 80064a8:	bfcc      	ite	gt
 80064aa:	2500      	movgt	r5, #0
 80064ac:	2501      	movle	r5, #1
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	d869      	bhi.n	8006586 <_dtoa_r+0x2c6>
 80064b2:	e8df f003 	tbb	[pc, r3]
 80064b6:	4e2c      	.short	0x4e2c
 80064b8:	5a4c      	.short	0x5a4c
 80064ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80064be:	441d      	add	r5, r3
 80064c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80064c4:	2b20      	cmp	r3, #32
 80064c6:	bfc1      	itttt	gt
 80064c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80064cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80064d0:	fa09 f303 	lslgt.w	r3, r9, r3
 80064d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80064d8:	bfda      	itte	le
 80064da:	f1c3 0320 	rsble	r3, r3, #32
 80064de:	fa06 f003 	lslle.w	r0, r6, r3
 80064e2:	4318      	orrgt	r0, r3
 80064e4:	f7fa f80e 	bl	8000504 <__aeabi_ui2d>
 80064e8:	2301      	movs	r3, #1
 80064ea:	4606      	mov	r6, r0
 80064ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80064f0:	3d01      	subs	r5, #1
 80064f2:	9310      	str	r3, [sp, #64]	; 0x40
 80064f4:	e771      	b.n	80063da <_dtoa_r+0x11a>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e7b6      	b.n	8006468 <_dtoa_r+0x1a8>
 80064fa:	900e      	str	r0, [sp, #56]	; 0x38
 80064fc:	e7b5      	b.n	800646a <_dtoa_r+0x1aa>
 80064fe:	f1ca 0300 	rsb	r3, sl, #0
 8006502:	9306      	str	r3, [sp, #24]
 8006504:	2300      	movs	r3, #0
 8006506:	eba8 080a 	sub.w	r8, r8, sl
 800650a:	930d      	str	r3, [sp, #52]	; 0x34
 800650c:	e7c2      	b.n	8006494 <_dtoa_r+0x1d4>
 800650e:	2300      	movs	r3, #0
 8006510:	9308      	str	r3, [sp, #32]
 8006512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006514:	2b00      	cmp	r3, #0
 8006516:	dc39      	bgt.n	800658c <_dtoa_r+0x2cc>
 8006518:	f04f 0901 	mov.w	r9, #1
 800651c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006520:	464b      	mov	r3, r9
 8006522:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006526:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006528:	2200      	movs	r2, #0
 800652a:	6042      	str	r2, [r0, #4]
 800652c:	2204      	movs	r2, #4
 800652e:	f102 0614 	add.w	r6, r2, #20
 8006532:	429e      	cmp	r6, r3
 8006534:	6841      	ldr	r1, [r0, #4]
 8006536:	d92f      	bls.n	8006598 <_dtoa_r+0x2d8>
 8006538:	4620      	mov	r0, r4
 800653a:	f001 f953 	bl	80077e4 <_Balloc>
 800653e:	9000      	str	r0, [sp, #0]
 8006540:	2800      	cmp	r0, #0
 8006542:	d14b      	bne.n	80065dc <_dtoa_r+0x31c>
 8006544:	4b24      	ldr	r3, [pc, #144]	; (80065d8 <_dtoa_r+0x318>)
 8006546:	4602      	mov	r2, r0
 8006548:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800654c:	e6d1      	b.n	80062f2 <_dtoa_r+0x32>
 800654e:	2301      	movs	r3, #1
 8006550:	e7de      	b.n	8006510 <_dtoa_r+0x250>
 8006552:	2300      	movs	r3, #0
 8006554:	9308      	str	r3, [sp, #32]
 8006556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006558:	eb0a 0903 	add.w	r9, sl, r3
 800655c:	f109 0301 	add.w	r3, r9, #1
 8006560:	2b01      	cmp	r3, #1
 8006562:	9301      	str	r3, [sp, #4]
 8006564:	bfb8      	it	lt
 8006566:	2301      	movlt	r3, #1
 8006568:	e7dd      	b.n	8006526 <_dtoa_r+0x266>
 800656a:	2301      	movs	r3, #1
 800656c:	e7f2      	b.n	8006554 <_dtoa_r+0x294>
 800656e:	2501      	movs	r5, #1
 8006570:	2300      	movs	r3, #0
 8006572:	9305      	str	r3, [sp, #20]
 8006574:	9508      	str	r5, [sp, #32]
 8006576:	f04f 39ff 	mov.w	r9, #4294967295
 800657a:	2200      	movs	r2, #0
 800657c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006580:	2312      	movs	r3, #18
 8006582:	9209      	str	r2, [sp, #36]	; 0x24
 8006584:	e7cf      	b.n	8006526 <_dtoa_r+0x266>
 8006586:	2301      	movs	r3, #1
 8006588:	9308      	str	r3, [sp, #32]
 800658a:	e7f4      	b.n	8006576 <_dtoa_r+0x2b6>
 800658c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006590:	f8cd 9004 	str.w	r9, [sp, #4]
 8006594:	464b      	mov	r3, r9
 8006596:	e7c6      	b.n	8006526 <_dtoa_r+0x266>
 8006598:	3101      	adds	r1, #1
 800659a:	6041      	str	r1, [r0, #4]
 800659c:	0052      	lsls	r2, r2, #1
 800659e:	e7c6      	b.n	800652e <_dtoa_r+0x26e>
 80065a0:	636f4361 	.word	0x636f4361
 80065a4:	3fd287a7 	.word	0x3fd287a7
 80065a8:	8b60c8b3 	.word	0x8b60c8b3
 80065ac:	3fc68a28 	.word	0x3fc68a28
 80065b0:	509f79fb 	.word	0x509f79fb
 80065b4:	3fd34413 	.word	0x3fd34413
 80065b8:	080092c8 	.word	0x080092c8
 80065bc:	0800948a 	.word	0x0800948a
 80065c0:	7ff00000 	.word	0x7ff00000
 80065c4:	08009486 	.word	0x08009486
 80065c8:	0800947d 	.word	0x0800947d
 80065cc:	08009249 	.word	0x08009249
 80065d0:	3ff80000 	.word	0x3ff80000
 80065d4:	08009668 	.word	0x08009668
 80065d8:	080094e9 	.word	0x080094e9
 80065dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065de:	9a00      	ldr	r2, [sp, #0]
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	9b01      	ldr	r3, [sp, #4]
 80065e4:	2b0e      	cmp	r3, #14
 80065e6:	f200 80ad 	bhi.w	8006744 <_dtoa_r+0x484>
 80065ea:	2d00      	cmp	r5, #0
 80065ec:	f000 80aa 	beq.w	8006744 <_dtoa_r+0x484>
 80065f0:	f1ba 0f00 	cmp.w	sl, #0
 80065f4:	dd36      	ble.n	8006664 <_dtoa_r+0x3a4>
 80065f6:	4ac3      	ldr	r2, [pc, #780]	; (8006904 <_dtoa_r+0x644>)
 80065f8:	f00a 030f 	and.w	r3, sl, #15
 80065fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006600:	ed93 7b00 	vldr	d7, [r3]
 8006604:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006608:	ea4f 172a 	mov.w	r7, sl, asr #4
 800660c:	eeb0 8a47 	vmov.f32	s16, s14
 8006610:	eef0 8a67 	vmov.f32	s17, s15
 8006614:	d016      	beq.n	8006644 <_dtoa_r+0x384>
 8006616:	4bbc      	ldr	r3, [pc, #752]	; (8006908 <_dtoa_r+0x648>)
 8006618:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800661c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006620:	f7fa f914 	bl	800084c <__aeabi_ddiv>
 8006624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006628:	f007 070f 	and.w	r7, r7, #15
 800662c:	2503      	movs	r5, #3
 800662e:	4eb6      	ldr	r6, [pc, #728]	; (8006908 <_dtoa_r+0x648>)
 8006630:	b957      	cbnz	r7, 8006648 <_dtoa_r+0x388>
 8006632:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006636:	ec53 2b18 	vmov	r2, r3, d8
 800663a:	f7fa f907 	bl	800084c <__aeabi_ddiv>
 800663e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006642:	e029      	b.n	8006698 <_dtoa_r+0x3d8>
 8006644:	2502      	movs	r5, #2
 8006646:	e7f2      	b.n	800662e <_dtoa_r+0x36e>
 8006648:	07f9      	lsls	r1, r7, #31
 800664a:	d508      	bpl.n	800665e <_dtoa_r+0x39e>
 800664c:	ec51 0b18 	vmov	r0, r1, d8
 8006650:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006654:	f7f9 ffd0 	bl	80005f8 <__aeabi_dmul>
 8006658:	ec41 0b18 	vmov	d8, r0, r1
 800665c:	3501      	adds	r5, #1
 800665e:	107f      	asrs	r7, r7, #1
 8006660:	3608      	adds	r6, #8
 8006662:	e7e5      	b.n	8006630 <_dtoa_r+0x370>
 8006664:	f000 80a6 	beq.w	80067b4 <_dtoa_r+0x4f4>
 8006668:	f1ca 0600 	rsb	r6, sl, #0
 800666c:	4ba5      	ldr	r3, [pc, #660]	; (8006904 <_dtoa_r+0x644>)
 800666e:	4fa6      	ldr	r7, [pc, #664]	; (8006908 <_dtoa_r+0x648>)
 8006670:	f006 020f 	and.w	r2, r6, #15
 8006674:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006680:	f7f9 ffba 	bl	80005f8 <__aeabi_dmul>
 8006684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006688:	1136      	asrs	r6, r6, #4
 800668a:	2300      	movs	r3, #0
 800668c:	2502      	movs	r5, #2
 800668e:	2e00      	cmp	r6, #0
 8006690:	f040 8085 	bne.w	800679e <_dtoa_r+0x4de>
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1d2      	bne.n	800663e <_dtoa_r+0x37e>
 8006698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 808c 	beq.w	80067b8 <_dtoa_r+0x4f8>
 80066a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80066a4:	4b99      	ldr	r3, [pc, #612]	; (800690c <_dtoa_r+0x64c>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	4630      	mov	r0, r6
 80066aa:	4639      	mov	r1, r7
 80066ac:	f7fa fa16 	bl	8000adc <__aeabi_dcmplt>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	f000 8081 	beq.w	80067b8 <_dtoa_r+0x4f8>
 80066b6:	9b01      	ldr	r3, [sp, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d07d      	beq.n	80067b8 <_dtoa_r+0x4f8>
 80066bc:	f1b9 0f00 	cmp.w	r9, #0
 80066c0:	dd3c      	ble.n	800673c <_dtoa_r+0x47c>
 80066c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80066c6:	9307      	str	r3, [sp, #28]
 80066c8:	2200      	movs	r2, #0
 80066ca:	4b91      	ldr	r3, [pc, #580]	; (8006910 <_dtoa_r+0x650>)
 80066cc:	4630      	mov	r0, r6
 80066ce:	4639      	mov	r1, r7
 80066d0:	f7f9 ff92 	bl	80005f8 <__aeabi_dmul>
 80066d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066d8:	3501      	adds	r5, #1
 80066da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80066de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80066e2:	4628      	mov	r0, r5
 80066e4:	f7f9 ff1e 	bl	8000524 <__aeabi_i2d>
 80066e8:	4632      	mov	r2, r6
 80066ea:	463b      	mov	r3, r7
 80066ec:	f7f9 ff84 	bl	80005f8 <__aeabi_dmul>
 80066f0:	4b88      	ldr	r3, [pc, #544]	; (8006914 <_dtoa_r+0x654>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	f7f9 fdca 	bl	800028c <__adddf3>
 80066f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80066fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006700:	9303      	str	r3, [sp, #12]
 8006702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006704:	2b00      	cmp	r3, #0
 8006706:	d15c      	bne.n	80067c2 <_dtoa_r+0x502>
 8006708:	4b83      	ldr	r3, [pc, #524]	; (8006918 <_dtoa_r+0x658>)
 800670a:	2200      	movs	r2, #0
 800670c:	4630      	mov	r0, r6
 800670e:	4639      	mov	r1, r7
 8006710:	f7f9 fdba 	bl	8000288 <__aeabi_dsub>
 8006714:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006718:	4606      	mov	r6, r0
 800671a:	460f      	mov	r7, r1
 800671c:	f7fa f9fc 	bl	8000b18 <__aeabi_dcmpgt>
 8006720:	2800      	cmp	r0, #0
 8006722:	f040 8296 	bne.w	8006c52 <_dtoa_r+0x992>
 8006726:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800672a:	4630      	mov	r0, r6
 800672c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006730:	4639      	mov	r1, r7
 8006732:	f7fa f9d3 	bl	8000adc <__aeabi_dcmplt>
 8006736:	2800      	cmp	r0, #0
 8006738:	f040 8288 	bne.w	8006c4c <_dtoa_r+0x98c>
 800673c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006740:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006744:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006746:	2b00      	cmp	r3, #0
 8006748:	f2c0 8158 	blt.w	80069fc <_dtoa_r+0x73c>
 800674c:	f1ba 0f0e 	cmp.w	sl, #14
 8006750:	f300 8154 	bgt.w	80069fc <_dtoa_r+0x73c>
 8006754:	4b6b      	ldr	r3, [pc, #428]	; (8006904 <_dtoa_r+0x644>)
 8006756:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800675a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800675e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006760:	2b00      	cmp	r3, #0
 8006762:	f280 80e3 	bge.w	800692c <_dtoa_r+0x66c>
 8006766:	9b01      	ldr	r3, [sp, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	f300 80df 	bgt.w	800692c <_dtoa_r+0x66c>
 800676e:	f040 826d 	bne.w	8006c4c <_dtoa_r+0x98c>
 8006772:	4b69      	ldr	r3, [pc, #420]	; (8006918 <_dtoa_r+0x658>)
 8006774:	2200      	movs	r2, #0
 8006776:	4640      	mov	r0, r8
 8006778:	4649      	mov	r1, r9
 800677a:	f7f9 ff3d 	bl	80005f8 <__aeabi_dmul>
 800677e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006782:	f7fa f9bf 	bl	8000b04 <__aeabi_dcmpge>
 8006786:	9e01      	ldr	r6, [sp, #4]
 8006788:	4637      	mov	r7, r6
 800678a:	2800      	cmp	r0, #0
 800678c:	f040 8243 	bne.w	8006c16 <_dtoa_r+0x956>
 8006790:	9d00      	ldr	r5, [sp, #0]
 8006792:	2331      	movs	r3, #49	; 0x31
 8006794:	f805 3b01 	strb.w	r3, [r5], #1
 8006798:	f10a 0a01 	add.w	sl, sl, #1
 800679c:	e23f      	b.n	8006c1e <_dtoa_r+0x95e>
 800679e:	07f2      	lsls	r2, r6, #31
 80067a0:	d505      	bpl.n	80067ae <_dtoa_r+0x4ee>
 80067a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067a6:	f7f9 ff27 	bl	80005f8 <__aeabi_dmul>
 80067aa:	3501      	adds	r5, #1
 80067ac:	2301      	movs	r3, #1
 80067ae:	1076      	asrs	r6, r6, #1
 80067b0:	3708      	adds	r7, #8
 80067b2:	e76c      	b.n	800668e <_dtoa_r+0x3ce>
 80067b4:	2502      	movs	r5, #2
 80067b6:	e76f      	b.n	8006698 <_dtoa_r+0x3d8>
 80067b8:	9b01      	ldr	r3, [sp, #4]
 80067ba:	f8cd a01c 	str.w	sl, [sp, #28]
 80067be:	930c      	str	r3, [sp, #48]	; 0x30
 80067c0:	e78d      	b.n	80066de <_dtoa_r+0x41e>
 80067c2:	9900      	ldr	r1, [sp, #0]
 80067c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80067c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067c8:	4b4e      	ldr	r3, [pc, #312]	; (8006904 <_dtoa_r+0x644>)
 80067ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067ce:	4401      	add	r1, r0
 80067d0:	9102      	str	r1, [sp, #8]
 80067d2:	9908      	ldr	r1, [sp, #32]
 80067d4:	eeb0 8a47 	vmov.f32	s16, s14
 80067d8:	eef0 8a67 	vmov.f32	s17, s15
 80067dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80067e4:	2900      	cmp	r1, #0
 80067e6:	d045      	beq.n	8006874 <_dtoa_r+0x5b4>
 80067e8:	494c      	ldr	r1, [pc, #304]	; (800691c <_dtoa_r+0x65c>)
 80067ea:	2000      	movs	r0, #0
 80067ec:	f7fa f82e 	bl	800084c <__aeabi_ddiv>
 80067f0:	ec53 2b18 	vmov	r2, r3, d8
 80067f4:	f7f9 fd48 	bl	8000288 <__aeabi_dsub>
 80067f8:	9d00      	ldr	r5, [sp, #0]
 80067fa:	ec41 0b18 	vmov	d8, r0, r1
 80067fe:	4639      	mov	r1, r7
 8006800:	4630      	mov	r0, r6
 8006802:	f7fa f9a9 	bl	8000b58 <__aeabi_d2iz>
 8006806:	900c      	str	r0, [sp, #48]	; 0x30
 8006808:	f7f9 fe8c 	bl	8000524 <__aeabi_i2d>
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	4630      	mov	r0, r6
 8006812:	4639      	mov	r1, r7
 8006814:	f7f9 fd38 	bl	8000288 <__aeabi_dsub>
 8006818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800681a:	3330      	adds	r3, #48	; 0x30
 800681c:	f805 3b01 	strb.w	r3, [r5], #1
 8006820:	ec53 2b18 	vmov	r2, r3, d8
 8006824:	4606      	mov	r6, r0
 8006826:	460f      	mov	r7, r1
 8006828:	f7fa f958 	bl	8000adc <__aeabi_dcmplt>
 800682c:	2800      	cmp	r0, #0
 800682e:	d165      	bne.n	80068fc <_dtoa_r+0x63c>
 8006830:	4632      	mov	r2, r6
 8006832:	463b      	mov	r3, r7
 8006834:	4935      	ldr	r1, [pc, #212]	; (800690c <_dtoa_r+0x64c>)
 8006836:	2000      	movs	r0, #0
 8006838:	f7f9 fd26 	bl	8000288 <__aeabi_dsub>
 800683c:	ec53 2b18 	vmov	r2, r3, d8
 8006840:	f7fa f94c 	bl	8000adc <__aeabi_dcmplt>
 8006844:	2800      	cmp	r0, #0
 8006846:	f040 80b9 	bne.w	80069bc <_dtoa_r+0x6fc>
 800684a:	9b02      	ldr	r3, [sp, #8]
 800684c:	429d      	cmp	r5, r3
 800684e:	f43f af75 	beq.w	800673c <_dtoa_r+0x47c>
 8006852:	4b2f      	ldr	r3, [pc, #188]	; (8006910 <_dtoa_r+0x650>)
 8006854:	ec51 0b18 	vmov	r0, r1, d8
 8006858:	2200      	movs	r2, #0
 800685a:	f7f9 fecd 	bl	80005f8 <__aeabi_dmul>
 800685e:	4b2c      	ldr	r3, [pc, #176]	; (8006910 <_dtoa_r+0x650>)
 8006860:	ec41 0b18 	vmov	d8, r0, r1
 8006864:	2200      	movs	r2, #0
 8006866:	4630      	mov	r0, r6
 8006868:	4639      	mov	r1, r7
 800686a:	f7f9 fec5 	bl	80005f8 <__aeabi_dmul>
 800686e:	4606      	mov	r6, r0
 8006870:	460f      	mov	r7, r1
 8006872:	e7c4      	b.n	80067fe <_dtoa_r+0x53e>
 8006874:	ec51 0b17 	vmov	r0, r1, d7
 8006878:	f7f9 febe 	bl	80005f8 <__aeabi_dmul>
 800687c:	9b02      	ldr	r3, [sp, #8]
 800687e:	9d00      	ldr	r5, [sp, #0]
 8006880:	930c      	str	r3, [sp, #48]	; 0x30
 8006882:	ec41 0b18 	vmov	d8, r0, r1
 8006886:	4639      	mov	r1, r7
 8006888:	4630      	mov	r0, r6
 800688a:	f7fa f965 	bl	8000b58 <__aeabi_d2iz>
 800688e:	9011      	str	r0, [sp, #68]	; 0x44
 8006890:	f7f9 fe48 	bl	8000524 <__aeabi_i2d>
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	4630      	mov	r0, r6
 800689a:	4639      	mov	r1, r7
 800689c:	f7f9 fcf4 	bl	8000288 <__aeabi_dsub>
 80068a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068a2:	3330      	adds	r3, #48	; 0x30
 80068a4:	f805 3b01 	strb.w	r3, [r5], #1
 80068a8:	9b02      	ldr	r3, [sp, #8]
 80068aa:	429d      	cmp	r5, r3
 80068ac:	4606      	mov	r6, r0
 80068ae:	460f      	mov	r7, r1
 80068b0:	f04f 0200 	mov.w	r2, #0
 80068b4:	d134      	bne.n	8006920 <_dtoa_r+0x660>
 80068b6:	4b19      	ldr	r3, [pc, #100]	; (800691c <_dtoa_r+0x65c>)
 80068b8:	ec51 0b18 	vmov	r0, r1, d8
 80068bc:	f7f9 fce6 	bl	800028c <__adddf3>
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	4630      	mov	r0, r6
 80068c6:	4639      	mov	r1, r7
 80068c8:	f7fa f926 	bl	8000b18 <__aeabi_dcmpgt>
 80068cc:	2800      	cmp	r0, #0
 80068ce:	d175      	bne.n	80069bc <_dtoa_r+0x6fc>
 80068d0:	ec53 2b18 	vmov	r2, r3, d8
 80068d4:	4911      	ldr	r1, [pc, #68]	; (800691c <_dtoa_r+0x65c>)
 80068d6:	2000      	movs	r0, #0
 80068d8:	f7f9 fcd6 	bl	8000288 <__aeabi_dsub>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	4630      	mov	r0, r6
 80068e2:	4639      	mov	r1, r7
 80068e4:	f7fa f8fa 	bl	8000adc <__aeabi_dcmplt>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	f43f af27 	beq.w	800673c <_dtoa_r+0x47c>
 80068ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068f0:	1e6b      	subs	r3, r5, #1
 80068f2:	930c      	str	r3, [sp, #48]	; 0x30
 80068f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80068f8:	2b30      	cmp	r3, #48	; 0x30
 80068fa:	d0f8      	beq.n	80068ee <_dtoa_r+0x62e>
 80068fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006900:	e04a      	b.n	8006998 <_dtoa_r+0x6d8>
 8006902:	bf00      	nop
 8006904:	08009668 	.word	0x08009668
 8006908:	08009640 	.word	0x08009640
 800690c:	3ff00000 	.word	0x3ff00000
 8006910:	40240000 	.word	0x40240000
 8006914:	401c0000 	.word	0x401c0000
 8006918:	40140000 	.word	0x40140000
 800691c:	3fe00000 	.word	0x3fe00000
 8006920:	4baf      	ldr	r3, [pc, #700]	; (8006be0 <_dtoa_r+0x920>)
 8006922:	f7f9 fe69 	bl	80005f8 <__aeabi_dmul>
 8006926:	4606      	mov	r6, r0
 8006928:	460f      	mov	r7, r1
 800692a:	e7ac      	b.n	8006886 <_dtoa_r+0x5c6>
 800692c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006930:	9d00      	ldr	r5, [sp, #0]
 8006932:	4642      	mov	r2, r8
 8006934:	464b      	mov	r3, r9
 8006936:	4630      	mov	r0, r6
 8006938:	4639      	mov	r1, r7
 800693a:	f7f9 ff87 	bl	800084c <__aeabi_ddiv>
 800693e:	f7fa f90b 	bl	8000b58 <__aeabi_d2iz>
 8006942:	9002      	str	r0, [sp, #8]
 8006944:	f7f9 fdee 	bl	8000524 <__aeabi_i2d>
 8006948:	4642      	mov	r2, r8
 800694a:	464b      	mov	r3, r9
 800694c:	f7f9 fe54 	bl	80005f8 <__aeabi_dmul>
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	4630      	mov	r0, r6
 8006956:	4639      	mov	r1, r7
 8006958:	f7f9 fc96 	bl	8000288 <__aeabi_dsub>
 800695c:	9e02      	ldr	r6, [sp, #8]
 800695e:	9f01      	ldr	r7, [sp, #4]
 8006960:	3630      	adds	r6, #48	; 0x30
 8006962:	f805 6b01 	strb.w	r6, [r5], #1
 8006966:	9e00      	ldr	r6, [sp, #0]
 8006968:	1bae      	subs	r6, r5, r6
 800696a:	42b7      	cmp	r7, r6
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	d137      	bne.n	80069e2 <_dtoa_r+0x722>
 8006972:	f7f9 fc8b 	bl	800028c <__adddf3>
 8006976:	4642      	mov	r2, r8
 8006978:	464b      	mov	r3, r9
 800697a:	4606      	mov	r6, r0
 800697c:	460f      	mov	r7, r1
 800697e:	f7fa f8cb 	bl	8000b18 <__aeabi_dcmpgt>
 8006982:	b9c8      	cbnz	r0, 80069b8 <_dtoa_r+0x6f8>
 8006984:	4642      	mov	r2, r8
 8006986:	464b      	mov	r3, r9
 8006988:	4630      	mov	r0, r6
 800698a:	4639      	mov	r1, r7
 800698c:	f7fa f89c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006990:	b110      	cbz	r0, 8006998 <_dtoa_r+0x6d8>
 8006992:	9b02      	ldr	r3, [sp, #8]
 8006994:	07d9      	lsls	r1, r3, #31
 8006996:	d40f      	bmi.n	80069b8 <_dtoa_r+0x6f8>
 8006998:	4620      	mov	r0, r4
 800699a:	4659      	mov	r1, fp
 800699c:	f000 ff62 	bl	8007864 <_Bfree>
 80069a0:	2300      	movs	r3, #0
 80069a2:	702b      	strb	r3, [r5, #0]
 80069a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069a6:	f10a 0001 	add.w	r0, sl, #1
 80069aa:	6018      	str	r0, [r3, #0]
 80069ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f43f acd8 	beq.w	8006364 <_dtoa_r+0xa4>
 80069b4:	601d      	str	r5, [r3, #0]
 80069b6:	e4d5      	b.n	8006364 <_dtoa_r+0xa4>
 80069b8:	f8cd a01c 	str.w	sl, [sp, #28]
 80069bc:	462b      	mov	r3, r5
 80069be:	461d      	mov	r5, r3
 80069c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069c4:	2a39      	cmp	r2, #57	; 0x39
 80069c6:	d108      	bne.n	80069da <_dtoa_r+0x71a>
 80069c8:	9a00      	ldr	r2, [sp, #0]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d1f7      	bne.n	80069be <_dtoa_r+0x6fe>
 80069ce:	9a07      	ldr	r2, [sp, #28]
 80069d0:	9900      	ldr	r1, [sp, #0]
 80069d2:	3201      	adds	r2, #1
 80069d4:	9207      	str	r2, [sp, #28]
 80069d6:	2230      	movs	r2, #48	; 0x30
 80069d8:	700a      	strb	r2, [r1, #0]
 80069da:	781a      	ldrb	r2, [r3, #0]
 80069dc:	3201      	adds	r2, #1
 80069de:	701a      	strb	r2, [r3, #0]
 80069e0:	e78c      	b.n	80068fc <_dtoa_r+0x63c>
 80069e2:	4b7f      	ldr	r3, [pc, #508]	; (8006be0 <_dtoa_r+0x920>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	f7f9 fe07 	bl	80005f8 <__aeabi_dmul>
 80069ea:	2200      	movs	r2, #0
 80069ec:	2300      	movs	r3, #0
 80069ee:	4606      	mov	r6, r0
 80069f0:	460f      	mov	r7, r1
 80069f2:	f7fa f869 	bl	8000ac8 <__aeabi_dcmpeq>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	d09b      	beq.n	8006932 <_dtoa_r+0x672>
 80069fa:	e7cd      	b.n	8006998 <_dtoa_r+0x6d8>
 80069fc:	9a08      	ldr	r2, [sp, #32]
 80069fe:	2a00      	cmp	r2, #0
 8006a00:	f000 80c4 	beq.w	8006b8c <_dtoa_r+0x8cc>
 8006a04:	9a05      	ldr	r2, [sp, #20]
 8006a06:	2a01      	cmp	r2, #1
 8006a08:	f300 80a8 	bgt.w	8006b5c <_dtoa_r+0x89c>
 8006a0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a0e:	2a00      	cmp	r2, #0
 8006a10:	f000 80a0 	beq.w	8006b54 <_dtoa_r+0x894>
 8006a14:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a18:	9e06      	ldr	r6, [sp, #24]
 8006a1a:	4645      	mov	r5, r8
 8006a1c:	9a04      	ldr	r2, [sp, #16]
 8006a1e:	2101      	movs	r1, #1
 8006a20:	441a      	add	r2, r3
 8006a22:	4620      	mov	r0, r4
 8006a24:	4498      	add	r8, r3
 8006a26:	9204      	str	r2, [sp, #16]
 8006a28:	f001 f822 	bl	8007a70 <__i2b>
 8006a2c:	4607      	mov	r7, r0
 8006a2e:	2d00      	cmp	r5, #0
 8006a30:	dd0b      	ble.n	8006a4a <_dtoa_r+0x78a>
 8006a32:	9b04      	ldr	r3, [sp, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	dd08      	ble.n	8006a4a <_dtoa_r+0x78a>
 8006a38:	42ab      	cmp	r3, r5
 8006a3a:	9a04      	ldr	r2, [sp, #16]
 8006a3c:	bfa8      	it	ge
 8006a3e:	462b      	movge	r3, r5
 8006a40:	eba8 0803 	sub.w	r8, r8, r3
 8006a44:	1aed      	subs	r5, r5, r3
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	9304      	str	r3, [sp, #16]
 8006a4a:	9b06      	ldr	r3, [sp, #24]
 8006a4c:	b1fb      	cbz	r3, 8006a8e <_dtoa_r+0x7ce>
 8006a4e:	9b08      	ldr	r3, [sp, #32]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 809f 	beq.w	8006b94 <_dtoa_r+0x8d4>
 8006a56:	2e00      	cmp	r6, #0
 8006a58:	dd11      	ble.n	8006a7e <_dtoa_r+0x7be>
 8006a5a:	4639      	mov	r1, r7
 8006a5c:	4632      	mov	r2, r6
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f001 f8c2 	bl	8007be8 <__pow5mult>
 8006a64:	465a      	mov	r2, fp
 8006a66:	4601      	mov	r1, r0
 8006a68:	4607      	mov	r7, r0
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f001 f816 	bl	8007a9c <__multiply>
 8006a70:	4659      	mov	r1, fp
 8006a72:	9007      	str	r0, [sp, #28]
 8006a74:	4620      	mov	r0, r4
 8006a76:	f000 fef5 	bl	8007864 <_Bfree>
 8006a7a:	9b07      	ldr	r3, [sp, #28]
 8006a7c:	469b      	mov	fp, r3
 8006a7e:	9b06      	ldr	r3, [sp, #24]
 8006a80:	1b9a      	subs	r2, r3, r6
 8006a82:	d004      	beq.n	8006a8e <_dtoa_r+0x7ce>
 8006a84:	4659      	mov	r1, fp
 8006a86:	4620      	mov	r0, r4
 8006a88:	f001 f8ae 	bl	8007be8 <__pow5mult>
 8006a8c:	4683      	mov	fp, r0
 8006a8e:	2101      	movs	r1, #1
 8006a90:	4620      	mov	r0, r4
 8006a92:	f000 ffed 	bl	8007a70 <__i2b>
 8006a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	4606      	mov	r6, r0
 8006a9c:	dd7c      	ble.n	8006b98 <_dtoa_r+0x8d8>
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	4601      	mov	r1, r0
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f001 f8a0 	bl	8007be8 <__pow5mult>
 8006aa8:	9b05      	ldr	r3, [sp, #20]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	4606      	mov	r6, r0
 8006aae:	dd76      	ble.n	8006b9e <_dtoa_r+0x8de>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	9306      	str	r3, [sp, #24]
 8006ab4:	6933      	ldr	r3, [r6, #16]
 8006ab6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006aba:	6918      	ldr	r0, [r3, #16]
 8006abc:	f000 ff88 	bl	80079d0 <__hi0bits>
 8006ac0:	f1c0 0020 	rsb	r0, r0, #32
 8006ac4:	9b04      	ldr	r3, [sp, #16]
 8006ac6:	4418      	add	r0, r3
 8006ac8:	f010 001f 	ands.w	r0, r0, #31
 8006acc:	f000 8086 	beq.w	8006bdc <_dtoa_r+0x91c>
 8006ad0:	f1c0 0320 	rsb	r3, r0, #32
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	dd7f      	ble.n	8006bd8 <_dtoa_r+0x918>
 8006ad8:	f1c0 001c 	rsb	r0, r0, #28
 8006adc:	9b04      	ldr	r3, [sp, #16]
 8006ade:	4403      	add	r3, r0
 8006ae0:	4480      	add	r8, r0
 8006ae2:	4405      	add	r5, r0
 8006ae4:	9304      	str	r3, [sp, #16]
 8006ae6:	f1b8 0f00 	cmp.w	r8, #0
 8006aea:	dd05      	ble.n	8006af8 <_dtoa_r+0x838>
 8006aec:	4659      	mov	r1, fp
 8006aee:	4642      	mov	r2, r8
 8006af0:	4620      	mov	r0, r4
 8006af2:	f001 f8d3 	bl	8007c9c <__lshift>
 8006af6:	4683      	mov	fp, r0
 8006af8:	9b04      	ldr	r3, [sp, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	dd05      	ble.n	8006b0a <_dtoa_r+0x84a>
 8006afe:	4631      	mov	r1, r6
 8006b00:	461a      	mov	r2, r3
 8006b02:	4620      	mov	r0, r4
 8006b04:	f001 f8ca 	bl	8007c9c <__lshift>
 8006b08:	4606      	mov	r6, r0
 8006b0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d069      	beq.n	8006be4 <_dtoa_r+0x924>
 8006b10:	4631      	mov	r1, r6
 8006b12:	4658      	mov	r0, fp
 8006b14:	f001 f92e 	bl	8007d74 <__mcmp>
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	da63      	bge.n	8006be4 <_dtoa_r+0x924>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	4659      	mov	r1, fp
 8006b20:	220a      	movs	r2, #10
 8006b22:	4620      	mov	r0, r4
 8006b24:	f000 fec0 	bl	80078a8 <__multadd>
 8006b28:	9b08      	ldr	r3, [sp, #32]
 8006b2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b2e:	4683      	mov	fp, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 818f 	beq.w	8006e54 <_dtoa_r+0xb94>
 8006b36:	4639      	mov	r1, r7
 8006b38:	2300      	movs	r3, #0
 8006b3a:	220a      	movs	r2, #10
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f000 feb3 	bl	80078a8 <__multadd>
 8006b42:	f1b9 0f00 	cmp.w	r9, #0
 8006b46:	4607      	mov	r7, r0
 8006b48:	f300 808e 	bgt.w	8006c68 <_dtoa_r+0x9a8>
 8006b4c:	9b05      	ldr	r3, [sp, #20]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	dc50      	bgt.n	8006bf4 <_dtoa_r+0x934>
 8006b52:	e089      	b.n	8006c68 <_dtoa_r+0x9a8>
 8006b54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b5a:	e75d      	b.n	8006a18 <_dtoa_r+0x758>
 8006b5c:	9b01      	ldr	r3, [sp, #4]
 8006b5e:	1e5e      	subs	r6, r3, #1
 8006b60:	9b06      	ldr	r3, [sp, #24]
 8006b62:	42b3      	cmp	r3, r6
 8006b64:	bfbf      	itttt	lt
 8006b66:	9b06      	ldrlt	r3, [sp, #24]
 8006b68:	9606      	strlt	r6, [sp, #24]
 8006b6a:	1af2      	sublt	r2, r6, r3
 8006b6c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006b6e:	bfb6      	itet	lt
 8006b70:	189b      	addlt	r3, r3, r2
 8006b72:	1b9e      	subge	r6, r3, r6
 8006b74:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006b76:	9b01      	ldr	r3, [sp, #4]
 8006b78:	bfb8      	it	lt
 8006b7a:	2600      	movlt	r6, #0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	bfb5      	itete	lt
 8006b80:	eba8 0503 	sublt.w	r5, r8, r3
 8006b84:	9b01      	ldrge	r3, [sp, #4]
 8006b86:	2300      	movlt	r3, #0
 8006b88:	4645      	movge	r5, r8
 8006b8a:	e747      	b.n	8006a1c <_dtoa_r+0x75c>
 8006b8c:	9e06      	ldr	r6, [sp, #24]
 8006b8e:	9f08      	ldr	r7, [sp, #32]
 8006b90:	4645      	mov	r5, r8
 8006b92:	e74c      	b.n	8006a2e <_dtoa_r+0x76e>
 8006b94:	9a06      	ldr	r2, [sp, #24]
 8006b96:	e775      	b.n	8006a84 <_dtoa_r+0x7c4>
 8006b98:	9b05      	ldr	r3, [sp, #20]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	dc18      	bgt.n	8006bd0 <_dtoa_r+0x910>
 8006b9e:	9b02      	ldr	r3, [sp, #8]
 8006ba0:	b9b3      	cbnz	r3, 8006bd0 <_dtoa_r+0x910>
 8006ba2:	9b03      	ldr	r3, [sp, #12]
 8006ba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ba8:	b9a3      	cbnz	r3, 8006bd4 <_dtoa_r+0x914>
 8006baa:	9b03      	ldr	r3, [sp, #12]
 8006bac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bb0:	0d1b      	lsrs	r3, r3, #20
 8006bb2:	051b      	lsls	r3, r3, #20
 8006bb4:	b12b      	cbz	r3, 8006bc2 <_dtoa_r+0x902>
 8006bb6:	9b04      	ldr	r3, [sp, #16]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	9304      	str	r3, [sp, #16]
 8006bbc:	f108 0801 	add.w	r8, r8, #1
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	9306      	str	r3, [sp, #24]
 8006bc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f47f af74 	bne.w	8006ab4 <_dtoa_r+0x7f4>
 8006bcc:	2001      	movs	r0, #1
 8006bce:	e779      	b.n	8006ac4 <_dtoa_r+0x804>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	e7f6      	b.n	8006bc2 <_dtoa_r+0x902>
 8006bd4:	9b02      	ldr	r3, [sp, #8]
 8006bd6:	e7f4      	b.n	8006bc2 <_dtoa_r+0x902>
 8006bd8:	d085      	beq.n	8006ae6 <_dtoa_r+0x826>
 8006bda:	4618      	mov	r0, r3
 8006bdc:	301c      	adds	r0, #28
 8006bde:	e77d      	b.n	8006adc <_dtoa_r+0x81c>
 8006be0:	40240000 	.word	0x40240000
 8006be4:	9b01      	ldr	r3, [sp, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	dc38      	bgt.n	8006c5c <_dtoa_r+0x99c>
 8006bea:	9b05      	ldr	r3, [sp, #20]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	dd35      	ble.n	8006c5c <_dtoa_r+0x99c>
 8006bf0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006bf4:	f1b9 0f00 	cmp.w	r9, #0
 8006bf8:	d10d      	bne.n	8006c16 <_dtoa_r+0x956>
 8006bfa:	4631      	mov	r1, r6
 8006bfc:	464b      	mov	r3, r9
 8006bfe:	2205      	movs	r2, #5
 8006c00:	4620      	mov	r0, r4
 8006c02:	f000 fe51 	bl	80078a8 <__multadd>
 8006c06:	4601      	mov	r1, r0
 8006c08:	4606      	mov	r6, r0
 8006c0a:	4658      	mov	r0, fp
 8006c0c:	f001 f8b2 	bl	8007d74 <__mcmp>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	f73f adbd 	bgt.w	8006790 <_dtoa_r+0x4d0>
 8006c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c18:	9d00      	ldr	r5, [sp, #0]
 8006c1a:	ea6f 0a03 	mvn.w	sl, r3
 8006c1e:	f04f 0800 	mov.w	r8, #0
 8006c22:	4631      	mov	r1, r6
 8006c24:	4620      	mov	r0, r4
 8006c26:	f000 fe1d 	bl	8007864 <_Bfree>
 8006c2a:	2f00      	cmp	r7, #0
 8006c2c:	f43f aeb4 	beq.w	8006998 <_dtoa_r+0x6d8>
 8006c30:	f1b8 0f00 	cmp.w	r8, #0
 8006c34:	d005      	beq.n	8006c42 <_dtoa_r+0x982>
 8006c36:	45b8      	cmp	r8, r7
 8006c38:	d003      	beq.n	8006c42 <_dtoa_r+0x982>
 8006c3a:	4641      	mov	r1, r8
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f000 fe11 	bl	8007864 <_Bfree>
 8006c42:	4639      	mov	r1, r7
 8006c44:	4620      	mov	r0, r4
 8006c46:	f000 fe0d 	bl	8007864 <_Bfree>
 8006c4a:	e6a5      	b.n	8006998 <_dtoa_r+0x6d8>
 8006c4c:	2600      	movs	r6, #0
 8006c4e:	4637      	mov	r7, r6
 8006c50:	e7e1      	b.n	8006c16 <_dtoa_r+0x956>
 8006c52:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006c54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006c58:	4637      	mov	r7, r6
 8006c5a:	e599      	b.n	8006790 <_dtoa_r+0x4d0>
 8006c5c:	9b08      	ldr	r3, [sp, #32]
 8006c5e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f000 80fd 	beq.w	8006e62 <_dtoa_r+0xba2>
 8006c68:	2d00      	cmp	r5, #0
 8006c6a:	dd05      	ble.n	8006c78 <_dtoa_r+0x9b8>
 8006c6c:	4639      	mov	r1, r7
 8006c6e:	462a      	mov	r2, r5
 8006c70:	4620      	mov	r0, r4
 8006c72:	f001 f813 	bl	8007c9c <__lshift>
 8006c76:	4607      	mov	r7, r0
 8006c78:	9b06      	ldr	r3, [sp, #24]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d05c      	beq.n	8006d38 <_dtoa_r+0xa78>
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	4620      	mov	r0, r4
 8006c82:	f000 fdaf 	bl	80077e4 <_Balloc>
 8006c86:	4605      	mov	r5, r0
 8006c88:	b928      	cbnz	r0, 8006c96 <_dtoa_r+0x9d6>
 8006c8a:	4b80      	ldr	r3, [pc, #512]	; (8006e8c <_dtoa_r+0xbcc>)
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006c92:	f7ff bb2e 	b.w	80062f2 <_dtoa_r+0x32>
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	3202      	adds	r2, #2
 8006c9a:	0092      	lsls	r2, r2, #2
 8006c9c:	f107 010c 	add.w	r1, r7, #12
 8006ca0:	300c      	adds	r0, #12
 8006ca2:	f000 fd91 	bl	80077c8 <memcpy>
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	4629      	mov	r1, r5
 8006caa:	4620      	mov	r0, r4
 8006cac:	f000 fff6 	bl	8007c9c <__lshift>
 8006cb0:	9b00      	ldr	r3, [sp, #0]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	9301      	str	r3, [sp, #4]
 8006cb6:	9b00      	ldr	r3, [sp, #0]
 8006cb8:	444b      	add	r3, r9
 8006cba:	9307      	str	r3, [sp, #28]
 8006cbc:	9b02      	ldr	r3, [sp, #8]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	46b8      	mov	r8, r7
 8006cc4:	9306      	str	r3, [sp, #24]
 8006cc6:	4607      	mov	r7, r0
 8006cc8:	9b01      	ldr	r3, [sp, #4]
 8006cca:	4631      	mov	r1, r6
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	4658      	mov	r0, fp
 8006cd0:	9302      	str	r3, [sp, #8]
 8006cd2:	f7ff fa69 	bl	80061a8 <quorem>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	3330      	adds	r3, #48	; 0x30
 8006cda:	9004      	str	r0, [sp, #16]
 8006cdc:	4641      	mov	r1, r8
 8006cde:	4658      	mov	r0, fp
 8006ce0:	9308      	str	r3, [sp, #32]
 8006ce2:	f001 f847 	bl	8007d74 <__mcmp>
 8006ce6:	463a      	mov	r2, r7
 8006ce8:	4681      	mov	r9, r0
 8006cea:	4631      	mov	r1, r6
 8006cec:	4620      	mov	r0, r4
 8006cee:	f001 f85d 	bl	8007dac <__mdiff>
 8006cf2:	68c2      	ldr	r2, [r0, #12]
 8006cf4:	9b08      	ldr	r3, [sp, #32]
 8006cf6:	4605      	mov	r5, r0
 8006cf8:	bb02      	cbnz	r2, 8006d3c <_dtoa_r+0xa7c>
 8006cfa:	4601      	mov	r1, r0
 8006cfc:	4658      	mov	r0, fp
 8006cfe:	f001 f839 	bl	8007d74 <__mcmp>
 8006d02:	9b08      	ldr	r3, [sp, #32]
 8006d04:	4602      	mov	r2, r0
 8006d06:	4629      	mov	r1, r5
 8006d08:	4620      	mov	r0, r4
 8006d0a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006d0e:	f000 fda9 	bl	8007864 <_Bfree>
 8006d12:	9b05      	ldr	r3, [sp, #20]
 8006d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d16:	9d01      	ldr	r5, [sp, #4]
 8006d18:	ea43 0102 	orr.w	r1, r3, r2
 8006d1c:	9b06      	ldr	r3, [sp, #24]
 8006d1e:	430b      	orrs	r3, r1
 8006d20:	9b08      	ldr	r3, [sp, #32]
 8006d22:	d10d      	bne.n	8006d40 <_dtoa_r+0xa80>
 8006d24:	2b39      	cmp	r3, #57	; 0x39
 8006d26:	d029      	beq.n	8006d7c <_dtoa_r+0xabc>
 8006d28:	f1b9 0f00 	cmp.w	r9, #0
 8006d2c:	dd01      	ble.n	8006d32 <_dtoa_r+0xa72>
 8006d2e:	9b04      	ldr	r3, [sp, #16]
 8006d30:	3331      	adds	r3, #49	; 0x31
 8006d32:	9a02      	ldr	r2, [sp, #8]
 8006d34:	7013      	strb	r3, [r2, #0]
 8006d36:	e774      	b.n	8006c22 <_dtoa_r+0x962>
 8006d38:	4638      	mov	r0, r7
 8006d3a:	e7b9      	b.n	8006cb0 <_dtoa_r+0x9f0>
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	e7e2      	b.n	8006d06 <_dtoa_r+0xa46>
 8006d40:	f1b9 0f00 	cmp.w	r9, #0
 8006d44:	db06      	blt.n	8006d54 <_dtoa_r+0xa94>
 8006d46:	9905      	ldr	r1, [sp, #20]
 8006d48:	ea41 0909 	orr.w	r9, r1, r9
 8006d4c:	9906      	ldr	r1, [sp, #24]
 8006d4e:	ea59 0101 	orrs.w	r1, r9, r1
 8006d52:	d120      	bne.n	8006d96 <_dtoa_r+0xad6>
 8006d54:	2a00      	cmp	r2, #0
 8006d56:	ddec      	ble.n	8006d32 <_dtoa_r+0xa72>
 8006d58:	4659      	mov	r1, fp
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	9301      	str	r3, [sp, #4]
 8006d60:	f000 ff9c 	bl	8007c9c <__lshift>
 8006d64:	4631      	mov	r1, r6
 8006d66:	4683      	mov	fp, r0
 8006d68:	f001 f804 	bl	8007d74 <__mcmp>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	9b01      	ldr	r3, [sp, #4]
 8006d70:	dc02      	bgt.n	8006d78 <_dtoa_r+0xab8>
 8006d72:	d1de      	bne.n	8006d32 <_dtoa_r+0xa72>
 8006d74:	07da      	lsls	r2, r3, #31
 8006d76:	d5dc      	bpl.n	8006d32 <_dtoa_r+0xa72>
 8006d78:	2b39      	cmp	r3, #57	; 0x39
 8006d7a:	d1d8      	bne.n	8006d2e <_dtoa_r+0xa6e>
 8006d7c:	9a02      	ldr	r2, [sp, #8]
 8006d7e:	2339      	movs	r3, #57	; 0x39
 8006d80:	7013      	strb	r3, [r2, #0]
 8006d82:	462b      	mov	r3, r5
 8006d84:	461d      	mov	r5, r3
 8006d86:	3b01      	subs	r3, #1
 8006d88:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d8c:	2a39      	cmp	r2, #57	; 0x39
 8006d8e:	d050      	beq.n	8006e32 <_dtoa_r+0xb72>
 8006d90:	3201      	adds	r2, #1
 8006d92:	701a      	strb	r2, [r3, #0]
 8006d94:	e745      	b.n	8006c22 <_dtoa_r+0x962>
 8006d96:	2a00      	cmp	r2, #0
 8006d98:	dd03      	ble.n	8006da2 <_dtoa_r+0xae2>
 8006d9a:	2b39      	cmp	r3, #57	; 0x39
 8006d9c:	d0ee      	beq.n	8006d7c <_dtoa_r+0xabc>
 8006d9e:	3301      	adds	r3, #1
 8006da0:	e7c7      	b.n	8006d32 <_dtoa_r+0xa72>
 8006da2:	9a01      	ldr	r2, [sp, #4]
 8006da4:	9907      	ldr	r1, [sp, #28]
 8006da6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006daa:	428a      	cmp	r2, r1
 8006dac:	d02a      	beq.n	8006e04 <_dtoa_r+0xb44>
 8006dae:	4659      	mov	r1, fp
 8006db0:	2300      	movs	r3, #0
 8006db2:	220a      	movs	r2, #10
 8006db4:	4620      	mov	r0, r4
 8006db6:	f000 fd77 	bl	80078a8 <__multadd>
 8006dba:	45b8      	cmp	r8, r7
 8006dbc:	4683      	mov	fp, r0
 8006dbe:	f04f 0300 	mov.w	r3, #0
 8006dc2:	f04f 020a 	mov.w	r2, #10
 8006dc6:	4641      	mov	r1, r8
 8006dc8:	4620      	mov	r0, r4
 8006dca:	d107      	bne.n	8006ddc <_dtoa_r+0xb1c>
 8006dcc:	f000 fd6c 	bl	80078a8 <__multadd>
 8006dd0:	4680      	mov	r8, r0
 8006dd2:	4607      	mov	r7, r0
 8006dd4:	9b01      	ldr	r3, [sp, #4]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	9301      	str	r3, [sp, #4]
 8006dda:	e775      	b.n	8006cc8 <_dtoa_r+0xa08>
 8006ddc:	f000 fd64 	bl	80078a8 <__multadd>
 8006de0:	4639      	mov	r1, r7
 8006de2:	4680      	mov	r8, r0
 8006de4:	2300      	movs	r3, #0
 8006de6:	220a      	movs	r2, #10
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 fd5d 	bl	80078a8 <__multadd>
 8006dee:	4607      	mov	r7, r0
 8006df0:	e7f0      	b.n	8006dd4 <_dtoa_r+0xb14>
 8006df2:	f1b9 0f00 	cmp.w	r9, #0
 8006df6:	9a00      	ldr	r2, [sp, #0]
 8006df8:	bfcc      	ite	gt
 8006dfa:	464d      	movgt	r5, r9
 8006dfc:	2501      	movle	r5, #1
 8006dfe:	4415      	add	r5, r2
 8006e00:	f04f 0800 	mov.w	r8, #0
 8006e04:	4659      	mov	r1, fp
 8006e06:	2201      	movs	r2, #1
 8006e08:	4620      	mov	r0, r4
 8006e0a:	9301      	str	r3, [sp, #4]
 8006e0c:	f000 ff46 	bl	8007c9c <__lshift>
 8006e10:	4631      	mov	r1, r6
 8006e12:	4683      	mov	fp, r0
 8006e14:	f000 ffae 	bl	8007d74 <__mcmp>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	dcb2      	bgt.n	8006d82 <_dtoa_r+0xac2>
 8006e1c:	d102      	bne.n	8006e24 <_dtoa_r+0xb64>
 8006e1e:	9b01      	ldr	r3, [sp, #4]
 8006e20:	07db      	lsls	r3, r3, #31
 8006e22:	d4ae      	bmi.n	8006d82 <_dtoa_r+0xac2>
 8006e24:	462b      	mov	r3, r5
 8006e26:	461d      	mov	r5, r3
 8006e28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e2c:	2a30      	cmp	r2, #48	; 0x30
 8006e2e:	d0fa      	beq.n	8006e26 <_dtoa_r+0xb66>
 8006e30:	e6f7      	b.n	8006c22 <_dtoa_r+0x962>
 8006e32:	9a00      	ldr	r2, [sp, #0]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d1a5      	bne.n	8006d84 <_dtoa_r+0xac4>
 8006e38:	f10a 0a01 	add.w	sl, sl, #1
 8006e3c:	2331      	movs	r3, #49	; 0x31
 8006e3e:	e779      	b.n	8006d34 <_dtoa_r+0xa74>
 8006e40:	4b13      	ldr	r3, [pc, #76]	; (8006e90 <_dtoa_r+0xbd0>)
 8006e42:	f7ff baaf 	b.w	80063a4 <_dtoa_r+0xe4>
 8006e46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f47f aa86 	bne.w	800635a <_dtoa_r+0x9a>
 8006e4e:	4b11      	ldr	r3, [pc, #68]	; (8006e94 <_dtoa_r+0xbd4>)
 8006e50:	f7ff baa8 	b.w	80063a4 <_dtoa_r+0xe4>
 8006e54:	f1b9 0f00 	cmp.w	r9, #0
 8006e58:	dc03      	bgt.n	8006e62 <_dtoa_r+0xba2>
 8006e5a:	9b05      	ldr	r3, [sp, #20]
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	f73f aec9 	bgt.w	8006bf4 <_dtoa_r+0x934>
 8006e62:	9d00      	ldr	r5, [sp, #0]
 8006e64:	4631      	mov	r1, r6
 8006e66:	4658      	mov	r0, fp
 8006e68:	f7ff f99e 	bl	80061a8 <quorem>
 8006e6c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006e70:	f805 3b01 	strb.w	r3, [r5], #1
 8006e74:	9a00      	ldr	r2, [sp, #0]
 8006e76:	1aaa      	subs	r2, r5, r2
 8006e78:	4591      	cmp	r9, r2
 8006e7a:	ddba      	ble.n	8006df2 <_dtoa_r+0xb32>
 8006e7c:	4659      	mov	r1, fp
 8006e7e:	2300      	movs	r3, #0
 8006e80:	220a      	movs	r2, #10
 8006e82:	4620      	mov	r0, r4
 8006e84:	f000 fd10 	bl	80078a8 <__multadd>
 8006e88:	4683      	mov	fp, r0
 8006e8a:	e7eb      	b.n	8006e64 <_dtoa_r+0xba4>
 8006e8c:	080094e9 	.word	0x080094e9
 8006e90:	08009248 	.word	0x08009248
 8006e94:	0800947d 	.word	0x0800947d

08006e98 <std>:
 8006e98:	2300      	movs	r3, #0
 8006e9a:	b510      	push	{r4, lr}
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	e9c0 3300 	strd	r3, r3, [r0]
 8006ea2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ea6:	6083      	str	r3, [r0, #8]
 8006ea8:	8181      	strh	r1, [r0, #12]
 8006eaa:	6643      	str	r3, [r0, #100]	; 0x64
 8006eac:	81c2      	strh	r2, [r0, #14]
 8006eae:	6183      	str	r3, [r0, #24]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	2208      	movs	r2, #8
 8006eb4:	305c      	adds	r0, #92	; 0x5c
 8006eb6:	f7fd fb65 	bl	8004584 <memset>
 8006eba:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <std+0x38>)
 8006ebc:	6263      	str	r3, [r4, #36]	; 0x24
 8006ebe:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <std+0x3c>)
 8006ec0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ec2:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <std+0x40>)
 8006ec4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ec6:	4b05      	ldr	r3, [pc, #20]	; (8006edc <std+0x44>)
 8006ec8:	6224      	str	r4, [r4, #32]
 8006eca:	6323      	str	r3, [r4, #48]	; 0x30
 8006ecc:	bd10      	pop	{r4, pc}
 8006ece:	bf00      	nop
 8006ed0:	08008869 	.word	0x08008869
 8006ed4:	0800888b 	.word	0x0800888b
 8006ed8:	080088c3 	.word	0x080088c3
 8006edc:	080088e7 	.word	0x080088e7

08006ee0 <_cleanup_r>:
 8006ee0:	4901      	ldr	r1, [pc, #4]	; (8006ee8 <_cleanup_r+0x8>)
 8006ee2:	f000 b8c1 	b.w	8007068 <_fwalk_reent>
 8006ee6:	bf00      	nop
 8006ee8:	08008bed 	.word	0x08008bed

08006eec <__sfmoreglue>:
 8006eec:	b570      	push	{r4, r5, r6, lr}
 8006eee:	1e4a      	subs	r2, r1, #1
 8006ef0:	2568      	movs	r5, #104	; 0x68
 8006ef2:	4355      	muls	r5, r2
 8006ef4:	460e      	mov	r6, r1
 8006ef6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006efa:	f001 f98d 	bl	8008218 <_malloc_r>
 8006efe:	4604      	mov	r4, r0
 8006f00:	b140      	cbz	r0, 8006f14 <__sfmoreglue+0x28>
 8006f02:	2100      	movs	r1, #0
 8006f04:	e9c0 1600 	strd	r1, r6, [r0]
 8006f08:	300c      	adds	r0, #12
 8006f0a:	60a0      	str	r0, [r4, #8]
 8006f0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f10:	f7fd fb38 	bl	8004584 <memset>
 8006f14:	4620      	mov	r0, r4
 8006f16:	bd70      	pop	{r4, r5, r6, pc}

08006f18 <__sfp_lock_acquire>:
 8006f18:	4801      	ldr	r0, [pc, #4]	; (8006f20 <__sfp_lock_acquire+0x8>)
 8006f1a:	f000 bc38 	b.w	800778e <__retarget_lock_acquire_recursive>
 8006f1e:	bf00      	nop
 8006f20:	200004c0 	.word	0x200004c0

08006f24 <__sfp_lock_release>:
 8006f24:	4801      	ldr	r0, [pc, #4]	; (8006f2c <__sfp_lock_release+0x8>)
 8006f26:	f000 bc33 	b.w	8007790 <__retarget_lock_release_recursive>
 8006f2a:	bf00      	nop
 8006f2c:	200004c0 	.word	0x200004c0

08006f30 <__sinit_lock_acquire>:
 8006f30:	4801      	ldr	r0, [pc, #4]	; (8006f38 <__sinit_lock_acquire+0x8>)
 8006f32:	f000 bc2c 	b.w	800778e <__retarget_lock_acquire_recursive>
 8006f36:	bf00      	nop
 8006f38:	200004bb 	.word	0x200004bb

08006f3c <__sinit_lock_release>:
 8006f3c:	4801      	ldr	r0, [pc, #4]	; (8006f44 <__sinit_lock_release+0x8>)
 8006f3e:	f000 bc27 	b.w	8007790 <__retarget_lock_release_recursive>
 8006f42:	bf00      	nop
 8006f44:	200004bb 	.word	0x200004bb

08006f48 <__sinit>:
 8006f48:	b510      	push	{r4, lr}
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	f7ff fff0 	bl	8006f30 <__sinit_lock_acquire>
 8006f50:	69a3      	ldr	r3, [r4, #24]
 8006f52:	b11b      	cbz	r3, 8006f5c <__sinit+0x14>
 8006f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f58:	f7ff bff0 	b.w	8006f3c <__sinit_lock_release>
 8006f5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f60:	6523      	str	r3, [r4, #80]	; 0x50
 8006f62:	4b13      	ldr	r3, [pc, #76]	; (8006fb0 <__sinit+0x68>)
 8006f64:	4a13      	ldr	r2, [pc, #76]	; (8006fb4 <__sinit+0x6c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f6a:	42a3      	cmp	r3, r4
 8006f6c:	bf04      	itt	eq
 8006f6e:	2301      	moveq	r3, #1
 8006f70:	61a3      	streq	r3, [r4, #24]
 8006f72:	4620      	mov	r0, r4
 8006f74:	f000 f820 	bl	8006fb8 <__sfp>
 8006f78:	6060      	str	r0, [r4, #4]
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f000 f81c 	bl	8006fb8 <__sfp>
 8006f80:	60a0      	str	r0, [r4, #8]
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 f818 	bl	8006fb8 <__sfp>
 8006f88:	2200      	movs	r2, #0
 8006f8a:	60e0      	str	r0, [r4, #12]
 8006f8c:	2104      	movs	r1, #4
 8006f8e:	6860      	ldr	r0, [r4, #4]
 8006f90:	f7ff ff82 	bl	8006e98 <std>
 8006f94:	68a0      	ldr	r0, [r4, #8]
 8006f96:	2201      	movs	r2, #1
 8006f98:	2109      	movs	r1, #9
 8006f9a:	f7ff ff7d 	bl	8006e98 <std>
 8006f9e:	68e0      	ldr	r0, [r4, #12]
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	2112      	movs	r1, #18
 8006fa4:	f7ff ff78 	bl	8006e98 <std>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	61a3      	str	r3, [r4, #24]
 8006fac:	e7d2      	b.n	8006f54 <__sinit+0xc>
 8006fae:	bf00      	nop
 8006fb0:	08009234 	.word	0x08009234
 8006fb4:	08006ee1 	.word	0x08006ee1

08006fb8 <__sfp>:
 8006fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fba:	4607      	mov	r7, r0
 8006fbc:	f7ff ffac 	bl	8006f18 <__sfp_lock_acquire>
 8006fc0:	4b1e      	ldr	r3, [pc, #120]	; (800703c <__sfp+0x84>)
 8006fc2:	681e      	ldr	r6, [r3, #0]
 8006fc4:	69b3      	ldr	r3, [r6, #24]
 8006fc6:	b913      	cbnz	r3, 8006fce <__sfp+0x16>
 8006fc8:	4630      	mov	r0, r6
 8006fca:	f7ff ffbd 	bl	8006f48 <__sinit>
 8006fce:	3648      	adds	r6, #72	; 0x48
 8006fd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	d503      	bpl.n	8006fe0 <__sfp+0x28>
 8006fd8:	6833      	ldr	r3, [r6, #0]
 8006fda:	b30b      	cbz	r3, 8007020 <__sfp+0x68>
 8006fdc:	6836      	ldr	r6, [r6, #0]
 8006fde:	e7f7      	b.n	8006fd0 <__sfp+0x18>
 8006fe0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006fe4:	b9d5      	cbnz	r5, 800701c <__sfp+0x64>
 8006fe6:	4b16      	ldr	r3, [pc, #88]	; (8007040 <__sfp+0x88>)
 8006fe8:	60e3      	str	r3, [r4, #12]
 8006fea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fee:	6665      	str	r5, [r4, #100]	; 0x64
 8006ff0:	f000 fbcc 	bl	800778c <__retarget_lock_init_recursive>
 8006ff4:	f7ff ff96 	bl	8006f24 <__sfp_lock_release>
 8006ff8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ffc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007000:	6025      	str	r5, [r4, #0]
 8007002:	61a5      	str	r5, [r4, #24]
 8007004:	2208      	movs	r2, #8
 8007006:	4629      	mov	r1, r5
 8007008:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800700c:	f7fd faba 	bl	8004584 <memset>
 8007010:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007014:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007018:	4620      	mov	r0, r4
 800701a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800701c:	3468      	adds	r4, #104	; 0x68
 800701e:	e7d9      	b.n	8006fd4 <__sfp+0x1c>
 8007020:	2104      	movs	r1, #4
 8007022:	4638      	mov	r0, r7
 8007024:	f7ff ff62 	bl	8006eec <__sfmoreglue>
 8007028:	4604      	mov	r4, r0
 800702a:	6030      	str	r0, [r6, #0]
 800702c:	2800      	cmp	r0, #0
 800702e:	d1d5      	bne.n	8006fdc <__sfp+0x24>
 8007030:	f7ff ff78 	bl	8006f24 <__sfp_lock_release>
 8007034:	230c      	movs	r3, #12
 8007036:	603b      	str	r3, [r7, #0]
 8007038:	e7ee      	b.n	8007018 <__sfp+0x60>
 800703a:	bf00      	nop
 800703c:	08009234 	.word	0x08009234
 8007040:	ffff0001 	.word	0xffff0001

08007044 <fiprintf>:
 8007044:	b40e      	push	{r1, r2, r3}
 8007046:	b503      	push	{r0, r1, lr}
 8007048:	4601      	mov	r1, r0
 800704a:	ab03      	add	r3, sp, #12
 800704c:	4805      	ldr	r0, [pc, #20]	; (8007064 <fiprintf+0x20>)
 800704e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007052:	6800      	ldr	r0, [r0, #0]
 8007054:	9301      	str	r3, [sp, #4]
 8007056:	f001 fabf 	bl	80085d8 <_vfiprintf_r>
 800705a:	b002      	add	sp, #8
 800705c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007060:	b003      	add	sp, #12
 8007062:	4770      	bx	lr
 8007064:	2000000c 	.word	0x2000000c

08007068 <_fwalk_reent>:
 8007068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800706c:	4606      	mov	r6, r0
 800706e:	4688      	mov	r8, r1
 8007070:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007074:	2700      	movs	r7, #0
 8007076:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800707a:	f1b9 0901 	subs.w	r9, r9, #1
 800707e:	d505      	bpl.n	800708c <_fwalk_reent+0x24>
 8007080:	6824      	ldr	r4, [r4, #0]
 8007082:	2c00      	cmp	r4, #0
 8007084:	d1f7      	bne.n	8007076 <_fwalk_reent+0xe>
 8007086:	4638      	mov	r0, r7
 8007088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800708c:	89ab      	ldrh	r3, [r5, #12]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d907      	bls.n	80070a2 <_fwalk_reent+0x3a>
 8007092:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007096:	3301      	adds	r3, #1
 8007098:	d003      	beq.n	80070a2 <_fwalk_reent+0x3a>
 800709a:	4629      	mov	r1, r5
 800709c:	4630      	mov	r0, r6
 800709e:	47c0      	blx	r8
 80070a0:	4307      	orrs	r7, r0
 80070a2:	3568      	adds	r5, #104	; 0x68
 80070a4:	e7e9      	b.n	800707a <_fwalk_reent+0x12>

080070a6 <rshift>:
 80070a6:	6903      	ldr	r3, [r0, #16]
 80070a8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80070ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070b0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80070b4:	f100 0414 	add.w	r4, r0, #20
 80070b8:	dd45      	ble.n	8007146 <rshift+0xa0>
 80070ba:	f011 011f 	ands.w	r1, r1, #31
 80070be:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80070c2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80070c6:	d10c      	bne.n	80070e2 <rshift+0x3c>
 80070c8:	f100 0710 	add.w	r7, r0, #16
 80070cc:	4629      	mov	r1, r5
 80070ce:	42b1      	cmp	r1, r6
 80070d0:	d334      	bcc.n	800713c <rshift+0x96>
 80070d2:	1a9b      	subs	r3, r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	1eea      	subs	r2, r5, #3
 80070d8:	4296      	cmp	r6, r2
 80070da:	bf38      	it	cc
 80070dc:	2300      	movcc	r3, #0
 80070de:	4423      	add	r3, r4
 80070e0:	e015      	b.n	800710e <rshift+0x68>
 80070e2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80070e6:	f1c1 0820 	rsb	r8, r1, #32
 80070ea:	40cf      	lsrs	r7, r1
 80070ec:	f105 0e04 	add.w	lr, r5, #4
 80070f0:	46a1      	mov	r9, r4
 80070f2:	4576      	cmp	r6, lr
 80070f4:	46f4      	mov	ip, lr
 80070f6:	d815      	bhi.n	8007124 <rshift+0x7e>
 80070f8:	1a9b      	subs	r3, r3, r2
 80070fa:	009a      	lsls	r2, r3, #2
 80070fc:	3a04      	subs	r2, #4
 80070fe:	3501      	adds	r5, #1
 8007100:	42ae      	cmp	r6, r5
 8007102:	bf38      	it	cc
 8007104:	2200      	movcc	r2, #0
 8007106:	18a3      	adds	r3, r4, r2
 8007108:	50a7      	str	r7, [r4, r2]
 800710a:	b107      	cbz	r7, 800710e <rshift+0x68>
 800710c:	3304      	adds	r3, #4
 800710e:	1b1a      	subs	r2, r3, r4
 8007110:	42a3      	cmp	r3, r4
 8007112:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007116:	bf08      	it	eq
 8007118:	2300      	moveq	r3, #0
 800711a:	6102      	str	r2, [r0, #16]
 800711c:	bf08      	it	eq
 800711e:	6143      	streq	r3, [r0, #20]
 8007120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007124:	f8dc c000 	ldr.w	ip, [ip]
 8007128:	fa0c fc08 	lsl.w	ip, ip, r8
 800712c:	ea4c 0707 	orr.w	r7, ip, r7
 8007130:	f849 7b04 	str.w	r7, [r9], #4
 8007134:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007138:	40cf      	lsrs	r7, r1
 800713a:	e7da      	b.n	80070f2 <rshift+0x4c>
 800713c:	f851 cb04 	ldr.w	ip, [r1], #4
 8007140:	f847 cf04 	str.w	ip, [r7, #4]!
 8007144:	e7c3      	b.n	80070ce <rshift+0x28>
 8007146:	4623      	mov	r3, r4
 8007148:	e7e1      	b.n	800710e <rshift+0x68>

0800714a <__hexdig_fun>:
 800714a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800714e:	2b09      	cmp	r3, #9
 8007150:	d802      	bhi.n	8007158 <__hexdig_fun+0xe>
 8007152:	3820      	subs	r0, #32
 8007154:	b2c0      	uxtb	r0, r0
 8007156:	4770      	bx	lr
 8007158:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800715c:	2b05      	cmp	r3, #5
 800715e:	d801      	bhi.n	8007164 <__hexdig_fun+0x1a>
 8007160:	3847      	subs	r0, #71	; 0x47
 8007162:	e7f7      	b.n	8007154 <__hexdig_fun+0xa>
 8007164:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007168:	2b05      	cmp	r3, #5
 800716a:	d801      	bhi.n	8007170 <__hexdig_fun+0x26>
 800716c:	3827      	subs	r0, #39	; 0x27
 800716e:	e7f1      	b.n	8007154 <__hexdig_fun+0xa>
 8007170:	2000      	movs	r0, #0
 8007172:	4770      	bx	lr

08007174 <__gethex>:
 8007174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007178:	ed2d 8b02 	vpush	{d8}
 800717c:	b089      	sub	sp, #36	; 0x24
 800717e:	ee08 0a10 	vmov	s16, r0
 8007182:	9304      	str	r3, [sp, #16]
 8007184:	4bbc      	ldr	r3, [pc, #752]	; (8007478 <__gethex+0x304>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	9301      	str	r3, [sp, #4]
 800718a:	4618      	mov	r0, r3
 800718c:	468b      	mov	fp, r1
 800718e:	4690      	mov	r8, r2
 8007190:	f7f9 f81e 	bl	80001d0 <strlen>
 8007194:	9b01      	ldr	r3, [sp, #4]
 8007196:	f8db 2000 	ldr.w	r2, [fp]
 800719a:	4403      	add	r3, r0
 800719c:	4682      	mov	sl, r0
 800719e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80071a2:	9305      	str	r3, [sp, #20]
 80071a4:	1c93      	adds	r3, r2, #2
 80071a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80071aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80071ae:	32fe      	adds	r2, #254	; 0xfe
 80071b0:	18d1      	adds	r1, r2, r3
 80071b2:	461f      	mov	r7, r3
 80071b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80071b8:	9100      	str	r1, [sp, #0]
 80071ba:	2830      	cmp	r0, #48	; 0x30
 80071bc:	d0f8      	beq.n	80071b0 <__gethex+0x3c>
 80071be:	f7ff ffc4 	bl	800714a <__hexdig_fun>
 80071c2:	4604      	mov	r4, r0
 80071c4:	2800      	cmp	r0, #0
 80071c6:	d13a      	bne.n	800723e <__gethex+0xca>
 80071c8:	9901      	ldr	r1, [sp, #4]
 80071ca:	4652      	mov	r2, sl
 80071cc:	4638      	mov	r0, r7
 80071ce:	f7fe f8a1 	bl	8005314 <strncmp>
 80071d2:	4605      	mov	r5, r0
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d168      	bne.n	80072aa <__gethex+0x136>
 80071d8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80071dc:	eb07 060a 	add.w	r6, r7, sl
 80071e0:	f7ff ffb3 	bl	800714a <__hexdig_fun>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d062      	beq.n	80072ae <__gethex+0x13a>
 80071e8:	4633      	mov	r3, r6
 80071ea:	7818      	ldrb	r0, [r3, #0]
 80071ec:	2830      	cmp	r0, #48	; 0x30
 80071ee:	461f      	mov	r7, r3
 80071f0:	f103 0301 	add.w	r3, r3, #1
 80071f4:	d0f9      	beq.n	80071ea <__gethex+0x76>
 80071f6:	f7ff ffa8 	bl	800714a <__hexdig_fun>
 80071fa:	2301      	movs	r3, #1
 80071fc:	fab0 f480 	clz	r4, r0
 8007200:	0964      	lsrs	r4, r4, #5
 8007202:	4635      	mov	r5, r6
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	463a      	mov	r2, r7
 8007208:	4616      	mov	r6, r2
 800720a:	3201      	adds	r2, #1
 800720c:	7830      	ldrb	r0, [r6, #0]
 800720e:	f7ff ff9c 	bl	800714a <__hexdig_fun>
 8007212:	2800      	cmp	r0, #0
 8007214:	d1f8      	bne.n	8007208 <__gethex+0x94>
 8007216:	9901      	ldr	r1, [sp, #4]
 8007218:	4652      	mov	r2, sl
 800721a:	4630      	mov	r0, r6
 800721c:	f7fe f87a 	bl	8005314 <strncmp>
 8007220:	b980      	cbnz	r0, 8007244 <__gethex+0xd0>
 8007222:	b94d      	cbnz	r5, 8007238 <__gethex+0xc4>
 8007224:	eb06 050a 	add.w	r5, r6, sl
 8007228:	462a      	mov	r2, r5
 800722a:	4616      	mov	r6, r2
 800722c:	3201      	adds	r2, #1
 800722e:	7830      	ldrb	r0, [r6, #0]
 8007230:	f7ff ff8b 	bl	800714a <__hexdig_fun>
 8007234:	2800      	cmp	r0, #0
 8007236:	d1f8      	bne.n	800722a <__gethex+0xb6>
 8007238:	1bad      	subs	r5, r5, r6
 800723a:	00ad      	lsls	r5, r5, #2
 800723c:	e004      	b.n	8007248 <__gethex+0xd4>
 800723e:	2400      	movs	r4, #0
 8007240:	4625      	mov	r5, r4
 8007242:	e7e0      	b.n	8007206 <__gethex+0x92>
 8007244:	2d00      	cmp	r5, #0
 8007246:	d1f7      	bne.n	8007238 <__gethex+0xc4>
 8007248:	7833      	ldrb	r3, [r6, #0]
 800724a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800724e:	2b50      	cmp	r3, #80	; 0x50
 8007250:	d13b      	bne.n	80072ca <__gethex+0x156>
 8007252:	7873      	ldrb	r3, [r6, #1]
 8007254:	2b2b      	cmp	r3, #43	; 0x2b
 8007256:	d02c      	beq.n	80072b2 <__gethex+0x13e>
 8007258:	2b2d      	cmp	r3, #45	; 0x2d
 800725a:	d02e      	beq.n	80072ba <__gethex+0x146>
 800725c:	1c71      	adds	r1, r6, #1
 800725e:	f04f 0900 	mov.w	r9, #0
 8007262:	7808      	ldrb	r0, [r1, #0]
 8007264:	f7ff ff71 	bl	800714a <__hexdig_fun>
 8007268:	1e43      	subs	r3, r0, #1
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b18      	cmp	r3, #24
 800726e:	d82c      	bhi.n	80072ca <__gethex+0x156>
 8007270:	f1a0 0210 	sub.w	r2, r0, #16
 8007274:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007278:	f7ff ff67 	bl	800714a <__hexdig_fun>
 800727c:	1e43      	subs	r3, r0, #1
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b18      	cmp	r3, #24
 8007282:	d91d      	bls.n	80072c0 <__gethex+0x14c>
 8007284:	f1b9 0f00 	cmp.w	r9, #0
 8007288:	d000      	beq.n	800728c <__gethex+0x118>
 800728a:	4252      	negs	r2, r2
 800728c:	4415      	add	r5, r2
 800728e:	f8cb 1000 	str.w	r1, [fp]
 8007292:	b1e4      	cbz	r4, 80072ce <__gethex+0x15a>
 8007294:	9b00      	ldr	r3, [sp, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	bf14      	ite	ne
 800729a:	2700      	movne	r7, #0
 800729c:	2706      	moveq	r7, #6
 800729e:	4638      	mov	r0, r7
 80072a0:	b009      	add	sp, #36	; 0x24
 80072a2:	ecbd 8b02 	vpop	{d8}
 80072a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072aa:	463e      	mov	r6, r7
 80072ac:	4625      	mov	r5, r4
 80072ae:	2401      	movs	r4, #1
 80072b0:	e7ca      	b.n	8007248 <__gethex+0xd4>
 80072b2:	f04f 0900 	mov.w	r9, #0
 80072b6:	1cb1      	adds	r1, r6, #2
 80072b8:	e7d3      	b.n	8007262 <__gethex+0xee>
 80072ba:	f04f 0901 	mov.w	r9, #1
 80072be:	e7fa      	b.n	80072b6 <__gethex+0x142>
 80072c0:	230a      	movs	r3, #10
 80072c2:	fb03 0202 	mla	r2, r3, r2, r0
 80072c6:	3a10      	subs	r2, #16
 80072c8:	e7d4      	b.n	8007274 <__gethex+0x100>
 80072ca:	4631      	mov	r1, r6
 80072cc:	e7df      	b.n	800728e <__gethex+0x11a>
 80072ce:	1bf3      	subs	r3, r6, r7
 80072d0:	3b01      	subs	r3, #1
 80072d2:	4621      	mov	r1, r4
 80072d4:	2b07      	cmp	r3, #7
 80072d6:	dc0b      	bgt.n	80072f0 <__gethex+0x17c>
 80072d8:	ee18 0a10 	vmov	r0, s16
 80072dc:	f000 fa82 	bl	80077e4 <_Balloc>
 80072e0:	4604      	mov	r4, r0
 80072e2:	b940      	cbnz	r0, 80072f6 <__gethex+0x182>
 80072e4:	4b65      	ldr	r3, [pc, #404]	; (800747c <__gethex+0x308>)
 80072e6:	4602      	mov	r2, r0
 80072e8:	21de      	movs	r1, #222	; 0xde
 80072ea:	4865      	ldr	r0, [pc, #404]	; (8007480 <__gethex+0x30c>)
 80072ec:	f7fe ff3e 	bl	800616c <__assert_func>
 80072f0:	3101      	adds	r1, #1
 80072f2:	105b      	asrs	r3, r3, #1
 80072f4:	e7ee      	b.n	80072d4 <__gethex+0x160>
 80072f6:	f100 0914 	add.w	r9, r0, #20
 80072fa:	f04f 0b00 	mov.w	fp, #0
 80072fe:	f1ca 0301 	rsb	r3, sl, #1
 8007302:	f8cd 9008 	str.w	r9, [sp, #8]
 8007306:	f8cd b000 	str.w	fp, [sp]
 800730a:	9306      	str	r3, [sp, #24]
 800730c:	42b7      	cmp	r7, r6
 800730e:	d340      	bcc.n	8007392 <__gethex+0x21e>
 8007310:	9802      	ldr	r0, [sp, #8]
 8007312:	9b00      	ldr	r3, [sp, #0]
 8007314:	f840 3b04 	str.w	r3, [r0], #4
 8007318:	eba0 0009 	sub.w	r0, r0, r9
 800731c:	1080      	asrs	r0, r0, #2
 800731e:	0146      	lsls	r6, r0, #5
 8007320:	6120      	str	r0, [r4, #16]
 8007322:	4618      	mov	r0, r3
 8007324:	f000 fb54 	bl	80079d0 <__hi0bits>
 8007328:	1a30      	subs	r0, r6, r0
 800732a:	f8d8 6000 	ldr.w	r6, [r8]
 800732e:	42b0      	cmp	r0, r6
 8007330:	dd63      	ble.n	80073fa <__gethex+0x286>
 8007332:	1b87      	subs	r7, r0, r6
 8007334:	4639      	mov	r1, r7
 8007336:	4620      	mov	r0, r4
 8007338:	f000 feee 	bl	8008118 <__any_on>
 800733c:	4682      	mov	sl, r0
 800733e:	b1a8      	cbz	r0, 800736c <__gethex+0x1f8>
 8007340:	1e7b      	subs	r3, r7, #1
 8007342:	1159      	asrs	r1, r3, #5
 8007344:	f003 021f 	and.w	r2, r3, #31
 8007348:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800734c:	f04f 0a01 	mov.w	sl, #1
 8007350:	fa0a f202 	lsl.w	r2, sl, r2
 8007354:	420a      	tst	r2, r1
 8007356:	d009      	beq.n	800736c <__gethex+0x1f8>
 8007358:	4553      	cmp	r3, sl
 800735a:	dd05      	ble.n	8007368 <__gethex+0x1f4>
 800735c:	1eb9      	subs	r1, r7, #2
 800735e:	4620      	mov	r0, r4
 8007360:	f000 feda 	bl	8008118 <__any_on>
 8007364:	2800      	cmp	r0, #0
 8007366:	d145      	bne.n	80073f4 <__gethex+0x280>
 8007368:	f04f 0a02 	mov.w	sl, #2
 800736c:	4639      	mov	r1, r7
 800736e:	4620      	mov	r0, r4
 8007370:	f7ff fe99 	bl	80070a6 <rshift>
 8007374:	443d      	add	r5, r7
 8007376:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800737a:	42ab      	cmp	r3, r5
 800737c:	da4c      	bge.n	8007418 <__gethex+0x2a4>
 800737e:	ee18 0a10 	vmov	r0, s16
 8007382:	4621      	mov	r1, r4
 8007384:	f000 fa6e 	bl	8007864 <_Bfree>
 8007388:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800738a:	2300      	movs	r3, #0
 800738c:	6013      	str	r3, [r2, #0]
 800738e:	27a3      	movs	r7, #163	; 0xa3
 8007390:	e785      	b.n	800729e <__gethex+0x12a>
 8007392:	1e73      	subs	r3, r6, #1
 8007394:	9a05      	ldr	r2, [sp, #20]
 8007396:	9303      	str	r3, [sp, #12]
 8007398:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800739c:	4293      	cmp	r3, r2
 800739e:	d019      	beq.n	80073d4 <__gethex+0x260>
 80073a0:	f1bb 0f20 	cmp.w	fp, #32
 80073a4:	d107      	bne.n	80073b6 <__gethex+0x242>
 80073a6:	9b02      	ldr	r3, [sp, #8]
 80073a8:	9a00      	ldr	r2, [sp, #0]
 80073aa:	f843 2b04 	str.w	r2, [r3], #4
 80073ae:	9302      	str	r3, [sp, #8]
 80073b0:	2300      	movs	r3, #0
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	469b      	mov	fp, r3
 80073b6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80073ba:	f7ff fec6 	bl	800714a <__hexdig_fun>
 80073be:	9b00      	ldr	r3, [sp, #0]
 80073c0:	f000 000f 	and.w	r0, r0, #15
 80073c4:	fa00 f00b 	lsl.w	r0, r0, fp
 80073c8:	4303      	orrs	r3, r0
 80073ca:	9300      	str	r3, [sp, #0]
 80073cc:	f10b 0b04 	add.w	fp, fp, #4
 80073d0:	9b03      	ldr	r3, [sp, #12]
 80073d2:	e00d      	b.n	80073f0 <__gethex+0x27c>
 80073d4:	9b03      	ldr	r3, [sp, #12]
 80073d6:	9a06      	ldr	r2, [sp, #24]
 80073d8:	4413      	add	r3, r2
 80073da:	42bb      	cmp	r3, r7
 80073dc:	d3e0      	bcc.n	80073a0 <__gethex+0x22c>
 80073de:	4618      	mov	r0, r3
 80073e0:	9901      	ldr	r1, [sp, #4]
 80073e2:	9307      	str	r3, [sp, #28]
 80073e4:	4652      	mov	r2, sl
 80073e6:	f7fd ff95 	bl	8005314 <strncmp>
 80073ea:	9b07      	ldr	r3, [sp, #28]
 80073ec:	2800      	cmp	r0, #0
 80073ee:	d1d7      	bne.n	80073a0 <__gethex+0x22c>
 80073f0:	461e      	mov	r6, r3
 80073f2:	e78b      	b.n	800730c <__gethex+0x198>
 80073f4:	f04f 0a03 	mov.w	sl, #3
 80073f8:	e7b8      	b.n	800736c <__gethex+0x1f8>
 80073fa:	da0a      	bge.n	8007412 <__gethex+0x29e>
 80073fc:	1a37      	subs	r7, r6, r0
 80073fe:	4621      	mov	r1, r4
 8007400:	ee18 0a10 	vmov	r0, s16
 8007404:	463a      	mov	r2, r7
 8007406:	f000 fc49 	bl	8007c9c <__lshift>
 800740a:	1bed      	subs	r5, r5, r7
 800740c:	4604      	mov	r4, r0
 800740e:	f100 0914 	add.w	r9, r0, #20
 8007412:	f04f 0a00 	mov.w	sl, #0
 8007416:	e7ae      	b.n	8007376 <__gethex+0x202>
 8007418:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800741c:	42a8      	cmp	r0, r5
 800741e:	dd72      	ble.n	8007506 <__gethex+0x392>
 8007420:	1b45      	subs	r5, r0, r5
 8007422:	42ae      	cmp	r6, r5
 8007424:	dc36      	bgt.n	8007494 <__gethex+0x320>
 8007426:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800742a:	2b02      	cmp	r3, #2
 800742c:	d02a      	beq.n	8007484 <__gethex+0x310>
 800742e:	2b03      	cmp	r3, #3
 8007430:	d02c      	beq.n	800748c <__gethex+0x318>
 8007432:	2b01      	cmp	r3, #1
 8007434:	d115      	bne.n	8007462 <__gethex+0x2ee>
 8007436:	42ae      	cmp	r6, r5
 8007438:	d113      	bne.n	8007462 <__gethex+0x2ee>
 800743a:	2e01      	cmp	r6, #1
 800743c:	d10b      	bne.n	8007456 <__gethex+0x2e2>
 800743e:	9a04      	ldr	r2, [sp, #16]
 8007440:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007444:	6013      	str	r3, [r2, #0]
 8007446:	2301      	movs	r3, #1
 8007448:	6123      	str	r3, [r4, #16]
 800744a:	f8c9 3000 	str.w	r3, [r9]
 800744e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007450:	2762      	movs	r7, #98	; 0x62
 8007452:	601c      	str	r4, [r3, #0]
 8007454:	e723      	b.n	800729e <__gethex+0x12a>
 8007456:	1e71      	subs	r1, r6, #1
 8007458:	4620      	mov	r0, r4
 800745a:	f000 fe5d 	bl	8008118 <__any_on>
 800745e:	2800      	cmp	r0, #0
 8007460:	d1ed      	bne.n	800743e <__gethex+0x2ca>
 8007462:	ee18 0a10 	vmov	r0, s16
 8007466:	4621      	mov	r1, r4
 8007468:	f000 f9fc 	bl	8007864 <_Bfree>
 800746c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800746e:	2300      	movs	r3, #0
 8007470:	6013      	str	r3, [r2, #0]
 8007472:	2750      	movs	r7, #80	; 0x50
 8007474:	e713      	b.n	800729e <__gethex+0x12a>
 8007476:	bf00      	nop
 8007478:	080095c8 	.word	0x080095c8
 800747c:	080094e9 	.word	0x080094e9
 8007480:	0800955c 	.word	0x0800955c
 8007484:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1eb      	bne.n	8007462 <__gethex+0x2ee>
 800748a:	e7d8      	b.n	800743e <__gethex+0x2ca>
 800748c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1d5      	bne.n	800743e <__gethex+0x2ca>
 8007492:	e7e6      	b.n	8007462 <__gethex+0x2ee>
 8007494:	1e6f      	subs	r7, r5, #1
 8007496:	f1ba 0f00 	cmp.w	sl, #0
 800749a:	d131      	bne.n	8007500 <__gethex+0x38c>
 800749c:	b127      	cbz	r7, 80074a8 <__gethex+0x334>
 800749e:	4639      	mov	r1, r7
 80074a0:	4620      	mov	r0, r4
 80074a2:	f000 fe39 	bl	8008118 <__any_on>
 80074a6:	4682      	mov	sl, r0
 80074a8:	117b      	asrs	r3, r7, #5
 80074aa:	2101      	movs	r1, #1
 80074ac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80074b0:	f007 071f 	and.w	r7, r7, #31
 80074b4:	fa01 f707 	lsl.w	r7, r1, r7
 80074b8:	421f      	tst	r7, r3
 80074ba:	4629      	mov	r1, r5
 80074bc:	4620      	mov	r0, r4
 80074be:	bf18      	it	ne
 80074c0:	f04a 0a02 	orrne.w	sl, sl, #2
 80074c4:	1b76      	subs	r6, r6, r5
 80074c6:	f7ff fdee 	bl	80070a6 <rshift>
 80074ca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80074ce:	2702      	movs	r7, #2
 80074d0:	f1ba 0f00 	cmp.w	sl, #0
 80074d4:	d048      	beq.n	8007568 <__gethex+0x3f4>
 80074d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d015      	beq.n	800750a <__gethex+0x396>
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d017      	beq.n	8007512 <__gethex+0x39e>
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d109      	bne.n	80074fa <__gethex+0x386>
 80074e6:	f01a 0f02 	tst.w	sl, #2
 80074ea:	d006      	beq.n	80074fa <__gethex+0x386>
 80074ec:	f8d9 0000 	ldr.w	r0, [r9]
 80074f0:	ea4a 0a00 	orr.w	sl, sl, r0
 80074f4:	f01a 0f01 	tst.w	sl, #1
 80074f8:	d10e      	bne.n	8007518 <__gethex+0x3a4>
 80074fa:	f047 0710 	orr.w	r7, r7, #16
 80074fe:	e033      	b.n	8007568 <__gethex+0x3f4>
 8007500:	f04f 0a01 	mov.w	sl, #1
 8007504:	e7d0      	b.n	80074a8 <__gethex+0x334>
 8007506:	2701      	movs	r7, #1
 8007508:	e7e2      	b.n	80074d0 <__gethex+0x35c>
 800750a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800750c:	f1c3 0301 	rsb	r3, r3, #1
 8007510:	9315      	str	r3, [sp, #84]	; 0x54
 8007512:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007514:	2b00      	cmp	r3, #0
 8007516:	d0f0      	beq.n	80074fa <__gethex+0x386>
 8007518:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800751c:	f104 0314 	add.w	r3, r4, #20
 8007520:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007524:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007528:	f04f 0c00 	mov.w	ip, #0
 800752c:	4618      	mov	r0, r3
 800752e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007532:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007536:	d01c      	beq.n	8007572 <__gethex+0x3fe>
 8007538:	3201      	adds	r2, #1
 800753a:	6002      	str	r2, [r0, #0]
 800753c:	2f02      	cmp	r7, #2
 800753e:	f104 0314 	add.w	r3, r4, #20
 8007542:	d13f      	bne.n	80075c4 <__gethex+0x450>
 8007544:	f8d8 2000 	ldr.w	r2, [r8]
 8007548:	3a01      	subs	r2, #1
 800754a:	42b2      	cmp	r2, r6
 800754c:	d10a      	bne.n	8007564 <__gethex+0x3f0>
 800754e:	1171      	asrs	r1, r6, #5
 8007550:	2201      	movs	r2, #1
 8007552:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007556:	f006 061f 	and.w	r6, r6, #31
 800755a:	fa02 f606 	lsl.w	r6, r2, r6
 800755e:	421e      	tst	r6, r3
 8007560:	bf18      	it	ne
 8007562:	4617      	movne	r7, r2
 8007564:	f047 0720 	orr.w	r7, r7, #32
 8007568:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800756a:	601c      	str	r4, [r3, #0]
 800756c:	9b04      	ldr	r3, [sp, #16]
 800756e:	601d      	str	r5, [r3, #0]
 8007570:	e695      	b.n	800729e <__gethex+0x12a>
 8007572:	4299      	cmp	r1, r3
 8007574:	f843 cc04 	str.w	ip, [r3, #-4]
 8007578:	d8d8      	bhi.n	800752c <__gethex+0x3b8>
 800757a:	68a3      	ldr	r3, [r4, #8]
 800757c:	459b      	cmp	fp, r3
 800757e:	db19      	blt.n	80075b4 <__gethex+0x440>
 8007580:	6861      	ldr	r1, [r4, #4]
 8007582:	ee18 0a10 	vmov	r0, s16
 8007586:	3101      	adds	r1, #1
 8007588:	f000 f92c 	bl	80077e4 <_Balloc>
 800758c:	4681      	mov	r9, r0
 800758e:	b918      	cbnz	r0, 8007598 <__gethex+0x424>
 8007590:	4b1a      	ldr	r3, [pc, #104]	; (80075fc <__gethex+0x488>)
 8007592:	4602      	mov	r2, r0
 8007594:	2184      	movs	r1, #132	; 0x84
 8007596:	e6a8      	b.n	80072ea <__gethex+0x176>
 8007598:	6922      	ldr	r2, [r4, #16]
 800759a:	3202      	adds	r2, #2
 800759c:	f104 010c 	add.w	r1, r4, #12
 80075a0:	0092      	lsls	r2, r2, #2
 80075a2:	300c      	adds	r0, #12
 80075a4:	f000 f910 	bl	80077c8 <memcpy>
 80075a8:	4621      	mov	r1, r4
 80075aa:	ee18 0a10 	vmov	r0, s16
 80075ae:	f000 f959 	bl	8007864 <_Bfree>
 80075b2:	464c      	mov	r4, r9
 80075b4:	6923      	ldr	r3, [r4, #16]
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80075bc:	6122      	str	r2, [r4, #16]
 80075be:	2201      	movs	r2, #1
 80075c0:	615a      	str	r2, [r3, #20]
 80075c2:	e7bb      	b.n	800753c <__gethex+0x3c8>
 80075c4:	6922      	ldr	r2, [r4, #16]
 80075c6:	455a      	cmp	r2, fp
 80075c8:	dd0b      	ble.n	80075e2 <__gethex+0x46e>
 80075ca:	2101      	movs	r1, #1
 80075cc:	4620      	mov	r0, r4
 80075ce:	f7ff fd6a 	bl	80070a6 <rshift>
 80075d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80075d6:	3501      	adds	r5, #1
 80075d8:	42ab      	cmp	r3, r5
 80075da:	f6ff aed0 	blt.w	800737e <__gethex+0x20a>
 80075de:	2701      	movs	r7, #1
 80075e0:	e7c0      	b.n	8007564 <__gethex+0x3f0>
 80075e2:	f016 061f 	ands.w	r6, r6, #31
 80075e6:	d0fa      	beq.n	80075de <__gethex+0x46a>
 80075e8:	449a      	add	sl, r3
 80075ea:	f1c6 0620 	rsb	r6, r6, #32
 80075ee:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80075f2:	f000 f9ed 	bl	80079d0 <__hi0bits>
 80075f6:	42b0      	cmp	r0, r6
 80075f8:	dbe7      	blt.n	80075ca <__gethex+0x456>
 80075fa:	e7f0      	b.n	80075de <__gethex+0x46a>
 80075fc:	080094e9 	.word	0x080094e9

08007600 <L_shift>:
 8007600:	f1c2 0208 	rsb	r2, r2, #8
 8007604:	0092      	lsls	r2, r2, #2
 8007606:	b570      	push	{r4, r5, r6, lr}
 8007608:	f1c2 0620 	rsb	r6, r2, #32
 800760c:	6843      	ldr	r3, [r0, #4]
 800760e:	6804      	ldr	r4, [r0, #0]
 8007610:	fa03 f506 	lsl.w	r5, r3, r6
 8007614:	432c      	orrs	r4, r5
 8007616:	40d3      	lsrs	r3, r2
 8007618:	6004      	str	r4, [r0, #0]
 800761a:	f840 3f04 	str.w	r3, [r0, #4]!
 800761e:	4288      	cmp	r0, r1
 8007620:	d3f4      	bcc.n	800760c <L_shift+0xc>
 8007622:	bd70      	pop	{r4, r5, r6, pc}

08007624 <__match>:
 8007624:	b530      	push	{r4, r5, lr}
 8007626:	6803      	ldr	r3, [r0, #0]
 8007628:	3301      	adds	r3, #1
 800762a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800762e:	b914      	cbnz	r4, 8007636 <__match+0x12>
 8007630:	6003      	str	r3, [r0, #0]
 8007632:	2001      	movs	r0, #1
 8007634:	bd30      	pop	{r4, r5, pc}
 8007636:	f813 2b01 	ldrb.w	r2, [r3], #1
 800763a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800763e:	2d19      	cmp	r5, #25
 8007640:	bf98      	it	ls
 8007642:	3220      	addls	r2, #32
 8007644:	42a2      	cmp	r2, r4
 8007646:	d0f0      	beq.n	800762a <__match+0x6>
 8007648:	2000      	movs	r0, #0
 800764a:	e7f3      	b.n	8007634 <__match+0x10>

0800764c <__hexnan>:
 800764c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007650:	680b      	ldr	r3, [r1, #0]
 8007652:	6801      	ldr	r1, [r0, #0]
 8007654:	115e      	asrs	r6, r3, #5
 8007656:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800765a:	f013 031f 	ands.w	r3, r3, #31
 800765e:	b087      	sub	sp, #28
 8007660:	bf18      	it	ne
 8007662:	3604      	addne	r6, #4
 8007664:	2500      	movs	r5, #0
 8007666:	1f37      	subs	r7, r6, #4
 8007668:	4682      	mov	sl, r0
 800766a:	4690      	mov	r8, r2
 800766c:	9301      	str	r3, [sp, #4]
 800766e:	f846 5c04 	str.w	r5, [r6, #-4]
 8007672:	46b9      	mov	r9, r7
 8007674:	463c      	mov	r4, r7
 8007676:	9502      	str	r5, [sp, #8]
 8007678:	46ab      	mov	fp, r5
 800767a:	784a      	ldrb	r2, [r1, #1]
 800767c:	1c4b      	adds	r3, r1, #1
 800767e:	9303      	str	r3, [sp, #12]
 8007680:	b342      	cbz	r2, 80076d4 <__hexnan+0x88>
 8007682:	4610      	mov	r0, r2
 8007684:	9105      	str	r1, [sp, #20]
 8007686:	9204      	str	r2, [sp, #16]
 8007688:	f7ff fd5f 	bl	800714a <__hexdig_fun>
 800768c:	2800      	cmp	r0, #0
 800768e:	d14f      	bne.n	8007730 <__hexnan+0xe4>
 8007690:	9a04      	ldr	r2, [sp, #16]
 8007692:	9905      	ldr	r1, [sp, #20]
 8007694:	2a20      	cmp	r2, #32
 8007696:	d818      	bhi.n	80076ca <__hexnan+0x7e>
 8007698:	9b02      	ldr	r3, [sp, #8]
 800769a:	459b      	cmp	fp, r3
 800769c:	dd13      	ble.n	80076c6 <__hexnan+0x7a>
 800769e:	454c      	cmp	r4, r9
 80076a0:	d206      	bcs.n	80076b0 <__hexnan+0x64>
 80076a2:	2d07      	cmp	r5, #7
 80076a4:	dc04      	bgt.n	80076b0 <__hexnan+0x64>
 80076a6:	462a      	mov	r2, r5
 80076a8:	4649      	mov	r1, r9
 80076aa:	4620      	mov	r0, r4
 80076ac:	f7ff ffa8 	bl	8007600 <L_shift>
 80076b0:	4544      	cmp	r4, r8
 80076b2:	d950      	bls.n	8007756 <__hexnan+0x10a>
 80076b4:	2300      	movs	r3, #0
 80076b6:	f1a4 0904 	sub.w	r9, r4, #4
 80076ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80076be:	f8cd b008 	str.w	fp, [sp, #8]
 80076c2:	464c      	mov	r4, r9
 80076c4:	461d      	mov	r5, r3
 80076c6:	9903      	ldr	r1, [sp, #12]
 80076c8:	e7d7      	b.n	800767a <__hexnan+0x2e>
 80076ca:	2a29      	cmp	r2, #41	; 0x29
 80076cc:	d156      	bne.n	800777c <__hexnan+0x130>
 80076ce:	3102      	adds	r1, #2
 80076d0:	f8ca 1000 	str.w	r1, [sl]
 80076d4:	f1bb 0f00 	cmp.w	fp, #0
 80076d8:	d050      	beq.n	800777c <__hexnan+0x130>
 80076da:	454c      	cmp	r4, r9
 80076dc:	d206      	bcs.n	80076ec <__hexnan+0xa0>
 80076de:	2d07      	cmp	r5, #7
 80076e0:	dc04      	bgt.n	80076ec <__hexnan+0xa0>
 80076e2:	462a      	mov	r2, r5
 80076e4:	4649      	mov	r1, r9
 80076e6:	4620      	mov	r0, r4
 80076e8:	f7ff ff8a 	bl	8007600 <L_shift>
 80076ec:	4544      	cmp	r4, r8
 80076ee:	d934      	bls.n	800775a <__hexnan+0x10e>
 80076f0:	f1a8 0204 	sub.w	r2, r8, #4
 80076f4:	4623      	mov	r3, r4
 80076f6:	f853 1b04 	ldr.w	r1, [r3], #4
 80076fa:	f842 1f04 	str.w	r1, [r2, #4]!
 80076fe:	429f      	cmp	r7, r3
 8007700:	d2f9      	bcs.n	80076f6 <__hexnan+0xaa>
 8007702:	1b3b      	subs	r3, r7, r4
 8007704:	f023 0303 	bic.w	r3, r3, #3
 8007708:	3304      	adds	r3, #4
 800770a:	3401      	adds	r4, #1
 800770c:	3e03      	subs	r6, #3
 800770e:	42b4      	cmp	r4, r6
 8007710:	bf88      	it	hi
 8007712:	2304      	movhi	r3, #4
 8007714:	4443      	add	r3, r8
 8007716:	2200      	movs	r2, #0
 8007718:	f843 2b04 	str.w	r2, [r3], #4
 800771c:	429f      	cmp	r7, r3
 800771e:	d2fb      	bcs.n	8007718 <__hexnan+0xcc>
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	b91b      	cbnz	r3, 800772c <__hexnan+0xe0>
 8007724:	4547      	cmp	r7, r8
 8007726:	d127      	bne.n	8007778 <__hexnan+0x12c>
 8007728:	2301      	movs	r3, #1
 800772a:	603b      	str	r3, [r7, #0]
 800772c:	2005      	movs	r0, #5
 800772e:	e026      	b.n	800777e <__hexnan+0x132>
 8007730:	3501      	adds	r5, #1
 8007732:	2d08      	cmp	r5, #8
 8007734:	f10b 0b01 	add.w	fp, fp, #1
 8007738:	dd06      	ble.n	8007748 <__hexnan+0xfc>
 800773a:	4544      	cmp	r4, r8
 800773c:	d9c3      	bls.n	80076c6 <__hexnan+0x7a>
 800773e:	2300      	movs	r3, #0
 8007740:	f844 3c04 	str.w	r3, [r4, #-4]
 8007744:	2501      	movs	r5, #1
 8007746:	3c04      	subs	r4, #4
 8007748:	6822      	ldr	r2, [r4, #0]
 800774a:	f000 000f 	and.w	r0, r0, #15
 800774e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007752:	6022      	str	r2, [r4, #0]
 8007754:	e7b7      	b.n	80076c6 <__hexnan+0x7a>
 8007756:	2508      	movs	r5, #8
 8007758:	e7b5      	b.n	80076c6 <__hexnan+0x7a>
 800775a:	9b01      	ldr	r3, [sp, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d0df      	beq.n	8007720 <__hexnan+0xd4>
 8007760:	f04f 32ff 	mov.w	r2, #4294967295
 8007764:	f1c3 0320 	rsb	r3, r3, #32
 8007768:	fa22 f303 	lsr.w	r3, r2, r3
 800776c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007770:	401a      	ands	r2, r3
 8007772:	f846 2c04 	str.w	r2, [r6, #-4]
 8007776:	e7d3      	b.n	8007720 <__hexnan+0xd4>
 8007778:	3f04      	subs	r7, #4
 800777a:	e7d1      	b.n	8007720 <__hexnan+0xd4>
 800777c:	2004      	movs	r0, #4
 800777e:	b007      	add	sp, #28
 8007780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007784 <_localeconv_r>:
 8007784:	4800      	ldr	r0, [pc, #0]	; (8007788 <_localeconv_r+0x4>)
 8007786:	4770      	bx	lr
 8007788:	20000164 	.word	0x20000164

0800778c <__retarget_lock_init_recursive>:
 800778c:	4770      	bx	lr

0800778e <__retarget_lock_acquire_recursive>:
 800778e:	4770      	bx	lr

08007790 <__retarget_lock_release_recursive>:
 8007790:	4770      	bx	lr
	...

08007794 <malloc>:
 8007794:	4b02      	ldr	r3, [pc, #8]	; (80077a0 <malloc+0xc>)
 8007796:	4601      	mov	r1, r0
 8007798:	6818      	ldr	r0, [r3, #0]
 800779a:	f000 bd3d 	b.w	8008218 <_malloc_r>
 800779e:	bf00      	nop
 80077a0:	2000000c 	.word	0x2000000c

080077a4 <__ascii_mbtowc>:
 80077a4:	b082      	sub	sp, #8
 80077a6:	b901      	cbnz	r1, 80077aa <__ascii_mbtowc+0x6>
 80077a8:	a901      	add	r1, sp, #4
 80077aa:	b142      	cbz	r2, 80077be <__ascii_mbtowc+0x1a>
 80077ac:	b14b      	cbz	r3, 80077c2 <__ascii_mbtowc+0x1e>
 80077ae:	7813      	ldrb	r3, [r2, #0]
 80077b0:	600b      	str	r3, [r1, #0]
 80077b2:	7812      	ldrb	r2, [r2, #0]
 80077b4:	1e10      	subs	r0, r2, #0
 80077b6:	bf18      	it	ne
 80077b8:	2001      	movne	r0, #1
 80077ba:	b002      	add	sp, #8
 80077bc:	4770      	bx	lr
 80077be:	4610      	mov	r0, r2
 80077c0:	e7fb      	b.n	80077ba <__ascii_mbtowc+0x16>
 80077c2:	f06f 0001 	mvn.w	r0, #1
 80077c6:	e7f8      	b.n	80077ba <__ascii_mbtowc+0x16>

080077c8 <memcpy>:
 80077c8:	440a      	add	r2, r1
 80077ca:	4291      	cmp	r1, r2
 80077cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80077d0:	d100      	bne.n	80077d4 <memcpy+0xc>
 80077d2:	4770      	bx	lr
 80077d4:	b510      	push	{r4, lr}
 80077d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077de:	4291      	cmp	r1, r2
 80077e0:	d1f9      	bne.n	80077d6 <memcpy+0xe>
 80077e2:	bd10      	pop	{r4, pc}

080077e4 <_Balloc>:
 80077e4:	b570      	push	{r4, r5, r6, lr}
 80077e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077e8:	4604      	mov	r4, r0
 80077ea:	460d      	mov	r5, r1
 80077ec:	b976      	cbnz	r6, 800780c <_Balloc+0x28>
 80077ee:	2010      	movs	r0, #16
 80077f0:	f7ff ffd0 	bl	8007794 <malloc>
 80077f4:	4602      	mov	r2, r0
 80077f6:	6260      	str	r0, [r4, #36]	; 0x24
 80077f8:	b920      	cbnz	r0, 8007804 <_Balloc+0x20>
 80077fa:	4b18      	ldr	r3, [pc, #96]	; (800785c <_Balloc+0x78>)
 80077fc:	4818      	ldr	r0, [pc, #96]	; (8007860 <_Balloc+0x7c>)
 80077fe:	2166      	movs	r1, #102	; 0x66
 8007800:	f7fe fcb4 	bl	800616c <__assert_func>
 8007804:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007808:	6006      	str	r6, [r0, #0]
 800780a:	60c6      	str	r6, [r0, #12]
 800780c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800780e:	68f3      	ldr	r3, [r6, #12]
 8007810:	b183      	cbz	r3, 8007834 <_Balloc+0x50>
 8007812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800781a:	b9b8      	cbnz	r0, 800784c <_Balloc+0x68>
 800781c:	2101      	movs	r1, #1
 800781e:	fa01 f605 	lsl.w	r6, r1, r5
 8007822:	1d72      	adds	r2, r6, #5
 8007824:	0092      	lsls	r2, r2, #2
 8007826:	4620      	mov	r0, r4
 8007828:	f000 fc97 	bl	800815a <_calloc_r>
 800782c:	b160      	cbz	r0, 8007848 <_Balloc+0x64>
 800782e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007832:	e00e      	b.n	8007852 <_Balloc+0x6e>
 8007834:	2221      	movs	r2, #33	; 0x21
 8007836:	2104      	movs	r1, #4
 8007838:	4620      	mov	r0, r4
 800783a:	f000 fc8e 	bl	800815a <_calloc_r>
 800783e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007840:	60f0      	str	r0, [r6, #12]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e4      	bne.n	8007812 <_Balloc+0x2e>
 8007848:	2000      	movs	r0, #0
 800784a:	bd70      	pop	{r4, r5, r6, pc}
 800784c:	6802      	ldr	r2, [r0, #0]
 800784e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007852:	2300      	movs	r3, #0
 8007854:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007858:	e7f7      	b.n	800784a <_Balloc+0x66>
 800785a:	bf00      	nop
 800785c:	080092c8 	.word	0x080092c8
 8007860:	080095dc 	.word	0x080095dc

08007864 <_Bfree>:
 8007864:	b570      	push	{r4, r5, r6, lr}
 8007866:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007868:	4605      	mov	r5, r0
 800786a:	460c      	mov	r4, r1
 800786c:	b976      	cbnz	r6, 800788c <_Bfree+0x28>
 800786e:	2010      	movs	r0, #16
 8007870:	f7ff ff90 	bl	8007794 <malloc>
 8007874:	4602      	mov	r2, r0
 8007876:	6268      	str	r0, [r5, #36]	; 0x24
 8007878:	b920      	cbnz	r0, 8007884 <_Bfree+0x20>
 800787a:	4b09      	ldr	r3, [pc, #36]	; (80078a0 <_Bfree+0x3c>)
 800787c:	4809      	ldr	r0, [pc, #36]	; (80078a4 <_Bfree+0x40>)
 800787e:	218a      	movs	r1, #138	; 0x8a
 8007880:	f7fe fc74 	bl	800616c <__assert_func>
 8007884:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007888:	6006      	str	r6, [r0, #0]
 800788a:	60c6      	str	r6, [r0, #12]
 800788c:	b13c      	cbz	r4, 800789e <_Bfree+0x3a>
 800788e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007890:	6862      	ldr	r2, [r4, #4]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007898:	6021      	str	r1, [r4, #0]
 800789a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800789e:	bd70      	pop	{r4, r5, r6, pc}
 80078a0:	080092c8 	.word	0x080092c8
 80078a4:	080095dc 	.word	0x080095dc

080078a8 <__multadd>:
 80078a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ac:	690e      	ldr	r6, [r1, #16]
 80078ae:	4607      	mov	r7, r0
 80078b0:	4698      	mov	r8, r3
 80078b2:	460c      	mov	r4, r1
 80078b4:	f101 0014 	add.w	r0, r1, #20
 80078b8:	2300      	movs	r3, #0
 80078ba:	6805      	ldr	r5, [r0, #0]
 80078bc:	b2a9      	uxth	r1, r5
 80078be:	fb02 8101 	mla	r1, r2, r1, r8
 80078c2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80078c6:	0c2d      	lsrs	r5, r5, #16
 80078c8:	fb02 c505 	mla	r5, r2, r5, ip
 80078cc:	b289      	uxth	r1, r1
 80078ce:	3301      	adds	r3, #1
 80078d0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80078d4:	429e      	cmp	r6, r3
 80078d6:	f840 1b04 	str.w	r1, [r0], #4
 80078da:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80078de:	dcec      	bgt.n	80078ba <__multadd+0x12>
 80078e0:	f1b8 0f00 	cmp.w	r8, #0
 80078e4:	d022      	beq.n	800792c <__multadd+0x84>
 80078e6:	68a3      	ldr	r3, [r4, #8]
 80078e8:	42b3      	cmp	r3, r6
 80078ea:	dc19      	bgt.n	8007920 <__multadd+0x78>
 80078ec:	6861      	ldr	r1, [r4, #4]
 80078ee:	4638      	mov	r0, r7
 80078f0:	3101      	adds	r1, #1
 80078f2:	f7ff ff77 	bl	80077e4 <_Balloc>
 80078f6:	4605      	mov	r5, r0
 80078f8:	b928      	cbnz	r0, 8007906 <__multadd+0x5e>
 80078fa:	4602      	mov	r2, r0
 80078fc:	4b0d      	ldr	r3, [pc, #52]	; (8007934 <__multadd+0x8c>)
 80078fe:	480e      	ldr	r0, [pc, #56]	; (8007938 <__multadd+0x90>)
 8007900:	21b5      	movs	r1, #181	; 0xb5
 8007902:	f7fe fc33 	bl	800616c <__assert_func>
 8007906:	6922      	ldr	r2, [r4, #16]
 8007908:	3202      	adds	r2, #2
 800790a:	f104 010c 	add.w	r1, r4, #12
 800790e:	0092      	lsls	r2, r2, #2
 8007910:	300c      	adds	r0, #12
 8007912:	f7ff ff59 	bl	80077c8 <memcpy>
 8007916:	4621      	mov	r1, r4
 8007918:	4638      	mov	r0, r7
 800791a:	f7ff ffa3 	bl	8007864 <_Bfree>
 800791e:	462c      	mov	r4, r5
 8007920:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007924:	3601      	adds	r6, #1
 8007926:	f8c3 8014 	str.w	r8, [r3, #20]
 800792a:	6126      	str	r6, [r4, #16]
 800792c:	4620      	mov	r0, r4
 800792e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007932:	bf00      	nop
 8007934:	080094e9 	.word	0x080094e9
 8007938:	080095dc 	.word	0x080095dc

0800793c <__s2b>:
 800793c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007940:	460c      	mov	r4, r1
 8007942:	4615      	mov	r5, r2
 8007944:	461f      	mov	r7, r3
 8007946:	2209      	movs	r2, #9
 8007948:	3308      	adds	r3, #8
 800794a:	4606      	mov	r6, r0
 800794c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007950:	2100      	movs	r1, #0
 8007952:	2201      	movs	r2, #1
 8007954:	429a      	cmp	r2, r3
 8007956:	db09      	blt.n	800796c <__s2b+0x30>
 8007958:	4630      	mov	r0, r6
 800795a:	f7ff ff43 	bl	80077e4 <_Balloc>
 800795e:	b940      	cbnz	r0, 8007972 <__s2b+0x36>
 8007960:	4602      	mov	r2, r0
 8007962:	4b19      	ldr	r3, [pc, #100]	; (80079c8 <__s2b+0x8c>)
 8007964:	4819      	ldr	r0, [pc, #100]	; (80079cc <__s2b+0x90>)
 8007966:	21ce      	movs	r1, #206	; 0xce
 8007968:	f7fe fc00 	bl	800616c <__assert_func>
 800796c:	0052      	lsls	r2, r2, #1
 800796e:	3101      	adds	r1, #1
 8007970:	e7f0      	b.n	8007954 <__s2b+0x18>
 8007972:	9b08      	ldr	r3, [sp, #32]
 8007974:	6143      	str	r3, [r0, #20]
 8007976:	2d09      	cmp	r5, #9
 8007978:	f04f 0301 	mov.w	r3, #1
 800797c:	6103      	str	r3, [r0, #16]
 800797e:	dd16      	ble.n	80079ae <__s2b+0x72>
 8007980:	f104 0909 	add.w	r9, r4, #9
 8007984:	46c8      	mov	r8, r9
 8007986:	442c      	add	r4, r5
 8007988:	f818 3b01 	ldrb.w	r3, [r8], #1
 800798c:	4601      	mov	r1, r0
 800798e:	3b30      	subs	r3, #48	; 0x30
 8007990:	220a      	movs	r2, #10
 8007992:	4630      	mov	r0, r6
 8007994:	f7ff ff88 	bl	80078a8 <__multadd>
 8007998:	45a0      	cmp	r8, r4
 800799a:	d1f5      	bne.n	8007988 <__s2b+0x4c>
 800799c:	f1a5 0408 	sub.w	r4, r5, #8
 80079a0:	444c      	add	r4, r9
 80079a2:	1b2d      	subs	r5, r5, r4
 80079a4:	1963      	adds	r3, r4, r5
 80079a6:	42bb      	cmp	r3, r7
 80079a8:	db04      	blt.n	80079b4 <__s2b+0x78>
 80079aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ae:	340a      	adds	r4, #10
 80079b0:	2509      	movs	r5, #9
 80079b2:	e7f6      	b.n	80079a2 <__s2b+0x66>
 80079b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80079b8:	4601      	mov	r1, r0
 80079ba:	3b30      	subs	r3, #48	; 0x30
 80079bc:	220a      	movs	r2, #10
 80079be:	4630      	mov	r0, r6
 80079c0:	f7ff ff72 	bl	80078a8 <__multadd>
 80079c4:	e7ee      	b.n	80079a4 <__s2b+0x68>
 80079c6:	bf00      	nop
 80079c8:	080094e9 	.word	0x080094e9
 80079cc:	080095dc 	.word	0x080095dc

080079d0 <__hi0bits>:
 80079d0:	0c03      	lsrs	r3, r0, #16
 80079d2:	041b      	lsls	r3, r3, #16
 80079d4:	b9d3      	cbnz	r3, 8007a0c <__hi0bits+0x3c>
 80079d6:	0400      	lsls	r0, r0, #16
 80079d8:	2310      	movs	r3, #16
 80079da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80079de:	bf04      	itt	eq
 80079e0:	0200      	lsleq	r0, r0, #8
 80079e2:	3308      	addeq	r3, #8
 80079e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80079e8:	bf04      	itt	eq
 80079ea:	0100      	lsleq	r0, r0, #4
 80079ec:	3304      	addeq	r3, #4
 80079ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80079f2:	bf04      	itt	eq
 80079f4:	0080      	lsleq	r0, r0, #2
 80079f6:	3302      	addeq	r3, #2
 80079f8:	2800      	cmp	r0, #0
 80079fa:	db05      	blt.n	8007a08 <__hi0bits+0x38>
 80079fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007a00:	f103 0301 	add.w	r3, r3, #1
 8007a04:	bf08      	it	eq
 8007a06:	2320      	moveq	r3, #32
 8007a08:	4618      	mov	r0, r3
 8007a0a:	4770      	bx	lr
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	e7e4      	b.n	80079da <__hi0bits+0xa>

08007a10 <__lo0bits>:
 8007a10:	6803      	ldr	r3, [r0, #0]
 8007a12:	f013 0207 	ands.w	r2, r3, #7
 8007a16:	4601      	mov	r1, r0
 8007a18:	d00b      	beq.n	8007a32 <__lo0bits+0x22>
 8007a1a:	07da      	lsls	r2, r3, #31
 8007a1c:	d424      	bmi.n	8007a68 <__lo0bits+0x58>
 8007a1e:	0798      	lsls	r0, r3, #30
 8007a20:	bf49      	itett	mi
 8007a22:	085b      	lsrmi	r3, r3, #1
 8007a24:	089b      	lsrpl	r3, r3, #2
 8007a26:	2001      	movmi	r0, #1
 8007a28:	600b      	strmi	r3, [r1, #0]
 8007a2a:	bf5c      	itt	pl
 8007a2c:	600b      	strpl	r3, [r1, #0]
 8007a2e:	2002      	movpl	r0, #2
 8007a30:	4770      	bx	lr
 8007a32:	b298      	uxth	r0, r3
 8007a34:	b9b0      	cbnz	r0, 8007a64 <__lo0bits+0x54>
 8007a36:	0c1b      	lsrs	r3, r3, #16
 8007a38:	2010      	movs	r0, #16
 8007a3a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007a3e:	bf04      	itt	eq
 8007a40:	0a1b      	lsreq	r3, r3, #8
 8007a42:	3008      	addeq	r0, #8
 8007a44:	071a      	lsls	r2, r3, #28
 8007a46:	bf04      	itt	eq
 8007a48:	091b      	lsreq	r3, r3, #4
 8007a4a:	3004      	addeq	r0, #4
 8007a4c:	079a      	lsls	r2, r3, #30
 8007a4e:	bf04      	itt	eq
 8007a50:	089b      	lsreq	r3, r3, #2
 8007a52:	3002      	addeq	r0, #2
 8007a54:	07da      	lsls	r2, r3, #31
 8007a56:	d403      	bmi.n	8007a60 <__lo0bits+0x50>
 8007a58:	085b      	lsrs	r3, r3, #1
 8007a5a:	f100 0001 	add.w	r0, r0, #1
 8007a5e:	d005      	beq.n	8007a6c <__lo0bits+0x5c>
 8007a60:	600b      	str	r3, [r1, #0]
 8007a62:	4770      	bx	lr
 8007a64:	4610      	mov	r0, r2
 8007a66:	e7e8      	b.n	8007a3a <__lo0bits+0x2a>
 8007a68:	2000      	movs	r0, #0
 8007a6a:	4770      	bx	lr
 8007a6c:	2020      	movs	r0, #32
 8007a6e:	4770      	bx	lr

08007a70 <__i2b>:
 8007a70:	b510      	push	{r4, lr}
 8007a72:	460c      	mov	r4, r1
 8007a74:	2101      	movs	r1, #1
 8007a76:	f7ff feb5 	bl	80077e4 <_Balloc>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	b928      	cbnz	r0, 8007a8a <__i2b+0x1a>
 8007a7e:	4b05      	ldr	r3, [pc, #20]	; (8007a94 <__i2b+0x24>)
 8007a80:	4805      	ldr	r0, [pc, #20]	; (8007a98 <__i2b+0x28>)
 8007a82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007a86:	f7fe fb71 	bl	800616c <__assert_func>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	6144      	str	r4, [r0, #20]
 8007a8e:	6103      	str	r3, [r0, #16]
 8007a90:	bd10      	pop	{r4, pc}
 8007a92:	bf00      	nop
 8007a94:	080094e9 	.word	0x080094e9
 8007a98:	080095dc 	.word	0x080095dc

08007a9c <__multiply>:
 8007a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa0:	4614      	mov	r4, r2
 8007aa2:	690a      	ldr	r2, [r1, #16]
 8007aa4:	6923      	ldr	r3, [r4, #16]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	bfb8      	it	lt
 8007aaa:	460b      	movlt	r3, r1
 8007aac:	460d      	mov	r5, r1
 8007aae:	bfbc      	itt	lt
 8007ab0:	4625      	movlt	r5, r4
 8007ab2:	461c      	movlt	r4, r3
 8007ab4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007ab8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007abc:	68ab      	ldr	r3, [r5, #8]
 8007abe:	6869      	ldr	r1, [r5, #4]
 8007ac0:	eb0a 0709 	add.w	r7, sl, r9
 8007ac4:	42bb      	cmp	r3, r7
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	bfb8      	it	lt
 8007aca:	3101      	addlt	r1, #1
 8007acc:	f7ff fe8a 	bl	80077e4 <_Balloc>
 8007ad0:	b930      	cbnz	r0, 8007ae0 <__multiply+0x44>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	4b42      	ldr	r3, [pc, #264]	; (8007be0 <__multiply+0x144>)
 8007ad6:	4843      	ldr	r0, [pc, #268]	; (8007be4 <__multiply+0x148>)
 8007ad8:	f240 115d 	movw	r1, #349	; 0x15d
 8007adc:	f7fe fb46 	bl	800616c <__assert_func>
 8007ae0:	f100 0614 	add.w	r6, r0, #20
 8007ae4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007ae8:	4633      	mov	r3, r6
 8007aea:	2200      	movs	r2, #0
 8007aec:	4543      	cmp	r3, r8
 8007aee:	d31e      	bcc.n	8007b2e <__multiply+0x92>
 8007af0:	f105 0c14 	add.w	ip, r5, #20
 8007af4:	f104 0314 	add.w	r3, r4, #20
 8007af8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007afc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007b00:	9202      	str	r2, [sp, #8]
 8007b02:	ebac 0205 	sub.w	r2, ip, r5
 8007b06:	3a15      	subs	r2, #21
 8007b08:	f022 0203 	bic.w	r2, r2, #3
 8007b0c:	3204      	adds	r2, #4
 8007b0e:	f105 0115 	add.w	r1, r5, #21
 8007b12:	458c      	cmp	ip, r1
 8007b14:	bf38      	it	cc
 8007b16:	2204      	movcc	r2, #4
 8007b18:	9201      	str	r2, [sp, #4]
 8007b1a:	9a02      	ldr	r2, [sp, #8]
 8007b1c:	9303      	str	r3, [sp, #12]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d808      	bhi.n	8007b34 <__multiply+0x98>
 8007b22:	2f00      	cmp	r7, #0
 8007b24:	dc55      	bgt.n	8007bd2 <__multiply+0x136>
 8007b26:	6107      	str	r7, [r0, #16]
 8007b28:	b005      	add	sp, #20
 8007b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b2e:	f843 2b04 	str.w	r2, [r3], #4
 8007b32:	e7db      	b.n	8007aec <__multiply+0x50>
 8007b34:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b38:	f1ba 0f00 	cmp.w	sl, #0
 8007b3c:	d020      	beq.n	8007b80 <__multiply+0xe4>
 8007b3e:	f105 0e14 	add.w	lr, r5, #20
 8007b42:	46b1      	mov	r9, r6
 8007b44:	2200      	movs	r2, #0
 8007b46:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007b4a:	f8d9 b000 	ldr.w	fp, [r9]
 8007b4e:	b2a1      	uxth	r1, r4
 8007b50:	fa1f fb8b 	uxth.w	fp, fp
 8007b54:	fb0a b101 	mla	r1, sl, r1, fp
 8007b58:	4411      	add	r1, r2
 8007b5a:	f8d9 2000 	ldr.w	r2, [r9]
 8007b5e:	0c24      	lsrs	r4, r4, #16
 8007b60:	0c12      	lsrs	r2, r2, #16
 8007b62:	fb0a 2404 	mla	r4, sl, r4, r2
 8007b66:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007b6a:	b289      	uxth	r1, r1
 8007b6c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007b70:	45f4      	cmp	ip, lr
 8007b72:	f849 1b04 	str.w	r1, [r9], #4
 8007b76:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007b7a:	d8e4      	bhi.n	8007b46 <__multiply+0xaa>
 8007b7c:	9901      	ldr	r1, [sp, #4]
 8007b7e:	5072      	str	r2, [r6, r1]
 8007b80:	9a03      	ldr	r2, [sp, #12]
 8007b82:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b86:	3304      	adds	r3, #4
 8007b88:	f1b9 0f00 	cmp.w	r9, #0
 8007b8c:	d01f      	beq.n	8007bce <__multiply+0x132>
 8007b8e:	6834      	ldr	r4, [r6, #0]
 8007b90:	f105 0114 	add.w	r1, r5, #20
 8007b94:	46b6      	mov	lr, r6
 8007b96:	f04f 0a00 	mov.w	sl, #0
 8007b9a:	880a      	ldrh	r2, [r1, #0]
 8007b9c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007ba0:	fb09 b202 	mla	r2, r9, r2, fp
 8007ba4:	4492      	add	sl, r2
 8007ba6:	b2a4      	uxth	r4, r4
 8007ba8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007bac:	f84e 4b04 	str.w	r4, [lr], #4
 8007bb0:	f851 4b04 	ldr.w	r4, [r1], #4
 8007bb4:	f8be 2000 	ldrh.w	r2, [lr]
 8007bb8:	0c24      	lsrs	r4, r4, #16
 8007bba:	fb09 2404 	mla	r4, r9, r4, r2
 8007bbe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007bc2:	458c      	cmp	ip, r1
 8007bc4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007bc8:	d8e7      	bhi.n	8007b9a <__multiply+0xfe>
 8007bca:	9a01      	ldr	r2, [sp, #4]
 8007bcc:	50b4      	str	r4, [r6, r2]
 8007bce:	3604      	adds	r6, #4
 8007bd0:	e7a3      	b.n	8007b1a <__multiply+0x7e>
 8007bd2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1a5      	bne.n	8007b26 <__multiply+0x8a>
 8007bda:	3f01      	subs	r7, #1
 8007bdc:	e7a1      	b.n	8007b22 <__multiply+0x86>
 8007bde:	bf00      	nop
 8007be0:	080094e9 	.word	0x080094e9
 8007be4:	080095dc 	.word	0x080095dc

08007be8 <__pow5mult>:
 8007be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bec:	4615      	mov	r5, r2
 8007bee:	f012 0203 	ands.w	r2, r2, #3
 8007bf2:	4606      	mov	r6, r0
 8007bf4:	460f      	mov	r7, r1
 8007bf6:	d007      	beq.n	8007c08 <__pow5mult+0x20>
 8007bf8:	4c25      	ldr	r4, [pc, #148]	; (8007c90 <__pow5mult+0xa8>)
 8007bfa:	3a01      	subs	r2, #1
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c02:	f7ff fe51 	bl	80078a8 <__multadd>
 8007c06:	4607      	mov	r7, r0
 8007c08:	10ad      	asrs	r5, r5, #2
 8007c0a:	d03d      	beq.n	8007c88 <__pow5mult+0xa0>
 8007c0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007c0e:	b97c      	cbnz	r4, 8007c30 <__pow5mult+0x48>
 8007c10:	2010      	movs	r0, #16
 8007c12:	f7ff fdbf 	bl	8007794 <malloc>
 8007c16:	4602      	mov	r2, r0
 8007c18:	6270      	str	r0, [r6, #36]	; 0x24
 8007c1a:	b928      	cbnz	r0, 8007c28 <__pow5mult+0x40>
 8007c1c:	4b1d      	ldr	r3, [pc, #116]	; (8007c94 <__pow5mult+0xac>)
 8007c1e:	481e      	ldr	r0, [pc, #120]	; (8007c98 <__pow5mult+0xb0>)
 8007c20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007c24:	f7fe faa2 	bl	800616c <__assert_func>
 8007c28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c2c:	6004      	str	r4, [r0, #0]
 8007c2e:	60c4      	str	r4, [r0, #12]
 8007c30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c38:	b94c      	cbnz	r4, 8007c4e <__pow5mult+0x66>
 8007c3a:	f240 2171 	movw	r1, #625	; 0x271
 8007c3e:	4630      	mov	r0, r6
 8007c40:	f7ff ff16 	bl	8007a70 <__i2b>
 8007c44:	2300      	movs	r3, #0
 8007c46:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	6003      	str	r3, [r0, #0]
 8007c4e:	f04f 0900 	mov.w	r9, #0
 8007c52:	07eb      	lsls	r3, r5, #31
 8007c54:	d50a      	bpl.n	8007c6c <__pow5mult+0x84>
 8007c56:	4639      	mov	r1, r7
 8007c58:	4622      	mov	r2, r4
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	f7ff ff1e 	bl	8007a9c <__multiply>
 8007c60:	4639      	mov	r1, r7
 8007c62:	4680      	mov	r8, r0
 8007c64:	4630      	mov	r0, r6
 8007c66:	f7ff fdfd 	bl	8007864 <_Bfree>
 8007c6a:	4647      	mov	r7, r8
 8007c6c:	106d      	asrs	r5, r5, #1
 8007c6e:	d00b      	beq.n	8007c88 <__pow5mult+0xa0>
 8007c70:	6820      	ldr	r0, [r4, #0]
 8007c72:	b938      	cbnz	r0, 8007c84 <__pow5mult+0x9c>
 8007c74:	4622      	mov	r2, r4
 8007c76:	4621      	mov	r1, r4
 8007c78:	4630      	mov	r0, r6
 8007c7a:	f7ff ff0f 	bl	8007a9c <__multiply>
 8007c7e:	6020      	str	r0, [r4, #0]
 8007c80:	f8c0 9000 	str.w	r9, [r0]
 8007c84:	4604      	mov	r4, r0
 8007c86:	e7e4      	b.n	8007c52 <__pow5mult+0x6a>
 8007c88:	4638      	mov	r0, r7
 8007c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c8e:	bf00      	nop
 8007c90:	08009730 	.word	0x08009730
 8007c94:	080092c8 	.word	0x080092c8
 8007c98:	080095dc 	.word	0x080095dc

08007c9c <__lshift>:
 8007c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca0:	460c      	mov	r4, r1
 8007ca2:	6849      	ldr	r1, [r1, #4]
 8007ca4:	6923      	ldr	r3, [r4, #16]
 8007ca6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007caa:	68a3      	ldr	r3, [r4, #8]
 8007cac:	4607      	mov	r7, r0
 8007cae:	4691      	mov	r9, r2
 8007cb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007cb4:	f108 0601 	add.w	r6, r8, #1
 8007cb8:	42b3      	cmp	r3, r6
 8007cba:	db0b      	blt.n	8007cd4 <__lshift+0x38>
 8007cbc:	4638      	mov	r0, r7
 8007cbe:	f7ff fd91 	bl	80077e4 <_Balloc>
 8007cc2:	4605      	mov	r5, r0
 8007cc4:	b948      	cbnz	r0, 8007cda <__lshift+0x3e>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	4b28      	ldr	r3, [pc, #160]	; (8007d6c <__lshift+0xd0>)
 8007cca:	4829      	ldr	r0, [pc, #164]	; (8007d70 <__lshift+0xd4>)
 8007ccc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007cd0:	f7fe fa4c 	bl	800616c <__assert_func>
 8007cd4:	3101      	adds	r1, #1
 8007cd6:	005b      	lsls	r3, r3, #1
 8007cd8:	e7ee      	b.n	8007cb8 <__lshift+0x1c>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f100 0114 	add.w	r1, r0, #20
 8007ce0:	f100 0210 	add.w	r2, r0, #16
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	4553      	cmp	r3, sl
 8007ce8:	db33      	blt.n	8007d52 <__lshift+0xb6>
 8007cea:	6920      	ldr	r0, [r4, #16]
 8007cec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007cf0:	f104 0314 	add.w	r3, r4, #20
 8007cf4:	f019 091f 	ands.w	r9, r9, #31
 8007cf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007cfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d00:	d02b      	beq.n	8007d5a <__lshift+0xbe>
 8007d02:	f1c9 0e20 	rsb	lr, r9, #32
 8007d06:	468a      	mov	sl, r1
 8007d08:	2200      	movs	r2, #0
 8007d0a:	6818      	ldr	r0, [r3, #0]
 8007d0c:	fa00 f009 	lsl.w	r0, r0, r9
 8007d10:	4302      	orrs	r2, r0
 8007d12:	f84a 2b04 	str.w	r2, [sl], #4
 8007d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d1a:	459c      	cmp	ip, r3
 8007d1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d20:	d8f3      	bhi.n	8007d0a <__lshift+0x6e>
 8007d22:	ebac 0304 	sub.w	r3, ip, r4
 8007d26:	3b15      	subs	r3, #21
 8007d28:	f023 0303 	bic.w	r3, r3, #3
 8007d2c:	3304      	adds	r3, #4
 8007d2e:	f104 0015 	add.w	r0, r4, #21
 8007d32:	4584      	cmp	ip, r0
 8007d34:	bf38      	it	cc
 8007d36:	2304      	movcc	r3, #4
 8007d38:	50ca      	str	r2, [r1, r3]
 8007d3a:	b10a      	cbz	r2, 8007d40 <__lshift+0xa4>
 8007d3c:	f108 0602 	add.w	r6, r8, #2
 8007d40:	3e01      	subs	r6, #1
 8007d42:	4638      	mov	r0, r7
 8007d44:	612e      	str	r6, [r5, #16]
 8007d46:	4621      	mov	r1, r4
 8007d48:	f7ff fd8c 	bl	8007864 <_Bfree>
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d52:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d56:	3301      	adds	r3, #1
 8007d58:	e7c5      	b.n	8007ce6 <__lshift+0x4a>
 8007d5a:	3904      	subs	r1, #4
 8007d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d60:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d64:	459c      	cmp	ip, r3
 8007d66:	d8f9      	bhi.n	8007d5c <__lshift+0xc0>
 8007d68:	e7ea      	b.n	8007d40 <__lshift+0xa4>
 8007d6a:	bf00      	nop
 8007d6c:	080094e9 	.word	0x080094e9
 8007d70:	080095dc 	.word	0x080095dc

08007d74 <__mcmp>:
 8007d74:	b530      	push	{r4, r5, lr}
 8007d76:	6902      	ldr	r2, [r0, #16]
 8007d78:	690c      	ldr	r4, [r1, #16]
 8007d7a:	1b12      	subs	r2, r2, r4
 8007d7c:	d10e      	bne.n	8007d9c <__mcmp+0x28>
 8007d7e:	f100 0314 	add.w	r3, r0, #20
 8007d82:	3114      	adds	r1, #20
 8007d84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007d88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007d8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007d90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007d94:	42a5      	cmp	r5, r4
 8007d96:	d003      	beq.n	8007da0 <__mcmp+0x2c>
 8007d98:	d305      	bcc.n	8007da6 <__mcmp+0x32>
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	bd30      	pop	{r4, r5, pc}
 8007da0:	4283      	cmp	r3, r0
 8007da2:	d3f3      	bcc.n	8007d8c <__mcmp+0x18>
 8007da4:	e7fa      	b.n	8007d9c <__mcmp+0x28>
 8007da6:	f04f 32ff 	mov.w	r2, #4294967295
 8007daa:	e7f7      	b.n	8007d9c <__mcmp+0x28>

08007dac <__mdiff>:
 8007dac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db0:	460c      	mov	r4, r1
 8007db2:	4606      	mov	r6, r0
 8007db4:	4611      	mov	r1, r2
 8007db6:	4620      	mov	r0, r4
 8007db8:	4617      	mov	r7, r2
 8007dba:	f7ff ffdb 	bl	8007d74 <__mcmp>
 8007dbe:	1e05      	subs	r5, r0, #0
 8007dc0:	d110      	bne.n	8007de4 <__mdiff+0x38>
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f7ff fd0d 	bl	80077e4 <_Balloc>
 8007dca:	b930      	cbnz	r0, 8007dda <__mdiff+0x2e>
 8007dcc:	4b39      	ldr	r3, [pc, #228]	; (8007eb4 <__mdiff+0x108>)
 8007dce:	4602      	mov	r2, r0
 8007dd0:	f240 2132 	movw	r1, #562	; 0x232
 8007dd4:	4838      	ldr	r0, [pc, #224]	; (8007eb8 <__mdiff+0x10c>)
 8007dd6:	f7fe f9c9 	bl	800616c <__assert_func>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007de0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de4:	bfa4      	itt	ge
 8007de6:	463b      	movge	r3, r7
 8007de8:	4627      	movge	r7, r4
 8007dea:	4630      	mov	r0, r6
 8007dec:	6879      	ldr	r1, [r7, #4]
 8007dee:	bfa6      	itte	ge
 8007df0:	461c      	movge	r4, r3
 8007df2:	2500      	movge	r5, #0
 8007df4:	2501      	movlt	r5, #1
 8007df6:	f7ff fcf5 	bl	80077e4 <_Balloc>
 8007dfa:	b920      	cbnz	r0, 8007e06 <__mdiff+0x5a>
 8007dfc:	4b2d      	ldr	r3, [pc, #180]	; (8007eb4 <__mdiff+0x108>)
 8007dfe:	4602      	mov	r2, r0
 8007e00:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007e04:	e7e6      	b.n	8007dd4 <__mdiff+0x28>
 8007e06:	693e      	ldr	r6, [r7, #16]
 8007e08:	60c5      	str	r5, [r0, #12]
 8007e0a:	6925      	ldr	r5, [r4, #16]
 8007e0c:	f107 0114 	add.w	r1, r7, #20
 8007e10:	f104 0914 	add.w	r9, r4, #20
 8007e14:	f100 0e14 	add.w	lr, r0, #20
 8007e18:	f107 0210 	add.w	r2, r7, #16
 8007e1c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007e20:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007e24:	46f2      	mov	sl, lr
 8007e26:	2700      	movs	r7, #0
 8007e28:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007e30:	fa1f f883 	uxth.w	r8, r3
 8007e34:	fa17 f78b 	uxtah	r7, r7, fp
 8007e38:	0c1b      	lsrs	r3, r3, #16
 8007e3a:	eba7 0808 	sub.w	r8, r7, r8
 8007e3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e42:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007e46:	fa1f f888 	uxth.w	r8, r8
 8007e4a:	141f      	asrs	r7, r3, #16
 8007e4c:	454d      	cmp	r5, r9
 8007e4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007e52:	f84a 3b04 	str.w	r3, [sl], #4
 8007e56:	d8e7      	bhi.n	8007e28 <__mdiff+0x7c>
 8007e58:	1b2b      	subs	r3, r5, r4
 8007e5a:	3b15      	subs	r3, #21
 8007e5c:	f023 0303 	bic.w	r3, r3, #3
 8007e60:	3304      	adds	r3, #4
 8007e62:	3415      	adds	r4, #21
 8007e64:	42a5      	cmp	r5, r4
 8007e66:	bf38      	it	cc
 8007e68:	2304      	movcc	r3, #4
 8007e6a:	4419      	add	r1, r3
 8007e6c:	4473      	add	r3, lr
 8007e6e:	469e      	mov	lr, r3
 8007e70:	460d      	mov	r5, r1
 8007e72:	4565      	cmp	r5, ip
 8007e74:	d30e      	bcc.n	8007e94 <__mdiff+0xe8>
 8007e76:	f10c 0203 	add.w	r2, ip, #3
 8007e7a:	1a52      	subs	r2, r2, r1
 8007e7c:	f022 0203 	bic.w	r2, r2, #3
 8007e80:	3903      	subs	r1, #3
 8007e82:	458c      	cmp	ip, r1
 8007e84:	bf38      	it	cc
 8007e86:	2200      	movcc	r2, #0
 8007e88:	441a      	add	r2, r3
 8007e8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007e8e:	b17b      	cbz	r3, 8007eb0 <__mdiff+0x104>
 8007e90:	6106      	str	r6, [r0, #16]
 8007e92:	e7a5      	b.n	8007de0 <__mdiff+0x34>
 8007e94:	f855 8b04 	ldr.w	r8, [r5], #4
 8007e98:	fa17 f488 	uxtah	r4, r7, r8
 8007e9c:	1422      	asrs	r2, r4, #16
 8007e9e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007ea2:	b2a4      	uxth	r4, r4
 8007ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007ea8:	f84e 4b04 	str.w	r4, [lr], #4
 8007eac:	1417      	asrs	r7, r2, #16
 8007eae:	e7e0      	b.n	8007e72 <__mdiff+0xc6>
 8007eb0:	3e01      	subs	r6, #1
 8007eb2:	e7ea      	b.n	8007e8a <__mdiff+0xde>
 8007eb4:	080094e9 	.word	0x080094e9
 8007eb8:	080095dc 	.word	0x080095dc

08007ebc <__ulp>:
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	ed8d 0b00 	vstr	d0, [sp]
 8007ec2:	9b01      	ldr	r3, [sp, #4]
 8007ec4:	4912      	ldr	r1, [pc, #72]	; (8007f10 <__ulp+0x54>)
 8007ec6:	4019      	ands	r1, r3
 8007ec8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007ecc:	2900      	cmp	r1, #0
 8007ece:	dd05      	ble.n	8007edc <__ulp+0x20>
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	ec43 2b10 	vmov	d0, r2, r3
 8007ed8:	b002      	add	sp, #8
 8007eda:	4770      	bx	lr
 8007edc:	4249      	negs	r1, r1
 8007ede:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007ee2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007ee6:	f04f 0200 	mov.w	r2, #0
 8007eea:	f04f 0300 	mov.w	r3, #0
 8007eee:	da04      	bge.n	8007efa <__ulp+0x3e>
 8007ef0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007ef4:	fa41 f300 	asr.w	r3, r1, r0
 8007ef8:	e7ec      	b.n	8007ed4 <__ulp+0x18>
 8007efa:	f1a0 0114 	sub.w	r1, r0, #20
 8007efe:	291e      	cmp	r1, #30
 8007f00:	bfda      	itte	le
 8007f02:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007f06:	fa20 f101 	lsrle.w	r1, r0, r1
 8007f0a:	2101      	movgt	r1, #1
 8007f0c:	460a      	mov	r2, r1
 8007f0e:	e7e1      	b.n	8007ed4 <__ulp+0x18>
 8007f10:	7ff00000 	.word	0x7ff00000

08007f14 <__b2d>:
 8007f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f16:	6905      	ldr	r5, [r0, #16]
 8007f18:	f100 0714 	add.w	r7, r0, #20
 8007f1c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007f20:	1f2e      	subs	r6, r5, #4
 8007f22:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007f26:	4620      	mov	r0, r4
 8007f28:	f7ff fd52 	bl	80079d0 <__hi0bits>
 8007f2c:	f1c0 0320 	rsb	r3, r0, #32
 8007f30:	280a      	cmp	r0, #10
 8007f32:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007fb0 <__b2d+0x9c>
 8007f36:	600b      	str	r3, [r1, #0]
 8007f38:	dc14      	bgt.n	8007f64 <__b2d+0x50>
 8007f3a:	f1c0 0e0b 	rsb	lr, r0, #11
 8007f3e:	fa24 f10e 	lsr.w	r1, r4, lr
 8007f42:	42b7      	cmp	r7, r6
 8007f44:	ea41 030c 	orr.w	r3, r1, ip
 8007f48:	bf34      	ite	cc
 8007f4a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007f4e:	2100      	movcs	r1, #0
 8007f50:	3015      	adds	r0, #21
 8007f52:	fa04 f000 	lsl.w	r0, r4, r0
 8007f56:	fa21 f10e 	lsr.w	r1, r1, lr
 8007f5a:	ea40 0201 	orr.w	r2, r0, r1
 8007f5e:	ec43 2b10 	vmov	d0, r2, r3
 8007f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f64:	42b7      	cmp	r7, r6
 8007f66:	bf3a      	itte	cc
 8007f68:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007f6c:	f1a5 0608 	subcc.w	r6, r5, #8
 8007f70:	2100      	movcs	r1, #0
 8007f72:	380b      	subs	r0, #11
 8007f74:	d017      	beq.n	8007fa6 <__b2d+0x92>
 8007f76:	f1c0 0c20 	rsb	ip, r0, #32
 8007f7a:	fa04 f500 	lsl.w	r5, r4, r0
 8007f7e:	42be      	cmp	r6, r7
 8007f80:	fa21 f40c 	lsr.w	r4, r1, ip
 8007f84:	ea45 0504 	orr.w	r5, r5, r4
 8007f88:	bf8c      	ite	hi
 8007f8a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007f8e:	2400      	movls	r4, #0
 8007f90:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007f94:	fa01 f000 	lsl.w	r0, r1, r0
 8007f98:	fa24 f40c 	lsr.w	r4, r4, ip
 8007f9c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007fa0:	ea40 0204 	orr.w	r2, r0, r4
 8007fa4:	e7db      	b.n	8007f5e <__b2d+0x4a>
 8007fa6:	ea44 030c 	orr.w	r3, r4, ip
 8007faa:	460a      	mov	r2, r1
 8007fac:	e7d7      	b.n	8007f5e <__b2d+0x4a>
 8007fae:	bf00      	nop
 8007fb0:	3ff00000 	.word	0x3ff00000

08007fb4 <__d2b>:
 8007fb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fb8:	4689      	mov	r9, r1
 8007fba:	2101      	movs	r1, #1
 8007fbc:	ec57 6b10 	vmov	r6, r7, d0
 8007fc0:	4690      	mov	r8, r2
 8007fc2:	f7ff fc0f 	bl	80077e4 <_Balloc>
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	b930      	cbnz	r0, 8007fd8 <__d2b+0x24>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	4b25      	ldr	r3, [pc, #148]	; (8008064 <__d2b+0xb0>)
 8007fce:	4826      	ldr	r0, [pc, #152]	; (8008068 <__d2b+0xb4>)
 8007fd0:	f240 310a 	movw	r1, #778	; 0x30a
 8007fd4:	f7fe f8ca 	bl	800616c <__assert_func>
 8007fd8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007fdc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007fe0:	bb35      	cbnz	r5, 8008030 <__d2b+0x7c>
 8007fe2:	2e00      	cmp	r6, #0
 8007fe4:	9301      	str	r3, [sp, #4]
 8007fe6:	d028      	beq.n	800803a <__d2b+0x86>
 8007fe8:	4668      	mov	r0, sp
 8007fea:	9600      	str	r6, [sp, #0]
 8007fec:	f7ff fd10 	bl	8007a10 <__lo0bits>
 8007ff0:	9900      	ldr	r1, [sp, #0]
 8007ff2:	b300      	cbz	r0, 8008036 <__d2b+0x82>
 8007ff4:	9a01      	ldr	r2, [sp, #4]
 8007ff6:	f1c0 0320 	rsb	r3, r0, #32
 8007ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8007ffe:	430b      	orrs	r3, r1
 8008000:	40c2      	lsrs	r2, r0
 8008002:	6163      	str	r3, [r4, #20]
 8008004:	9201      	str	r2, [sp, #4]
 8008006:	9b01      	ldr	r3, [sp, #4]
 8008008:	61a3      	str	r3, [r4, #24]
 800800a:	2b00      	cmp	r3, #0
 800800c:	bf14      	ite	ne
 800800e:	2202      	movne	r2, #2
 8008010:	2201      	moveq	r2, #1
 8008012:	6122      	str	r2, [r4, #16]
 8008014:	b1d5      	cbz	r5, 800804c <__d2b+0x98>
 8008016:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800801a:	4405      	add	r5, r0
 800801c:	f8c9 5000 	str.w	r5, [r9]
 8008020:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008024:	f8c8 0000 	str.w	r0, [r8]
 8008028:	4620      	mov	r0, r4
 800802a:	b003      	add	sp, #12
 800802c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008030:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008034:	e7d5      	b.n	8007fe2 <__d2b+0x2e>
 8008036:	6161      	str	r1, [r4, #20]
 8008038:	e7e5      	b.n	8008006 <__d2b+0x52>
 800803a:	a801      	add	r0, sp, #4
 800803c:	f7ff fce8 	bl	8007a10 <__lo0bits>
 8008040:	9b01      	ldr	r3, [sp, #4]
 8008042:	6163      	str	r3, [r4, #20]
 8008044:	2201      	movs	r2, #1
 8008046:	6122      	str	r2, [r4, #16]
 8008048:	3020      	adds	r0, #32
 800804a:	e7e3      	b.n	8008014 <__d2b+0x60>
 800804c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008050:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008054:	f8c9 0000 	str.w	r0, [r9]
 8008058:	6918      	ldr	r0, [r3, #16]
 800805a:	f7ff fcb9 	bl	80079d0 <__hi0bits>
 800805e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008062:	e7df      	b.n	8008024 <__d2b+0x70>
 8008064:	080094e9 	.word	0x080094e9
 8008068:	080095dc 	.word	0x080095dc

0800806c <__ratio>:
 800806c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008070:	4688      	mov	r8, r1
 8008072:	4669      	mov	r1, sp
 8008074:	4681      	mov	r9, r0
 8008076:	f7ff ff4d 	bl	8007f14 <__b2d>
 800807a:	a901      	add	r1, sp, #4
 800807c:	4640      	mov	r0, r8
 800807e:	ec55 4b10 	vmov	r4, r5, d0
 8008082:	f7ff ff47 	bl	8007f14 <__b2d>
 8008086:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800808a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800808e:	eba3 0c02 	sub.w	ip, r3, r2
 8008092:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008096:	1a9b      	subs	r3, r3, r2
 8008098:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800809c:	ec51 0b10 	vmov	r0, r1, d0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	bfd6      	itet	le
 80080a4:	460a      	movle	r2, r1
 80080a6:	462a      	movgt	r2, r5
 80080a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80080ac:	468b      	mov	fp, r1
 80080ae:	462f      	mov	r7, r5
 80080b0:	bfd4      	ite	le
 80080b2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80080b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80080ba:	4620      	mov	r0, r4
 80080bc:	ee10 2a10 	vmov	r2, s0
 80080c0:	465b      	mov	r3, fp
 80080c2:	4639      	mov	r1, r7
 80080c4:	f7f8 fbc2 	bl	800084c <__aeabi_ddiv>
 80080c8:	ec41 0b10 	vmov	d0, r0, r1
 80080cc:	b003      	add	sp, #12
 80080ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080080d2 <__copybits>:
 80080d2:	3901      	subs	r1, #1
 80080d4:	b570      	push	{r4, r5, r6, lr}
 80080d6:	1149      	asrs	r1, r1, #5
 80080d8:	6914      	ldr	r4, [r2, #16]
 80080da:	3101      	adds	r1, #1
 80080dc:	f102 0314 	add.w	r3, r2, #20
 80080e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80080e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80080e8:	1f05      	subs	r5, r0, #4
 80080ea:	42a3      	cmp	r3, r4
 80080ec:	d30c      	bcc.n	8008108 <__copybits+0x36>
 80080ee:	1aa3      	subs	r3, r4, r2
 80080f0:	3b11      	subs	r3, #17
 80080f2:	f023 0303 	bic.w	r3, r3, #3
 80080f6:	3211      	adds	r2, #17
 80080f8:	42a2      	cmp	r2, r4
 80080fa:	bf88      	it	hi
 80080fc:	2300      	movhi	r3, #0
 80080fe:	4418      	add	r0, r3
 8008100:	2300      	movs	r3, #0
 8008102:	4288      	cmp	r0, r1
 8008104:	d305      	bcc.n	8008112 <__copybits+0x40>
 8008106:	bd70      	pop	{r4, r5, r6, pc}
 8008108:	f853 6b04 	ldr.w	r6, [r3], #4
 800810c:	f845 6f04 	str.w	r6, [r5, #4]!
 8008110:	e7eb      	b.n	80080ea <__copybits+0x18>
 8008112:	f840 3b04 	str.w	r3, [r0], #4
 8008116:	e7f4      	b.n	8008102 <__copybits+0x30>

08008118 <__any_on>:
 8008118:	f100 0214 	add.w	r2, r0, #20
 800811c:	6900      	ldr	r0, [r0, #16]
 800811e:	114b      	asrs	r3, r1, #5
 8008120:	4298      	cmp	r0, r3
 8008122:	b510      	push	{r4, lr}
 8008124:	db11      	blt.n	800814a <__any_on+0x32>
 8008126:	dd0a      	ble.n	800813e <__any_on+0x26>
 8008128:	f011 011f 	ands.w	r1, r1, #31
 800812c:	d007      	beq.n	800813e <__any_on+0x26>
 800812e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008132:	fa24 f001 	lsr.w	r0, r4, r1
 8008136:	fa00 f101 	lsl.w	r1, r0, r1
 800813a:	428c      	cmp	r4, r1
 800813c:	d10b      	bne.n	8008156 <__any_on+0x3e>
 800813e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008142:	4293      	cmp	r3, r2
 8008144:	d803      	bhi.n	800814e <__any_on+0x36>
 8008146:	2000      	movs	r0, #0
 8008148:	bd10      	pop	{r4, pc}
 800814a:	4603      	mov	r3, r0
 800814c:	e7f7      	b.n	800813e <__any_on+0x26>
 800814e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008152:	2900      	cmp	r1, #0
 8008154:	d0f5      	beq.n	8008142 <__any_on+0x2a>
 8008156:	2001      	movs	r0, #1
 8008158:	e7f6      	b.n	8008148 <__any_on+0x30>

0800815a <_calloc_r>:
 800815a:	b513      	push	{r0, r1, r4, lr}
 800815c:	434a      	muls	r2, r1
 800815e:	4611      	mov	r1, r2
 8008160:	9201      	str	r2, [sp, #4]
 8008162:	f000 f859 	bl	8008218 <_malloc_r>
 8008166:	4604      	mov	r4, r0
 8008168:	b118      	cbz	r0, 8008172 <_calloc_r+0x18>
 800816a:	9a01      	ldr	r2, [sp, #4]
 800816c:	2100      	movs	r1, #0
 800816e:	f7fc fa09 	bl	8004584 <memset>
 8008172:	4620      	mov	r0, r4
 8008174:	b002      	add	sp, #8
 8008176:	bd10      	pop	{r4, pc}

08008178 <_free_r>:
 8008178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800817a:	2900      	cmp	r1, #0
 800817c:	d048      	beq.n	8008210 <_free_r+0x98>
 800817e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008182:	9001      	str	r0, [sp, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	f1a1 0404 	sub.w	r4, r1, #4
 800818a:	bfb8      	it	lt
 800818c:	18e4      	addlt	r4, r4, r3
 800818e:	f000 fdf9 	bl	8008d84 <__malloc_lock>
 8008192:	4a20      	ldr	r2, [pc, #128]	; (8008214 <_free_r+0x9c>)
 8008194:	9801      	ldr	r0, [sp, #4]
 8008196:	6813      	ldr	r3, [r2, #0]
 8008198:	4615      	mov	r5, r2
 800819a:	b933      	cbnz	r3, 80081aa <_free_r+0x32>
 800819c:	6063      	str	r3, [r4, #4]
 800819e:	6014      	str	r4, [r2, #0]
 80081a0:	b003      	add	sp, #12
 80081a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081a6:	f000 bdf3 	b.w	8008d90 <__malloc_unlock>
 80081aa:	42a3      	cmp	r3, r4
 80081ac:	d90b      	bls.n	80081c6 <_free_r+0x4e>
 80081ae:	6821      	ldr	r1, [r4, #0]
 80081b0:	1862      	adds	r2, r4, r1
 80081b2:	4293      	cmp	r3, r2
 80081b4:	bf04      	itt	eq
 80081b6:	681a      	ldreq	r2, [r3, #0]
 80081b8:	685b      	ldreq	r3, [r3, #4]
 80081ba:	6063      	str	r3, [r4, #4]
 80081bc:	bf04      	itt	eq
 80081be:	1852      	addeq	r2, r2, r1
 80081c0:	6022      	streq	r2, [r4, #0]
 80081c2:	602c      	str	r4, [r5, #0]
 80081c4:	e7ec      	b.n	80081a0 <_free_r+0x28>
 80081c6:	461a      	mov	r2, r3
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	b10b      	cbz	r3, 80081d0 <_free_r+0x58>
 80081cc:	42a3      	cmp	r3, r4
 80081ce:	d9fa      	bls.n	80081c6 <_free_r+0x4e>
 80081d0:	6811      	ldr	r1, [r2, #0]
 80081d2:	1855      	adds	r5, r2, r1
 80081d4:	42a5      	cmp	r5, r4
 80081d6:	d10b      	bne.n	80081f0 <_free_r+0x78>
 80081d8:	6824      	ldr	r4, [r4, #0]
 80081da:	4421      	add	r1, r4
 80081dc:	1854      	adds	r4, r2, r1
 80081de:	42a3      	cmp	r3, r4
 80081e0:	6011      	str	r1, [r2, #0]
 80081e2:	d1dd      	bne.n	80081a0 <_free_r+0x28>
 80081e4:	681c      	ldr	r4, [r3, #0]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	6053      	str	r3, [r2, #4]
 80081ea:	4421      	add	r1, r4
 80081ec:	6011      	str	r1, [r2, #0]
 80081ee:	e7d7      	b.n	80081a0 <_free_r+0x28>
 80081f0:	d902      	bls.n	80081f8 <_free_r+0x80>
 80081f2:	230c      	movs	r3, #12
 80081f4:	6003      	str	r3, [r0, #0]
 80081f6:	e7d3      	b.n	80081a0 <_free_r+0x28>
 80081f8:	6825      	ldr	r5, [r4, #0]
 80081fa:	1961      	adds	r1, r4, r5
 80081fc:	428b      	cmp	r3, r1
 80081fe:	bf04      	itt	eq
 8008200:	6819      	ldreq	r1, [r3, #0]
 8008202:	685b      	ldreq	r3, [r3, #4]
 8008204:	6063      	str	r3, [r4, #4]
 8008206:	bf04      	itt	eq
 8008208:	1949      	addeq	r1, r1, r5
 800820a:	6021      	streq	r1, [r4, #0]
 800820c:	6054      	str	r4, [r2, #4]
 800820e:	e7c7      	b.n	80081a0 <_free_r+0x28>
 8008210:	b003      	add	sp, #12
 8008212:	bd30      	pop	{r4, r5, pc}
 8008214:	20000204 	.word	0x20000204

08008218 <_malloc_r>:
 8008218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821a:	1ccd      	adds	r5, r1, #3
 800821c:	f025 0503 	bic.w	r5, r5, #3
 8008220:	3508      	adds	r5, #8
 8008222:	2d0c      	cmp	r5, #12
 8008224:	bf38      	it	cc
 8008226:	250c      	movcc	r5, #12
 8008228:	2d00      	cmp	r5, #0
 800822a:	4606      	mov	r6, r0
 800822c:	db01      	blt.n	8008232 <_malloc_r+0x1a>
 800822e:	42a9      	cmp	r1, r5
 8008230:	d903      	bls.n	800823a <_malloc_r+0x22>
 8008232:	230c      	movs	r3, #12
 8008234:	6033      	str	r3, [r6, #0]
 8008236:	2000      	movs	r0, #0
 8008238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800823a:	f000 fda3 	bl	8008d84 <__malloc_lock>
 800823e:	4921      	ldr	r1, [pc, #132]	; (80082c4 <_malloc_r+0xac>)
 8008240:	680a      	ldr	r2, [r1, #0]
 8008242:	4614      	mov	r4, r2
 8008244:	b99c      	cbnz	r4, 800826e <_malloc_r+0x56>
 8008246:	4f20      	ldr	r7, [pc, #128]	; (80082c8 <_malloc_r+0xb0>)
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	b923      	cbnz	r3, 8008256 <_malloc_r+0x3e>
 800824c:	4621      	mov	r1, r4
 800824e:	4630      	mov	r0, r6
 8008250:	f000 fafa 	bl	8008848 <_sbrk_r>
 8008254:	6038      	str	r0, [r7, #0]
 8008256:	4629      	mov	r1, r5
 8008258:	4630      	mov	r0, r6
 800825a:	f000 faf5 	bl	8008848 <_sbrk_r>
 800825e:	1c43      	adds	r3, r0, #1
 8008260:	d123      	bne.n	80082aa <_malloc_r+0x92>
 8008262:	230c      	movs	r3, #12
 8008264:	6033      	str	r3, [r6, #0]
 8008266:	4630      	mov	r0, r6
 8008268:	f000 fd92 	bl	8008d90 <__malloc_unlock>
 800826c:	e7e3      	b.n	8008236 <_malloc_r+0x1e>
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	1b5b      	subs	r3, r3, r5
 8008272:	d417      	bmi.n	80082a4 <_malloc_r+0x8c>
 8008274:	2b0b      	cmp	r3, #11
 8008276:	d903      	bls.n	8008280 <_malloc_r+0x68>
 8008278:	6023      	str	r3, [r4, #0]
 800827a:	441c      	add	r4, r3
 800827c:	6025      	str	r5, [r4, #0]
 800827e:	e004      	b.n	800828a <_malloc_r+0x72>
 8008280:	6863      	ldr	r3, [r4, #4]
 8008282:	42a2      	cmp	r2, r4
 8008284:	bf0c      	ite	eq
 8008286:	600b      	streq	r3, [r1, #0]
 8008288:	6053      	strne	r3, [r2, #4]
 800828a:	4630      	mov	r0, r6
 800828c:	f000 fd80 	bl	8008d90 <__malloc_unlock>
 8008290:	f104 000b 	add.w	r0, r4, #11
 8008294:	1d23      	adds	r3, r4, #4
 8008296:	f020 0007 	bic.w	r0, r0, #7
 800829a:	1ac2      	subs	r2, r0, r3
 800829c:	d0cc      	beq.n	8008238 <_malloc_r+0x20>
 800829e:	1a1b      	subs	r3, r3, r0
 80082a0:	50a3      	str	r3, [r4, r2]
 80082a2:	e7c9      	b.n	8008238 <_malloc_r+0x20>
 80082a4:	4622      	mov	r2, r4
 80082a6:	6864      	ldr	r4, [r4, #4]
 80082a8:	e7cc      	b.n	8008244 <_malloc_r+0x2c>
 80082aa:	1cc4      	adds	r4, r0, #3
 80082ac:	f024 0403 	bic.w	r4, r4, #3
 80082b0:	42a0      	cmp	r0, r4
 80082b2:	d0e3      	beq.n	800827c <_malloc_r+0x64>
 80082b4:	1a21      	subs	r1, r4, r0
 80082b6:	4630      	mov	r0, r6
 80082b8:	f000 fac6 	bl	8008848 <_sbrk_r>
 80082bc:	3001      	adds	r0, #1
 80082be:	d1dd      	bne.n	800827c <_malloc_r+0x64>
 80082c0:	e7cf      	b.n	8008262 <_malloc_r+0x4a>
 80082c2:	bf00      	nop
 80082c4:	20000204 	.word	0x20000204
 80082c8:	20000208 	.word	0x20000208

080082cc <__ssputs_r>:
 80082cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d0:	688e      	ldr	r6, [r1, #8]
 80082d2:	429e      	cmp	r6, r3
 80082d4:	4682      	mov	sl, r0
 80082d6:	460c      	mov	r4, r1
 80082d8:	4690      	mov	r8, r2
 80082da:	461f      	mov	r7, r3
 80082dc:	d838      	bhi.n	8008350 <__ssputs_r+0x84>
 80082de:	898a      	ldrh	r2, [r1, #12]
 80082e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082e4:	d032      	beq.n	800834c <__ssputs_r+0x80>
 80082e6:	6825      	ldr	r5, [r4, #0]
 80082e8:	6909      	ldr	r1, [r1, #16]
 80082ea:	eba5 0901 	sub.w	r9, r5, r1
 80082ee:	6965      	ldr	r5, [r4, #20]
 80082f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082f8:	3301      	adds	r3, #1
 80082fa:	444b      	add	r3, r9
 80082fc:	106d      	asrs	r5, r5, #1
 80082fe:	429d      	cmp	r5, r3
 8008300:	bf38      	it	cc
 8008302:	461d      	movcc	r5, r3
 8008304:	0553      	lsls	r3, r2, #21
 8008306:	d531      	bpl.n	800836c <__ssputs_r+0xa0>
 8008308:	4629      	mov	r1, r5
 800830a:	f7ff ff85 	bl	8008218 <_malloc_r>
 800830e:	4606      	mov	r6, r0
 8008310:	b950      	cbnz	r0, 8008328 <__ssputs_r+0x5c>
 8008312:	230c      	movs	r3, #12
 8008314:	f8ca 3000 	str.w	r3, [sl]
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800831e:	81a3      	strh	r3, [r4, #12]
 8008320:	f04f 30ff 	mov.w	r0, #4294967295
 8008324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008328:	6921      	ldr	r1, [r4, #16]
 800832a:	464a      	mov	r2, r9
 800832c:	f7ff fa4c 	bl	80077c8 <memcpy>
 8008330:	89a3      	ldrh	r3, [r4, #12]
 8008332:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800833a:	81a3      	strh	r3, [r4, #12]
 800833c:	6126      	str	r6, [r4, #16]
 800833e:	6165      	str	r5, [r4, #20]
 8008340:	444e      	add	r6, r9
 8008342:	eba5 0509 	sub.w	r5, r5, r9
 8008346:	6026      	str	r6, [r4, #0]
 8008348:	60a5      	str	r5, [r4, #8]
 800834a:	463e      	mov	r6, r7
 800834c:	42be      	cmp	r6, r7
 800834e:	d900      	bls.n	8008352 <__ssputs_r+0x86>
 8008350:	463e      	mov	r6, r7
 8008352:	4632      	mov	r2, r6
 8008354:	6820      	ldr	r0, [r4, #0]
 8008356:	4641      	mov	r1, r8
 8008358:	f000 fcfa 	bl	8008d50 <memmove>
 800835c:	68a3      	ldr	r3, [r4, #8]
 800835e:	6822      	ldr	r2, [r4, #0]
 8008360:	1b9b      	subs	r3, r3, r6
 8008362:	4432      	add	r2, r6
 8008364:	60a3      	str	r3, [r4, #8]
 8008366:	6022      	str	r2, [r4, #0]
 8008368:	2000      	movs	r0, #0
 800836a:	e7db      	b.n	8008324 <__ssputs_r+0x58>
 800836c:	462a      	mov	r2, r5
 800836e:	f000 fd15 	bl	8008d9c <_realloc_r>
 8008372:	4606      	mov	r6, r0
 8008374:	2800      	cmp	r0, #0
 8008376:	d1e1      	bne.n	800833c <__ssputs_r+0x70>
 8008378:	6921      	ldr	r1, [r4, #16]
 800837a:	4650      	mov	r0, sl
 800837c:	f7ff fefc 	bl	8008178 <_free_r>
 8008380:	e7c7      	b.n	8008312 <__ssputs_r+0x46>
	...

08008384 <_svfiprintf_r>:
 8008384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008388:	4698      	mov	r8, r3
 800838a:	898b      	ldrh	r3, [r1, #12]
 800838c:	061b      	lsls	r3, r3, #24
 800838e:	b09d      	sub	sp, #116	; 0x74
 8008390:	4607      	mov	r7, r0
 8008392:	460d      	mov	r5, r1
 8008394:	4614      	mov	r4, r2
 8008396:	d50e      	bpl.n	80083b6 <_svfiprintf_r+0x32>
 8008398:	690b      	ldr	r3, [r1, #16]
 800839a:	b963      	cbnz	r3, 80083b6 <_svfiprintf_r+0x32>
 800839c:	2140      	movs	r1, #64	; 0x40
 800839e:	f7ff ff3b 	bl	8008218 <_malloc_r>
 80083a2:	6028      	str	r0, [r5, #0]
 80083a4:	6128      	str	r0, [r5, #16]
 80083a6:	b920      	cbnz	r0, 80083b2 <_svfiprintf_r+0x2e>
 80083a8:	230c      	movs	r3, #12
 80083aa:	603b      	str	r3, [r7, #0]
 80083ac:	f04f 30ff 	mov.w	r0, #4294967295
 80083b0:	e0d1      	b.n	8008556 <_svfiprintf_r+0x1d2>
 80083b2:	2340      	movs	r3, #64	; 0x40
 80083b4:	616b      	str	r3, [r5, #20]
 80083b6:	2300      	movs	r3, #0
 80083b8:	9309      	str	r3, [sp, #36]	; 0x24
 80083ba:	2320      	movs	r3, #32
 80083bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80083c4:	2330      	movs	r3, #48	; 0x30
 80083c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008570 <_svfiprintf_r+0x1ec>
 80083ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083ce:	f04f 0901 	mov.w	r9, #1
 80083d2:	4623      	mov	r3, r4
 80083d4:	469a      	mov	sl, r3
 80083d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083da:	b10a      	cbz	r2, 80083e0 <_svfiprintf_r+0x5c>
 80083dc:	2a25      	cmp	r2, #37	; 0x25
 80083de:	d1f9      	bne.n	80083d4 <_svfiprintf_r+0x50>
 80083e0:	ebba 0b04 	subs.w	fp, sl, r4
 80083e4:	d00b      	beq.n	80083fe <_svfiprintf_r+0x7a>
 80083e6:	465b      	mov	r3, fp
 80083e8:	4622      	mov	r2, r4
 80083ea:	4629      	mov	r1, r5
 80083ec:	4638      	mov	r0, r7
 80083ee:	f7ff ff6d 	bl	80082cc <__ssputs_r>
 80083f2:	3001      	adds	r0, #1
 80083f4:	f000 80aa 	beq.w	800854c <_svfiprintf_r+0x1c8>
 80083f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083fa:	445a      	add	r2, fp
 80083fc:	9209      	str	r2, [sp, #36]	; 0x24
 80083fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008402:	2b00      	cmp	r3, #0
 8008404:	f000 80a2 	beq.w	800854c <_svfiprintf_r+0x1c8>
 8008408:	2300      	movs	r3, #0
 800840a:	f04f 32ff 	mov.w	r2, #4294967295
 800840e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008412:	f10a 0a01 	add.w	sl, sl, #1
 8008416:	9304      	str	r3, [sp, #16]
 8008418:	9307      	str	r3, [sp, #28]
 800841a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800841e:	931a      	str	r3, [sp, #104]	; 0x68
 8008420:	4654      	mov	r4, sl
 8008422:	2205      	movs	r2, #5
 8008424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008428:	4851      	ldr	r0, [pc, #324]	; (8008570 <_svfiprintf_r+0x1ec>)
 800842a:	f7f7 fed9 	bl	80001e0 <memchr>
 800842e:	9a04      	ldr	r2, [sp, #16]
 8008430:	b9d8      	cbnz	r0, 800846a <_svfiprintf_r+0xe6>
 8008432:	06d0      	lsls	r0, r2, #27
 8008434:	bf44      	itt	mi
 8008436:	2320      	movmi	r3, #32
 8008438:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800843c:	0711      	lsls	r1, r2, #28
 800843e:	bf44      	itt	mi
 8008440:	232b      	movmi	r3, #43	; 0x2b
 8008442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008446:	f89a 3000 	ldrb.w	r3, [sl]
 800844a:	2b2a      	cmp	r3, #42	; 0x2a
 800844c:	d015      	beq.n	800847a <_svfiprintf_r+0xf6>
 800844e:	9a07      	ldr	r2, [sp, #28]
 8008450:	4654      	mov	r4, sl
 8008452:	2000      	movs	r0, #0
 8008454:	f04f 0c0a 	mov.w	ip, #10
 8008458:	4621      	mov	r1, r4
 800845a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800845e:	3b30      	subs	r3, #48	; 0x30
 8008460:	2b09      	cmp	r3, #9
 8008462:	d94e      	bls.n	8008502 <_svfiprintf_r+0x17e>
 8008464:	b1b0      	cbz	r0, 8008494 <_svfiprintf_r+0x110>
 8008466:	9207      	str	r2, [sp, #28]
 8008468:	e014      	b.n	8008494 <_svfiprintf_r+0x110>
 800846a:	eba0 0308 	sub.w	r3, r0, r8
 800846e:	fa09 f303 	lsl.w	r3, r9, r3
 8008472:	4313      	orrs	r3, r2
 8008474:	9304      	str	r3, [sp, #16]
 8008476:	46a2      	mov	sl, r4
 8008478:	e7d2      	b.n	8008420 <_svfiprintf_r+0x9c>
 800847a:	9b03      	ldr	r3, [sp, #12]
 800847c:	1d19      	adds	r1, r3, #4
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	9103      	str	r1, [sp, #12]
 8008482:	2b00      	cmp	r3, #0
 8008484:	bfbb      	ittet	lt
 8008486:	425b      	neglt	r3, r3
 8008488:	f042 0202 	orrlt.w	r2, r2, #2
 800848c:	9307      	strge	r3, [sp, #28]
 800848e:	9307      	strlt	r3, [sp, #28]
 8008490:	bfb8      	it	lt
 8008492:	9204      	strlt	r2, [sp, #16]
 8008494:	7823      	ldrb	r3, [r4, #0]
 8008496:	2b2e      	cmp	r3, #46	; 0x2e
 8008498:	d10c      	bne.n	80084b4 <_svfiprintf_r+0x130>
 800849a:	7863      	ldrb	r3, [r4, #1]
 800849c:	2b2a      	cmp	r3, #42	; 0x2a
 800849e:	d135      	bne.n	800850c <_svfiprintf_r+0x188>
 80084a0:	9b03      	ldr	r3, [sp, #12]
 80084a2:	1d1a      	adds	r2, r3, #4
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	9203      	str	r2, [sp, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	bfb8      	it	lt
 80084ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80084b0:	3402      	adds	r4, #2
 80084b2:	9305      	str	r3, [sp, #20]
 80084b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008580 <_svfiprintf_r+0x1fc>
 80084b8:	7821      	ldrb	r1, [r4, #0]
 80084ba:	2203      	movs	r2, #3
 80084bc:	4650      	mov	r0, sl
 80084be:	f7f7 fe8f 	bl	80001e0 <memchr>
 80084c2:	b140      	cbz	r0, 80084d6 <_svfiprintf_r+0x152>
 80084c4:	2340      	movs	r3, #64	; 0x40
 80084c6:	eba0 000a 	sub.w	r0, r0, sl
 80084ca:	fa03 f000 	lsl.w	r0, r3, r0
 80084ce:	9b04      	ldr	r3, [sp, #16]
 80084d0:	4303      	orrs	r3, r0
 80084d2:	3401      	adds	r4, #1
 80084d4:	9304      	str	r3, [sp, #16]
 80084d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084da:	4826      	ldr	r0, [pc, #152]	; (8008574 <_svfiprintf_r+0x1f0>)
 80084dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084e0:	2206      	movs	r2, #6
 80084e2:	f7f7 fe7d 	bl	80001e0 <memchr>
 80084e6:	2800      	cmp	r0, #0
 80084e8:	d038      	beq.n	800855c <_svfiprintf_r+0x1d8>
 80084ea:	4b23      	ldr	r3, [pc, #140]	; (8008578 <_svfiprintf_r+0x1f4>)
 80084ec:	bb1b      	cbnz	r3, 8008536 <_svfiprintf_r+0x1b2>
 80084ee:	9b03      	ldr	r3, [sp, #12]
 80084f0:	3307      	adds	r3, #7
 80084f2:	f023 0307 	bic.w	r3, r3, #7
 80084f6:	3308      	adds	r3, #8
 80084f8:	9303      	str	r3, [sp, #12]
 80084fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084fc:	4433      	add	r3, r6
 80084fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008500:	e767      	b.n	80083d2 <_svfiprintf_r+0x4e>
 8008502:	fb0c 3202 	mla	r2, ip, r2, r3
 8008506:	460c      	mov	r4, r1
 8008508:	2001      	movs	r0, #1
 800850a:	e7a5      	b.n	8008458 <_svfiprintf_r+0xd4>
 800850c:	2300      	movs	r3, #0
 800850e:	3401      	adds	r4, #1
 8008510:	9305      	str	r3, [sp, #20]
 8008512:	4619      	mov	r1, r3
 8008514:	f04f 0c0a 	mov.w	ip, #10
 8008518:	4620      	mov	r0, r4
 800851a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800851e:	3a30      	subs	r2, #48	; 0x30
 8008520:	2a09      	cmp	r2, #9
 8008522:	d903      	bls.n	800852c <_svfiprintf_r+0x1a8>
 8008524:	2b00      	cmp	r3, #0
 8008526:	d0c5      	beq.n	80084b4 <_svfiprintf_r+0x130>
 8008528:	9105      	str	r1, [sp, #20]
 800852a:	e7c3      	b.n	80084b4 <_svfiprintf_r+0x130>
 800852c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008530:	4604      	mov	r4, r0
 8008532:	2301      	movs	r3, #1
 8008534:	e7f0      	b.n	8008518 <_svfiprintf_r+0x194>
 8008536:	ab03      	add	r3, sp, #12
 8008538:	9300      	str	r3, [sp, #0]
 800853a:	462a      	mov	r2, r5
 800853c:	4b0f      	ldr	r3, [pc, #60]	; (800857c <_svfiprintf_r+0x1f8>)
 800853e:	a904      	add	r1, sp, #16
 8008540:	4638      	mov	r0, r7
 8008542:	f7fc f8c7 	bl	80046d4 <_printf_float>
 8008546:	1c42      	adds	r2, r0, #1
 8008548:	4606      	mov	r6, r0
 800854a:	d1d6      	bne.n	80084fa <_svfiprintf_r+0x176>
 800854c:	89ab      	ldrh	r3, [r5, #12]
 800854e:	065b      	lsls	r3, r3, #25
 8008550:	f53f af2c 	bmi.w	80083ac <_svfiprintf_r+0x28>
 8008554:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008556:	b01d      	add	sp, #116	; 0x74
 8008558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800855c:	ab03      	add	r3, sp, #12
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	462a      	mov	r2, r5
 8008562:	4b06      	ldr	r3, [pc, #24]	; (800857c <_svfiprintf_r+0x1f8>)
 8008564:	a904      	add	r1, sp, #16
 8008566:	4638      	mov	r0, r7
 8008568:	f7fc fb58 	bl	8004c1c <_printf_i>
 800856c:	e7eb      	b.n	8008546 <_svfiprintf_r+0x1c2>
 800856e:	bf00      	nop
 8008570:	0800973c 	.word	0x0800973c
 8008574:	08009746 	.word	0x08009746
 8008578:	080046d5 	.word	0x080046d5
 800857c:	080082cd 	.word	0x080082cd
 8008580:	08009742 	.word	0x08009742

08008584 <__sfputc_r>:
 8008584:	6893      	ldr	r3, [r2, #8]
 8008586:	3b01      	subs	r3, #1
 8008588:	2b00      	cmp	r3, #0
 800858a:	b410      	push	{r4}
 800858c:	6093      	str	r3, [r2, #8]
 800858e:	da08      	bge.n	80085a2 <__sfputc_r+0x1e>
 8008590:	6994      	ldr	r4, [r2, #24]
 8008592:	42a3      	cmp	r3, r4
 8008594:	db01      	blt.n	800859a <__sfputc_r+0x16>
 8008596:	290a      	cmp	r1, #10
 8008598:	d103      	bne.n	80085a2 <__sfputc_r+0x1e>
 800859a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800859e:	f000 b9a7 	b.w	80088f0 <__swbuf_r>
 80085a2:	6813      	ldr	r3, [r2, #0]
 80085a4:	1c58      	adds	r0, r3, #1
 80085a6:	6010      	str	r0, [r2, #0]
 80085a8:	7019      	strb	r1, [r3, #0]
 80085aa:	4608      	mov	r0, r1
 80085ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <__sfputs_r>:
 80085b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b4:	4606      	mov	r6, r0
 80085b6:	460f      	mov	r7, r1
 80085b8:	4614      	mov	r4, r2
 80085ba:	18d5      	adds	r5, r2, r3
 80085bc:	42ac      	cmp	r4, r5
 80085be:	d101      	bne.n	80085c4 <__sfputs_r+0x12>
 80085c0:	2000      	movs	r0, #0
 80085c2:	e007      	b.n	80085d4 <__sfputs_r+0x22>
 80085c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085c8:	463a      	mov	r2, r7
 80085ca:	4630      	mov	r0, r6
 80085cc:	f7ff ffda 	bl	8008584 <__sfputc_r>
 80085d0:	1c43      	adds	r3, r0, #1
 80085d2:	d1f3      	bne.n	80085bc <__sfputs_r+0xa>
 80085d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085d8 <_vfiprintf_r>:
 80085d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085dc:	460d      	mov	r5, r1
 80085de:	b09d      	sub	sp, #116	; 0x74
 80085e0:	4614      	mov	r4, r2
 80085e2:	4698      	mov	r8, r3
 80085e4:	4606      	mov	r6, r0
 80085e6:	b118      	cbz	r0, 80085f0 <_vfiprintf_r+0x18>
 80085e8:	6983      	ldr	r3, [r0, #24]
 80085ea:	b90b      	cbnz	r3, 80085f0 <_vfiprintf_r+0x18>
 80085ec:	f7fe fcac 	bl	8006f48 <__sinit>
 80085f0:	4b89      	ldr	r3, [pc, #548]	; (8008818 <_vfiprintf_r+0x240>)
 80085f2:	429d      	cmp	r5, r3
 80085f4:	d11b      	bne.n	800862e <_vfiprintf_r+0x56>
 80085f6:	6875      	ldr	r5, [r6, #4]
 80085f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085fa:	07d9      	lsls	r1, r3, #31
 80085fc:	d405      	bmi.n	800860a <_vfiprintf_r+0x32>
 80085fe:	89ab      	ldrh	r3, [r5, #12]
 8008600:	059a      	lsls	r2, r3, #22
 8008602:	d402      	bmi.n	800860a <_vfiprintf_r+0x32>
 8008604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008606:	f7ff f8c2 	bl	800778e <__retarget_lock_acquire_recursive>
 800860a:	89ab      	ldrh	r3, [r5, #12]
 800860c:	071b      	lsls	r3, r3, #28
 800860e:	d501      	bpl.n	8008614 <_vfiprintf_r+0x3c>
 8008610:	692b      	ldr	r3, [r5, #16]
 8008612:	b9eb      	cbnz	r3, 8008650 <_vfiprintf_r+0x78>
 8008614:	4629      	mov	r1, r5
 8008616:	4630      	mov	r0, r6
 8008618:	f000 f9dc 	bl	80089d4 <__swsetup_r>
 800861c:	b1c0      	cbz	r0, 8008650 <_vfiprintf_r+0x78>
 800861e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008620:	07dc      	lsls	r4, r3, #31
 8008622:	d50e      	bpl.n	8008642 <_vfiprintf_r+0x6a>
 8008624:	f04f 30ff 	mov.w	r0, #4294967295
 8008628:	b01d      	add	sp, #116	; 0x74
 800862a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800862e:	4b7b      	ldr	r3, [pc, #492]	; (800881c <_vfiprintf_r+0x244>)
 8008630:	429d      	cmp	r5, r3
 8008632:	d101      	bne.n	8008638 <_vfiprintf_r+0x60>
 8008634:	68b5      	ldr	r5, [r6, #8]
 8008636:	e7df      	b.n	80085f8 <_vfiprintf_r+0x20>
 8008638:	4b79      	ldr	r3, [pc, #484]	; (8008820 <_vfiprintf_r+0x248>)
 800863a:	429d      	cmp	r5, r3
 800863c:	bf08      	it	eq
 800863e:	68f5      	ldreq	r5, [r6, #12]
 8008640:	e7da      	b.n	80085f8 <_vfiprintf_r+0x20>
 8008642:	89ab      	ldrh	r3, [r5, #12]
 8008644:	0598      	lsls	r0, r3, #22
 8008646:	d4ed      	bmi.n	8008624 <_vfiprintf_r+0x4c>
 8008648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800864a:	f7ff f8a1 	bl	8007790 <__retarget_lock_release_recursive>
 800864e:	e7e9      	b.n	8008624 <_vfiprintf_r+0x4c>
 8008650:	2300      	movs	r3, #0
 8008652:	9309      	str	r3, [sp, #36]	; 0x24
 8008654:	2320      	movs	r3, #32
 8008656:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800865a:	f8cd 800c 	str.w	r8, [sp, #12]
 800865e:	2330      	movs	r3, #48	; 0x30
 8008660:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008824 <_vfiprintf_r+0x24c>
 8008664:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008668:	f04f 0901 	mov.w	r9, #1
 800866c:	4623      	mov	r3, r4
 800866e:	469a      	mov	sl, r3
 8008670:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008674:	b10a      	cbz	r2, 800867a <_vfiprintf_r+0xa2>
 8008676:	2a25      	cmp	r2, #37	; 0x25
 8008678:	d1f9      	bne.n	800866e <_vfiprintf_r+0x96>
 800867a:	ebba 0b04 	subs.w	fp, sl, r4
 800867e:	d00b      	beq.n	8008698 <_vfiprintf_r+0xc0>
 8008680:	465b      	mov	r3, fp
 8008682:	4622      	mov	r2, r4
 8008684:	4629      	mov	r1, r5
 8008686:	4630      	mov	r0, r6
 8008688:	f7ff ff93 	bl	80085b2 <__sfputs_r>
 800868c:	3001      	adds	r0, #1
 800868e:	f000 80aa 	beq.w	80087e6 <_vfiprintf_r+0x20e>
 8008692:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008694:	445a      	add	r2, fp
 8008696:	9209      	str	r2, [sp, #36]	; 0x24
 8008698:	f89a 3000 	ldrb.w	r3, [sl]
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 80a2 	beq.w	80087e6 <_vfiprintf_r+0x20e>
 80086a2:	2300      	movs	r3, #0
 80086a4:	f04f 32ff 	mov.w	r2, #4294967295
 80086a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086ac:	f10a 0a01 	add.w	sl, sl, #1
 80086b0:	9304      	str	r3, [sp, #16]
 80086b2:	9307      	str	r3, [sp, #28]
 80086b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086b8:	931a      	str	r3, [sp, #104]	; 0x68
 80086ba:	4654      	mov	r4, sl
 80086bc:	2205      	movs	r2, #5
 80086be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086c2:	4858      	ldr	r0, [pc, #352]	; (8008824 <_vfiprintf_r+0x24c>)
 80086c4:	f7f7 fd8c 	bl	80001e0 <memchr>
 80086c8:	9a04      	ldr	r2, [sp, #16]
 80086ca:	b9d8      	cbnz	r0, 8008704 <_vfiprintf_r+0x12c>
 80086cc:	06d1      	lsls	r1, r2, #27
 80086ce:	bf44      	itt	mi
 80086d0:	2320      	movmi	r3, #32
 80086d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086d6:	0713      	lsls	r3, r2, #28
 80086d8:	bf44      	itt	mi
 80086da:	232b      	movmi	r3, #43	; 0x2b
 80086dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086e0:	f89a 3000 	ldrb.w	r3, [sl]
 80086e4:	2b2a      	cmp	r3, #42	; 0x2a
 80086e6:	d015      	beq.n	8008714 <_vfiprintf_r+0x13c>
 80086e8:	9a07      	ldr	r2, [sp, #28]
 80086ea:	4654      	mov	r4, sl
 80086ec:	2000      	movs	r0, #0
 80086ee:	f04f 0c0a 	mov.w	ip, #10
 80086f2:	4621      	mov	r1, r4
 80086f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086f8:	3b30      	subs	r3, #48	; 0x30
 80086fa:	2b09      	cmp	r3, #9
 80086fc:	d94e      	bls.n	800879c <_vfiprintf_r+0x1c4>
 80086fe:	b1b0      	cbz	r0, 800872e <_vfiprintf_r+0x156>
 8008700:	9207      	str	r2, [sp, #28]
 8008702:	e014      	b.n	800872e <_vfiprintf_r+0x156>
 8008704:	eba0 0308 	sub.w	r3, r0, r8
 8008708:	fa09 f303 	lsl.w	r3, r9, r3
 800870c:	4313      	orrs	r3, r2
 800870e:	9304      	str	r3, [sp, #16]
 8008710:	46a2      	mov	sl, r4
 8008712:	e7d2      	b.n	80086ba <_vfiprintf_r+0xe2>
 8008714:	9b03      	ldr	r3, [sp, #12]
 8008716:	1d19      	adds	r1, r3, #4
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	9103      	str	r1, [sp, #12]
 800871c:	2b00      	cmp	r3, #0
 800871e:	bfbb      	ittet	lt
 8008720:	425b      	neglt	r3, r3
 8008722:	f042 0202 	orrlt.w	r2, r2, #2
 8008726:	9307      	strge	r3, [sp, #28]
 8008728:	9307      	strlt	r3, [sp, #28]
 800872a:	bfb8      	it	lt
 800872c:	9204      	strlt	r2, [sp, #16]
 800872e:	7823      	ldrb	r3, [r4, #0]
 8008730:	2b2e      	cmp	r3, #46	; 0x2e
 8008732:	d10c      	bne.n	800874e <_vfiprintf_r+0x176>
 8008734:	7863      	ldrb	r3, [r4, #1]
 8008736:	2b2a      	cmp	r3, #42	; 0x2a
 8008738:	d135      	bne.n	80087a6 <_vfiprintf_r+0x1ce>
 800873a:	9b03      	ldr	r3, [sp, #12]
 800873c:	1d1a      	adds	r2, r3, #4
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	9203      	str	r2, [sp, #12]
 8008742:	2b00      	cmp	r3, #0
 8008744:	bfb8      	it	lt
 8008746:	f04f 33ff 	movlt.w	r3, #4294967295
 800874a:	3402      	adds	r4, #2
 800874c:	9305      	str	r3, [sp, #20]
 800874e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008834 <_vfiprintf_r+0x25c>
 8008752:	7821      	ldrb	r1, [r4, #0]
 8008754:	2203      	movs	r2, #3
 8008756:	4650      	mov	r0, sl
 8008758:	f7f7 fd42 	bl	80001e0 <memchr>
 800875c:	b140      	cbz	r0, 8008770 <_vfiprintf_r+0x198>
 800875e:	2340      	movs	r3, #64	; 0x40
 8008760:	eba0 000a 	sub.w	r0, r0, sl
 8008764:	fa03 f000 	lsl.w	r0, r3, r0
 8008768:	9b04      	ldr	r3, [sp, #16]
 800876a:	4303      	orrs	r3, r0
 800876c:	3401      	adds	r4, #1
 800876e:	9304      	str	r3, [sp, #16]
 8008770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008774:	482c      	ldr	r0, [pc, #176]	; (8008828 <_vfiprintf_r+0x250>)
 8008776:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800877a:	2206      	movs	r2, #6
 800877c:	f7f7 fd30 	bl	80001e0 <memchr>
 8008780:	2800      	cmp	r0, #0
 8008782:	d03f      	beq.n	8008804 <_vfiprintf_r+0x22c>
 8008784:	4b29      	ldr	r3, [pc, #164]	; (800882c <_vfiprintf_r+0x254>)
 8008786:	bb1b      	cbnz	r3, 80087d0 <_vfiprintf_r+0x1f8>
 8008788:	9b03      	ldr	r3, [sp, #12]
 800878a:	3307      	adds	r3, #7
 800878c:	f023 0307 	bic.w	r3, r3, #7
 8008790:	3308      	adds	r3, #8
 8008792:	9303      	str	r3, [sp, #12]
 8008794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008796:	443b      	add	r3, r7
 8008798:	9309      	str	r3, [sp, #36]	; 0x24
 800879a:	e767      	b.n	800866c <_vfiprintf_r+0x94>
 800879c:	fb0c 3202 	mla	r2, ip, r2, r3
 80087a0:	460c      	mov	r4, r1
 80087a2:	2001      	movs	r0, #1
 80087a4:	e7a5      	b.n	80086f2 <_vfiprintf_r+0x11a>
 80087a6:	2300      	movs	r3, #0
 80087a8:	3401      	adds	r4, #1
 80087aa:	9305      	str	r3, [sp, #20]
 80087ac:	4619      	mov	r1, r3
 80087ae:	f04f 0c0a 	mov.w	ip, #10
 80087b2:	4620      	mov	r0, r4
 80087b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087b8:	3a30      	subs	r2, #48	; 0x30
 80087ba:	2a09      	cmp	r2, #9
 80087bc:	d903      	bls.n	80087c6 <_vfiprintf_r+0x1ee>
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d0c5      	beq.n	800874e <_vfiprintf_r+0x176>
 80087c2:	9105      	str	r1, [sp, #20]
 80087c4:	e7c3      	b.n	800874e <_vfiprintf_r+0x176>
 80087c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80087ca:	4604      	mov	r4, r0
 80087cc:	2301      	movs	r3, #1
 80087ce:	e7f0      	b.n	80087b2 <_vfiprintf_r+0x1da>
 80087d0:	ab03      	add	r3, sp, #12
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	462a      	mov	r2, r5
 80087d6:	4b16      	ldr	r3, [pc, #88]	; (8008830 <_vfiprintf_r+0x258>)
 80087d8:	a904      	add	r1, sp, #16
 80087da:	4630      	mov	r0, r6
 80087dc:	f7fb ff7a 	bl	80046d4 <_printf_float>
 80087e0:	4607      	mov	r7, r0
 80087e2:	1c78      	adds	r0, r7, #1
 80087e4:	d1d6      	bne.n	8008794 <_vfiprintf_r+0x1bc>
 80087e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087e8:	07d9      	lsls	r1, r3, #31
 80087ea:	d405      	bmi.n	80087f8 <_vfiprintf_r+0x220>
 80087ec:	89ab      	ldrh	r3, [r5, #12]
 80087ee:	059a      	lsls	r2, r3, #22
 80087f0:	d402      	bmi.n	80087f8 <_vfiprintf_r+0x220>
 80087f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087f4:	f7fe ffcc 	bl	8007790 <__retarget_lock_release_recursive>
 80087f8:	89ab      	ldrh	r3, [r5, #12]
 80087fa:	065b      	lsls	r3, r3, #25
 80087fc:	f53f af12 	bmi.w	8008624 <_vfiprintf_r+0x4c>
 8008800:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008802:	e711      	b.n	8008628 <_vfiprintf_r+0x50>
 8008804:	ab03      	add	r3, sp, #12
 8008806:	9300      	str	r3, [sp, #0]
 8008808:	462a      	mov	r2, r5
 800880a:	4b09      	ldr	r3, [pc, #36]	; (8008830 <_vfiprintf_r+0x258>)
 800880c:	a904      	add	r1, sp, #16
 800880e:	4630      	mov	r0, r6
 8008810:	f7fc fa04 	bl	8004c1c <_printf_i>
 8008814:	e7e4      	b.n	80087e0 <_vfiprintf_r+0x208>
 8008816:	bf00      	nop
 8008818:	0800951c 	.word	0x0800951c
 800881c:	0800953c 	.word	0x0800953c
 8008820:	080094fc 	.word	0x080094fc
 8008824:	0800973c 	.word	0x0800973c
 8008828:	08009746 	.word	0x08009746
 800882c:	080046d5 	.word	0x080046d5
 8008830:	080085b3 	.word	0x080085b3
 8008834:	08009742 	.word	0x08009742

08008838 <nan>:
 8008838:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008840 <nan+0x8>
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	00000000 	.word	0x00000000
 8008844:	7ff80000 	.word	0x7ff80000

08008848 <_sbrk_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	4d06      	ldr	r5, [pc, #24]	; (8008864 <_sbrk_r+0x1c>)
 800884c:	2300      	movs	r3, #0
 800884e:	4604      	mov	r4, r0
 8008850:	4608      	mov	r0, r1
 8008852:	602b      	str	r3, [r5, #0]
 8008854:	f7f8 fe7e 	bl	8001554 <_sbrk>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	d102      	bne.n	8008862 <_sbrk_r+0x1a>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	b103      	cbz	r3, 8008862 <_sbrk_r+0x1a>
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	bd38      	pop	{r3, r4, r5, pc}
 8008864:	200004c4 	.word	0x200004c4

08008868 <__sread>:
 8008868:	b510      	push	{r4, lr}
 800886a:	460c      	mov	r4, r1
 800886c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008870:	f000 faba 	bl	8008de8 <_read_r>
 8008874:	2800      	cmp	r0, #0
 8008876:	bfab      	itete	ge
 8008878:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800887a:	89a3      	ldrhlt	r3, [r4, #12]
 800887c:	181b      	addge	r3, r3, r0
 800887e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008882:	bfac      	ite	ge
 8008884:	6563      	strge	r3, [r4, #84]	; 0x54
 8008886:	81a3      	strhlt	r3, [r4, #12]
 8008888:	bd10      	pop	{r4, pc}

0800888a <__swrite>:
 800888a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800888e:	461f      	mov	r7, r3
 8008890:	898b      	ldrh	r3, [r1, #12]
 8008892:	05db      	lsls	r3, r3, #23
 8008894:	4605      	mov	r5, r0
 8008896:	460c      	mov	r4, r1
 8008898:	4616      	mov	r6, r2
 800889a:	d505      	bpl.n	80088a8 <__swrite+0x1e>
 800889c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a0:	2302      	movs	r3, #2
 80088a2:	2200      	movs	r2, #0
 80088a4:	f000 f9de 	bl	8008c64 <_lseek_r>
 80088a8:	89a3      	ldrh	r3, [r4, #12]
 80088aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088b2:	81a3      	strh	r3, [r4, #12]
 80088b4:	4632      	mov	r2, r6
 80088b6:	463b      	mov	r3, r7
 80088b8:	4628      	mov	r0, r5
 80088ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088be:	f000 b877 	b.w	80089b0 <_write_r>

080088c2 <__sseek>:
 80088c2:	b510      	push	{r4, lr}
 80088c4:	460c      	mov	r4, r1
 80088c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ca:	f000 f9cb 	bl	8008c64 <_lseek_r>
 80088ce:	1c43      	adds	r3, r0, #1
 80088d0:	89a3      	ldrh	r3, [r4, #12]
 80088d2:	bf15      	itete	ne
 80088d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80088d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088de:	81a3      	strheq	r3, [r4, #12]
 80088e0:	bf18      	it	ne
 80088e2:	81a3      	strhne	r3, [r4, #12]
 80088e4:	bd10      	pop	{r4, pc}

080088e6 <__sclose>:
 80088e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ea:	f000 b8e9 	b.w	8008ac0 <_close_r>
	...

080088f0 <__swbuf_r>:
 80088f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f2:	460e      	mov	r6, r1
 80088f4:	4614      	mov	r4, r2
 80088f6:	4605      	mov	r5, r0
 80088f8:	b118      	cbz	r0, 8008902 <__swbuf_r+0x12>
 80088fa:	6983      	ldr	r3, [r0, #24]
 80088fc:	b90b      	cbnz	r3, 8008902 <__swbuf_r+0x12>
 80088fe:	f7fe fb23 	bl	8006f48 <__sinit>
 8008902:	4b21      	ldr	r3, [pc, #132]	; (8008988 <__swbuf_r+0x98>)
 8008904:	429c      	cmp	r4, r3
 8008906:	d12b      	bne.n	8008960 <__swbuf_r+0x70>
 8008908:	686c      	ldr	r4, [r5, #4]
 800890a:	69a3      	ldr	r3, [r4, #24]
 800890c:	60a3      	str	r3, [r4, #8]
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	071a      	lsls	r2, r3, #28
 8008912:	d52f      	bpl.n	8008974 <__swbuf_r+0x84>
 8008914:	6923      	ldr	r3, [r4, #16]
 8008916:	b36b      	cbz	r3, 8008974 <__swbuf_r+0x84>
 8008918:	6923      	ldr	r3, [r4, #16]
 800891a:	6820      	ldr	r0, [r4, #0]
 800891c:	1ac0      	subs	r0, r0, r3
 800891e:	6963      	ldr	r3, [r4, #20]
 8008920:	b2f6      	uxtb	r6, r6
 8008922:	4283      	cmp	r3, r0
 8008924:	4637      	mov	r7, r6
 8008926:	dc04      	bgt.n	8008932 <__swbuf_r+0x42>
 8008928:	4621      	mov	r1, r4
 800892a:	4628      	mov	r0, r5
 800892c:	f000 f95e 	bl	8008bec <_fflush_r>
 8008930:	bb30      	cbnz	r0, 8008980 <__swbuf_r+0x90>
 8008932:	68a3      	ldr	r3, [r4, #8]
 8008934:	3b01      	subs	r3, #1
 8008936:	60a3      	str	r3, [r4, #8]
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	1c5a      	adds	r2, r3, #1
 800893c:	6022      	str	r2, [r4, #0]
 800893e:	701e      	strb	r6, [r3, #0]
 8008940:	6963      	ldr	r3, [r4, #20]
 8008942:	3001      	adds	r0, #1
 8008944:	4283      	cmp	r3, r0
 8008946:	d004      	beq.n	8008952 <__swbuf_r+0x62>
 8008948:	89a3      	ldrh	r3, [r4, #12]
 800894a:	07db      	lsls	r3, r3, #31
 800894c:	d506      	bpl.n	800895c <__swbuf_r+0x6c>
 800894e:	2e0a      	cmp	r6, #10
 8008950:	d104      	bne.n	800895c <__swbuf_r+0x6c>
 8008952:	4621      	mov	r1, r4
 8008954:	4628      	mov	r0, r5
 8008956:	f000 f949 	bl	8008bec <_fflush_r>
 800895a:	b988      	cbnz	r0, 8008980 <__swbuf_r+0x90>
 800895c:	4638      	mov	r0, r7
 800895e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008960:	4b0a      	ldr	r3, [pc, #40]	; (800898c <__swbuf_r+0x9c>)
 8008962:	429c      	cmp	r4, r3
 8008964:	d101      	bne.n	800896a <__swbuf_r+0x7a>
 8008966:	68ac      	ldr	r4, [r5, #8]
 8008968:	e7cf      	b.n	800890a <__swbuf_r+0x1a>
 800896a:	4b09      	ldr	r3, [pc, #36]	; (8008990 <__swbuf_r+0xa0>)
 800896c:	429c      	cmp	r4, r3
 800896e:	bf08      	it	eq
 8008970:	68ec      	ldreq	r4, [r5, #12]
 8008972:	e7ca      	b.n	800890a <__swbuf_r+0x1a>
 8008974:	4621      	mov	r1, r4
 8008976:	4628      	mov	r0, r5
 8008978:	f000 f82c 	bl	80089d4 <__swsetup_r>
 800897c:	2800      	cmp	r0, #0
 800897e:	d0cb      	beq.n	8008918 <__swbuf_r+0x28>
 8008980:	f04f 37ff 	mov.w	r7, #4294967295
 8008984:	e7ea      	b.n	800895c <__swbuf_r+0x6c>
 8008986:	bf00      	nop
 8008988:	0800951c 	.word	0x0800951c
 800898c:	0800953c 	.word	0x0800953c
 8008990:	080094fc 	.word	0x080094fc

08008994 <__ascii_wctomb>:
 8008994:	b149      	cbz	r1, 80089aa <__ascii_wctomb+0x16>
 8008996:	2aff      	cmp	r2, #255	; 0xff
 8008998:	bf85      	ittet	hi
 800899a:	238a      	movhi	r3, #138	; 0x8a
 800899c:	6003      	strhi	r3, [r0, #0]
 800899e:	700a      	strbls	r2, [r1, #0]
 80089a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80089a4:	bf98      	it	ls
 80089a6:	2001      	movls	r0, #1
 80089a8:	4770      	bx	lr
 80089aa:	4608      	mov	r0, r1
 80089ac:	4770      	bx	lr
	...

080089b0 <_write_r>:
 80089b0:	b538      	push	{r3, r4, r5, lr}
 80089b2:	4d07      	ldr	r5, [pc, #28]	; (80089d0 <_write_r+0x20>)
 80089b4:	4604      	mov	r4, r0
 80089b6:	4608      	mov	r0, r1
 80089b8:	4611      	mov	r1, r2
 80089ba:	2200      	movs	r2, #0
 80089bc:	602a      	str	r2, [r5, #0]
 80089be:	461a      	mov	r2, r3
 80089c0:	f7f8 fb4a 	bl	8001058 <_write>
 80089c4:	1c43      	adds	r3, r0, #1
 80089c6:	d102      	bne.n	80089ce <_write_r+0x1e>
 80089c8:	682b      	ldr	r3, [r5, #0]
 80089ca:	b103      	cbz	r3, 80089ce <_write_r+0x1e>
 80089cc:	6023      	str	r3, [r4, #0]
 80089ce:	bd38      	pop	{r3, r4, r5, pc}
 80089d0:	200004c4 	.word	0x200004c4

080089d4 <__swsetup_r>:
 80089d4:	4b32      	ldr	r3, [pc, #200]	; (8008aa0 <__swsetup_r+0xcc>)
 80089d6:	b570      	push	{r4, r5, r6, lr}
 80089d8:	681d      	ldr	r5, [r3, #0]
 80089da:	4606      	mov	r6, r0
 80089dc:	460c      	mov	r4, r1
 80089de:	b125      	cbz	r5, 80089ea <__swsetup_r+0x16>
 80089e0:	69ab      	ldr	r3, [r5, #24]
 80089e2:	b913      	cbnz	r3, 80089ea <__swsetup_r+0x16>
 80089e4:	4628      	mov	r0, r5
 80089e6:	f7fe faaf 	bl	8006f48 <__sinit>
 80089ea:	4b2e      	ldr	r3, [pc, #184]	; (8008aa4 <__swsetup_r+0xd0>)
 80089ec:	429c      	cmp	r4, r3
 80089ee:	d10f      	bne.n	8008a10 <__swsetup_r+0x3c>
 80089f0:	686c      	ldr	r4, [r5, #4]
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089f8:	0719      	lsls	r1, r3, #28
 80089fa:	d42c      	bmi.n	8008a56 <__swsetup_r+0x82>
 80089fc:	06dd      	lsls	r5, r3, #27
 80089fe:	d411      	bmi.n	8008a24 <__swsetup_r+0x50>
 8008a00:	2309      	movs	r3, #9
 8008a02:	6033      	str	r3, [r6, #0]
 8008a04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a08:	81a3      	strh	r3, [r4, #12]
 8008a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a0e:	e03e      	b.n	8008a8e <__swsetup_r+0xba>
 8008a10:	4b25      	ldr	r3, [pc, #148]	; (8008aa8 <__swsetup_r+0xd4>)
 8008a12:	429c      	cmp	r4, r3
 8008a14:	d101      	bne.n	8008a1a <__swsetup_r+0x46>
 8008a16:	68ac      	ldr	r4, [r5, #8]
 8008a18:	e7eb      	b.n	80089f2 <__swsetup_r+0x1e>
 8008a1a:	4b24      	ldr	r3, [pc, #144]	; (8008aac <__swsetup_r+0xd8>)
 8008a1c:	429c      	cmp	r4, r3
 8008a1e:	bf08      	it	eq
 8008a20:	68ec      	ldreq	r4, [r5, #12]
 8008a22:	e7e6      	b.n	80089f2 <__swsetup_r+0x1e>
 8008a24:	0758      	lsls	r0, r3, #29
 8008a26:	d512      	bpl.n	8008a4e <__swsetup_r+0x7a>
 8008a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a2a:	b141      	cbz	r1, 8008a3e <__swsetup_r+0x6a>
 8008a2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a30:	4299      	cmp	r1, r3
 8008a32:	d002      	beq.n	8008a3a <__swsetup_r+0x66>
 8008a34:	4630      	mov	r0, r6
 8008a36:	f7ff fb9f 	bl	8008178 <_free_r>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	6363      	str	r3, [r4, #52]	; 0x34
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a44:	81a3      	strh	r3, [r4, #12]
 8008a46:	2300      	movs	r3, #0
 8008a48:	6063      	str	r3, [r4, #4]
 8008a4a:	6923      	ldr	r3, [r4, #16]
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	89a3      	ldrh	r3, [r4, #12]
 8008a50:	f043 0308 	orr.w	r3, r3, #8
 8008a54:	81a3      	strh	r3, [r4, #12]
 8008a56:	6923      	ldr	r3, [r4, #16]
 8008a58:	b94b      	cbnz	r3, 8008a6e <__swsetup_r+0x9a>
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a64:	d003      	beq.n	8008a6e <__swsetup_r+0x9a>
 8008a66:	4621      	mov	r1, r4
 8008a68:	4630      	mov	r0, r6
 8008a6a:	f000 f931 	bl	8008cd0 <__smakebuf_r>
 8008a6e:	89a0      	ldrh	r0, [r4, #12]
 8008a70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a74:	f010 0301 	ands.w	r3, r0, #1
 8008a78:	d00a      	beq.n	8008a90 <__swsetup_r+0xbc>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	60a3      	str	r3, [r4, #8]
 8008a7e:	6963      	ldr	r3, [r4, #20]
 8008a80:	425b      	negs	r3, r3
 8008a82:	61a3      	str	r3, [r4, #24]
 8008a84:	6923      	ldr	r3, [r4, #16]
 8008a86:	b943      	cbnz	r3, 8008a9a <__swsetup_r+0xc6>
 8008a88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a8c:	d1ba      	bne.n	8008a04 <__swsetup_r+0x30>
 8008a8e:	bd70      	pop	{r4, r5, r6, pc}
 8008a90:	0781      	lsls	r1, r0, #30
 8008a92:	bf58      	it	pl
 8008a94:	6963      	ldrpl	r3, [r4, #20]
 8008a96:	60a3      	str	r3, [r4, #8]
 8008a98:	e7f4      	b.n	8008a84 <__swsetup_r+0xb0>
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	e7f7      	b.n	8008a8e <__swsetup_r+0xba>
 8008a9e:	bf00      	nop
 8008aa0:	2000000c 	.word	0x2000000c
 8008aa4:	0800951c 	.word	0x0800951c
 8008aa8:	0800953c 	.word	0x0800953c
 8008aac:	080094fc 	.word	0x080094fc

08008ab0 <abort>:
 8008ab0:	b508      	push	{r3, lr}
 8008ab2:	2006      	movs	r0, #6
 8008ab4:	f000 f9d2 	bl	8008e5c <raise>
 8008ab8:	2001      	movs	r0, #1
 8008aba:	f7f8 fcef 	bl	800149c <_exit>
	...

08008ac0 <_close_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	4d06      	ldr	r5, [pc, #24]	; (8008adc <_close_r+0x1c>)
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	4608      	mov	r0, r1
 8008aca:	602b      	str	r3, [r5, #0]
 8008acc:	f7f8 fd0d 	bl	80014ea <_close>
 8008ad0:	1c43      	adds	r3, r0, #1
 8008ad2:	d102      	bne.n	8008ada <_close_r+0x1a>
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	b103      	cbz	r3, 8008ada <_close_r+0x1a>
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
 8008adc:	200004c4 	.word	0x200004c4

08008ae0 <__sflush_r>:
 8008ae0:	898a      	ldrh	r2, [r1, #12]
 8008ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae6:	4605      	mov	r5, r0
 8008ae8:	0710      	lsls	r0, r2, #28
 8008aea:	460c      	mov	r4, r1
 8008aec:	d458      	bmi.n	8008ba0 <__sflush_r+0xc0>
 8008aee:	684b      	ldr	r3, [r1, #4]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	dc05      	bgt.n	8008b00 <__sflush_r+0x20>
 8008af4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	dc02      	bgt.n	8008b00 <__sflush_r+0x20>
 8008afa:	2000      	movs	r0, #0
 8008afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b02:	2e00      	cmp	r6, #0
 8008b04:	d0f9      	beq.n	8008afa <__sflush_r+0x1a>
 8008b06:	2300      	movs	r3, #0
 8008b08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b0c:	682f      	ldr	r7, [r5, #0]
 8008b0e:	602b      	str	r3, [r5, #0]
 8008b10:	d032      	beq.n	8008b78 <__sflush_r+0x98>
 8008b12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b14:	89a3      	ldrh	r3, [r4, #12]
 8008b16:	075a      	lsls	r2, r3, #29
 8008b18:	d505      	bpl.n	8008b26 <__sflush_r+0x46>
 8008b1a:	6863      	ldr	r3, [r4, #4]
 8008b1c:	1ac0      	subs	r0, r0, r3
 8008b1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b20:	b10b      	cbz	r3, 8008b26 <__sflush_r+0x46>
 8008b22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b24:	1ac0      	subs	r0, r0, r3
 8008b26:	2300      	movs	r3, #0
 8008b28:	4602      	mov	r2, r0
 8008b2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b2c:	6a21      	ldr	r1, [r4, #32]
 8008b2e:	4628      	mov	r0, r5
 8008b30:	47b0      	blx	r6
 8008b32:	1c43      	adds	r3, r0, #1
 8008b34:	89a3      	ldrh	r3, [r4, #12]
 8008b36:	d106      	bne.n	8008b46 <__sflush_r+0x66>
 8008b38:	6829      	ldr	r1, [r5, #0]
 8008b3a:	291d      	cmp	r1, #29
 8008b3c:	d82c      	bhi.n	8008b98 <__sflush_r+0xb8>
 8008b3e:	4a2a      	ldr	r2, [pc, #168]	; (8008be8 <__sflush_r+0x108>)
 8008b40:	40ca      	lsrs	r2, r1
 8008b42:	07d6      	lsls	r6, r2, #31
 8008b44:	d528      	bpl.n	8008b98 <__sflush_r+0xb8>
 8008b46:	2200      	movs	r2, #0
 8008b48:	6062      	str	r2, [r4, #4]
 8008b4a:	04d9      	lsls	r1, r3, #19
 8008b4c:	6922      	ldr	r2, [r4, #16]
 8008b4e:	6022      	str	r2, [r4, #0]
 8008b50:	d504      	bpl.n	8008b5c <__sflush_r+0x7c>
 8008b52:	1c42      	adds	r2, r0, #1
 8008b54:	d101      	bne.n	8008b5a <__sflush_r+0x7a>
 8008b56:	682b      	ldr	r3, [r5, #0]
 8008b58:	b903      	cbnz	r3, 8008b5c <__sflush_r+0x7c>
 8008b5a:	6560      	str	r0, [r4, #84]	; 0x54
 8008b5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b5e:	602f      	str	r7, [r5, #0]
 8008b60:	2900      	cmp	r1, #0
 8008b62:	d0ca      	beq.n	8008afa <__sflush_r+0x1a>
 8008b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b68:	4299      	cmp	r1, r3
 8008b6a:	d002      	beq.n	8008b72 <__sflush_r+0x92>
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	f7ff fb03 	bl	8008178 <_free_r>
 8008b72:	2000      	movs	r0, #0
 8008b74:	6360      	str	r0, [r4, #52]	; 0x34
 8008b76:	e7c1      	b.n	8008afc <__sflush_r+0x1c>
 8008b78:	6a21      	ldr	r1, [r4, #32]
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	47b0      	blx	r6
 8008b80:	1c41      	adds	r1, r0, #1
 8008b82:	d1c7      	bne.n	8008b14 <__sflush_r+0x34>
 8008b84:	682b      	ldr	r3, [r5, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d0c4      	beq.n	8008b14 <__sflush_r+0x34>
 8008b8a:	2b1d      	cmp	r3, #29
 8008b8c:	d001      	beq.n	8008b92 <__sflush_r+0xb2>
 8008b8e:	2b16      	cmp	r3, #22
 8008b90:	d101      	bne.n	8008b96 <__sflush_r+0xb6>
 8008b92:	602f      	str	r7, [r5, #0]
 8008b94:	e7b1      	b.n	8008afa <__sflush_r+0x1a>
 8008b96:	89a3      	ldrh	r3, [r4, #12]
 8008b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b9c:	81a3      	strh	r3, [r4, #12]
 8008b9e:	e7ad      	b.n	8008afc <__sflush_r+0x1c>
 8008ba0:	690f      	ldr	r7, [r1, #16]
 8008ba2:	2f00      	cmp	r7, #0
 8008ba4:	d0a9      	beq.n	8008afa <__sflush_r+0x1a>
 8008ba6:	0793      	lsls	r3, r2, #30
 8008ba8:	680e      	ldr	r6, [r1, #0]
 8008baa:	bf08      	it	eq
 8008bac:	694b      	ldreq	r3, [r1, #20]
 8008bae:	600f      	str	r7, [r1, #0]
 8008bb0:	bf18      	it	ne
 8008bb2:	2300      	movne	r3, #0
 8008bb4:	eba6 0807 	sub.w	r8, r6, r7
 8008bb8:	608b      	str	r3, [r1, #8]
 8008bba:	f1b8 0f00 	cmp.w	r8, #0
 8008bbe:	dd9c      	ble.n	8008afa <__sflush_r+0x1a>
 8008bc0:	6a21      	ldr	r1, [r4, #32]
 8008bc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008bc4:	4643      	mov	r3, r8
 8008bc6:	463a      	mov	r2, r7
 8008bc8:	4628      	mov	r0, r5
 8008bca:	47b0      	blx	r6
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	dc06      	bgt.n	8008bde <__sflush_r+0xfe>
 8008bd0:	89a3      	ldrh	r3, [r4, #12]
 8008bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bd6:	81a3      	strh	r3, [r4, #12]
 8008bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bdc:	e78e      	b.n	8008afc <__sflush_r+0x1c>
 8008bde:	4407      	add	r7, r0
 8008be0:	eba8 0800 	sub.w	r8, r8, r0
 8008be4:	e7e9      	b.n	8008bba <__sflush_r+0xda>
 8008be6:	bf00      	nop
 8008be8:	20400001 	.word	0x20400001

08008bec <_fflush_r>:
 8008bec:	b538      	push	{r3, r4, r5, lr}
 8008bee:	690b      	ldr	r3, [r1, #16]
 8008bf0:	4605      	mov	r5, r0
 8008bf2:	460c      	mov	r4, r1
 8008bf4:	b913      	cbnz	r3, 8008bfc <_fflush_r+0x10>
 8008bf6:	2500      	movs	r5, #0
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	bd38      	pop	{r3, r4, r5, pc}
 8008bfc:	b118      	cbz	r0, 8008c06 <_fflush_r+0x1a>
 8008bfe:	6983      	ldr	r3, [r0, #24]
 8008c00:	b90b      	cbnz	r3, 8008c06 <_fflush_r+0x1a>
 8008c02:	f7fe f9a1 	bl	8006f48 <__sinit>
 8008c06:	4b14      	ldr	r3, [pc, #80]	; (8008c58 <_fflush_r+0x6c>)
 8008c08:	429c      	cmp	r4, r3
 8008c0a:	d11b      	bne.n	8008c44 <_fflush_r+0x58>
 8008c0c:	686c      	ldr	r4, [r5, #4]
 8008c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d0ef      	beq.n	8008bf6 <_fflush_r+0xa>
 8008c16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c18:	07d0      	lsls	r0, r2, #31
 8008c1a:	d404      	bmi.n	8008c26 <_fflush_r+0x3a>
 8008c1c:	0599      	lsls	r1, r3, #22
 8008c1e:	d402      	bmi.n	8008c26 <_fflush_r+0x3a>
 8008c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c22:	f7fe fdb4 	bl	800778e <__retarget_lock_acquire_recursive>
 8008c26:	4628      	mov	r0, r5
 8008c28:	4621      	mov	r1, r4
 8008c2a:	f7ff ff59 	bl	8008ae0 <__sflush_r>
 8008c2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c30:	07da      	lsls	r2, r3, #31
 8008c32:	4605      	mov	r5, r0
 8008c34:	d4e0      	bmi.n	8008bf8 <_fflush_r+0xc>
 8008c36:	89a3      	ldrh	r3, [r4, #12]
 8008c38:	059b      	lsls	r3, r3, #22
 8008c3a:	d4dd      	bmi.n	8008bf8 <_fflush_r+0xc>
 8008c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c3e:	f7fe fda7 	bl	8007790 <__retarget_lock_release_recursive>
 8008c42:	e7d9      	b.n	8008bf8 <_fflush_r+0xc>
 8008c44:	4b05      	ldr	r3, [pc, #20]	; (8008c5c <_fflush_r+0x70>)
 8008c46:	429c      	cmp	r4, r3
 8008c48:	d101      	bne.n	8008c4e <_fflush_r+0x62>
 8008c4a:	68ac      	ldr	r4, [r5, #8]
 8008c4c:	e7df      	b.n	8008c0e <_fflush_r+0x22>
 8008c4e:	4b04      	ldr	r3, [pc, #16]	; (8008c60 <_fflush_r+0x74>)
 8008c50:	429c      	cmp	r4, r3
 8008c52:	bf08      	it	eq
 8008c54:	68ec      	ldreq	r4, [r5, #12]
 8008c56:	e7da      	b.n	8008c0e <_fflush_r+0x22>
 8008c58:	0800951c 	.word	0x0800951c
 8008c5c:	0800953c 	.word	0x0800953c
 8008c60:	080094fc 	.word	0x080094fc

08008c64 <_lseek_r>:
 8008c64:	b538      	push	{r3, r4, r5, lr}
 8008c66:	4d07      	ldr	r5, [pc, #28]	; (8008c84 <_lseek_r+0x20>)
 8008c68:	4604      	mov	r4, r0
 8008c6a:	4608      	mov	r0, r1
 8008c6c:	4611      	mov	r1, r2
 8008c6e:	2200      	movs	r2, #0
 8008c70:	602a      	str	r2, [r5, #0]
 8008c72:	461a      	mov	r2, r3
 8008c74:	f7f8 fc60 	bl	8001538 <_lseek>
 8008c78:	1c43      	adds	r3, r0, #1
 8008c7a:	d102      	bne.n	8008c82 <_lseek_r+0x1e>
 8008c7c:	682b      	ldr	r3, [r5, #0]
 8008c7e:	b103      	cbz	r3, 8008c82 <_lseek_r+0x1e>
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	bd38      	pop	{r3, r4, r5, pc}
 8008c84:	200004c4 	.word	0x200004c4

08008c88 <__swhatbuf_r>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	460e      	mov	r6, r1
 8008c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c90:	2900      	cmp	r1, #0
 8008c92:	b096      	sub	sp, #88	; 0x58
 8008c94:	4614      	mov	r4, r2
 8008c96:	461d      	mov	r5, r3
 8008c98:	da07      	bge.n	8008caa <__swhatbuf_r+0x22>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	602b      	str	r3, [r5, #0]
 8008c9e:	89b3      	ldrh	r3, [r6, #12]
 8008ca0:	061a      	lsls	r2, r3, #24
 8008ca2:	d410      	bmi.n	8008cc6 <__swhatbuf_r+0x3e>
 8008ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ca8:	e00e      	b.n	8008cc8 <__swhatbuf_r+0x40>
 8008caa:	466a      	mov	r2, sp
 8008cac:	f000 f8f2 	bl	8008e94 <_fstat_r>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	dbf2      	blt.n	8008c9a <__swhatbuf_r+0x12>
 8008cb4:	9a01      	ldr	r2, [sp, #4]
 8008cb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008cba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008cbe:	425a      	negs	r2, r3
 8008cc0:	415a      	adcs	r2, r3
 8008cc2:	602a      	str	r2, [r5, #0]
 8008cc4:	e7ee      	b.n	8008ca4 <__swhatbuf_r+0x1c>
 8008cc6:	2340      	movs	r3, #64	; 0x40
 8008cc8:	2000      	movs	r0, #0
 8008cca:	6023      	str	r3, [r4, #0]
 8008ccc:	b016      	add	sp, #88	; 0x58
 8008cce:	bd70      	pop	{r4, r5, r6, pc}

08008cd0 <__smakebuf_r>:
 8008cd0:	898b      	ldrh	r3, [r1, #12]
 8008cd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cd4:	079d      	lsls	r5, r3, #30
 8008cd6:	4606      	mov	r6, r0
 8008cd8:	460c      	mov	r4, r1
 8008cda:	d507      	bpl.n	8008cec <__smakebuf_r+0x1c>
 8008cdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ce0:	6023      	str	r3, [r4, #0]
 8008ce2:	6123      	str	r3, [r4, #16]
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	6163      	str	r3, [r4, #20]
 8008ce8:	b002      	add	sp, #8
 8008cea:	bd70      	pop	{r4, r5, r6, pc}
 8008cec:	ab01      	add	r3, sp, #4
 8008cee:	466a      	mov	r2, sp
 8008cf0:	f7ff ffca 	bl	8008c88 <__swhatbuf_r>
 8008cf4:	9900      	ldr	r1, [sp, #0]
 8008cf6:	4605      	mov	r5, r0
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	f7ff fa8d 	bl	8008218 <_malloc_r>
 8008cfe:	b948      	cbnz	r0, 8008d14 <__smakebuf_r+0x44>
 8008d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d04:	059a      	lsls	r2, r3, #22
 8008d06:	d4ef      	bmi.n	8008ce8 <__smakebuf_r+0x18>
 8008d08:	f023 0303 	bic.w	r3, r3, #3
 8008d0c:	f043 0302 	orr.w	r3, r3, #2
 8008d10:	81a3      	strh	r3, [r4, #12]
 8008d12:	e7e3      	b.n	8008cdc <__smakebuf_r+0xc>
 8008d14:	4b0d      	ldr	r3, [pc, #52]	; (8008d4c <__smakebuf_r+0x7c>)
 8008d16:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d18:	89a3      	ldrh	r3, [r4, #12]
 8008d1a:	6020      	str	r0, [r4, #0]
 8008d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d20:	81a3      	strh	r3, [r4, #12]
 8008d22:	9b00      	ldr	r3, [sp, #0]
 8008d24:	6163      	str	r3, [r4, #20]
 8008d26:	9b01      	ldr	r3, [sp, #4]
 8008d28:	6120      	str	r0, [r4, #16]
 8008d2a:	b15b      	cbz	r3, 8008d44 <__smakebuf_r+0x74>
 8008d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d30:	4630      	mov	r0, r6
 8008d32:	f000 f8c1 	bl	8008eb8 <_isatty_r>
 8008d36:	b128      	cbz	r0, 8008d44 <__smakebuf_r+0x74>
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	f023 0303 	bic.w	r3, r3, #3
 8008d3e:	f043 0301 	orr.w	r3, r3, #1
 8008d42:	81a3      	strh	r3, [r4, #12]
 8008d44:	89a0      	ldrh	r0, [r4, #12]
 8008d46:	4305      	orrs	r5, r0
 8008d48:	81a5      	strh	r5, [r4, #12]
 8008d4a:	e7cd      	b.n	8008ce8 <__smakebuf_r+0x18>
 8008d4c:	08006ee1 	.word	0x08006ee1

08008d50 <memmove>:
 8008d50:	4288      	cmp	r0, r1
 8008d52:	b510      	push	{r4, lr}
 8008d54:	eb01 0402 	add.w	r4, r1, r2
 8008d58:	d902      	bls.n	8008d60 <memmove+0x10>
 8008d5a:	4284      	cmp	r4, r0
 8008d5c:	4623      	mov	r3, r4
 8008d5e:	d807      	bhi.n	8008d70 <memmove+0x20>
 8008d60:	1e43      	subs	r3, r0, #1
 8008d62:	42a1      	cmp	r1, r4
 8008d64:	d008      	beq.n	8008d78 <memmove+0x28>
 8008d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d6e:	e7f8      	b.n	8008d62 <memmove+0x12>
 8008d70:	4402      	add	r2, r0
 8008d72:	4601      	mov	r1, r0
 8008d74:	428a      	cmp	r2, r1
 8008d76:	d100      	bne.n	8008d7a <memmove+0x2a>
 8008d78:	bd10      	pop	{r4, pc}
 8008d7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d82:	e7f7      	b.n	8008d74 <memmove+0x24>

08008d84 <__malloc_lock>:
 8008d84:	4801      	ldr	r0, [pc, #4]	; (8008d8c <__malloc_lock+0x8>)
 8008d86:	f7fe bd02 	b.w	800778e <__retarget_lock_acquire_recursive>
 8008d8a:	bf00      	nop
 8008d8c:	200004bc 	.word	0x200004bc

08008d90 <__malloc_unlock>:
 8008d90:	4801      	ldr	r0, [pc, #4]	; (8008d98 <__malloc_unlock+0x8>)
 8008d92:	f7fe bcfd 	b.w	8007790 <__retarget_lock_release_recursive>
 8008d96:	bf00      	nop
 8008d98:	200004bc 	.word	0x200004bc

08008d9c <_realloc_r>:
 8008d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9e:	4607      	mov	r7, r0
 8008da0:	4614      	mov	r4, r2
 8008da2:	460e      	mov	r6, r1
 8008da4:	b921      	cbnz	r1, 8008db0 <_realloc_r+0x14>
 8008da6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008daa:	4611      	mov	r1, r2
 8008dac:	f7ff ba34 	b.w	8008218 <_malloc_r>
 8008db0:	b922      	cbnz	r2, 8008dbc <_realloc_r+0x20>
 8008db2:	f7ff f9e1 	bl	8008178 <_free_r>
 8008db6:	4625      	mov	r5, r4
 8008db8:	4628      	mov	r0, r5
 8008dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dbc:	f000 f88c 	bl	8008ed8 <_malloc_usable_size_r>
 8008dc0:	42a0      	cmp	r0, r4
 8008dc2:	d20f      	bcs.n	8008de4 <_realloc_r+0x48>
 8008dc4:	4621      	mov	r1, r4
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	f7ff fa26 	bl	8008218 <_malloc_r>
 8008dcc:	4605      	mov	r5, r0
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d0f2      	beq.n	8008db8 <_realloc_r+0x1c>
 8008dd2:	4631      	mov	r1, r6
 8008dd4:	4622      	mov	r2, r4
 8008dd6:	f7fe fcf7 	bl	80077c8 <memcpy>
 8008dda:	4631      	mov	r1, r6
 8008ddc:	4638      	mov	r0, r7
 8008dde:	f7ff f9cb 	bl	8008178 <_free_r>
 8008de2:	e7e9      	b.n	8008db8 <_realloc_r+0x1c>
 8008de4:	4635      	mov	r5, r6
 8008de6:	e7e7      	b.n	8008db8 <_realloc_r+0x1c>

08008de8 <_read_r>:
 8008de8:	b538      	push	{r3, r4, r5, lr}
 8008dea:	4d07      	ldr	r5, [pc, #28]	; (8008e08 <_read_r+0x20>)
 8008dec:	4604      	mov	r4, r0
 8008dee:	4608      	mov	r0, r1
 8008df0:	4611      	mov	r1, r2
 8008df2:	2200      	movs	r2, #0
 8008df4:	602a      	str	r2, [r5, #0]
 8008df6:	461a      	mov	r2, r3
 8008df8:	f7f8 fb5a 	bl	80014b0 <_read>
 8008dfc:	1c43      	adds	r3, r0, #1
 8008dfe:	d102      	bne.n	8008e06 <_read_r+0x1e>
 8008e00:	682b      	ldr	r3, [r5, #0]
 8008e02:	b103      	cbz	r3, 8008e06 <_read_r+0x1e>
 8008e04:	6023      	str	r3, [r4, #0]
 8008e06:	bd38      	pop	{r3, r4, r5, pc}
 8008e08:	200004c4 	.word	0x200004c4

08008e0c <_raise_r>:
 8008e0c:	291f      	cmp	r1, #31
 8008e0e:	b538      	push	{r3, r4, r5, lr}
 8008e10:	4604      	mov	r4, r0
 8008e12:	460d      	mov	r5, r1
 8008e14:	d904      	bls.n	8008e20 <_raise_r+0x14>
 8008e16:	2316      	movs	r3, #22
 8008e18:	6003      	str	r3, [r0, #0]
 8008e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e1e:	bd38      	pop	{r3, r4, r5, pc}
 8008e20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e22:	b112      	cbz	r2, 8008e2a <_raise_r+0x1e>
 8008e24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e28:	b94b      	cbnz	r3, 8008e3e <_raise_r+0x32>
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f000 f830 	bl	8008e90 <_getpid_r>
 8008e30:	462a      	mov	r2, r5
 8008e32:	4601      	mov	r1, r0
 8008e34:	4620      	mov	r0, r4
 8008e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e3a:	f000 b817 	b.w	8008e6c <_kill_r>
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d00a      	beq.n	8008e58 <_raise_r+0x4c>
 8008e42:	1c59      	adds	r1, r3, #1
 8008e44:	d103      	bne.n	8008e4e <_raise_r+0x42>
 8008e46:	2316      	movs	r3, #22
 8008e48:	6003      	str	r3, [r0, #0]
 8008e4a:	2001      	movs	r0, #1
 8008e4c:	e7e7      	b.n	8008e1e <_raise_r+0x12>
 8008e4e:	2400      	movs	r4, #0
 8008e50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e54:	4628      	mov	r0, r5
 8008e56:	4798      	blx	r3
 8008e58:	2000      	movs	r0, #0
 8008e5a:	e7e0      	b.n	8008e1e <_raise_r+0x12>

08008e5c <raise>:
 8008e5c:	4b02      	ldr	r3, [pc, #8]	; (8008e68 <raise+0xc>)
 8008e5e:	4601      	mov	r1, r0
 8008e60:	6818      	ldr	r0, [r3, #0]
 8008e62:	f7ff bfd3 	b.w	8008e0c <_raise_r>
 8008e66:	bf00      	nop
 8008e68:	2000000c 	.word	0x2000000c

08008e6c <_kill_r>:
 8008e6c:	b538      	push	{r3, r4, r5, lr}
 8008e6e:	4d07      	ldr	r5, [pc, #28]	; (8008e8c <_kill_r+0x20>)
 8008e70:	2300      	movs	r3, #0
 8008e72:	4604      	mov	r4, r0
 8008e74:	4608      	mov	r0, r1
 8008e76:	4611      	mov	r1, r2
 8008e78:	602b      	str	r3, [r5, #0]
 8008e7a:	f7f8 faff 	bl	800147c <_kill>
 8008e7e:	1c43      	adds	r3, r0, #1
 8008e80:	d102      	bne.n	8008e88 <_kill_r+0x1c>
 8008e82:	682b      	ldr	r3, [r5, #0]
 8008e84:	b103      	cbz	r3, 8008e88 <_kill_r+0x1c>
 8008e86:	6023      	str	r3, [r4, #0]
 8008e88:	bd38      	pop	{r3, r4, r5, pc}
 8008e8a:	bf00      	nop
 8008e8c:	200004c4 	.word	0x200004c4

08008e90 <_getpid_r>:
 8008e90:	f7f8 baec 	b.w	800146c <_getpid>

08008e94 <_fstat_r>:
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	4d07      	ldr	r5, [pc, #28]	; (8008eb4 <_fstat_r+0x20>)
 8008e98:	2300      	movs	r3, #0
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	4608      	mov	r0, r1
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	602b      	str	r3, [r5, #0]
 8008ea2:	f7f8 fb2e 	bl	8001502 <_fstat>
 8008ea6:	1c43      	adds	r3, r0, #1
 8008ea8:	d102      	bne.n	8008eb0 <_fstat_r+0x1c>
 8008eaa:	682b      	ldr	r3, [r5, #0]
 8008eac:	b103      	cbz	r3, 8008eb0 <_fstat_r+0x1c>
 8008eae:	6023      	str	r3, [r4, #0]
 8008eb0:	bd38      	pop	{r3, r4, r5, pc}
 8008eb2:	bf00      	nop
 8008eb4:	200004c4 	.word	0x200004c4

08008eb8 <_isatty_r>:
 8008eb8:	b538      	push	{r3, r4, r5, lr}
 8008eba:	4d06      	ldr	r5, [pc, #24]	; (8008ed4 <_isatty_r+0x1c>)
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	4608      	mov	r0, r1
 8008ec2:	602b      	str	r3, [r5, #0]
 8008ec4:	f7f8 fb2d 	bl	8001522 <_isatty>
 8008ec8:	1c43      	adds	r3, r0, #1
 8008eca:	d102      	bne.n	8008ed2 <_isatty_r+0x1a>
 8008ecc:	682b      	ldr	r3, [r5, #0]
 8008ece:	b103      	cbz	r3, 8008ed2 <_isatty_r+0x1a>
 8008ed0:	6023      	str	r3, [r4, #0]
 8008ed2:	bd38      	pop	{r3, r4, r5, pc}
 8008ed4:	200004c4 	.word	0x200004c4

08008ed8 <_malloc_usable_size_r>:
 8008ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008edc:	1f18      	subs	r0, r3, #4
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	bfbc      	itt	lt
 8008ee2:	580b      	ldrlt	r3, [r1, r0]
 8008ee4:	18c0      	addlt	r0, r0, r3
 8008ee6:	4770      	bx	lr

08008ee8 <fmod>:
 8008ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eea:	ed2d 8b02 	vpush	{d8}
 8008eee:	ec57 6b10 	vmov	r6, r7, d0
 8008ef2:	ec55 4b11 	vmov	r4, r5, d1
 8008ef6:	f000 f833 	bl	8008f60 <__ieee754_fmod>
 8008efa:	4b18      	ldr	r3, [pc, #96]	; (8008f5c <fmod+0x74>)
 8008efc:	eeb0 8a40 	vmov.f32	s16, s0
 8008f00:	eef0 8a60 	vmov.f32	s17, s1
 8008f04:	f993 3000 	ldrsb.w	r3, [r3]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	d020      	beq.n	8008f4e <fmod+0x66>
 8008f0c:	4622      	mov	r2, r4
 8008f0e:	462b      	mov	r3, r5
 8008f10:	4620      	mov	r0, r4
 8008f12:	4629      	mov	r1, r5
 8008f14:	f7f7 fe0a 	bl	8000b2c <__aeabi_dcmpun>
 8008f18:	b9c8      	cbnz	r0, 8008f4e <fmod+0x66>
 8008f1a:	4632      	mov	r2, r6
 8008f1c:	463b      	mov	r3, r7
 8008f1e:	4630      	mov	r0, r6
 8008f20:	4639      	mov	r1, r7
 8008f22:	f7f7 fe03 	bl	8000b2c <__aeabi_dcmpun>
 8008f26:	b990      	cbnz	r0, 8008f4e <fmod+0x66>
 8008f28:	2200      	movs	r2, #0
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	4629      	mov	r1, r5
 8008f30:	f7f7 fdca 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f34:	b158      	cbz	r0, 8008f4e <fmod+0x66>
 8008f36:	f7fb fafb 	bl	8004530 <__errno>
 8008f3a:	2321      	movs	r3, #33	; 0x21
 8008f3c:	6003      	str	r3, [r0, #0]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	2300      	movs	r3, #0
 8008f42:	4610      	mov	r0, r2
 8008f44:	4619      	mov	r1, r3
 8008f46:	f7f7 fc81 	bl	800084c <__aeabi_ddiv>
 8008f4a:	ec41 0b18 	vmov	d8, r0, r1
 8008f4e:	eeb0 0a48 	vmov.f32	s0, s16
 8008f52:	eef0 0a68 	vmov.f32	s1, s17
 8008f56:	ecbd 8b02 	vpop	{d8}
 8008f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f5c:	200001e0 	.word	0x200001e0

08008f60 <__ieee754_fmod>:
 8008f60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f64:	ec53 2b11 	vmov	r2, r3, d1
 8008f68:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8008f6c:	ea5e 0402 	orrs.w	r4, lr, r2
 8008f70:	ec51 0b10 	vmov	r0, r1, d0
 8008f74:	ee11 7a10 	vmov	r7, s2
 8008f78:	ee11 ca10 	vmov	ip, s2
 8008f7c:	461e      	mov	r6, r3
 8008f7e:	d00d      	beq.n	8008f9c <__ieee754_fmod+0x3c>
 8008f80:	4c7a      	ldr	r4, [pc, #488]	; (800916c <__ieee754_fmod+0x20c>)
 8008f82:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8008f86:	45a0      	cmp	r8, r4
 8008f88:	4689      	mov	r9, r1
 8008f8a:	dc07      	bgt.n	8008f9c <__ieee754_fmod+0x3c>
 8008f8c:	4254      	negs	r4, r2
 8008f8e:	4d78      	ldr	r5, [pc, #480]	; (8009170 <__ieee754_fmod+0x210>)
 8008f90:	4314      	orrs	r4, r2
 8008f92:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8008f96:	42ac      	cmp	r4, r5
 8008f98:	46ab      	mov	fp, r5
 8008f9a:	d909      	bls.n	8008fb0 <__ieee754_fmod+0x50>
 8008f9c:	f7f7 fb2c 	bl	80005f8 <__aeabi_dmul>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	f7f7 fc52 	bl	800084c <__aeabi_ddiv>
 8008fa8:	ec41 0b10 	vmov	d0, r0, r1
 8008fac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb0:	45f0      	cmp	r8, lr
 8008fb2:	ee10 aa10 	vmov	sl, s0
 8008fb6:	ee10 4a10 	vmov	r4, s0
 8008fba:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008fbe:	dc0a      	bgt.n	8008fd6 <__ieee754_fmod+0x76>
 8008fc0:	dbf2      	blt.n	8008fa8 <__ieee754_fmod+0x48>
 8008fc2:	4290      	cmp	r0, r2
 8008fc4:	d3f0      	bcc.n	8008fa8 <__ieee754_fmod+0x48>
 8008fc6:	d106      	bne.n	8008fd6 <__ieee754_fmod+0x76>
 8008fc8:	4a6a      	ldr	r2, [pc, #424]	; (8009174 <__ieee754_fmod+0x214>)
 8008fca:	0fed      	lsrs	r5, r5, #31
 8008fcc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008fd0:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008fd4:	e7e8      	b.n	8008fa8 <__ieee754_fmod+0x48>
 8008fd6:	ea19 0f0b 	tst.w	r9, fp
 8008fda:	d14a      	bne.n	8009072 <__ieee754_fmod+0x112>
 8008fdc:	f1b8 0f00 	cmp.w	r8, #0
 8008fe0:	d13f      	bne.n	8009062 <__ieee754_fmod+0x102>
 8008fe2:	4965      	ldr	r1, [pc, #404]	; (8009178 <__ieee754_fmod+0x218>)
 8008fe4:	4653      	mov	r3, sl
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	dc38      	bgt.n	800905c <__ieee754_fmod+0xfc>
 8008fea:	4b61      	ldr	r3, [pc, #388]	; (8009170 <__ieee754_fmod+0x210>)
 8008fec:	4033      	ands	r3, r6
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d14f      	bne.n	8009092 <__ieee754_fmod+0x132>
 8008ff2:	f1be 0f00 	cmp.w	lr, #0
 8008ff6:	d144      	bne.n	8009082 <__ieee754_fmod+0x122>
 8008ff8:	4a5f      	ldr	r2, [pc, #380]	; (8009178 <__ieee754_fmod+0x218>)
 8008ffa:	463b      	mov	r3, r7
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	dc3d      	bgt.n	800907c <__ieee754_fmod+0x11c>
 8009000:	4b5e      	ldr	r3, [pc, #376]	; (800917c <__ieee754_fmod+0x21c>)
 8009002:	4299      	cmp	r1, r3
 8009004:	db4a      	blt.n	800909c <__ieee754_fmod+0x13c>
 8009006:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800900a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800900e:	485b      	ldr	r0, [pc, #364]	; (800917c <__ieee754_fmod+0x21c>)
 8009010:	4282      	cmp	r2, r0
 8009012:	db57      	blt.n	80090c4 <__ieee754_fmod+0x164>
 8009014:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8009018:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800901c:	1a89      	subs	r1, r1, r2
 800901e:	1b98      	subs	r0, r3, r6
 8009020:	eba4 070c 	sub.w	r7, r4, ip
 8009024:	2900      	cmp	r1, #0
 8009026:	d164      	bne.n	80090f2 <__ieee754_fmod+0x192>
 8009028:	4564      	cmp	r4, ip
 800902a:	bf38      	it	cc
 800902c:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8009030:	2800      	cmp	r0, #0
 8009032:	bfa4      	itt	ge
 8009034:	463c      	movge	r4, r7
 8009036:	4603      	movge	r3, r0
 8009038:	ea53 0104 	orrs.w	r1, r3, r4
 800903c:	d0c4      	beq.n	8008fc8 <__ieee754_fmod+0x68>
 800903e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009042:	db6b      	blt.n	800911c <__ieee754_fmod+0x1bc>
 8009044:	494d      	ldr	r1, [pc, #308]	; (800917c <__ieee754_fmod+0x21c>)
 8009046:	428a      	cmp	r2, r1
 8009048:	db6e      	blt.n	8009128 <__ieee754_fmod+0x1c8>
 800904a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800904e:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8009052:	431d      	orrs	r5, r3
 8009054:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 8009058:	4620      	mov	r0, r4
 800905a:	e7a5      	b.n	8008fa8 <__ieee754_fmod+0x48>
 800905c:	3901      	subs	r1, #1
 800905e:	005b      	lsls	r3, r3, #1
 8009060:	e7c1      	b.n	8008fe6 <__ieee754_fmod+0x86>
 8009062:	4946      	ldr	r1, [pc, #280]	; (800917c <__ieee754_fmod+0x21c>)
 8009064:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8009068:	2b00      	cmp	r3, #0
 800906a:	ddbe      	ble.n	8008fea <__ieee754_fmod+0x8a>
 800906c:	3901      	subs	r1, #1
 800906e:	005b      	lsls	r3, r3, #1
 8009070:	e7fa      	b.n	8009068 <__ieee754_fmod+0x108>
 8009072:	ea4f 5128 	mov.w	r1, r8, asr #20
 8009076:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800907a:	e7b6      	b.n	8008fea <__ieee754_fmod+0x8a>
 800907c:	3a01      	subs	r2, #1
 800907e:	005b      	lsls	r3, r3, #1
 8009080:	e7bc      	b.n	8008ffc <__ieee754_fmod+0x9c>
 8009082:	4a3e      	ldr	r2, [pc, #248]	; (800917c <__ieee754_fmod+0x21c>)
 8009084:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 8009088:	2b00      	cmp	r3, #0
 800908a:	ddb9      	ble.n	8009000 <__ieee754_fmod+0xa0>
 800908c:	3a01      	subs	r2, #1
 800908e:	005b      	lsls	r3, r3, #1
 8009090:	e7fa      	b.n	8009088 <__ieee754_fmod+0x128>
 8009092:	ea4f 522e 	mov.w	r2, lr, asr #20
 8009096:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800909a:	e7b1      	b.n	8009000 <__ieee754_fmod+0xa0>
 800909c:	1a5c      	subs	r4, r3, r1
 800909e:	2c1f      	cmp	r4, #31
 80090a0:	dc0a      	bgt.n	80090b8 <__ieee754_fmod+0x158>
 80090a2:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 80090a6:	fa08 f804 	lsl.w	r8, r8, r4
 80090aa:	fa2a f303 	lsr.w	r3, sl, r3
 80090ae:	ea43 0308 	orr.w	r3, r3, r8
 80090b2:	fa0a f404 	lsl.w	r4, sl, r4
 80090b6:	e7aa      	b.n	800900e <__ieee754_fmod+0xae>
 80090b8:	4b31      	ldr	r3, [pc, #196]	; (8009180 <__ieee754_fmod+0x220>)
 80090ba:	1a5b      	subs	r3, r3, r1
 80090bc:	fa0a f303 	lsl.w	r3, sl, r3
 80090c0:	2400      	movs	r4, #0
 80090c2:	e7a4      	b.n	800900e <__ieee754_fmod+0xae>
 80090c4:	eba0 0c02 	sub.w	ip, r0, r2
 80090c8:	f1bc 0f1f 	cmp.w	ip, #31
 80090cc:	dc0a      	bgt.n	80090e4 <__ieee754_fmod+0x184>
 80090ce:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 80090d2:	fa0e fe0c 	lsl.w	lr, lr, ip
 80090d6:	fa27 f606 	lsr.w	r6, r7, r6
 80090da:	ea46 060e 	orr.w	r6, r6, lr
 80090de:	fa07 fc0c 	lsl.w	ip, r7, ip
 80090e2:	e79b      	b.n	800901c <__ieee754_fmod+0xbc>
 80090e4:	4e26      	ldr	r6, [pc, #152]	; (8009180 <__ieee754_fmod+0x220>)
 80090e6:	1ab6      	subs	r6, r6, r2
 80090e8:	fa07 f606 	lsl.w	r6, r7, r6
 80090ec:	f04f 0c00 	mov.w	ip, #0
 80090f0:	e794      	b.n	800901c <__ieee754_fmod+0xbc>
 80090f2:	4564      	cmp	r4, ip
 80090f4:	bf38      	it	cc
 80090f6:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80090fa:	2800      	cmp	r0, #0
 80090fc:	da05      	bge.n	800910a <__ieee754_fmod+0x1aa>
 80090fe:	0fe0      	lsrs	r0, r4, #31
 8009100:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009104:	0064      	lsls	r4, r4, #1
 8009106:	3901      	subs	r1, #1
 8009108:	e789      	b.n	800901e <__ieee754_fmod+0xbe>
 800910a:	ea50 0307 	orrs.w	r3, r0, r7
 800910e:	f43f af5b 	beq.w	8008fc8 <__ieee754_fmod+0x68>
 8009112:	0ffb      	lsrs	r3, r7, #31
 8009114:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8009118:	007c      	lsls	r4, r7, #1
 800911a:	e7f4      	b.n	8009106 <__ieee754_fmod+0x1a6>
 800911c:	0fe1      	lsrs	r1, r4, #31
 800911e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8009122:	0064      	lsls	r4, r4, #1
 8009124:	3a01      	subs	r2, #1
 8009126:	e78a      	b.n	800903e <__ieee754_fmod+0xde>
 8009128:	1a89      	subs	r1, r1, r2
 800912a:	2914      	cmp	r1, #20
 800912c:	dc0a      	bgt.n	8009144 <__ieee754_fmod+0x1e4>
 800912e:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8009132:	fa03 f202 	lsl.w	r2, r3, r2
 8009136:	40cc      	lsrs	r4, r1
 8009138:	4322      	orrs	r2, r4
 800913a:	410b      	asrs	r3, r1
 800913c:	ea43 0105 	orr.w	r1, r3, r5
 8009140:	4610      	mov	r0, r2
 8009142:	e731      	b.n	8008fa8 <__ieee754_fmod+0x48>
 8009144:	291f      	cmp	r1, #31
 8009146:	dc07      	bgt.n	8009158 <__ieee754_fmod+0x1f8>
 8009148:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800914c:	40cc      	lsrs	r4, r1
 800914e:	fa03 f202 	lsl.w	r2, r3, r2
 8009152:	4322      	orrs	r2, r4
 8009154:	462b      	mov	r3, r5
 8009156:	e7f1      	b.n	800913c <__ieee754_fmod+0x1dc>
 8009158:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800915c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009160:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8009164:	32e2      	adds	r2, #226	; 0xe2
 8009166:	fa43 f202 	asr.w	r2, r3, r2
 800916a:	e7f3      	b.n	8009154 <__ieee754_fmod+0x1f4>
 800916c:	7fefffff 	.word	0x7fefffff
 8009170:	7ff00000 	.word	0x7ff00000
 8009174:	08009750 	.word	0x08009750
 8009178:	fffffbed 	.word	0xfffffbed
 800917c:	fffffc02 	.word	0xfffffc02
 8009180:	fffffbe2 	.word	0xfffffbe2

08009184 <_init>:
 8009184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009186:	bf00      	nop
 8009188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800918a:	bc08      	pop	{r3}
 800918c:	469e      	mov	lr, r3
 800918e:	4770      	bx	lr

08009190 <_fini>:
 8009190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009192:	bf00      	nop
 8009194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009196:	bc08      	pop	{r3}
 8009198:	469e      	mov	lr, r3
 800919a:	4770      	bx	lr
