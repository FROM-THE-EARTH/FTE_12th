
GPSDownLink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b82c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  0800b9c0  0800b9c0  0001b9c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfc0  0800bfc0  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800bfc0  0800bfc0  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bfc0  0800bfc0  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfc0  0800bfc0  0001bfc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfc4  0800bfc4  0001bfc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800bfc8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          0000055c  200001f0  200001f0  000201f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000074c  2000074c  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011fa9  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026c2  00000000  00000000  000321c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd0  00000000  00000000  00034888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ae8  00000000  00000000  00035458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c227  00000000  00000000  00035f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001006e  00000000  00000000  00052167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e69a  00000000  00000000  000621d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010086f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000489c  00000000  00000000  001008c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b9a4 	.word	0x0800b9a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800b9a4 	.word	0x0800b9a4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <bmpRead8>:
// 標準気圧に対する温度の勾配
#define TEMPERATURE_GRADIENT 0.0065
// 標準気圧に対する重力加速度
#define GRAVITY 9.80665

uint8_t bmpRead8(uint8_t a) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af02      	add	r7, sp, #8
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
	uint8_t r;
	HAL_I2C_Master_Transmit(bmpPort, BMP085_ADDR, &a, 1, HAL_MAX_DELAY);
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <bmpRead8+0x44>)
 8000d20:	6818      	ldr	r0, [r3, #0]
 8000d22:	23ee      	movs	r3, #238	; 0xee
 8000d24:	b299      	uxth	r1, r3
 8000d26:	1dfa      	adds	r2, r7, #7
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	2301      	movs	r3, #1
 8000d30:	f001 fee6 	bl	8002b00 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(bmpPort, BMP085_ADDR, &r, 1, HAL_MAX_DELAY);
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <bmpRead8+0x44>)
 8000d36:	6818      	ldr	r0, [r3, #0]
 8000d38:	23ee      	movs	r3, #238	; 0xee
 8000d3a:	b299      	uxth	r1, r3
 8000d3c:	f107 020f 	add.w	r2, r7, #15
 8000d40:	f04f 33ff 	mov.w	r3, #4294967295
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2301      	movs	r3, #1
 8000d48:	f001 ffce 	bl	8002ce8 <HAL_I2C_Master_Receive>
	return r;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	2000024c 	.word	0x2000024c

08000d5c <bmpRead16>:
uint16_t bmpRead16(uint8_t a) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af02      	add	r7, sp, #8
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
	uint8_t retbuf[2];
	uint16_t r;
	HAL_I2C_Master_Transmit(bmpPort, BMP085_ADDR, &a, 1, HAL_MAX_DELAY);
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <bmpRead16+0x54>)
 8000d68:	6818      	ldr	r0, [r3, #0]
 8000d6a:	23ee      	movs	r3, #238	; 0xee
 8000d6c:	b299      	uxth	r1, r3
 8000d6e:	1dfa      	adds	r2, r7, #7
 8000d70:	f04f 33ff 	mov.w	r3, #4294967295
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	2301      	movs	r3, #1
 8000d78:	f001 fec2 	bl	8002b00 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(bmpPort, BMP085_ADDR, retbuf, 2, HAL_MAX_DELAY);
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <bmpRead16+0x54>)
 8000d7e:	6818      	ldr	r0, [r3, #0]
 8000d80:	23ee      	movs	r3, #238	; 0xee
 8000d82:	b299      	uxth	r1, r3
 8000d84:	f107 020c 	add.w	r2, r7, #12
 8000d88:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2302      	movs	r3, #2
 8000d90:	f001 ffaa 	bl	8002ce8 <HAL_I2C_Master_Receive>
	r = retbuf[1] | (retbuf[0] << 8);
 8000d94:	7b7b      	ldrb	r3, [r7, #13]
 8000d96:	b21a      	sxth	r2, r3
 8000d98:	7b3b      	ldrb	r3, [r7, #12]
 8000d9a:	021b      	lsls	r3, r3, #8
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	b21b      	sxth	r3, r3
 8000da2:	81fb      	strh	r3, [r7, #14]
	return r;
 8000da4:	89fb      	ldrh	r3, [r7, #14]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2000024c 	.word	0x2000024c

08000db4 <bmpWrite8>:
void bmpWrite8(uint8_t a, uint8_t d) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af02      	add	r7, sp, #8
 8000dba:	4603      	mov	r3, r0
 8000dbc:	460a      	mov	r2, r1
 8000dbe:	71fb      	strb	r3, [r7, #7]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	71bb      	strb	r3, [r7, #6]
	uint8_t tBuf[2];
	tBuf[0] = a;
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	733b      	strb	r3, [r7, #12]
	tBuf[1] = d;
 8000dc8:	79bb      	ldrb	r3, [r7, #6]
 8000dca:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(bmpPort, BMP085_ADDR, tBuf, 2, HAL_MAX_DELAY);
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <bmpWrite8+0x38>)
 8000dce:	6818      	ldr	r0, [r3, #0]
 8000dd0:	23ee      	movs	r3, #238	; 0xee
 8000dd2:	b299      	uxth	r1, r3
 8000dd4:	f107 020c 	add.w	r2, r7, #12
 8000dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	2302      	movs	r3, #2
 8000de0:	f001 fe8e 	bl	8002b00 <HAL_I2C_Master_Transmit>
}
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	2000024c 	.word	0x2000024c

08000df0 <bmpBegin>:
uint8_t bmpBegin(uint8_t mode, I2C_HandleTypeDef *i2cdev) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
	bmpPort = i2cdev;
 8000dfc:	4a32      	ldr	r2, [pc, #200]	; (8000ec8 <bmpBegin+0xd8>)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	6013      	str	r3, [r2, #0]
	if (mode > BMP085_ULTRAHIGHRES)
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d901      	bls.n	8000e0c <bmpBegin+0x1c>
		mode = BMP085_ULTRAHIGHRES;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	71fb      	strb	r3, [r7, #7]
	oversampling = mode;
 8000e0c:	4a2f      	ldr	r2, [pc, #188]	; (8000ecc <bmpBegin+0xdc>)
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	7013      	strb	r3, [r2, #0]
	if (bmpRead8(0xD0) != 0x55)
 8000e12:	20d0      	movs	r0, #208	; 0xd0
 8000e14:	f7ff ff7e 	bl	8000d14 <bmpRead8>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b55      	cmp	r3, #85	; 0x55
 8000e1c:	d001      	beq.n	8000e22 <bmpBegin+0x32>
		return 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e04d      	b.n	8000ebe <bmpBegin+0xce>
	/* read calibration data */
	ac1 = bmpRead16(BMP085_CAL_AC1);
 8000e22:	20aa      	movs	r0, #170	; 0xaa
 8000e24:	f7ff ff9a 	bl	8000d5c <bmpRead16>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	b21a      	sxth	r2, r3
 8000e2c:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <bmpBegin+0xe0>)
 8000e2e:	801a      	strh	r2, [r3, #0]
	ac2 = bmpRead16(BMP085_CAL_AC2);
 8000e30:	20ac      	movs	r0, #172	; 0xac
 8000e32:	f7ff ff93 	bl	8000d5c <bmpRead16>
 8000e36:	4603      	mov	r3, r0
 8000e38:	b21a      	sxth	r2, r3
 8000e3a:	4b26      	ldr	r3, [pc, #152]	; (8000ed4 <bmpBegin+0xe4>)
 8000e3c:	801a      	strh	r2, [r3, #0]
	ac3 = bmpRead16(BMP085_CAL_AC3);
 8000e3e:	20ae      	movs	r0, #174	; 0xae
 8000e40:	f7ff ff8c 	bl	8000d5c <bmpRead16>
 8000e44:	4603      	mov	r3, r0
 8000e46:	b21a      	sxth	r2, r3
 8000e48:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <bmpBegin+0xe8>)
 8000e4a:	801a      	strh	r2, [r3, #0]
	ac4 = bmpRead16(BMP085_CAL_AC4);
 8000e4c:	20b0      	movs	r0, #176	; 0xb0
 8000e4e:	f7ff ff85 	bl	8000d5c <bmpRead16>
 8000e52:	4603      	mov	r3, r0
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b21      	ldr	r3, [pc, #132]	; (8000edc <bmpBegin+0xec>)
 8000e58:	801a      	strh	r2, [r3, #0]
	ac5 = bmpRead16(BMP085_CAL_AC5);
 8000e5a:	20b2      	movs	r0, #178	; 0xb2
 8000e5c:	f7ff ff7e 	bl	8000d5c <bmpRead16>
 8000e60:	4603      	mov	r3, r0
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <bmpBegin+0xf0>)
 8000e66:	801a      	strh	r2, [r3, #0]
	ac6 = bmpRead16(BMP085_CAL_AC6);
 8000e68:	20b4      	movs	r0, #180	; 0xb4
 8000e6a:	f7ff ff77 	bl	8000d5c <bmpRead16>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <bmpBegin+0xf4>)
 8000e74:	801a      	strh	r2, [r3, #0]
	b1 = bmpRead16(BMP085_CAL_B1);
 8000e76:	20b6      	movs	r0, #182	; 0xb6
 8000e78:	f7ff ff70 	bl	8000d5c <bmpRead16>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	b21a      	sxth	r2, r3
 8000e80:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <bmpBegin+0xf8>)
 8000e82:	801a      	strh	r2, [r3, #0]
	b2 = bmpRead16(BMP085_CAL_B2);
 8000e84:	20b8      	movs	r0, #184	; 0xb8
 8000e86:	f7ff ff69 	bl	8000d5c <bmpRead16>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	b21a      	sxth	r2, r3
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <bmpBegin+0xfc>)
 8000e90:	801a      	strh	r2, [r3, #0]
	mb = bmpRead16(BMP085_CAL_MB);
 8000e92:	20ba      	movs	r0, #186	; 0xba
 8000e94:	f7ff ff62 	bl	8000d5c <bmpRead16>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	b21a      	sxth	r2, r3
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <bmpBegin+0x100>)
 8000e9e:	801a      	strh	r2, [r3, #0]
	mc = bmpRead16(BMP085_CAL_MC);
 8000ea0:	20bc      	movs	r0, #188	; 0xbc
 8000ea2:	f7ff ff5b 	bl	8000d5c <bmpRead16>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <bmpBegin+0x104>)
 8000eac:	801a      	strh	r2, [r3, #0]
	md = bmpRead16(BMP085_CAL_MD);
 8000eae:	20be      	movs	r0, #190	; 0xbe
 8000eb0:	f7ff ff54 	bl	8000d5c <bmpRead16>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	b21a      	sxth	r2, r3
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <bmpBegin+0x108>)
 8000eba:	801a      	strh	r2, [r3, #0]
	return 1;
 8000ebc:	2301      	movs	r3, #1
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	2000024c 	.word	0x2000024c
 8000ecc:	20000262 	.word	0x20000262
 8000ed0:	20000254 	.word	0x20000254
 8000ed4:	2000025c 	.word	0x2000025c
 8000ed8:	20000266 	.word	0x20000266
 8000edc:	20000260 	.word	0x20000260
 8000ee0:	2000025a 	.word	0x2000025a
 8000ee4:	20000258 	.word	0x20000258
 8000ee8:	20000256 	.word	0x20000256
 8000eec:	20000250 	.word	0x20000250
 8000ef0:	20000252 	.word	0x20000252
 8000ef4:	20000264 	.word	0x20000264
 8000ef8:	2000025e 	.word	0x2000025e

08000efc <computeB5>:
// Sensor read functions
int32_t computeB5(int32_t UT) {
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	int32_t X1 = (UT - (int32_t) ac6) * ((int32_t) ac5) >> 15;
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <computeB5+0x4c>)
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	1a9b      	subs	r3, r3, r2
 8000f0e:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <computeB5+0x50>)
 8000f10:	8812      	ldrh	r2, [r2, #0]
 8000f12:	fb02 f303 	mul.w	r3, r2, r3
 8000f16:	13db      	asrs	r3, r3, #15
 8000f18:	60fb      	str	r3, [r7, #12]
	int32_t X2 = ((int32_t) mc << 11) / (X1 + (int32_t) md);
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <computeB5+0x54>)
 8000f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f20:	02da      	lsls	r2, r3, #11
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <computeB5+0x58>)
 8000f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	440b      	add	r3, r1
 8000f2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f32:	60bb      	str	r3, [r7, #8]
	return X1 + X2;
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	4413      	add	r3, r2
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000258 	.word	0x20000258
 8000f4c:	2000025a 	.word	0x2000025a
 8000f50:	20000264 	.word	0x20000264
 8000f54:	2000025e 	.word	0x2000025e

08000f58 <readBMPRawTemperature>:
uint16_t readBMPRawTemperature(void) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	bmpWrite8(BMP085_CONTROL, BMP085_READTEMPCMD);
 8000f5c:	212e      	movs	r1, #46	; 0x2e
 8000f5e:	20f4      	movs	r0, #244	; 0xf4
 8000f60:	f7ff ff28 	bl	8000db4 <bmpWrite8>
	HAL_Delay(5);
 8000f64:	2005      	movs	r0, #5
 8000f66:	f001 fa1d 	bl	80023a4 <HAL_Delay>
	return bmpRead16(BMP085_TEMPDATA);
 8000f6a:	20f6      	movs	r0, #246	; 0xf6
 8000f6c:	f7ff fef6 	bl	8000d5c <bmpRead16>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <readBMPRawPressure>:
uint32_t readBMPRawPressure(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
	uint32_t raw;
	bmpWrite8(BMP085_CONTROL, BMP085_READPRESSURECMD + (oversampling << 6));
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <readBMPRawPressure+0x8c>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	019b      	lsls	r3, r3, #6
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	3334      	adds	r3, #52	; 0x34
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	20f4      	movs	r0, #244	; 0xf4
 8000f8e:	f7ff ff11 	bl	8000db4 <bmpWrite8>
	if (oversampling == BMP085_ULTRALOWPOWER)
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <readBMPRawPressure+0x8c>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d103      	bne.n	8000fa2 <readBMPRawPressure+0x2a>
		HAL_Delay(5);
 8000f9a:	2005      	movs	r0, #5
 8000f9c:	f001 fa02 	bl	80023a4 <HAL_Delay>
 8000fa0:	e012      	b.n	8000fc8 <readBMPRawPressure+0x50>
	else if (oversampling == BMP085_STANDARD)
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <readBMPRawPressure+0x8c>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d103      	bne.n	8000fb2 <readBMPRawPressure+0x3a>
		HAL_Delay(8);
 8000faa:	2008      	movs	r0, #8
 8000fac:	f001 f9fa 	bl	80023a4 <HAL_Delay>
 8000fb0:	e00a      	b.n	8000fc8 <readBMPRawPressure+0x50>
	else if (oversampling == BMP085_HIGHRES)
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <readBMPRawPressure+0x8c>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d103      	bne.n	8000fc2 <readBMPRawPressure+0x4a>
		HAL_Delay(14);
 8000fba:	200e      	movs	r0, #14
 8000fbc:	f001 f9f2 	bl	80023a4 <HAL_Delay>
 8000fc0:	e002      	b.n	8000fc8 <readBMPRawPressure+0x50>
	else
		HAL_Delay(26);
 8000fc2:	201a      	movs	r0, #26
 8000fc4:	f001 f9ee 	bl	80023a4 <HAL_Delay>
	raw = bmpRead16(BMP085_PRESSUREDATA);
 8000fc8:	20f6      	movs	r0, #246	; 0xf6
 8000fca:	f7ff fec7 	bl	8000d5c <bmpRead16>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	607b      	str	r3, [r7, #4]
	raw <<= 8;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	607b      	str	r3, [r7, #4]
	raw |= bmpRead8(BMP085_PRESSUREDATA + 2);
 8000fd8:	20f8      	movs	r0, #248	; 0xf8
 8000fda:	f7ff fe9b 	bl	8000d14 <bmpRead8>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	607b      	str	r3, [r7, #4]
	raw >>= (8 - oversampling);
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <readBMPRawPressure+0x8c>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	f1c3 0308 	rsb	r3, r3, #8
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff6:	607b      	str	r3, [r7, #4]
	return raw;
 8000ff8:	687b      	ldr	r3, [r7, #4]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000262 	.word	0x20000262

08001008 <readBMPTemperature>:
float readBMPTemperature(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
	int32_t UT, B5; // following ds convention
	float temp;
	UT = readBMPRawTemperature();
 800100e:	f7ff ffa3 	bl	8000f58 <readBMPRawTemperature>
 8001012:	4603      	mov	r3, r0
 8001014:	60fb      	str	r3, [r7, #12]
	B5 = computeB5(UT);
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f7ff ff70 	bl	8000efc <computeB5>
 800101c:	60b8      	str	r0, [r7, #8]
	temp = (B5 + 8) >> 4;
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	3308      	adds	r3, #8
 8001022:	111b      	asrs	r3, r3, #4
 8001024:	ee07 3a90 	vmov	s15, r3
 8001028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800102c:	edc7 7a01 	vstr	s15, [r7, #4]
	temp /= 10;
 8001030:	ed97 7a01 	vldr	s14, [r7, #4]
 8001034:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001038:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800103c:	edc7 7a01 	vstr	s15, [r7, #4]
	return temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	ee07 3a90 	vmov	s15, r3
}
 8001046:	eeb0 0a67 	vmov.f32	s0, s15
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <readBMPPressure>:
int32_t readBMPPressure(void) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b08c      	sub	sp, #48	; 0x30
 8001054:	af00      	add	r7, sp, #0
	int32_t UT, UP, B3, B5, B6, X1, X2, X3, p;
	uint32_t B4, B7;
	UT = readBMPRawTemperature();
 8001056:	f7ff ff7f 	bl	8000f58 <readBMPRawTemperature>
 800105a:	4603      	mov	r3, r0
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
	UP = readBMPRawPressure();
 800105e:	f7ff ff8b 	bl	8000f78 <readBMPRawPressure>
 8001062:	4603      	mov	r3, r0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
	B5 = computeB5(UT);
 8001066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001068:	f7ff ff48 	bl	8000efc <computeB5>
 800106c:	6238      	str	r0, [r7, #32]
	// do pressure calcs
	B6 = B5 - 4000;
 800106e:	6a3b      	ldr	r3, [r7, #32]
 8001070:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001074:	61fb      	str	r3, [r7, #28]
	X1 = ((int32_t) b2 * ((B6 * B6) >> 12)) >> 11;
 8001076:	4b45      	ldr	r3, [pc, #276]	; (800118c <readBMPPressure+0x13c>)
 8001078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800107c:	461a      	mov	r2, r3
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fb03 f303 	mul.w	r3, r3, r3
 8001084:	131b      	asrs	r3, r3, #12
 8001086:	fb03 f302 	mul.w	r3, r3, r2
 800108a:	12db      	asrs	r3, r3, #11
 800108c:	61bb      	str	r3, [r7, #24]
	X2 = ((int32_t) ac2 * B6) >> 11;
 800108e:	4b40      	ldr	r3, [pc, #256]	; (8001190 <readBMPPressure+0x140>)
 8001090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001094:	461a      	mov	r2, r3
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fb03 f302 	mul.w	r3, r3, r2
 800109c:	12db      	asrs	r3, r3, #11
 800109e:	617b      	str	r3, [r7, #20]
	X3 = X1 + X2;
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	4413      	add	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
	B3 = ((((int32_t) ac1 * 4 + X3) << oversampling) + 2) / 4;
 80010a8:	4b3a      	ldr	r3, [pc, #232]	; (8001194 <readBMPPressure+0x144>)
 80010aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ae:	009a      	lsls	r2, r3, #2
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4413      	add	r3, r2
 80010b4:	4a38      	ldr	r2, [pc, #224]	; (8001198 <readBMPPressure+0x148>)
 80010b6:	7812      	ldrb	r2, [r2, #0]
 80010b8:	4093      	lsls	r3, r2
 80010ba:	3302      	adds	r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	da00      	bge.n	80010c2 <readBMPPressure+0x72>
 80010c0:	3303      	adds	r3, #3
 80010c2:	109b      	asrs	r3, r3, #2
 80010c4:	60fb      	str	r3, [r7, #12]
	X1 = ((int32_t) ac3 * B6) >> 13;
 80010c6:	4b35      	ldr	r3, [pc, #212]	; (800119c <readBMPPressure+0x14c>)
 80010c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010cc:	461a      	mov	r2, r3
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fb03 f302 	mul.w	r3, r3, r2
 80010d4:	135b      	asrs	r3, r3, #13
 80010d6:	61bb      	str	r3, [r7, #24]
	X2 = ((int32_t) b1 * ((B6 * B6) >> 12)) >> 16;
 80010d8:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <readBMPPressure+0x150>)
 80010da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010de:	461a      	mov	r2, r3
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	fb03 f303 	mul.w	r3, r3, r3
 80010e6:	131b      	asrs	r3, r3, #12
 80010e8:	fb03 f302 	mul.w	r3, r3, r2
 80010ec:	141b      	asrs	r3, r3, #16
 80010ee:	617b      	str	r3, [r7, #20]
	X3 = ((X1 + X2) + 2) >> 2;
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	4413      	add	r3, r2
 80010f6:	3302      	adds	r3, #2
 80010f8:	109b      	asrs	r3, r3, #2
 80010fa:	613b      	str	r3, [r7, #16]
	B4 = ((uint32_t) ac4 * (uint32_t) (X3 + 32768)) >> 15;
 80010fc:	4b29      	ldr	r3, [pc, #164]	; (80011a4 <readBMPPressure+0x154>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001108:	fb03 f302 	mul.w	r3, r3, r2
 800110c:	0bdb      	lsrs	r3, r3, #15
 800110e:	60bb      	str	r3, [r7, #8]
	B7 = ((uint32_t) UP - B3) * (uint32_t) (50000UL >> oversampling);
 8001110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	4a20      	ldr	r2, [pc, #128]	; (8001198 <readBMPPressure+0x148>)
 8001118:	7812      	ldrb	r2, [r2, #0]
 800111a:	4611      	mov	r1, r2
 800111c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001120:	40ca      	lsrs	r2, r1
 8001122:	fb02 f303 	mul.w	r3, r2, r3
 8001126:	607b      	str	r3, [r7, #4]
	if (B7 < 0x80000000) {
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db06      	blt.n	800113c <readBMPPressure+0xec>
		p = (B7 * 2) / B4;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	005a      	lsls	r2, r3, #1
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	fbb2 f3f3 	udiv	r3, r2, r3
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800113a:	e005      	b.n	8001148 <readBMPPressure+0xf8>
	} else {
		p = (B7 / B4) * 2;
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	fbb2 f3f3 	udiv	r3, r2, r3
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	X1 = (p >> 8) * (p >> 8);
 8001148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800114a:	121b      	asrs	r3, r3, #8
 800114c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800114e:	1212      	asrs	r2, r2, #8
 8001150:	fb02 f303 	mul.w	r3, r2, r3
 8001154:	61bb      	str	r3, [r7, #24]
	X1 = (X1 * 3038) >> 16;
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	f640 32de 	movw	r2, #3038	; 0xbde
 800115c:	fb02 f303 	mul.w	r3, r2, r3
 8001160:	141b      	asrs	r3, r3, #16
 8001162:	61bb      	str	r3, [r7, #24]
	X2 = (-7357 * p) >> 16;
 8001164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001166:	4a10      	ldr	r2, [pc, #64]	; (80011a8 <readBMPPressure+0x158>)
 8001168:	fb02 f303 	mul.w	r3, r2, r3
 800116c:	141b      	asrs	r3, r3, #16
 800116e:	617b      	str	r3, [r7, #20]
	p = p + ((X1 + X2 + (int32_t) 3791) >> 4);
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	4413      	add	r3, r2
 8001176:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800117a:	111b      	asrs	r3, r3, #4
 800117c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800117e:	4413      	add	r3, r2
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
	return p;
 8001182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001184:	4618      	mov	r0, r3
 8001186:	3730      	adds	r7, #48	; 0x30
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000250 	.word	0x20000250
 8001190:	2000025c 	.word	0x2000025c
 8001194:	20000254 	.word	0x20000254
 8001198:	20000262 	.word	0x20000262
 800119c:	20000266 	.word	0x20000266
 80011a0:	20000256 	.word	0x20000256
 80011a4:	20000260 	.word	0x20000260
 80011a8:	ffffe343 	.word	0xffffe343
 80011ac:	00000000 	.word	0x00000000

080011b0 <calculateAltitude>:

double calculateAltitude(int32_t pressure, float temp) {
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	ed87 0a00 	vstr	s0, [r7]
    double pressureRatio = SEA_LEVEL_PRESSURE / pressure;
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff f9c1 	bl	8000544 <__aeabi_i2d>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	a127      	add	r1, pc, #156	; (adr r1, 8001264 <calculateAltitude+0xb4>)
 80011c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011cc:	f7ff fb4e 	bl	800086c <__aeabi_ddiv>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double altitude = (pow(pressureRatio, 1.0 / 5.257) - 1.0) * (temp + 273.15) / 0.0065;
 80011d8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8001248 <calculateAltitude+0x98>
 80011dc:	ed97 0b04 	vldr	d0, [r7, #16]
 80011e0:	f009 fc38 	bl	800aa54 <pow>
 80011e4:	ec51 0b10 	vmov	r0, r1, d0
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <calculateAltitude+0xb0>)
 80011ee:	f7ff f85b 	bl	80002a8 <__aeabi_dsub>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4614      	mov	r4, r2
 80011f8:	461d      	mov	r5, r3
 80011fa:	6838      	ldr	r0, [r7, #0]
 80011fc:	f7ff f9b4 	bl	8000568 <__aeabi_f2d>
 8001200:	a313      	add	r3, pc, #76	; (adr r3, 8001250 <calculateAltitude+0xa0>)
 8001202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001206:	f7ff f851 	bl	80002ac <__adddf3>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4620      	mov	r0, r4
 8001210:	4629      	mov	r1, r5
 8001212:	f7ff fa01 	bl	8000618 <__aeabi_dmul>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	a30e      	add	r3, pc, #56	; (adr r3, 8001258 <calculateAltitude+0xa8>)
 8001220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001224:	f7ff fb22 	bl	800086c <__aeabi_ddiv>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return altitude;
 8001230:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001234:	ec43 2b17 	vmov	d7, r2, r3
}
 8001238:	eeb0 0a47 	vmov.f32	s0, s14
 800123c:	eef0 0a67 	vmov.f32	s1, s15
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bdb0      	pop	{r4, r5, r7, pc}
 8001246:	bf00      	nop
 8001248:	7dee2d4a 	.word	0x7dee2d4a
 800124c:	3fc85936 	.word	0x3fc85936
 8001250:	66666666 	.word	0x66666666
 8001254:	40711266 	.word	0x40711266
 8001258:	76c8b439 	.word	0x76c8b439
 800125c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001260:	3ff00000 	.word	0x3ff00000
 8001264:	00000000 	.word	0x00000000
 8001268:	40f8bcd0 	.word	0x40f8bcd0

0800126c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001274:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001278:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	d013      	beq.n	80012ac <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001284:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001288:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800128c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00b      	beq.n	80012ac <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001294:	e000      	b.n	8001298 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001296:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001298:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f9      	beq.n	8001296 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80012a2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80012ac:	687b      	ldr	r3, [r7, #4]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <HAL_UART_RxCpltCallback>:
double getRawAltitude();
double getFilteredAltitude(double rawAltitude);

double calcMedian(void *array, int n, int type);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	flagRcved = TRUE; /* receive finish flag callback */
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <HAL_UART_RxCpltCallback+0x1c>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000720 	.word	0x20000720

080012dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012e2:	f000 fff9 	bl	80022d8 <HAL_Init>

	/* USER CODE BEGIN Init */
	longtitude = -1.0;
 80012e6:	499f      	ldr	r1, [pc, #636]	; (8001564 <main+0x288>)
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	4b9e      	ldr	r3, [pc, #632]	; (8001568 <main+0x28c>)
 80012ee:	e9c1 2300 	strd	r2, r3, [r1]
	latitude = -1.0;
 80012f2:	499e      	ldr	r1, [pc, #632]	; (800156c <main+0x290>)
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	4b9b      	ldr	r3, [pc, #620]	; (8001568 <main+0x28c>)
 80012fa:	e9c1 2300 	strd	r2, r3, [r1]
	altitude = -1.0;
 80012fe:	499c      	ldr	r1, [pc, #624]	; (8001570 <main+0x294>)
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4b98      	ldr	r3, [pc, #608]	; (8001568 <main+0x28c>)
 8001306:	e9c1 2300 	strd	r2, r3, [r1]
	times = -1.0;
 800130a:	499a      	ldr	r1, [pc, #616]	; (8001574 <main+0x298>)
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	4b95      	ldr	r3, [pc, #596]	; (8001568 <main+0x28c>)
 8001312:	e9c1 2300 	strd	r2, r3, [r1]
	Minutes = -1.0;
 8001316:	4998      	ldr	r1, [pc, #608]	; (8001578 <main+0x29c>)
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	4b92      	ldr	r3, [pc, #584]	; (8001568 <main+0x28c>)
 800131e:	e9c1 2300 	strd	r2, r3, [r1]
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001322:	f000 f957 	bl	80015d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001326:	f000 fa49 	bl	80017bc <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800132a:	f000 f9e7 	bl	80016fc <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800132e:	f000 fa15 	bl	800175c <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8001332:	f000 f9a3 	bl	800167c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(10);
 8001336:	200a      	movs	r0, #10
 8001338:	f001 f834 	bl	80023a4 <HAL_Delay>
	int initBMP180 = bmpBegin(1, &hi2c1);
 800133c:	498f      	ldr	r1, [pc, #572]	; (800157c <main+0x2a0>)
 800133e:	2001      	movs	r0, #1
 8001340:	f7ff fd56 	bl	8000df0 <bmpBegin>
 8001344:	4603      	mov	r3, r0
 8001346:	607b      	str	r3, [r7, #4]

	if (initBMP180 == 1) {
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d138      	bne.n	80013c0 <main+0xe4>
		printf("successfully initialized BMP180\n");
 800134e:	488c      	ldr	r0, [pc, #560]	; (8001580 <main+0x2a4>)
 8001350:	f005 fc8e 	bl	8006c70 <puts>
		HAL_Delay(20);
 8001354:	2014      	movs	r0, #20
 8001356:	f001 f825 	bl	80023a4 <HAL_Delay>
		initializeAltitudeArray(getRawAltitude());
 800135a:	f000 fc1f 	bl	8001b9c <getRawAltitude>
 800135e:	eeb0 7a40 	vmov.f32	s14, s0
 8001362:	eef0 7a60 	vmov.f32	s15, s1
 8001366:	eeb0 0a47 	vmov.f32	s0, s14
 800136a:	eef0 0a67 	vmov.f32	s1, s15
 800136e:	f000 fbf5 	bl	8001b5c <initializeAltitudeArray>
		SEALEVEL_ALTITUDE = getFilteredAltitude(getRawAltitude());
 8001372:	f000 fc13 	bl	8001b9c <getRawAltitude>
 8001376:	eeb0 7a40 	vmov.f32	s14, s0
 800137a:	eef0 7a60 	vmov.f32	s15, s1
 800137e:	eeb0 0a47 	vmov.f32	s0, s14
 8001382:	eef0 0a67 	vmov.f32	s1, s15
 8001386:	f000 fc3d 	bl	8001c04 <getFilteredAltitude>
 800138a:	eeb0 7a40 	vmov.f32	s14, s0
 800138e:	eef0 7a60 	vmov.f32	s15, s1
 8001392:	4b7c      	ldr	r3, [pc, #496]	; (8001584 <main+0x2a8>)
 8001394:	ed83 7b00 	vstr	d7, [r3]
		initializeAltitudeArray(getRawAltitude() - SEALEVEL_ALTITUDE);
 8001398:	f000 fc00 	bl	8001b9c <getRawAltitude>
 800139c:	ec51 0b10 	vmov	r0, r1, d0
 80013a0:	4b78      	ldr	r3, [pc, #480]	; (8001584 <main+0x2a8>)
 80013a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a6:	f7fe ff7f 	bl	80002a8 <__aeabi_dsub>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	ec43 2b17 	vmov	d7, r2, r3
 80013b2:	eeb0 0a47 	vmov.f32	s0, s14
 80013b6:	eef0 0a67 	vmov.f32	s1, s15
 80013ba:	f000 fbcf 	bl	8001b5c <initializeAltitudeArray>
 80013be:	e002      	b.n	80013c6 <main+0xea>
	} else {
		printf("initializing BMP180 failed\n");
 80013c0:	4871      	ldr	r0, [pc, #452]	; (8001588 <main+0x2ac>)
 80013c2:	f005 fc55 	bl	8006c70 <puts>

	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		isPosUpdated = 0;
 80013c6:	4b71      	ldr	r3, [pc, #452]	; (800158c <main+0x2b0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]

		do {
			/* interrupt start */
			HAL_UART_Receive_IT(&huart2, rcvBuffer, 1);
 80013cc:	2201      	movs	r2, #1
 80013ce:	4970      	ldr	r1, [pc, #448]	; (8001590 <main+0x2b4>)
 80013d0:	4870      	ldr	r0, [pc, #448]	; (8001594 <main+0x2b8>)
 80013d2:	f003 fbe5 	bl	8004ba0 <HAL_UART_Receive_IT>

			/* wait for interrupt */
			while (flagRcved == FALSE) {
 80013d6:	bf00      	nop
 80013d8:	4b6f      	ldr	r3, [pc, #444]	; (8001598 <main+0x2bc>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0fb      	beq.n	80013d8 <main+0xfc>
				;
			}

			sndBuffer[rcvLength] = rcvBuffer[0];
 80013e0:	4b6e      	ldr	r3, [pc, #440]	; (800159c <main+0x2c0>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b6a      	ldr	r3, [pc, #424]	; (8001590 <main+0x2b4>)
 80013e8:	7819      	ldrb	r1, [r3, #0]
 80013ea:	4b6d      	ldr	r3, [pc, #436]	; (80015a0 <main+0x2c4>)
 80013ec:	5499      	strb	r1, [r3, r2]
			rcvLength++;
 80013ee:	4b6b      	ldr	r3, [pc, #428]	; (800159c <main+0x2c0>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	3301      	adds	r3, #1
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	4b69      	ldr	r3, [pc, #420]	; (800159c <main+0x2c0>)
 80013f8:	801a      	strh	r2, [r3, #0]
			flagRcved = FALSE;
 80013fa:	4b67      	ldr	r3, [pc, #412]	; (8001598 <main+0x2bc>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
		} while ((rcvBuffer[0] != CHAR_CR) && (rcvLength < BUFF_SIZE));
 8001400:	4b63      	ldr	r3, [pc, #396]	; (8001590 <main+0x2b4>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b0d      	cmp	r3, #13
 8001406:	d003      	beq.n	8001410 <main+0x134>
 8001408:	4b64      	ldr	r3, [pc, #400]	; (800159c <main+0x2c0>)
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	2bc7      	cmp	r3, #199	; 0xc7
 800140e:	d9dd      	bls.n	80013cc <main+0xf0>

		rcvLength = 0;
 8001410:	4b62      	ldr	r3, [pc, #392]	; (800159c <main+0x2c0>)
 8001412:	2200      	movs	r2, #0
 8001414:	801a      	strh	r2, [r3, #0]

		//__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
		isPosUpdated = processGPSdata(sndBuffer);
 8001416:	4862      	ldr	r0, [pc, #392]	; (80015a0 <main+0x2c4>)
 8001418:	f000 fa26 	bl	8001868 <processGPSdata>
 800141c:	4603      	mov	r3, r0
 800141e:	4a5b      	ldr	r2, [pc, #364]	; (800158c <main+0x2b0>)
 8001420:	6013      	str	r3, [r2, #0]

		if (initBMP180) {
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d02e      	beq.n	8001486 <main+0x1aa>
			altitude = getRawAltitude() - SEALEVEL_ALTITUDE;
 8001428:	f000 fbb8 	bl	8001b9c <getRawAltitude>
 800142c:	ec51 0b10 	vmov	r0, r1, d0
 8001430:	4b54      	ldr	r3, [pc, #336]	; (8001584 <main+0x2a8>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7fe ff37 	bl	80002a8 <__aeabi_dsub>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	494c      	ldr	r1, [pc, #304]	; (8001570 <main+0x294>)
 8001440:	e9c1 2300 	strd	r2, r3, [r1]
			filteredAltitude = getFilteredAltitude(altitude);
 8001444:	4b4a      	ldr	r3, [pc, #296]	; (8001570 <main+0x294>)
 8001446:	ed93 7b00 	vldr	d7, [r3]
 800144a:	eeb0 0a47 	vmov.f32	s0, s14
 800144e:	eef0 0a67 	vmov.f32	s1, s15
 8001452:	f000 fbd7 	bl	8001c04 <getFilteredAltitude>
 8001456:	eeb0 7a40 	vmov.f32	s14, s0
 800145a:	eef0 7a60 	vmov.f32	s15, s1
 800145e:	4b51      	ldr	r3, [pc, #324]	; (80015a4 <main+0x2c8>)
 8001460:	ed83 7b00 	vstr	d7, [r3]

			if (filteredAltitude > maxAltitude) {
 8001464:	4b4f      	ldr	r3, [pc, #316]	; (80015a4 <main+0x2c8>)
 8001466:	e9d3 0100 	ldrd	r0, r1, [r3]
 800146a:	4b4f      	ldr	r3, [pc, #316]	; (80015a8 <main+0x2cc>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f7ff fb62 	bl	8000b38 <__aeabi_dcmpgt>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d005      	beq.n	8001486 <main+0x1aa>
				maxAltitude = filteredAltitude;
 800147a:	4b4a      	ldr	r3, [pc, #296]	; (80015a4 <main+0x2c8>)
 800147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001480:	4949      	ldr	r1, [pc, #292]	; (80015a8 <main+0x2cc>)
 8001482:	e9c1 2300 	strd	r2, r3, [r1]
			}
			//printf("rawAltiude= %f, fileteredAltitude = %f, maxAltitude = %f\n", altitude, filteredAltitude, maxAltitude);
		}

		if (isPosUpdated) { //Send wireless transmission when there is no location information
 8001486:	4b41      	ldr	r3, [pc, #260]	; (800158c <main+0x2b0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d068      	beq.n	8001560 <main+0x284>
			switch (sendCount) {
 800148e:	4b47      	ldr	r3, [pc, #284]	; (80015ac <main+0x2d0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b06      	cmp	r3, #6
 8001494:	d897      	bhi.n	80013c6 <main+0xea>
 8001496:	a201      	add	r2, pc, #4	; (adr r2, 800149c <main+0x1c0>)
 8001498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149c:	080014b9 	.word	0x080014b9
 80014a0:	080014d1 	.word	0x080014d1
 80014a4:	080014ed 	.word	0x080014ed
 80014a8:	08001509 	.word	0x08001509
 80014ac:	08001525 	.word	0x08001525
 80014b0:	08001537 	.word	0x08001537
 80014b4:	08001549 	.word	0x08001549
			case 0:
				wirelessSend("m", mode);
 80014b8:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <main+0x2d4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c4:	eeb0 0a67 	vmov.f32	s0, s15
 80014c8:	483a      	ldr	r0, [pc, #232]	; (80015b4 <main+0x2d8>)
 80014ca:	f000 fb13 	bl	8001af4 <wirelessSend>
				break;
 80014ce:	e048      	b.n	8001562 <main+0x286>
			case 1:
				wirelessSend("alt", altitude);
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <main+0x294>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fb95 	bl	8000c08 <__aeabi_d2f>
 80014de:	4603      	mov	r3, r0
 80014e0:	ee00 3a10 	vmov	s0, r3
 80014e4:	4834      	ldr	r0, [pc, #208]	; (80015b8 <main+0x2dc>)
 80014e6:	f000 fb05 	bl	8001af4 <wirelessSend>
				break;
 80014ea:	e03a      	b.n	8001562 <main+0x286>
			case 2:
				wirelessSend("lat", latitude);
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <main+0x290>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	f7ff fb87 	bl	8000c08 <__aeabi_d2f>
 80014fa:	4603      	mov	r3, r0
 80014fc:	ee00 3a10 	vmov	s0, r3
 8001500:	482e      	ldr	r0, [pc, #184]	; (80015bc <main+0x2e0>)
 8001502:	f000 faf7 	bl	8001af4 <wirelessSend>
				break;
 8001506:	e02c      	b.n	8001562 <main+0x286>
			case 3:
				wirelessSend("lng", longtitude);
 8001508:	4b16      	ldr	r3, [pc, #88]	; (8001564 <main+0x288>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f7ff fb79 	bl	8000c08 <__aeabi_d2f>
 8001516:	4603      	mov	r3, r0
 8001518:	ee00 3a10 	vmov	s0, r3
 800151c:	4828      	ldr	r0, [pc, #160]	; (80015c0 <main+0x2e4>)
 800151e:	f000 fae9 	bl	8001af4 <wirelessSend>
				break;
 8001522:	e01e      	b.n	8001562 <main+0x286>
			case 4:
				wirelessSend("gx", gyro[0]);
 8001524:	4b27      	ldr	r3, [pc, #156]	; (80015c4 <main+0x2e8>)
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	eeb0 0a67 	vmov.f32	s0, s15
 800152e:	4826      	ldr	r0, [pc, #152]	; (80015c8 <main+0x2ec>)
 8001530:	f000 fae0 	bl	8001af4 <wirelessSend>
				break;
 8001534:	e015      	b.n	8001562 <main+0x286>
			case 5:
				wirelessSend("gy", gyro[1]);
 8001536:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <main+0x2e8>)
 8001538:	edd3 7a01 	vldr	s15, [r3, #4]
 800153c:	eeb0 0a67 	vmov.f32	s0, s15
 8001540:	4822      	ldr	r0, [pc, #136]	; (80015cc <main+0x2f0>)
 8001542:	f000 fad7 	bl	8001af4 <wirelessSend>
				break;
 8001546:	e00c      	b.n	8001562 <main+0x286>
			case 6:
				wirelessSend("gz", gyro[2]);
 8001548:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <main+0x2e8>)
 800154a:	edd3 7a02 	vldr	s15, [r3, #8]
 800154e:	eeb0 0a67 	vmov.f32	s0, s15
 8001552:	481f      	ldr	r0, [pc, #124]	; (80015d0 <main+0x2f4>)
 8001554:	f000 face 	bl	8001af4 <wirelessSend>
				sendCount = 0;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <main+0x2d0>)
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
				break;
 800155e:	e000      	b.n	8001562 <main+0x286>
			}
		}
 8001560:	bf00      	nop
		isPosUpdated = 0;
 8001562:	e730      	b.n	80013c6 <main+0xea>
 8001564:	20000690 	.word	0x20000690
 8001568:	bff00000 	.word	0xbff00000
 800156c:	20000678 	.word	0x20000678
 8001570:	20000220 	.word	0x20000220
 8001574:	20000268 	.word	0x20000268
 8001578:	20000728 	.word	0x20000728
 800157c:	20000270 	.word	0x20000270
 8001580:	0800b9c0 	.word	0x0800b9c0
 8001584:	20000218 	.word	0x20000218
 8001588:	0800b9e0 	.word	0x0800b9e0
 800158c:	2000020c 	.word	0x2000020c
 8001590:	200005a8 	.word	0x200005a8
 8001594:	20000698 	.word	0x20000698
 8001598:	20000720 	.word	0x20000720
 800159c:	200002c4 	.word	0x200002c4
 80015a0:	200002c8 	.word	0x200002c8
 80015a4:	20000228 	.word	0x20000228
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20000210 	.word	0x20000210
 80015b0:	2000023c 	.word	0x2000023c
 80015b4:	0800b9fc 	.word	0x0800b9fc
 80015b8:	0800ba00 	.word	0x0800ba00
 80015bc:	0800ba04 	.word	0x0800ba04
 80015c0:	0800ba08 	.word	0x0800ba08
 80015c4:	20000230 	.word	0x20000230
 80015c8:	0800ba0c 	.word	0x0800ba0c
 80015cc:	0800ba10 	.word	0x0800ba10
 80015d0:	0800ba14 	.word	0x0800ba14

080015d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b096      	sub	sp, #88	; 0x58
 80015d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80015da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015de:	2228      	movs	r2, #40	; 0x28
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f004 fc54 	bl	8005e90 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]
 8001606:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001608:	2302      	movs	r3, #2
 800160a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800160c:	2301      	movs	r3, #1
 800160e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001610:	2310      	movs	r3, #16
 8001612:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001614:	2300      	movs	r3, #0
 8001616:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001618:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800161c:	4618      	mov	r0, r3
 800161e:	f001 ff83 	bl	8003528 <HAL_RCC_OscConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <SystemClock_Config+0x58>
		Error_Handler();
 8001628:	f000 fc23 	bl	8001e72 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800162c:	230f      	movs	r3, #15
 800162e:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001638:	2300      	movs	r3, #0
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f002 fe76 	bl	8004338 <HAL_RCC_ClockConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <SystemClock_Config+0x82>
		Error_Handler();
 8001652:	f000 fc0e 	bl	8001e72 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8001656:	2321      	movs	r3, #33	; 0x21
 8001658:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	4618      	mov	r0, r3
 8001666:	f003 f89d 	bl	80047a4 <HAL_RCCEx_PeriphCLKConfig>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <SystemClock_Config+0xa0>
		Error_Handler();
 8001670:	f000 fbff 	bl	8001e72 <Error_Handler>
	}
}
 8001674:	bf00      	nop
 8001676:	3758      	adds	r7, #88	; 0x58
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <MX_I2C1_Init+0x74>)
 8001682:	4a1c      	ldr	r2, [pc, #112]	; (80016f4 <MX_I2C1_Init+0x78>)
 8001684:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 8001686:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <MX_I2C1_Init+0x74>)
 8001688:	4a1b      	ldr	r2, [pc, #108]	; (80016f8 <MX_I2C1_Init+0x7c>)
 800168a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <MX_I2C1_Init+0x74>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MX_I2C1_Init+0x74>)
 8001694:	2201      	movs	r2, #1
 8001696:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <MX_I2C1_Init+0x74>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80016b6:	480e      	ldr	r0, [pc, #56]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016b8:	f001 f992 	bl	80029e0 <HAL_I2C_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_I2C1_Init+0x4a>
		Error_Handler();
 80016c2:	f000 fbd6 	bl	8001e72 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80016c6:	2100      	movs	r1, #0
 80016c8:	4809      	ldr	r0, [pc, #36]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016ca:	f001 fe95 	bl	80033f8 <HAL_I2CEx_ConfigAnalogFilter>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80016d4:	f000 fbcd 	bl	8001e72 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80016d8:	2100      	movs	r1, #0
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016dc:	f001 fed7 	bl	800348e <HAL_I2CEx_ConfigDigitalFilter>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_I2C1_Init+0x6e>
		Error_Handler();
 80016e6:	f000 fbc4 	bl	8001e72 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000270 	.word	0x20000270
 80016f4:	40005400 	.word	0x40005400
 80016f8:	2000090e 	.word	0x2000090e

080016fc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001702:	4a15      	ldr	r2, [pc, #84]	; (8001758 <MX_USART1_UART_Init+0x5c>)
 8001704:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800170c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <MX_USART1_UART_Init+0x58>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001722:	220c      	movs	r2, #12
 8001724:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_USART1_UART_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <MX_USART1_UART_Init+0x58>)
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001740:	f003 f956 	bl	80049f0 <HAL_UART_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_USART1_UART_Init+0x52>
		Error_Handler();
 800174a:	f000 fb92 	bl	8001e72 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000390 	.word	0x20000390
 8001758:	40013800 	.word	0x40013800

0800175c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_USART2_UART_Init+0x58>)
 8001762:	4a15      	ldr	r2, [pc, #84]	; (80017b8 <MX_USART2_UART_Init+0x5c>)
 8001764:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <MX_USART2_UART_Init+0x58>)
 8001768:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800176c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_USART2_UART_Init+0x58>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_USART2_UART_Init+0x58>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_USART2_UART_Init+0x58>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_USART2_UART_Init+0x58>)
 8001782:	220c      	movs	r2, #12
 8001784:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_USART2_UART_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_USART2_UART_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_USART2_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_USART2_UART_Init+0x58>)
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_USART2_UART_Init+0x58>)
 80017a0:	f003 f926 	bl	80049f0 <HAL_UART_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80017aa:	f000 fb62 	bl	8001e72 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000698 	.word	0x20000698
 80017b8:	40004400 	.word	0x40004400

080017bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	4b14      	ldr	r3, [pc, #80]	; (8001824 <MX_GPIO_Init+0x68>)
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	4a13      	ldr	r2, [pc, #76]	; (8001824 <MX_GPIO_Init+0x68>)
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017dc:	6153      	str	r3, [r2, #20]
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <MX_GPIO_Init+0x68>)
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <MX_GPIO_Init+0x68>)
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <MX_GPIO_Init+0x68>)
 80017f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f4:	6153      	str	r3, [r2, #20]
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <MX_GPIO_Init+0x68>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001802:	2310      	movs	r3, #16
 8001804:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	4619      	mov	r1, r3
 8001814:	4804      	ldr	r0, [pc, #16]	; (8001828 <MX_GPIO_Init+0x6c>)
 8001816:	f000 ff71 	bl	80026fc <HAL_GPIO_Init>

}
 800181a:	bf00      	nop
 800181c:	3720      	adds	r7, #32
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000
 8001828:	48000400 	.word	0x48000400

0800182c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	e009      	b.n	8001852 <_write+0x26>
		ITM_SendChar(*ptr++);
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	60ba      	str	r2, [r7, #8]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fd10 	bl	800126c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	3301      	adds	r3, #1
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	429a      	cmp	r2, r3
 8001858:	dbf1      	blt.n	800183e <_write+0x12>
	}
	return len;
 800185a:	687b      	ldr	r3, [r7, #4]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	0000      	movs	r0, r0
	...

08001868 <processGPSdata>:

float extractFloat(const char *str) {
	return atof(str);
}

int processGPSdata(char *rawData) {
 8001868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800186c:	b086      	sub	sp, #24
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
	if (rawData[1] == '$') { // Determine if the information received is from GPS
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3301      	adds	r3, #1
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b24      	cmp	r3, #36	; 0x24
 800187a:	f040 8117 	bne.w	8001aac <processGPSdata+0x244>
		const char delimeter[] = ",";
 800187e:	232c      	movs	r3, #44	; 0x2c
 8001880:	81bb      	strh	r3, [r7, #12]
		char *token = strtok(rawData, delimeter);
 8001882:	f107 030c 	add.w	r3, r7, #12
 8001886:	4619      	mov	r1, r3
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f006 f92f 	bl	8007aec <strtok>
 800188e:	6178      	str	r0, [r7, #20]
		char *dataIdentifier = "\n$GPGGA";
 8001890:	4b8b      	ldr	r3, [pc, #556]	; (8001ac0 <processGPSdata+0x258>)
 8001892:	613b      	str	r3, [r7, #16]

		uint8_t processOrder = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	73fb      	strb	r3, [r7, #15]

		while (token != NULL) { // Process data until all tokens are processed
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 8106 	beq.w	8001aac <processGPSdata+0x244>

			if (processOrder == 0) { // Check the prefix
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d108      	bne.n	80018b8 <processGPSdata+0x50>
				if (strcmp(token, dataIdentifier) != 0) { // If the prefix is not 'GPGGA'
 80018a6:	6939      	ldr	r1, [r7, #16]
 80018a8:	6978      	ldr	r0, [r7, #20]
 80018aa:	f7fe fc91 	bl	80001d0 <strcmp>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <processGPSdata+0x50>
					return 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	e0fa      	b.n	8001aae <processGPSdata+0x246>
				}
			}

			processOrder++;
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	3301      	adds	r3, #1
 80018bc:	73fb      	strb	r3, [r7, #15]
			token = strtok(NULL, delimeter); // Split data by comma
 80018be:	f107 030c 	add.w	r3, r7, #12
 80018c2:	4619      	mov	r1, r3
 80018c4:	2000      	movs	r0, #0
 80018c6:	f006 f911 	bl	8007aec <strtok>
 80018ca:	6178      	str	r0, [r7, #20]

			switch (processOrder) {
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	2b09      	cmp	r3, #9
 80018d2:	f200 80e9 	bhi.w	8001aa8 <processGPSdata+0x240>
 80018d6:	a201      	add	r2, pc, #4	; (adr r2, 80018dc <processGPSdata+0x74>)
 80018d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018dc:	08001905 	.word	0x08001905
 80018e0:	08001927 	.word	0x08001927
 80018e4:	080019a1 	.word	0x080019a1
 80018e8:	080019c3 	.word	0x080019c3
 80018ec:	08001a3d 	.word	0x08001a3d
 80018f0:	08001aa9 	.word	0x08001aa9
 80018f4:	08001aa9 	.word	0x08001aa9
 80018f8:	08001aa9 	.word	0x08001aa9
 80018fc:	08001a5f 	.word	0x08001a5f
 8001900:	08001a7d 	.word	0x08001a7d
			case 1:
				time = strtod(token, NULL) + 9000.0;
 8001904:	2100      	movs	r1, #0
 8001906:	6978      	ldr	r0, [r7, #20]
 8001908:	f006 f88a 	bl	8007a20 <strtod>
 800190c:	ec51 0b10 	vmov	r0, r1, d0
 8001910:	a369      	add	r3, pc, #420	; (adr r3, 8001ab8 <processGPSdata+0x250>)
 8001912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001916:	f7fe fcc9 	bl	80002ac <__adddf3>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4969      	ldr	r1, [pc, #420]	; (8001ac4 <processGPSdata+0x25c>)
 8001920:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8001924:	e0c0      	b.n	8001aa8 <processGPSdata+0x240>
			case 2:
				Minutes = modf(strtod(token, NULL) / 100.0, &latitude);
 8001926:	2100      	movs	r1, #0
 8001928:	6978      	ldr	r0, [r7, #20]
 800192a:	f006 f879 	bl	8007a20 <strtod>
 800192e:	ec51 0b10 	vmov	r0, r1, d0
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	4b64      	ldr	r3, [pc, #400]	; (8001ac8 <processGPSdata+0x260>)
 8001938:	f7fe ff98 	bl	800086c <__aeabi_ddiv>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	ec43 2b17 	vmov	d7, r2, r3
 8001944:	4861      	ldr	r0, [pc, #388]	; (8001acc <processGPSdata+0x264>)
 8001946:	eeb0 0a47 	vmov.f32	s0, s14
 800194a:	eef0 0a67 	vmov.f32	s1, s15
 800194e:	f005 f997 	bl	8006c80 <modf>
 8001952:	eeb0 7a40 	vmov.f32	s14, s0
 8001956:	eef0 7a60 	vmov.f32	s15, s1
 800195a:	4b5d      	ldr	r3, [pc, #372]	; (8001ad0 <processGPSdata+0x268>)
 800195c:	ed83 7b00 	vstr	d7, [r3]
				latitude = latitude + Minutes * 10.0 / 6.0;
 8001960:	4b5b      	ldr	r3, [pc, #364]	; (8001ad0 <processGPSdata+0x268>)
 8001962:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	4b5a      	ldr	r3, [pc, #360]	; (8001ad4 <processGPSdata+0x26c>)
 800196c:	f7fe fe54 	bl	8000618 <__aeabi_dmul>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	4b56      	ldr	r3, [pc, #344]	; (8001ad8 <processGPSdata+0x270>)
 800197e:	f7fe ff75 	bl	800086c <__aeabi_ddiv>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	4b50      	ldr	r3, [pc, #320]	; (8001acc <processGPSdata+0x264>)
 800198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001990:	f7fe fc8c 	bl	80002ac <__adddf3>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	494c      	ldr	r1, [pc, #304]	; (8001acc <processGPSdata+0x264>)
 800199a:	e9c1 2300 	strd	r2, r3, [r1]
				//printf("lat = %f\n", latitude);
				break;
 800199e:	e083      	b.n	8001aa8 <processGPSdata+0x240>
			case 3:
				if (strcmp(token, "S") == 0) {
 80019a0:	494e      	ldr	r1, [pc, #312]	; (8001adc <processGPSdata+0x274>)
 80019a2:	6978      	ldr	r0, [r7, #20]
 80019a4:	f7fe fc14 	bl	80001d0 <strcmp>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d177      	bne.n	8001a9e <processGPSdata+0x236>
					latitude = latitude * -1.0;
 80019ae:	4b47      	ldr	r3, [pc, #284]	; (8001acc <processGPSdata+0x264>)
 80019b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b4:	4692      	mov	sl, r2
 80019b6:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80019ba:	4b44      	ldr	r3, [pc, #272]	; (8001acc <processGPSdata+0x264>)
 80019bc:	e9c3 ab00 	strd	sl, fp, [r3]
				}
				break;
 80019c0:	e06d      	b.n	8001a9e <processGPSdata+0x236>
			case 4:
				Minutes = modf(strtod(token, NULL) / 100.0, &longtitude);
 80019c2:	2100      	movs	r1, #0
 80019c4:	6978      	ldr	r0, [r7, #20]
 80019c6:	f006 f82b 	bl	8007a20 <strtod>
 80019ca:	ec51 0b10 	vmov	r0, r1, d0
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	4b3d      	ldr	r3, [pc, #244]	; (8001ac8 <processGPSdata+0x260>)
 80019d4:	f7fe ff4a 	bl	800086c <__aeabi_ddiv>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	ec43 2b17 	vmov	d7, r2, r3
 80019e0:	483f      	ldr	r0, [pc, #252]	; (8001ae0 <processGPSdata+0x278>)
 80019e2:	eeb0 0a47 	vmov.f32	s0, s14
 80019e6:	eef0 0a67 	vmov.f32	s1, s15
 80019ea:	f005 f949 	bl	8006c80 <modf>
 80019ee:	eeb0 7a40 	vmov.f32	s14, s0
 80019f2:	eef0 7a60 	vmov.f32	s15, s1
 80019f6:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <processGPSdata+0x268>)
 80019f8:	ed83 7b00 	vstr	d7, [r3]
				longtitude = longtitude + Minutes * 10.0 / 6.0;
 80019fc:	4b34      	ldr	r3, [pc, #208]	; (8001ad0 <processGPSdata+0x268>)
 80019fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	4b33      	ldr	r3, [pc, #204]	; (8001ad4 <processGPSdata+0x26c>)
 8001a08:	f7fe fe06 	bl	8000618 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <processGPSdata+0x270>)
 8001a1a:	f7fe ff27 	bl	800086c <__aeabi_ddiv>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4610      	mov	r0, r2
 8001a24:	4619      	mov	r1, r3
 8001a26:	4b2e      	ldr	r3, [pc, #184]	; (8001ae0 <processGPSdata+0x278>)
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	f7fe fc3e 	bl	80002ac <__adddf3>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	492a      	ldr	r1, [pc, #168]	; (8001ae0 <processGPSdata+0x278>)
 8001a36:	e9c1 2300 	strd	r2, r3, [r1]
				//printf("log = %f\n", longtitude);
				break;
 8001a3a:	e035      	b.n	8001aa8 <processGPSdata+0x240>
			case 5:
				if (strcmp(token, "W") == 0) {
 8001a3c:	4929      	ldr	r1, [pc, #164]	; (8001ae4 <processGPSdata+0x27c>)
 8001a3e:	6978      	ldr	r0, [r7, #20]
 8001a40:	f7fe fbc6 	bl	80001d0 <strcmp>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d12b      	bne.n	8001aa2 <processGPSdata+0x23a>
					longtitude = longtitude * -1.0;
 8001a4a:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <processGPSdata+0x278>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	4690      	mov	r8, r2
 8001a52:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001a56:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <processGPSdata+0x278>)
 8001a58:	e9c3 8900 	strd	r8, r9, [r3]
				}
				break;
 8001a5c:	e021      	b.n	8001aa2 <processGPSdata+0x23a>
			case 9:
				gpsAltitude = strtof(token, NULL);
 8001a5e:	2100      	movs	r1, #0
 8001a60:	6978      	ldr	r0, [r7, #20]
 8001a62:	f005 ffe9 	bl	8007a38 <strtof>
 8001a66:	ee10 3a10 	vmov	r3, s0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe fd7c 	bl	8000568 <__aeabi_f2d>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	491c      	ldr	r1, [pc, #112]	; (8001ae8 <processGPSdata+0x280>)
 8001a76:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8001a7a:	e015      	b.n	8001aa8 <processGPSdata+0x240>
			case 10:
				if (strcmp(token, "M") != 0) {
 8001a7c:	491b      	ldr	r1, [pc, #108]	; (8001aec <processGPSdata+0x284>)
 8001a7e:	6978      	ldr	r0, [r7, #20]
 8001a80:	f7fe fba6 	bl	80001d0 <strcmp>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00d      	beq.n	8001aa6 <processGPSdata+0x23e>
					altitude = altitude * -1.0;
 8001a8a:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <processGPSdata+0x288>)
 8001a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a90:	4614      	mov	r4, r2
 8001a92:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001a96:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <processGPSdata+0x288>)
 8001a98:	e9c3 4500 	strd	r4, r5, [r3]
				}
				break;
 8001a9c:	e003      	b.n	8001aa6 <processGPSdata+0x23e>
				break;
 8001a9e:	bf00      	nop
 8001aa0:	e002      	b.n	8001aa8 <processGPSdata+0x240>
				break;
 8001aa2:	bf00      	nop
 8001aa4:	e000      	b.n	8001aa8 <processGPSdata+0x240>
				break;
 8001aa6:	bf00      	nop
			}

			return 1;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <processGPSdata+0x246>
		}
	}

	return 0;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ab8:	00000000 	.word	0x00000000
 8001abc:	40c19400 	.word	0x40c19400
 8001ac0:	0800ba18 	.word	0x0800ba18
 8001ac4:	20000670 	.word	0x20000670
 8001ac8:	40590000 	.word	0x40590000
 8001acc:	20000678 	.word	0x20000678
 8001ad0:	20000728 	.word	0x20000728
 8001ad4:	40240000 	.word	0x40240000
 8001ad8:	40180000 	.word	0x40180000
 8001adc:	0800ba20 	.word	0x0800ba20
 8001ae0:	20000690 	.word	0x20000690
 8001ae4:	0800ba24 	.word	0x0800ba24
 8001ae8:	20000730 	.word	0x20000730
 8001aec:	0800ba28 	.word	0x0800ba28
 8001af0:	20000220 	.word	0x20000220

08001af4 <wirelessSend>:

void wirelessSend(char *str, float value) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af02      	add	r7, sp, #8
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	ed87 0a00 	vstr	s0, [r7]
	char transmitBuffer[MAX_LAT_LONG_STRING_SIZE];

	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 3000);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7fe fb6f 	bl	80001e4 <strlen>
 8001b06:	4603      	mov	r3, r0
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4810      	ldr	r0, [pc, #64]	; (8001b54 <wirelessSend+0x60>)
 8001b12:	f002 ffbb 	bl	8004a8c <HAL_UART_Transmit>
	snprintf(transmitBuffer, sizeof(transmitBuffer), "%f", value);
 8001b16:	6838      	ldr	r0, [r7, #0]
 8001b18:	f7fe fd26 	bl	8000568 <__aeabi_f2d>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	f107 000c 	add.w	r0, r7, #12
 8001b24:	e9cd 2300 	strd	r2, r3, [sp]
 8001b28:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <wirelessSend+0x64>)
 8001b2a:	210a      	movs	r1, #10
 8001b2c:	f005 f8f8 	bl	8006d20 <sniprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*) transmitBuffer,
			strlen(transmitBuffer), 3000);
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe fb55 	bl	80001e4 <strlen>
 8001b3a:	4603      	mov	r3, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) transmitBuffer,
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	f107 010c 	add.w	r1, r7, #12
 8001b42:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b46:	4803      	ldr	r0, [pc, #12]	; (8001b54 <wirelessSend+0x60>)
 8001b48:	f002 ffa0 	bl	8004a8c <HAL_UART_Transmit>
}
 8001b4c:	bf00      	nop
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000390 	.word	0x20000390
 8001b58:	0800ba2c 	.word	0x0800ba2c

08001b5c <initializeAltitudeArray>:

void initializeAltitudeArray(double _altitude) {
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	ed87 0b00 	vstr	d0, [r7]
	for (int i = 0; i < SAMPLENUM; i++) {
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	e00a      	b.n	8001b82 <initializeAltitudeArray+0x26>
		altitudeArray[i] = _altitude;
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <initializeAltitudeArray+0x3c>)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	18d1      	adds	r1, r2, r3
 8001b74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b78:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < SAMPLENUM; i++) {
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2b31      	cmp	r3, #49	; 0x31
 8001b86:	ddf1      	ble.n	8001b6c <initializeAltitudeArray+0x10>
	}
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000418 	.word	0x20000418

08001b9c <getRawAltitude>:

double getRawAltitude() {
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
	double pressure = readBMPPressure();
 8001ba2:	f7ff fa55 	bl	8001050 <readBMPPressure>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fccb 	bl	8000544 <__aeabi_i2d>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double temperature = readBMPTemperature();
 8001bb6:	f7ff fa27 	bl	8001008 <readBMPTemperature>
 8001bba:	ee10 3a10 	vmov	r3, s0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fcd2 	bl	8000568 <__aeabi_f2d>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double _altitude = calculateAltitude(pressure, temperature);
 8001bcc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bd0:	f7fe ffd2 	bl	8000b78 <__aeabi_d2iz>
 8001bd4:	4604      	mov	r4, r0
 8001bd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bda:	f7ff f815 	bl	8000c08 <__aeabi_d2f>
 8001bde:	4603      	mov	r3, r0
 8001be0:	ee00 3a10 	vmov	s0, r3
 8001be4:	4620      	mov	r0, r4
 8001be6:	f7ff fae3 	bl	80011b0 <calculateAltitude>
 8001bea:	ed87 0b00 	vstr	d0, [r7]

	return _altitude;
 8001bee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bf2:	ec43 2b17 	vmov	d7, r2, r3
}
 8001bf6:	eeb0 0a47 	vmov.f32	s0, s14
 8001bfa:	eef0 0a67 	vmov.f32	s1, s15
 8001bfe:	371c      	adds	r7, #28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd90      	pop	{r4, r7, pc}

08001c04 <getFilteredAltitude>:

double getFilteredAltitude(double rawAltitude) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	ed87 0b00 	vstr	d0, [r7]
	altitudeArray[0] = rawAltitude;
 8001c0e:	4916      	ldr	r1, [pc, #88]	; (8001c68 <getFilteredAltitude+0x64>)
 8001c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c14:	e9c1 2300 	strd	r2, r3, [r1]

	for (int i = (SAMPLENUM - 1); i > 0; i--) {
 8001c18:	2331      	movs	r3, #49	; 0x31
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	e00f      	b.n	8001c3e <getFilteredAltitude+0x3a>
		altitudeArray[i] = altitudeArray[i - 1];
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	4a11      	ldr	r2, [pc, #68]	; (8001c68 <getFilteredAltitude+0x64>)
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4413      	add	r3, r2
 8001c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2c:	480e      	ldr	r0, [pc, #56]	; (8001c68 <getFilteredAltitude+0x64>)
 8001c2e:	6979      	ldr	r1, [r7, #20]
 8001c30:	00c9      	lsls	r1, r1, #3
 8001c32:	4401      	add	r1, r0
 8001c34:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = (SAMPLENUM - 1); i > 0; i--) {
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	dcec      	bgt.n	8001c1e <getFilteredAltitude+0x1a>
	}

	double filteredAltitude = calcMedian(altitudeArray, SAMPLENUM, 1);
 8001c44:	2201      	movs	r2, #1
 8001c46:	2132      	movs	r1, #50	; 0x32
 8001c48:	4807      	ldr	r0, [pc, #28]	; (8001c68 <getFilteredAltitude+0x64>)
 8001c4a:	f000 f80f 	bl	8001c6c <calcMedian>
 8001c4e:	ed87 0b02 	vstr	d0, [r7, #8]

	return filteredAltitude;
 8001c52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c56:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c5a:	eeb0 0a47 	vmov.f32	s0, s14
 8001c5e:	eef0 0a67 	vmov.f32	s1, s15
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000418 	.word	0x20000418

08001c6c <calcMedian>:

double calcMedian(void *array, int n, int type) {
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b08d      	sub	sp, #52	; 0x34
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
	if (type == 0) { // If data type is int
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d16b      	bne.n	8001d56 <calcMedian+0xea>
		int *intArray = (int*) array;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	617b      	str	r3, [r7, #20]

		for (int i = 0; i < n; i++) {
 8001c82:	2300      	movs	r3, #0
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c86:	e02f      	b.n	8001ce8 <calcMedian+0x7c>
			for (int j = i + 1; j < n; j++) {
 8001c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c8e:	e024      	b.n	8001cda <calcMedian+0x6e>
				if (intArray[i] > intArray[j]) {
 8001c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	4413      	add	r3, r2
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	6979      	ldr	r1, [r7, #20]
 8001ca0:	440b      	add	r3, r1
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	dd15      	ble.n	8001cd4 <calcMedian+0x68>
					int changer = intArray[j];
 8001ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	4413      	add	r3, r2
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	613b      	str	r3, [r7, #16]
					intArray[j] = intArray[i];
 8001cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	441a      	add	r2, r3
 8001cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	6979      	ldr	r1, [r7, #20]
 8001cc2:	440b      	add	r3, r1
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	601a      	str	r2, [r3, #0]
					intArray[i] = changer;
 8001cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	4413      	add	r3, r2
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	601a      	str	r2, [r3, #0]
			for (int j = i + 1; j < n; j++) {
 8001cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	dbd6      	blt.n	8001c90 <calcMedian+0x24>
		for (int i = 0; i < n; i++) {
 8001ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	dbcb      	blt.n	8001c88 <calcMedian+0x1c>
				}
			}
		}

		if (n % 2 == 0) {
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d11f      	bne.n	8001d3a <calcMedian+0xce>
			return (double) (intArray[n / 2] + intArray[n / 2 - 1]) / 2;
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	0fda      	lsrs	r2, r3, #31
 8001cfe:	4413      	add	r3, r2
 8001d00:	105b      	asrs	r3, r3, #1
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	4413      	add	r3, r2
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	0fd9      	lsrs	r1, r3, #31
 8001d0e:	440b      	add	r3, r1
 8001d10:	105b      	asrs	r3, r3, #1
 8001d12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d16:	3b01      	subs	r3, #1
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	6979      	ldr	r1, [r7, #20]
 8001d1c:	440b      	add	r3, r1
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4413      	add	r3, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fc0e 	bl	8000544 <__aeabi_i2d>
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d30:	f7fe fd9c 	bl	800086c <__aeabi_ddiv>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	e092      	b.n	8001e60 <calcMedian+0x1f4>
		} else {
			return (double) intArray[n / 2];
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	0fda      	lsrs	r2, r3, #31
 8001d3e:	4413      	add	r3, r2
 8001d40:	105b      	asrs	r3, r3, #1
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	4413      	add	r3, r2
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fbfa 	bl	8000544 <__aeabi_i2d>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	e084      	b.n	8001e60 <calcMedian+0x1f4>
		}
	} else if (type == 1) { // If data type is float
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d17d      	bne.n	8001e58 <calcMedian+0x1ec>
		double *doubleArray = (double*) array;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	61fb      	str	r3, [r7, #28]

		for (int i = 0; i < n; i++) {
 8001d60:	2300      	movs	r3, #0
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
 8001d64:	e041      	b.n	8001dea <calcMedian+0x17e>
			for (int j = i + 1; j < n; j++) {
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	3301      	adds	r3, #1
 8001d6a:	623b      	str	r3, [r7, #32]
 8001d6c:	e036      	b.n	8001ddc <calcMedian+0x170>
				if (doubleArray[i] > doubleArray[j]) {
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	69fa      	ldr	r2, [r7, #28]
 8001d74:	4413      	add	r3, r2
 8001d76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	69fa      	ldr	r2, [r7, #28]
 8001d80:	4413      	add	r3, r2
 8001d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d86:	f7fe fed7 	bl	8000b38 <__aeabi_dcmpgt>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d022      	beq.n	8001dd6 <calcMedian+0x16a>
					float changer = doubleArray[j];
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	4413      	add	r3, r2
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f7fe ff32 	bl	8000c08 <__aeabi_d2f>
 8001da4:	4603      	mov	r3, r0
 8001da6:	61bb      	str	r3, [r7, #24]
					doubleArray[j] = doubleArray[i];
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	69fa      	ldr	r2, [r7, #28]
 8001dae:	4413      	add	r3, r2
 8001db0:	6a3a      	ldr	r2, [r7, #32]
 8001db2:	00d2      	lsls	r2, r2, #3
 8001db4:	69f9      	ldr	r1, [r7, #28]
 8001db6:	4411      	add	r1, r2
 8001db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbc:	e9c1 2300 	strd	r2, r3, [r1]
					doubleArray[i] = changer;
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	69fa      	ldr	r2, [r7, #28]
 8001dc6:	18d4      	adds	r4, r2, r3
 8001dc8:	69b8      	ldr	r0, [r7, #24]
 8001dca:	f7fe fbcd 	bl	8000568 <__aeabi_f2d>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	e9c4 2300 	strd	r2, r3, [r4]
			for (int j = i + 1; j < n; j++) {
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	623b      	str	r3, [r7, #32]
 8001ddc:	6a3a      	ldr	r2, [r7, #32]
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	dbc4      	blt.n	8001d6e <calcMedian+0x102>
		for (int i = 0; i < n; i++) {
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	3301      	adds	r3, #1
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	dbb9      	blt.n	8001d66 <calcMedian+0xfa>
				}
			}
		}

		if (n % 2 == 0) {
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d123      	bne.n	8001e44 <calcMedian+0x1d8>
			return (doubleArray[n / 2] + doubleArray[n / 2 - 1]) / 2;
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	0fda      	lsrs	r2, r3, #31
 8001e00:	4413      	add	r3, r2
 8001e02:	105b      	asrs	r3, r3, #1
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	4413      	add	r3, r2
 8001e0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	0fda      	lsrs	r2, r3, #31
 8001e12:	4413      	add	r3, r2
 8001e14:	105b      	asrs	r3, r3, #1
 8001e16:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	4413      	add	r3, r2
 8001e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e26:	f7fe fa41 	bl	80002ac <__adddf3>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4610      	mov	r0, r2
 8001e30:	4619      	mov	r1, r3
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e3a:	f7fe fd17 	bl	800086c <__aeabi_ddiv>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	e00d      	b.n	8001e60 <calcMedian+0x1f4>
		} else {
			return doubleArray[n / 2];
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	0fda      	lsrs	r2, r3, #31
 8001e48:	4413      	add	r3, r2
 8001e4a:	105b      	asrs	r3, r3, #1
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	69fa      	ldr	r2, [r7, #28]
 8001e50:	4413      	add	r3, r2
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	e003      	b.n	8001e60 <calcMedian+0x1f4>
		}
	} else {
		// Error or unknown data type
		return 0.0;
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	ec43 2b17 	vmov	d7, r2, r3
	}
}
 8001e64:	eeb0 0a47 	vmov.f32	s0, s14
 8001e68:	eef0 0a67 	vmov.f32	s1, s15
 8001e6c:	3734      	adds	r7, #52	; 0x34
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd90      	pop	{r4, r7, pc}

08001e72 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e76:	b672      	cpsid	i
}
 8001e78:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e7a:	e7fe      	b.n	8001e7a <Error_Handler+0x8>

08001e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e82:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <HAL_MspInit+0x44>)
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	4a0e      	ldr	r2, [pc, #56]	; (8001ec0 <HAL_MspInit+0x44>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6193      	str	r3, [r2, #24]
 8001e8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <HAL_MspInit+0x44>)
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_MspInit+0x44>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	4a08      	ldr	r2, [pc, #32]	; (8001ec0 <HAL_MspInit+0x44>)
 8001ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	61d3      	str	r3, [r2, #28]
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_MspInit+0x44>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000

08001ec4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	; 0x28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a26      	ldr	r2, [pc, #152]	; (8001f7c <HAL_I2C_MspInit+0xb8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d145      	bne.n	8001f72 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee6:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <HAL_I2C_MspInit+0xbc>)
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	4a25      	ldr	r2, [pc, #148]	; (8001f80 <HAL_I2C_MspInit+0xbc>)
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef0:	6153      	str	r3, [r2, #20]
 8001ef2:	4b23      	ldr	r3, [pc, #140]	; (8001f80 <HAL_I2C_MspInit+0xbc>)
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efe:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <HAL_I2C_MspInit+0xbc>)
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	4a1f      	ldr	r2, [pc, #124]	; (8001f80 <HAL_I2C_MspInit+0xbc>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f08:	6153      	str	r3, [r2, #20]
 8001f0a:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <HAL_I2C_MspInit+0xbc>)
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f1c:	2312      	movs	r3, #18
 8001f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f24:	2303      	movs	r3, #3
 8001f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f28:	2304      	movs	r3, #4
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	4619      	mov	r1, r3
 8001f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f36:	f000 fbe1 	bl	80026fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f3e:	2312      	movs	r3, #18
 8001f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	4619      	mov	r1, r3
 8001f54:	480b      	ldr	r0, [pc, #44]	; (8001f84 <HAL_I2C_MspInit+0xc0>)
 8001f56:	f000 fbd1 	bl	80026fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_I2C_MspInit+0xbc>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	4a08      	ldr	r2, [pc, #32]	; (8001f80 <HAL_I2C_MspInit+0xbc>)
 8001f60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f64:	61d3      	str	r3, [r2, #28]
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_I2C_MspInit+0xbc>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f72:	bf00      	nop
 8001f74:	3728      	adds	r7, #40	; 0x28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40005400 	.word	0x40005400
 8001f80:	40021000 	.word	0x40021000
 8001f84:	48000400 	.word	0x48000400

08001f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08c      	sub	sp, #48	; 0x30
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 031c 	add.w	r3, r7, #28
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a37      	ldr	r2, [pc, #220]	; (8002084 <HAL_UART_MspInit+0xfc>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d132      	bne.n	8002010 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001faa:	4b37      	ldr	r3, [pc, #220]	; (8002088 <HAL_UART_MspInit+0x100>)
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	4a36      	ldr	r2, [pc, #216]	; (8002088 <HAL_UART_MspInit+0x100>)
 8001fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb4:	6193      	str	r3, [r2, #24]
 8001fb6:	4b34      	ldr	r3, [pc, #208]	; (8002088 <HAL_UART_MspInit+0x100>)
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	4b31      	ldr	r3, [pc, #196]	; (8002088 <HAL_UART_MspInit+0x100>)
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	4a30      	ldr	r2, [pc, #192]	; (8002088 <HAL_UART_MspInit+0x100>)
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fcc:	6153      	str	r3, [r2, #20]
 8001fce:	4b2e      	ldr	r3, [pc, #184]	; (8002088 <HAL_UART_MspInit+0x100>)
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fec:	2307      	movs	r3, #7
 8001fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff0:	f107 031c 	add.w	r3, r7, #28
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ffa:	f000 fb7f 	bl	80026fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	2025      	movs	r0, #37	; 0x25
 8002004:	f000 facd 	bl	80025a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002008:	2025      	movs	r0, #37	; 0x25
 800200a:	f000 fae6 	bl	80025da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800200e:	e035      	b.n	800207c <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1d      	ldr	r2, [pc, #116]	; (800208c <HAL_UART_MspInit+0x104>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d130      	bne.n	800207c <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 800201a:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_UART_MspInit+0x100>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	4a1a      	ldr	r2, [pc, #104]	; (8002088 <HAL_UART_MspInit+0x100>)
 8002020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002024:	61d3      	str	r3, [r2, #28]
 8002026:	4b18      	ldr	r3, [pc, #96]	; (8002088 <HAL_UART_MspInit+0x100>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <HAL_UART_MspInit+0x100>)
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	4a14      	ldr	r2, [pc, #80]	; (8002088 <HAL_UART_MspInit+0x100>)
 8002038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800203c:	6153      	str	r3, [r2, #20]
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_UART_MspInit+0x100>)
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800204a:	230c      	movs	r3, #12
 800204c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002056:	2303      	movs	r3, #3
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800205a:	2307      	movs	r3, #7
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f107 031c 	add.w	r3, r7, #28
 8002062:	4619      	mov	r1, r3
 8002064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002068:	f000 fb48 	bl	80026fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800206c:	2200      	movs	r2, #0
 800206e:	2100      	movs	r1, #0
 8002070:	2026      	movs	r0, #38	; 0x26
 8002072:	f000 fa96 	bl	80025a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002076:	2026      	movs	r0, #38	; 0x26
 8002078:	f000 faaf 	bl	80025da <HAL_NVIC_EnableIRQ>
}
 800207c:	bf00      	nop
 800207e:	3730      	adds	r7, #48	; 0x30
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40013800 	.word	0x40013800
 8002088:	40021000 	.word	0x40021000
 800208c:	40004400 	.word	0x40004400

08002090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002094:	e7fe      	b.n	8002094 <NMI_Handler+0x4>

08002096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800209a:	e7fe      	b.n	800209a <HardFault_Handler+0x4>

0800209c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a0:	e7fe      	b.n	80020a0 <MemManage_Handler+0x4>

080020a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a6:	e7fe      	b.n	80020a6 <BusFault_Handler+0x4>

080020a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ac:	e7fe      	b.n	80020ac <UsageFault_Handler+0x4>

080020ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020dc:	f000 f942 	bl	8002364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <USART1_IRQHandler+0x10>)
 80020ea:	f002 fd9d 	bl	8004c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000390 	.word	0x20000390

080020f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020fc:	4802      	ldr	r0, [pc, #8]	; (8002108 <USART2_IRQHandler+0x10>)
 80020fe:	f002 fd93 	bl	8004c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000698 	.word	0x20000698

0800210c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
	return 1;
 8002110:	2301      	movs	r3, #1
}
 8002112:	4618      	mov	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <_kill>:

int _kill(int pid, int sig)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002126:	f003 fe89 	bl	8005e3c <__errno>
 800212a:	4603      	mov	r3, r0
 800212c:	2216      	movs	r2, #22
 800212e:	601a      	str	r2, [r3, #0]
	return -1;
 8002130:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <_exit>:

void _exit (int status)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002144:	f04f 31ff 	mov.w	r1, #4294967295
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff ffe7 	bl	800211c <_kill>
	while (1) {}		/* Make sure we hang here */
 800214e:	e7fe      	b.n	800214e <_exit+0x12>

08002150 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	e00a      	b.n	8002178 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002162:	f3af 8000 	nop.w
 8002166:	4601      	mov	r1, r0
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	60ba      	str	r2, [r7, #8]
 800216e:	b2ca      	uxtb	r2, r1
 8002170:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	3301      	adds	r3, #1
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	429a      	cmp	r2, r3
 800217e:	dbf0      	blt.n	8002162 <_read+0x12>
	}

return len;
 8002180:	687b      	ldr	r3, [r7, #4]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <_close>:
	}
	return len;
}

int _close(int file)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
	return -1;
 8002192:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021b2:	605a      	str	r2, [r3, #4]
	return 0;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <_isatty>:

int _isatty(int file)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
	return 1;
 80021ca:	2301      	movs	r3, #1
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
	return 0;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021fc:	4a14      	ldr	r2, [pc, #80]	; (8002250 <_sbrk+0x5c>)
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <_sbrk+0x60>)
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002208:	4b13      	ldr	r3, [pc, #76]	; (8002258 <_sbrk+0x64>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d102      	bne.n	8002216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <_sbrk+0x64>)
 8002212:	4a12      	ldr	r2, [pc, #72]	; (800225c <_sbrk+0x68>)
 8002214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <_sbrk+0x64>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	429a      	cmp	r2, r3
 8002222:	d207      	bcs.n	8002234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002224:	f003 fe0a 	bl	8005e3c <__errno>
 8002228:	4603      	mov	r3, r0
 800222a:	220c      	movs	r2, #12
 800222c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800222e:	f04f 33ff 	mov.w	r3, #4294967295
 8002232:	e009      	b.n	8002248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <_sbrk+0x64>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800223a:	4b07      	ldr	r3, [pc, #28]	; (8002258 <_sbrk+0x64>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	4a05      	ldr	r2, [pc, #20]	; (8002258 <_sbrk+0x64>)
 8002244:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002246:	68fb      	ldr	r3, [r7, #12]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20003000 	.word	0x20003000
 8002254:	00000400 	.word	0x00000400
 8002258:	20000240 	.word	0x20000240
 800225c:	20000750 	.word	0x20000750

08002260 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <SystemInit+0x20>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226a:	4a05      	ldr	r2, [pc, #20]	; (8002280 <SystemInit+0x20>)
 800226c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002270:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002284:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022bc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002288:	f7ff ffea 	bl	8002260 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800228c:	480c      	ldr	r0, [pc, #48]	; (80022c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800228e:	490d      	ldr	r1, [pc, #52]	; (80022c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002290:	4a0d      	ldr	r2, [pc, #52]	; (80022c8 <LoopForever+0xe>)
  movs r3, #0
 8002292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002294:	e002      	b.n	800229c <LoopCopyDataInit>

08002296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800229a:	3304      	adds	r3, #4

0800229c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800229c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800229e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a0:	d3f9      	bcc.n	8002296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022a2:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80022a4:	4c0a      	ldr	r4, [pc, #40]	; (80022d0 <LoopForever+0x16>)
  movs r3, #0
 80022a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a8:	e001      	b.n	80022ae <LoopFillZerobss>

080022aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022ac:	3204      	adds	r2, #4

080022ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b0:	d3fb      	bcc.n	80022aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022b2:	f003 fdc9 	bl	8005e48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022b6:	f7ff f811 	bl	80012dc <main>

080022ba <LoopForever>:

LoopForever:
    b LoopForever
 80022ba:	e7fe      	b.n	80022ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022bc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80022c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80022c8:	0800bfc8 	.word	0x0800bfc8
  ldr r2, =_sbss
 80022cc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80022d0:	2000074c 	.word	0x2000074c

080022d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022d4:	e7fe      	b.n	80022d4 <ADC1_2_IRQHandler>
	...

080022d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022dc:	4b08      	ldr	r3, [pc, #32]	; (8002300 <HAL_Init+0x28>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a07      	ldr	r2, [pc, #28]	; (8002300 <HAL_Init+0x28>)
 80022e2:	f043 0310 	orr.w	r3, r3, #16
 80022e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e8:	2003      	movs	r0, #3
 80022ea:	f000 f94f 	bl	800258c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ee:	200f      	movs	r0, #15
 80022f0:	f000 f808 	bl	8002304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022f4:	f7ff fdc2 	bl	8001e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40022000 	.word	0x40022000

08002304 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_InitTick+0x54>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_InitTick+0x58>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	4619      	mov	r1, r3
 8002316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800231a:	fbb3 f3f1 	udiv	r3, r3, r1
 800231e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002322:	4618      	mov	r0, r3
 8002324:	f000 f967 	bl	80025f6 <HAL_SYSTICK_Config>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e00e      	b.n	8002350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b0f      	cmp	r3, #15
 8002336:	d80a      	bhi.n	800234e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002338:	2200      	movs	r2, #0
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	f04f 30ff 	mov.w	r0, #4294967295
 8002340:	f000 f92f 	bl	80025a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002344:	4a06      	ldr	r2, [pc, #24]	; (8002360 <HAL_InitTick+0x5c>)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	e000      	b.n	8002350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
}
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20000008 	.word	0x20000008
 800235c:	20000010 	.word	0x20000010
 8002360:	2000000c 	.word	0x2000000c

08002364 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_IncTick+0x20>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_IncTick+0x24>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4413      	add	r3, r2
 8002374:	4a04      	ldr	r2, [pc, #16]	; (8002388 <HAL_IncTick+0x24>)
 8002376:	6013      	str	r3, [r2, #0]
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20000010 	.word	0x20000010
 8002388:	20000738 	.word	0x20000738

0800238c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <HAL_GetTick+0x14>)
 8002392:	681b      	ldr	r3, [r3, #0]
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000738 	.word	0x20000738

080023a4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023ac:	f7ff ffee 	bl	800238c <HAL_GetTick>
 80023b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023bc:	d005      	beq.n	80023ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <HAL_Delay+0x44>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4413      	add	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80023ca:	bf00      	nop
 80023cc:	f7ff ffde 	bl	800238c <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d8f7      	bhi.n	80023cc <HAL_Delay+0x28>
  {
  }
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000010 	.word	0x20000010

080023ec <__NVIC_SetPriorityGrouping>:
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <__NVIC_SetPriorityGrouping+0x44>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002408:	4013      	ands	r3, r2
 800240a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800241c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800241e:	4a04      	ldr	r2, [pc, #16]	; (8002430 <__NVIC_SetPriorityGrouping+0x44>)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	60d3      	str	r3, [r2, #12]
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <__NVIC_GetPriorityGrouping>:
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <__NVIC_GetPriorityGrouping+0x18>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	0a1b      	lsrs	r3, r3, #8
 800243e:	f003 0307 	and.w	r3, r3, #7
}
 8002442:	4618      	mov	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <__NVIC_EnableIRQ>:
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	2b00      	cmp	r3, #0
 8002460:	db0b      	blt.n	800247a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	f003 021f 	and.w	r2, r3, #31
 8002468:	4907      	ldr	r1, [pc, #28]	; (8002488 <__NVIC_EnableIRQ+0x38>)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	2001      	movs	r0, #1
 8002472:	fa00 f202 	lsl.w	r2, r0, r2
 8002476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	e000e100 	.word	0xe000e100

0800248c <__NVIC_SetPriority>:
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	6039      	str	r1, [r7, #0]
 8002496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249c:	2b00      	cmp	r3, #0
 800249e:	db0a      	blt.n	80024b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	490c      	ldr	r1, [pc, #48]	; (80024d8 <__NVIC_SetPriority+0x4c>)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	0112      	lsls	r2, r2, #4
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	440b      	add	r3, r1
 80024b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80024b4:	e00a      	b.n	80024cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4908      	ldr	r1, [pc, #32]	; (80024dc <__NVIC_SetPriority+0x50>)
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	3b04      	subs	r3, #4
 80024c4:	0112      	lsls	r2, r2, #4
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	440b      	add	r3, r1
 80024ca:	761a      	strb	r2, [r3, #24]
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000e100 	.word	0xe000e100
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <NVIC_EncodePriority>:
{
 80024e0:	b480      	push	{r7}
 80024e2:	b089      	sub	sp, #36	; 0x24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f1c3 0307 	rsb	r3, r3, #7
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	bf28      	it	cs
 80024fe:	2304      	movcs	r3, #4
 8002500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3304      	adds	r3, #4
 8002506:	2b06      	cmp	r3, #6
 8002508:	d902      	bls.n	8002510 <NVIC_EncodePriority+0x30>
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3b03      	subs	r3, #3
 800250e:	e000      	b.n	8002512 <NVIC_EncodePriority+0x32>
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002514:	f04f 32ff 	mov.w	r2, #4294967295
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43da      	mvns	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	401a      	ands	r2, r3
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002528:	f04f 31ff 	mov.w	r1, #4294967295
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	fa01 f303 	lsl.w	r3, r1, r3
 8002532:	43d9      	mvns	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	4313      	orrs	r3, r2
}
 800253a:	4618      	mov	r0, r3
 800253c:	3724      	adds	r7, #36	; 0x24
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <SysTick_Config>:
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3b01      	subs	r3, #1
 8002554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002558:	d301      	bcc.n	800255e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800255a:	2301      	movs	r3, #1
 800255c:	e00f      	b.n	800257e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800255e:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <SysTick_Config+0x40>)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002566:	210f      	movs	r1, #15
 8002568:	f04f 30ff 	mov.w	r0, #4294967295
 800256c:	f7ff ff8e 	bl	800248c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <SysTick_Config+0x40>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002576:	4b04      	ldr	r3, [pc, #16]	; (8002588 <SysTick_Config+0x40>)
 8002578:	2207      	movs	r2, #7
 800257a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	e000e010 	.word	0xe000e010

0800258c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff ff29 	bl	80023ec <__NVIC_SetPriorityGrouping>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b086      	sub	sp, #24
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	4603      	mov	r3, r0
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025b4:	f7ff ff3e 	bl	8002434 <__NVIC_GetPriorityGrouping>
 80025b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	6978      	ldr	r0, [r7, #20]
 80025c0:	f7ff ff8e 	bl	80024e0 <NVIC_EncodePriority>
 80025c4:	4602      	mov	r2, r0
 80025c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ca:	4611      	mov	r1, r2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ff5d 	bl	800248c <__NVIC_SetPriority>
}
 80025d2:	bf00      	nop
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	4603      	mov	r3, r0
 80025e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ff31 	bl	8002450 <__NVIC_EnableIRQ>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff ffa2 	bl	8002548 <SysTick_Config>
 8002604:	4603      	mov	r3, r0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800261c:	2b02      	cmp	r3, #2
 800261e:	d008      	beq.n	8002632 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2204      	movs	r2, #4
 8002624:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e020      	b.n	8002674 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 020e 	bic.w	r2, r2, #14
 8002640:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0201 	bic.w	r2, r2, #1
 8002650:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265a:	2101      	movs	r1, #1
 800265c:	fa01 f202 	lsl.w	r2, r1, r2
 8002660:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002692:	2b02      	cmp	r3, #2
 8002694:	d005      	beq.n	80026a2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2204      	movs	r2, #4
 800269a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
 80026a0:	e027      	b.n	80026f2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 020e 	bic.w	r2, r2, #14
 80026b0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0201 	bic.w	r2, r2, #1
 80026c0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ca:	2101      	movs	r1, #1
 80026cc:	fa01 f202 	lsl.w	r2, r1, r2
 80026d0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	4798      	blx	r3
    } 
  }
  return status;
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800270a:	e14e      	b.n	80029aa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	2101      	movs	r1, #1
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	fa01 f303 	lsl.w	r3, r1, r3
 8002718:	4013      	ands	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 8140 	beq.w	80029a4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d005      	beq.n	800273c <HAL_GPIO_Init+0x40>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d130      	bne.n	800279e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	2203      	movs	r2, #3
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002772:	2201      	movs	r2, #1
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	091b      	lsrs	r3, r3, #4
 8002788:	f003 0201 	and.w	r2, r3, #1
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	2b03      	cmp	r3, #3
 80027a8:	d017      	beq.n	80027da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	2203      	movs	r2, #3
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4013      	ands	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d123      	bne.n	800282e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	08da      	lsrs	r2, r3, #3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3208      	adds	r2, #8
 80027ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	220f      	movs	r2, #15
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4013      	ands	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	08da      	lsrs	r2, r3, #3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3208      	adds	r2, #8
 8002828:	6939      	ldr	r1, [r7, #16]
 800282a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	2203      	movs	r2, #3
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43db      	mvns	r3, r3
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4013      	ands	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 0203 	and.w	r2, r3, #3
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 809a 	beq.w	80029a4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002870:	4b55      	ldr	r3, [pc, #340]	; (80029c8 <HAL_GPIO_Init+0x2cc>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	4a54      	ldr	r2, [pc, #336]	; (80029c8 <HAL_GPIO_Init+0x2cc>)
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	6193      	str	r3, [r2, #24]
 800287c:	4b52      	ldr	r3, [pc, #328]	; (80029c8 <HAL_GPIO_Init+0x2cc>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002888:	4a50      	ldr	r2, [pc, #320]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	089b      	lsrs	r3, r3, #2
 800288e:	3302      	adds	r3, #2
 8002890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002894:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	220f      	movs	r2, #15
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4013      	ands	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028b2:	d013      	beq.n	80028dc <HAL_GPIO_Init+0x1e0>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a46      	ldr	r2, [pc, #280]	; (80029d0 <HAL_GPIO_Init+0x2d4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00d      	beq.n	80028d8 <HAL_GPIO_Init+0x1dc>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a45      	ldr	r2, [pc, #276]	; (80029d4 <HAL_GPIO_Init+0x2d8>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d007      	beq.n	80028d4 <HAL_GPIO_Init+0x1d8>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a44      	ldr	r2, [pc, #272]	; (80029d8 <HAL_GPIO_Init+0x2dc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d101      	bne.n	80028d0 <HAL_GPIO_Init+0x1d4>
 80028cc:	2303      	movs	r3, #3
 80028ce:	e006      	b.n	80028de <HAL_GPIO_Init+0x1e2>
 80028d0:	2305      	movs	r3, #5
 80028d2:	e004      	b.n	80028de <HAL_GPIO_Init+0x1e2>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e002      	b.n	80028de <HAL_GPIO_Init+0x1e2>
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <HAL_GPIO_Init+0x1e2>
 80028dc:	2300      	movs	r3, #0
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	f002 0203 	and.w	r2, r2, #3
 80028e4:	0092      	lsls	r2, r2, #2
 80028e6:	4093      	lsls	r3, r2
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028ee:	4937      	ldr	r1, [pc, #220]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	089b      	lsrs	r3, r3, #2
 80028f4:	3302      	adds	r3, #2
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028fc:	4b37      	ldr	r3, [pc, #220]	; (80029dc <HAL_GPIO_Init+0x2e0>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	43db      	mvns	r3, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4313      	orrs	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002920:	4a2e      	ldr	r2, [pc, #184]	; (80029dc <HAL_GPIO_Init+0x2e0>)
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002926:	4b2d      	ldr	r3, [pc, #180]	; (80029dc <HAL_GPIO_Init+0x2e0>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	43db      	mvns	r3, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800294a:	4a24      	ldr	r2, [pc, #144]	; (80029dc <HAL_GPIO_Init+0x2e0>)
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002950:	4b22      	ldr	r3, [pc, #136]	; (80029dc <HAL_GPIO_Init+0x2e0>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	43db      	mvns	r3, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002974:	4a19      	ldr	r2, [pc, #100]	; (80029dc <HAL_GPIO_Init+0x2e0>)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800297a:	4b18      	ldr	r3, [pc, #96]	; (80029dc <HAL_GPIO_Init+0x2e0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	43db      	mvns	r3, r3
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4013      	ands	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800299e:	4a0f      	ldr	r2, [pc, #60]	; (80029dc <HAL_GPIO_Init+0x2e0>)
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	3301      	adds	r3, #1
 80029a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f47f aea9 	bne.w	800270c <HAL_GPIO_Init+0x10>
  }
}
 80029ba:	bf00      	nop
 80029bc:	bf00      	nop
 80029be:	371c      	adds	r7, #28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40010000 	.word	0x40010000
 80029d0:	48000400 	.word	0x48000400
 80029d4:	48000800 	.word	0x48000800
 80029d8:	48000c00 	.word	0x48000c00
 80029dc:	40010400 	.word	0x40010400

080029e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e081      	b.n	8002af6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff fa5c 	bl	8001ec4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2224      	movs	r2, #36	; 0x24
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0201 	bic.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d107      	bne.n	8002a5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	e006      	b.n	8002a68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d104      	bne.n	8002a7a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6812      	ldr	r2, [r2, #0]
 8002a84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69d9      	ldr	r1, [r3, #28]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1a      	ldr	r2, [r3, #32]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	817b      	strh	r3, [r7, #10]
 8002b10:	4613      	mov	r3, r2
 8002b12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	f040 80da 	bne.w	8002cd6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_I2C_Master_Transmit+0x30>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e0d3      	b.n	8002cd8 <HAL_I2C_Master_Transmit+0x1d8>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b38:	f7ff fc28 	bl	800238c <HAL_GetTick>
 8002b3c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	2319      	movs	r3, #25
 8002b44:	2201      	movs	r2, #1
 8002b46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f9e6 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e0be      	b.n	8002cd8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2221      	movs	r2, #33	; 0x21
 8002b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2210      	movs	r2, #16
 8002b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	893a      	ldrh	r2, [r7, #8]
 8002b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	2bff      	cmp	r3, #255	; 0xff
 8002b8a:	d90e      	bls.n	8002baa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	22ff      	movs	r2, #255	; 0xff
 8002b90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	8979      	ldrh	r1, [r7, #10]
 8002b9a:	4b51      	ldr	r3, [pc, #324]	; (8002ce0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fbf6 	bl	8003394 <I2C_TransferConfig>
 8002ba8:	e06c      	b.n	8002c84 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	8979      	ldrh	r1, [r7, #10]
 8002bbc:	4b48      	ldr	r3, [pc, #288]	; (8002ce0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 fbe5 	bl	8003394 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002bca:	e05b      	b.n	8002c84 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	6a39      	ldr	r1, [r7, #32]
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f9f2 	bl	8002fba <I2C_WaitOnTXISFlagUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e07b      	b.n	8002cd8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	781a      	ldrb	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d034      	beq.n	8002c84 <HAL_I2C_Master_Transmit+0x184>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d130      	bne.n	8002c84 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2180      	movs	r1, #128	; 0x80
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 f975 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e04d      	b.n	8002cd8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2bff      	cmp	r3, #255	; 0xff
 8002c44:	d90e      	bls.n	8002c64 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	22ff      	movs	r2, #255	; 0xff
 8002c4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	8979      	ldrh	r1, [r7, #10]
 8002c54:	2300      	movs	r3, #0
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 fb99 	bl	8003394 <I2C_TransferConfig>
 8002c62:	e00f      	b.n	8002c84 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	8979      	ldrh	r1, [r7, #10]
 8002c76:	2300      	movs	r3, #0
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 fb88 	bl	8003394 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d19e      	bne.n	8002bcc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	6a39      	ldr	r1, [r7, #32]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f9d8 	bl	8003048 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e01a      	b.n	8002cd8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6859      	ldr	r1, [r3, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_I2C_Master_Transmit+0x1e4>)
 8002cb6:	400b      	ands	r3, r1
 8002cb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e000      	b.n	8002cd8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002cd6:	2302      	movs	r3, #2
  }
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	80002000 	.word	0x80002000
 8002ce4:	fe00e800 	.word	0xfe00e800

08002ce8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	817b      	strh	r3, [r7, #10]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	f040 80db 	bne.w	8002ec0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_I2C_Master_Receive+0x30>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e0d4      	b.n	8002ec2 <HAL_I2C_Master_Receive+0x1da>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d20:	f7ff fb34 	bl	800238c <HAL_GetTick>
 8002d24:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	2319      	movs	r3, #25
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f8f2 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e0bf      	b.n	8002ec2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2222      	movs	r2, #34	; 0x22
 8002d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2210      	movs	r2, #16
 8002d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	893a      	ldrh	r2, [r7, #8]
 8002d62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2bff      	cmp	r3, #255	; 0xff
 8002d72:	d90e      	bls.n	8002d92 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	22ff      	movs	r2, #255	; 0xff
 8002d78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	8979      	ldrh	r1, [r7, #10]
 8002d82:	4b52      	ldr	r3, [pc, #328]	; (8002ecc <HAL_I2C_Master_Receive+0x1e4>)
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 fb02 	bl	8003394 <I2C_TransferConfig>
 8002d90:	e06d      	b.n	8002e6e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	8979      	ldrh	r1, [r7, #10]
 8002da4:	4b49      	ldr	r3, [pc, #292]	; (8002ecc <HAL_I2C_Master_Receive+0x1e4>)
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 faf1 	bl	8003394 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002db2:	e05c      	b.n	8002e6e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	6a39      	ldr	r1, [r7, #32]
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f989 	bl	80030d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e07c      	b.n	8002ec2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d034      	beq.n	8002e6e <HAL_I2C_Master_Receive+0x186>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d130      	bne.n	8002e6e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	2200      	movs	r2, #0
 8002e14:	2180      	movs	r1, #128	; 0x80
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f880 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e04d      	b.n	8002ec2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2bff      	cmp	r3, #255	; 0xff
 8002e2e:	d90e      	bls.n	8002e4e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	22ff      	movs	r2, #255	; 0xff
 8002e34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	8979      	ldrh	r1, [r7, #10]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 faa4 	bl	8003394 <I2C_TransferConfig>
 8002e4c:	e00f      	b.n	8002e6e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	8979      	ldrh	r1, [r7, #10]
 8002e60:	2300      	movs	r3, #0
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 fa93 	bl	8003394 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d19d      	bne.n	8002db4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	6a39      	ldr	r1, [r7, #32]
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 f8e3 	bl	8003048 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e01a      	b.n	8002ec2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2220      	movs	r2, #32
 8002e92:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6859      	ldr	r1, [r3, #4]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <HAL_I2C_Master_Receive+0x1e8>)
 8002ea0:	400b      	ands	r3, r1
 8002ea2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	e000      	b.n	8002ec2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002ec0:	2302      	movs	r3, #2
  }
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	80002400 	.word	0x80002400
 8002ed0:	fe00e800 	.word	0xfe00e800

08002ed4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d103      	bne.n	8002ef2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d007      	beq.n	8002f10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	619a      	str	r2, [r3, #24]
  }
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f2c:	e031      	b.n	8002f92 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f34:	d02d      	beq.n	8002f92 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f36:	f7ff fa29 	bl	800238c <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d302      	bcc.n	8002f4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d122      	bne.n	8002f92 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699a      	ldr	r2, [r3, #24]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	4013      	ands	r3, r2
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d113      	bne.n	8002f92 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	f043 0220 	orr.w	r2, r3, #32
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e00f      	b.n	8002fb2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699a      	ldr	r2, [r3, #24]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	bf0c      	ite	eq
 8002fa2:	2301      	moveq	r3, #1
 8002fa4:	2300      	movne	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d0be      	beq.n	8002f2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fc6:	e033      	b.n	8003030 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f901 	bl	80031d4 <I2C_IsErrorOccurred>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e031      	b.n	8003040 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe2:	d025      	beq.n	8003030 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe4:	f7ff f9d2 	bl	800238c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d302      	bcc.n	8002ffa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d11a      	bne.n	8003030 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b02      	cmp	r3, #2
 8003006:	d013      	beq.n	8003030 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300c:	f043 0220 	orr.w	r2, r3, #32
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e007      	b.n	8003040 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b02      	cmp	r3, #2
 800303c:	d1c4      	bne.n	8002fc8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003054:	e02f      	b.n	80030b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f8ba 	bl	80031d4 <I2C_IsErrorOccurred>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e02d      	b.n	80030c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306a:	f7ff f98f 	bl	800238c <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	429a      	cmp	r2, r3
 8003078:	d302      	bcc.n	8003080 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d11a      	bne.n	80030b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	2b20      	cmp	r3, #32
 800308c:	d013      	beq.n	80030b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	f043 0220 	orr.w	r2, r3, #32
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e007      	b.n	80030c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d1c8      	bne.n	8003056 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030dc:	e06b      	b.n	80031b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	68b9      	ldr	r1, [r7, #8]
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f876 	bl	80031d4 <I2C_IsErrorOccurred>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e069      	b.n	80031c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d138      	bne.n	8003172 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b04      	cmp	r3, #4
 800310c:	d105      	bne.n	800311a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	e055      	b.n	80031c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b10      	cmp	r3, #16
 8003126:	d107      	bne.n	8003138 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2210      	movs	r2, #16
 800312e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2204      	movs	r2, #4
 8003134:	645a      	str	r2, [r3, #68]	; 0x44
 8003136:	e002      	b.n	800313e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2220      	movs	r2, #32
 8003144:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	4b1f      	ldr	r3, [pc, #124]	; (80031d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003152:	400b      	ands	r3, r1
 8003154:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e029      	b.n	80031c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003172:	f7ff f90b 	bl	800238c <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	429a      	cmp	r2, r3
 8003180:	d302      	bcc.n	8003188 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d116      	bne.n	80031b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b04      	cmp	r3, #4
 8003194:	d00f      	beq.n	80031b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	f043 0220 	orr.w	r2, r3, #32
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e007      	b.n	80031c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d18c      	bne.n	80030de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	fe00e800 	.word	0xfe00e800

080031d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08a      	sub	sp, #40	; 0x28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d068      	beq.n	80032d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2210      	movs	r2, #16
 8003206:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003208:	e049      	b.n	800329e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003210:	d045      	beq.n	800329e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003212:	f7ff f8bb 	bl	800238c <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	429a      	cmp	r2, r3
 8003220:	d302      	bcc.n	8003228 <I2C_IsErrorOccurred+0x54>
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d13a      	bne.n	800329e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003232:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800323a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800324a:	d121      	bne.n	8003290 <I2C_IsErrorOccurred+0xbc>
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003252:	d01d      	beq.n	8003290 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003254:	7cfb      	ldrb	r3, [r7, #19]
 8003256:	2b20      	cmp	r3, #32
 8003258:	d01a      	beq.n	8003290 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003268:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800326a:	f7ff f88f 	bl	800238c <HAL_GetTick>
 800326e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003270:	e00e      	b.n	8003290 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003272:	f7ff f88b 	bl	800238c <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b19      	cmp	r3, #25
 800327e:	d907      	bls.n	8003290 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	f043 0320 	orr.w	r3, r3, #32
 8003286:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800328e:	e006      	b.n	800329e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	2b20      	cmp	r3, #32
 800329c:	d1e9      	bne.n	8003272 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d003      	beq.n	80032b4 <I2C_IsErrorOccurred+0xe0>
 80032ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0aa      	beq.n	800320a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80032b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d103      	bne.n	80032c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2220      	movs	r2, #32
 80032c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	f043 0304 	orr.w	r3, r3, #4
 80032ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00b      	beq.n	80032fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00b      	beq.n	800331e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	f043 0308 	orr.w	r3, r3, #8
 800330c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003316:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00b      	beq.n	8003340 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	f043 0302 	orr.w	r3, r3, #2
 800332e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003338:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003344:	2b00      	cmp	r3, #0
 8003346:	d01c      	beq.n	8003382 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f7ff fdc3 	bl	8002ed4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6859      	ldr	r1, [r3, #4]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <I2C_IsErrorOccurred+0x1bc>)
 800335a:	400b      	ands	r3, r1
 800335c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	431a      	orrs	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003386:	4618      	mov	r0, r3
 8003388:	3728      	adds	r7, #40	; 0x28
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	fe00e800 	.word	0xfe00e800

08003394 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	607b      	str	r3, [r7, #4]
 800339e:	460b      	mov	r3, r1
 80033a0:	817b      	strh	r3, [r7, #10]
 80033a2:	4613      	mov	r3, r2
 80033a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033a6:	897b      	ldrh	r3, [r7, #10]
 80033a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033ac:	7a7b      	ldrb	r3, [r7, #9]
 80033ae:	041b      	lsls	r3, r3, #16
 80033b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	4313      	orrs	r3, r2
 80033be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	0d5b      	lsrs	r3, r3, #21
 80033ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80033d2:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <I2C_TransferConfig+0x60>)
 80033d4:	430b      	orrs	r3, r1
 80033d6:	43db      	mvns	r3, r3
 80033d8:	ea02 0103 	and.w	r1, r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80033e6:	bf00      	nop
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	03ff63ff 	.word	0x03ff63ff

080033f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b20      	cmp	r3, #32
 800340c:	d138      	bne.n	8003480 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003418:	2302      	movs	r3, #2
 800341a:	e032      	b.n	8003482 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2224      	movs	r2, #36	; 0x24
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800344a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6819      	ldr	r1, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	e000      	b.n	8003482 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003480:	2302      	movs	r3, #2
  }
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800348e:	b480      	push	{r7}
 8003490:	b085      	sub	sp, #20
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d139      	bne.n	8003518 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e033      	b.n	800351a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2224      	movs	r2, #36	; 0x24
 80034be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0201 	bic.w	r2, r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	021b      	lsls	r3, r3, #8
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	e000      	b.n	800351a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003518:	2302      	movs	r3, #2
  }
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
	...

08003528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800352e:	af00      	add	r7, sp, #0
 8003530:	1d3b      	adds	r3, r7, #4
 8003532:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003534:	1d3b      	adds	r3, r7, #4
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d102      	bne.n	8003542 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	f000 bef4 	b.w	800432a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003542:	1d3b      	adds	r3, r7, #4
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 816a 	beq.w	8003826 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003552:	4bb3      	ldr	r3, [pc, #716]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b04      	cmp	r3, #4
 800355c:	d00c      	beq.n	8003578 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800355e:	4bb0      	ldr	r3, [pc, #704]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b08      	cmp	r3, #8
 8003568:	d159      	bne.n	800361e <HAL_RCC_OscConfig+0xf6>
 800356a:	4bad      	ldr	r3, [pc, #692]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003576:	d152      	bne.n	800361e <HAL_RCC_OscConfig+0xf6>
 8003578:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800357c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003584:	fa93 f3a3 	rbit	r3, r3
 8003588:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800358c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003590:	fab3 f383 	clz	r3, r3
 8003594:	b2db      	uxtb	r3, r3
 8003596:	095b      	lsrs	r3, r3, #5
 8003598:	b2db      	uxtb	r3, r3
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d102      	bne.n	80035aa <HAL_RCC_OscConfig+0x82>
 80035a4:	4b9e      	ldr	r3, [pc, #632]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	e015      	b.n	80035d6 <HAL_RCC_OscConfig+0xae>
 80035aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035ae:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80035be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035c2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80035c6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80035ca:	fa93 f3a3 	rbit	r3, r3
 80035ce:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80035d2:	4b93      	ldr	r3, [pc, #588]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035da:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80035de:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80035e2:	fa92 f2a2 	rbit	r2, r2
 80035e6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80035ea:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80035ee:	fab2 f282 	clz	r2, r2
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	f042 0220 	orr.w	r2, r2, #32
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	f002 021f 	and.w	r2, r2, #31
 80035fe:	2101      	movs	r1, #1
 8003600:	fa01 f202 	lsl.w	r2, r1, r2
 8003604:	4013      	ands	r3, r2
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 810c 	beq.w	8003824 <HAL_RCC_OscConfig+0x2fc>
 800360c:	1d3b      	adds	r3, r7, #4
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f040 8106 	bne.w	8003824 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	f000 be86 	b.w	800432a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800361e:	1d3b      	adds	r3, r7, #4
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003628:	d106      	bne.n	8003638 <HAL_RCC_OscConfig+0x110>
 800362a:	4b7d      	ldr	r3, [pc, #500]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a7c      	ldr	r2, [pc, #496]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 8003630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	e030      	b.n	800369a <HAL_RCC_OscConfig+0x172>
 8003638:	1d3b      	adds	r3, r7, #4
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10c      	bne.n	800365c <HAL_RCC_OscConfig+0x134>
 8003642:	4b77      	ldr	r3, [pc, #476]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a76      	ldr	r2, [pc, #472]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 8003648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	4b74      	ldr	r3, [pc, #464]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a73      	ldr	r2, [pc, #460]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 8003654:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e01e      	b.n	800369a <HAL_RCC_OscConfig+0x172>
 800365c:	1d3b      	adds	r3, r7, #4
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003666:	d10c      	bne.n	8003682 <HAL_RCC_OscConfig+0x15a>
 8003668:	4b6d      	ldr	r3, [pc, #436]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a6c      	ldr	r2, [pc, #432]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 800366e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	4b6a      	ldr	r3, [pc, #424]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a69      	ldr	r2, [pc, #420]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 800367a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367e:	6013      	str	r3, [r2, #0]
 8003680:	e00b      	b.n	800369a <HAL_RCC_OscConfig+0x172>
 8003682:	4b67      	ldr	r3, [pc, #412]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a66      	ldr	r2, [pc, #408]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 8003688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	4b64      	ldr	r3, [pc, #400]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a63      	ldr	r2, [pc, #396]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 8003694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003698:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800369a:	4b61      	ldr	r3, [pc, #388]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	f023 020f 	bic.w	r2, r3, #15
 80036a2:	1d3b      	adds	r3, r7, #4
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	495d      	ldr	r1, [pc, #372]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036ae:	1d3b      	adds	r3, r7, #4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d059      	beq.n	800376c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b8:	f7fe fe68 	bl	800238c <HAL_GetTick>
 80036bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036c2:	f7fe fe63 	bl	800238c <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b64      	cmp	r3, #100	; 0x64
 80036d0:	d902      	bls.n	80036d8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	f000 be29 	b.w	800432a <HAL_RCC_OscConfig+0xe02>
 80036d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036dc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80036e4:	fa93 f3a3 	rbit	r3, r3
 80036e8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80036ec:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f0:	fab3 f383 	clz	r3, r3
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b01      	cmp	r3, #1
 8003702:	d102      	bne.n	800370a <HAL_RCC_OscConfig+0x1e2>
 8003704:	4b46      	ldr	r3, [pc, #280]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	e015      	b.n	8003736 <HAL_RCC_OscConfig+0x20e>
 800370a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800370e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800371e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003722:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003726:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800372a:	fa93 f3a3 	rbit	r3, r3
 800372e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003732:	4b3b      	ldr	r3, [pc, #236]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800373a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800373e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003742:	fa92 f2a2 	rbit	r2, r2
 8003746:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800374a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800374e:	fab2 f282 	clz	r2, r2
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	f042 0220 	orr.w	r2, r2, #32
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	f002 021f 	and.w	r2, r2, #31
 800375e:	2101      	movs	r1, #1
 8003760:	fa01 f202 	lsl.w	r2, r1, r2
 8003764:	4013      	ands	r3, r2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0ab      	beq.n	80036c2 <HAL_RCC_OscConfig+0x19a>
 800376a:	e05c      	b.n	8003826 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376c:	f7fe fe0e 	bl	800238c <HAL_GetTick>
 8003770:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003774:	e00a      	b.n	800378c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003776:	f7fe fe09 	bl	800238c <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b64      	cmp	r3, #100	; 0x64
 8003784:	d902      	bls.n	800378c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	f000 bdcf 	b.w	800432a <HAL_RCC_OscConfig+0xe02>
 800378c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003790:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003798:	fa93 f3a3 	rbit	r3, r3
 800379c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80037a0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a4:	fab3 f383 	clz	r3, r3
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d102      	bne.n	80037be <HAL_RCC_OscConfig+0x296>
 80037b8:	4b19      	ldr	r3, [pc, #100]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	e015      	b.n	80037ea <HAL_RCC_OscConfig+0x2c2>
 80037be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80037ca:	fa93 f3a3 	rbit	r3, r3
 80037ce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80037d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037d6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80037da:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80037de:	fa93 f3a3 	rbit	r3, r3
 80037e2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80037e6:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <HAL_RCC_OscConfig+0x2f8>)
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037ee:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80037f2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80037f6:	fa92 f2a2 	rbit	r2, r2
 80037fa:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80037fe:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003802:	fab2 f282 	clz	r2, r2
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	f042 0220 	orr.w	r2, r2, #32
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	f002 021f 	and.w	r2, r2, #31
 8003812:	2101      	movs	r1, #1
 8003814:	fa01 f202 	lsl.w	r2, r1, r2
 8003818:	4013      	ands	r3, r2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1ab      	bne.n	8003776 <HAL_RCC_OscConfig+0x24e>
 800381e:	e002      	b.n	8003826 <HAL_RCC_OscConfig+0x2fe>
 8003820:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003826:	1d3b      	adds	r3, r7, #4
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 816f 	beq.w	8003b14 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003836:	4bd0      	ldr	r3, [pc, #832]	; (8003b78 <HAL_RCC_OscConfig+0x650>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00b      	beq.n	800385a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003842:	4bcd      	ldr	r3, [pc, #820]	; (8003b78 <HAL_RCC_OscConfig+0x650>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b08      	cmp	r3, #8
 800384c:	d16c      	bne.n	8003928 <HAL_RCC_OscConfig+0x400>
 800384e:	4bca      	ldr	r3, [pc, #808]	; (8003b78 <HAL_RCC_OscConfig+0x650>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d166      	bne.n	8003928 <HAL_RCC_OscConfig+0x400>
 800385a:	2302      	movs	r3, #2
 800385c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003860:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003864:	fa93 f3a3 	rbit	r3, r3
 8003868:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800386c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003870:	fab3 f383 	clz	r3, r3
 8003874:	b2db      	uxtb	r3, r3
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	b2db      	uxtb	r3, r3
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b01      	cmp	r3, #1
 8003882:	d102      	bne.n	800388a <HAL_RCC_OscConfig+0x362>
 8003884:	4bbc      	ldr	r3, [pc, #752]	; (8003b78 <HAL_RCC_OscConfig+0x650>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	e013      	b.n	80038b2 <HAL_RCC_OscConfig+0x38a>
 800388a:	2302      	movs	r3, #2
 800388c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003890:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003894:	fa93 f3a3 	rbit	r3, r3
 8003898:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800389c:	2302      	movs	r3, #2
 800389e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80038a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038a6:	fa93 f3a3 	rbit	r3, r3
 80038aa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80038ae:	4bb2      	ldr	r3, [pc, #712]	; (8003b78 <HAL_RCC_OscConfig+0x650>)
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	2202      	movs	r2, #2
 80038b4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80038b8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80038bc:	fa92 f2a2 	rbit	r2, r2
 80038c0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80038c4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80038c8:	fab2 f282 	clz	r2, r2
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	f042 0220 	orr.w	r2, r2, #32
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	f002 021f 	and.w	r2, r2, #31
 80038d8:	2101      	movs	r1, #1
 80038da:	fa01 f202 	lsl.w	r2, r1, r2
 80038de:	4013      	ands	r3, r2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d007      	beq.n	80038f4 <HAL_RCC_OscConfig+0x3cc>
 80038e4:	1d3b      	adds	r3, r7, #4
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d002      	beq.n	80038f4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	f000 bd1b 	b.w	800432a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f4:	4ba0      	ldr	r3, [pc, #640]	; (8003b78 <HAL_RCC_OscConfig+0x650>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038fc:	1d3b      	adds	r3, r7, #4
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	21f8      	movs	r1, #248	; 0xf8
 8003904:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003908:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800390c:	fa91 f1a1 	rbit	r1, r1
 8003910:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003914:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003918:	fab1 f181 	clz	r1, r1
 800391c:	b2c9      	uxtb	r1, r1
 800391e:	408b      	lsls	r3, r1
 8003920:	4995      	ldr	r1, [pc, #596]	; (8003b78 <HAL_RCC_OscConfig+0x650>)
 8003922:	4313      	orrs	r3, r2
 8003924:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003926:	e0f5      	b.n	8003b14 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003928:	1d3b      	adds	r3, r7, #4
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 8085 	beq.w	8003a3e <HAL_RCC_OscConfig+0x516>
 8003934:	2301      	movs	r3, #1
 8003936:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800393e:	fa93 f3a3 	rbit	r3, r3
 8003942:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003946:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800394a:	fab3 f383 	clz	r3, r3
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003954:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	461a      	mov	r2, r3
 800395c:	2301      	movs	r3, #1
 800395e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003960:	f7fe fd14 	bl	800238c <HAL_GetTick>
 8003964:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003968:	e00a      	b.n	8003980 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800396a:	f7fe fd0f 	bl	800238c <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d902      	bls.n	8003980 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	f000 bcd5 	b.w	800432a <HAL_RCC_OscConfig+0xe02>
 8003980:	2302      	movs	r3, #2
 8003982:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003986:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800398a:	fa93 f3a3 	rbit	r3, r3
 800398e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003992:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003996:	fab3 f383 	clz	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d102      	bne.n	80039b0 <HAL_RCC_OscConfig+0x488>
 80039aa:	4b73      	ldr	r3, [pc, #460]	; (8003b78 <HAL_RCC_OscConfig+0x650>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	e013      	b.n	80039d8 <HAL_RCC_OscConfig+0x4b0>
 80039b0:	2302      	movs	r3, #2
 80039b2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80039ba:	fa93 f3a3 	rbit	r3, r3
 80039be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80039c2:	2302      	movs	r3, #2
 80039c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80039c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80039cc:	fa93 f3a3 	rbit	r3, r3
 80039d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80039d4:	4b68      	ldr	r3, [pc, #416]	; (8003b78 <HAL_RCC_OscConfig+0x650>)
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	2202      	movs	r2, #2
 80039da:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80039de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80039e2:	fa92 f2a2 	rbit	r2, r2
 80039e6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80039ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80039ee:	fab2 f282 	clz	r2, r2
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	f042 0220 	orr.w	r2, r2, #32
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	f002 021f 	and.w	r2, r2, #31
 80039fe:	2101      	movs	r1, #1
 8003a00:	fa01 f202 	lsl.w	r2, r1, r2
 8003a04:	4013      	ands	r3, r2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0af      	beq.n	800396a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a0a:	4b5b      	ldr	r3, [pc, #364]	; (8003b78 <HAL_RCC_OscConfig+0x650>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a12:	1d3b      	adds	r3, r7, #4
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	21f8      	movs	r1, #248	; 0xf8
 8003a1a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003a22:	fa91 f1a1 	rbit	r1, r1
 8003a26:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003a2a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003a2e:	fab1 f181 	clz	r1, r1
 8003a32:	b2c9      	uxtb	r1, r1
 8003a34:	408b      	lsls	r3, r1
 8003a36:	4950      	ldr	r1, [pc, #320]	; (8003b78 <HAL_RCC_OscConfig+0x650>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	600b      	str	r3, [r1, #0]
 8003a3c:	e06a      	b.n	8003b14 <HAL_RCC_OscConfig+0x5ec>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a44:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003a48:	fa93 f3a3 	rbit	r3, r3
 8003a4c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003a50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a54:	fab3 f383 	clz	r3, r3
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a5e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	461a      	mov	r2, r3
 8003a66:	2300      	movs	r3, #0
 8003a68:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6a:	f7fe fc8f 	bl	800238c <HAL_GetTick>
 8003a6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a72:	e00a      	b.n	8003a8a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a74:	f7fe fc8a 	bl	800238c <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d902      	bls.n	8003a8a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	f000 bc50 	b.w	800432a <HAL_RCC_OscConfig+0xe02>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a94:	fa93 f3a3 	rbit	r3, r3
 8003a98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa0:	fab3 f383 	clz	r3, r3
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d102      	bne.n	8003aba <HAL_RCC_OscConfig+0x592>
 8003ab4:	4b30      	ldr	r3, [pc, #192]	; (8003b78 <HAL_RCC_OscConfig+0x650>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	e013      	b.n	8003ae2 <HAL_RCC_OscConfig+0x5ba>
 8003aba:	2302      	movs	r3, #2
 8003abc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ac4:	fa93 f3a3 	rbit	r3, r3
 8003ac8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003acc:	2302      	movs	r3, #2
 8003ace:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003ad2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ad6:	fa93 f3a3 	rbit	r3, r3
 8003ada:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003ade:	4b26      	ldr	r3, [pc, #152]	; (8003b78 <HAL_RCC_OscConfig+0x650>)
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003ae8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003aec:	fa92 f2a2 	rbit	r2, r2
 8003af0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003af4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003af8:	fab2 f282 	clz	r2, r2
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	f042 0220 	orr.w	r2, r2, #32
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	f002 021f 	and.w	r2, r2, #31
 8003b08:	2101      	movs	r1, #1
 8003b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1af      	bne.n	8003a74 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b14:	1d3b      	adds	r3, r7, #4
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 80da 	beq.w	8003cd8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b24:	1d3b      	adds	r3, r7, #4
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d069      	beq.n	8003c02 <HAL_RCC_OscConfig+0x6da>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b34:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003b38:	fa93 f3a3 	rbit	r3, r3
 8003b3c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b44:	fab3 f383 	clz	r3, r3
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_RCC_OscConfig+0x654>)
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	461a      	mov	r2, r3
 8003b54:	2301      	movs	r3, #1
 8003b56:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b58:	f7fe fc18 	bl	800238c <HAL_GetTick>
 8003b5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b60:	e00e      	b.n	8003b80 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b62:	f7fe fc13 	bl	800238c <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d906      	bls.n	8003b80 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e3d9      	b.n	800432a <HAL_RCC_OscConfig+0xe02>
 8003b76:	bf00      	nop
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	10908120 	.word	0x10908120
 8003b80:	2302      	movs	r3, #2
 8003b82:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b8a:	fa93 f3a3 	rbit	r3, r3
 8003b8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003b92:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003b96:	2202      	movs	r2, #2
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	fa93 f2a3 	rbit	r2, r3
 8003ba4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003bae:	2202      	movs	r2, #2
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	fa93 f2a3 	rbit	r2, r3
 8003bbc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003bc0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc2:	4ba5      	ldr	r3, [pc, #660]	; (8003e58 <HAL_RCC_OscConfig+0x930>)
 8003bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bc6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003bca:	2102      	movs	r1, #2
 8003bcc:	6019      	str	r1, [r3, #0]
 8003bce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	fa93 f1a3 	rbit	r1, r3
 8003bd8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003bdc:	6019      	str	r1, [r3, #0]
  return result;
 8003bde:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	fab3 f383 	clz	r3, r3
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	f003 031f 	and.w	r3, r3, #31
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0b0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x63a>
 8003c00:	e06a      	b.n	8003cd8 <HAL_RCC_OscConfig+0x7b0>
 8003c02:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003c06:	2201      	movs	r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	fa93 f2a3 	rbit	r2, r3
 8003c14:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003c18:	601a      	str	r2, [r3, #0]
  return result;
 8003c1a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003c1e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c20:	fab3 f383 	clz	r3, r3
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	461a      	mov	r2, r3
 8003c28:	4b8c      	ldr	r3, [pc, #560]	; (8003e5c <HAL_RCC_OscConfig+0x934>)
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	461a      	mov	r2, r3
 8003c30:	2300      	movs	r3, #0
 8003c32:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c34:	f7fe fbaa 	bl	800238c <HAL_GetTick>
 8003c38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c3c:	e009      	b.n	8003c52 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c3e:	f7fe fba5 	bl	800238c <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e36b      	b.n	800432a <HAL_RCC_OscConfig+0xe02>
 8003c52:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003c56:	2202      	movs	r2, #2
 8003c58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	fa93 f2a3 	rbit	r2, r3
 8003c64:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003c6e:	2202      	movs	r2, #2
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	fa93 f2a3 	rbit	r2, r3
 8003c7c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003c86:	2202      	movs	r2, #2
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	fa93 f2a3 	rbit	r2, r3
 8003c94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003c98:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c9a:	4b6f      	ldr	r3, [pc, #444]	; (8003e58 <HAL_RCC_OscConfig+0x930>)
 8003c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c9e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003ca2:	2102      	movs	r1, #2
 8003ca4:	6019      	str	r1, [r3, #0]
 8003ca6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	fa93 f1a3 	rbit	r1, r3
 8003cb0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003cb4:	6019      	str	r1, [r3, #0]
  return result;
 8003cb6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	fab3 f383 	clz	r3, r3
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	f003 031f 	and.w	r3, r3, #31
 8003ccc:	2101      	movs	r1, #1
 8003cce:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1b2      	bne.n	8003c3e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd8:	1d3b      	adds	r3, r7, #4
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 8158 	beq.w	8003f98 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cee:	4b5a      	ldr	r3, [pc, #360]	; (8003e58 <HAL_RCC_OscConfig+0x930>)
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d112      	bne.n	8003d20 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cfa:	4b57      	ldr	r3, [pc, #348]	; (8003e58 <HAL_RCC_OscConfig+0x930>)
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	4a56      	ldr	r2, [pc, #344]	; (8003e58 <HAL_RCC_OscConfig+0x930>)
 8003d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d04:	61d3      	str	r3, [r2, #28]
 8003d06:	4b54      	ldr	r3, [pc, #336]	; (8003e58 <HAL_RCC_OscConfig+0x930>)
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003d0e:	f107 0308 	add.w	r3, r7, #8
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	f107 0308 	add.w	r3, r7, #8
 8003d18:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d20:	4b4f      	ldr	r3, [pc, #316]	; (8003e60 <HAL_RCC_OscConfig+0x938>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d11a      	bne.n	8003d62 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d2c:	4b4c      	ldr	r3, [pc, #304]	; (8003e60 <HAL_RCC_OscConfig+0x938>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a4b      	ldr	r2, [pc, #300]	; (8003e60 <HAL_RCC_OscConfig+0x938>)
 8003d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d36:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d38:	f7fe fb28 	bl	800238c <HAL_GetTick>
 8003d3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d40:	e009      	b.n	8003d56 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d42:	f7fe fb23 	bl	800238c <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b64      	cmp	r3, #100	; 0x64
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e2e9      	b.n	800432a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d56:	4b42      	ldr	r3, [pc, #264]	; (8003e60 <HAL_RCC_OscConfig+0x938>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0ef      	beq.n	8003d42 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d62:	1d3b      	adds	r3, r7, #4
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d106      	bne.n	8003d7a <HAL_RCC_OscConfig+0x852>
 8003d6c:	4b3a      	ldr	r3, [pc, #232]	; (8003e58 <HAL_RCC_OscConfig+0x930>)
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	4a39      	ldr	r2, [pc, #228]	; (8003e58 <HAL_RCC_OscConfig+0x930>)
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	6213      	str	r3, [r2, #32]
 8003d78:	e02f      	b.n	8003dda <HAL_RCC_OscConfig+0x8b2>
 8003d7a:	1d3b      	adds	r3, r7, #4
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10c      	bne.n	8003d9e <HAL_RCC_OscConfig+0x876>
 8003d84:	4b34      	ldr	r3, [pc, #208]	; (8003e58 <HAL_RCC_OscConfig+0x930>)
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	4a33      	ldr	r2, [pc, #204]	; (8003e58 <HAL_RCC_OscConfig+0x930>)
 8003d8a:	f023 0301 	bic.w	r3, r3, #1
 8003d8e:	6213      	str	r3, [r2, #32]
 8003d90:	4b31      	ldr	r3, [pc, #196]	; (8003e58 <HAL_RCC_OscConfig+0x930>)
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	4a30      	ldr	r2, [pc, #192]	; (8003e58 <HAL_RCC_OscConfig+0x930>)
 8003d96:	f023 0304 	bic.w	r3, r3, #4
 8003d9a:	6213      	str	r3, [r2, #32]
 8003d9c:	e01d      	b.n	8003dda <HAL_RCC_OscConfig+0x8b2>
 8003d9e:	1d3b      	adds	r3, r7, #4
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	2b05      	cmp	r3, #5
 8003da6:	d10c      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x89a>
 8003da8:	4b2b      	ldr	r3, [pc, #172]	; (8003e58 <HAL_RCC_OscConfig+0x930>)
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	4a2a      	ldr	r2, [pc, #168]	; (8003e58 <HAL_RCC_OscConfig+0x930>)
 8003dae:	f043 0304 	orr.w	r3, r3, #4
 8003db2:	6213      	str	r3, [r2, #32]
 8003db4:	4b28      	ldr	r3, [pc, #160]	; (8003e58 <HAL_RCC_OscConfig+0x930>)
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	4a27      	ldr	r2, [pc, #156]	; (8003e58 <HAL_RCC_OscConfig+0x930>)
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	6213      	str	r3, [r2, #32]
 8003dc0:	e00b      	b.n	8003dda <HAL_RCC_OscConfig+0x8b2>
 8003dc2:	4b25      	ldr	r3, [pc, #148]	; (8003e58 <HAL_RCC_OscConfig+0x930>)
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	4a24      	ldr	r2, [pc, #144]	; (8003e58 <HAL_RCC_OscConfig+0x930>)
 8003dc8:	f023 0301 	bic.w	r3, r3, #1
 8003dcc:	6213      	str	r3, [r2, #32]
 8003dce:	4b22      	ldr	r3, [pc, #136]	; (8003e58 <HAL_RCC_OscConfig+0x930>)
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	4a21      	ldr	r2, [pc, #132]	; (8003e58 <HAL_RCC_OscConfig+0x930>)
 8003dd4:	f023 0304 	bic.w	r3, r3, #4
 8003dd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dda:	1d3b      	adds	r3, r7, #4
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d06b      	beq.n	8003ebc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de4:	f7fe fad2 	bl	800238c <HAL_GetTick>
 8003de8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dec:	e00b      	b.n	8003e06 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fe facd 	bl	800238c <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e291      	b.n	800432a <HAL_RCC_OscConfig+0xe02>
 8003e06:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	fa93 f2a3 	rbit	r2, r3
 8003e18:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003e22:	2202      	movs	r2, #2
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	fa93 f2a3 	rbit	r2, r3
 8003e30:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003e34:	601a      	str	r2, [r3, #0]
  return result;
 8003e36:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003e3a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e3c:	fab3 f383 	clz	r3, r3
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	f043 0302 	orr.w	r3, r3, #2
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d109      	bne.n	8003e64 <HAL_RCC_OscConfig+0x93c>
 8003e50:	4b01      	ldr	r3, [pc, #4]	; (8003e58 <HAL_RCC_OscConfig+0x930>)
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	e014      	b.n	8003e80 <HAL_RCC_OscConfig+0x958>
 8003e56:	bf00      	nop
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	10908120 	.word	0x10908120
 8003e60:	40007000 	.word	0x40007000
 8003e64:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003e68:	2202      	movs	r2, #2
 8003e6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	fa93 f2a3 	rbit	r2, r3
 8003e76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	4bbb      	ldr	r3, [pc, #748]	; (800416c <HAL_RCC_OscConfig+0xc44>)
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003e84:	2102      	movs	r1, #2
 8003e86:	6011      	str	r1, [r2, #0]
 8003e88:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003e8c:	6812      	ldr	r2, [r2, #0]
 8003e8e:	fa92 f1a2 	rbit	r1, r2
 8003e92:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003e96:	6011      	str	r1, [r2, #0]
  return result;
 8003e98:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003e9c:	6812      	ldr	r2, [r2, #0]
 8003e9e:	fab2 f282 	clz	r2, r2
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	f002 021f 	and.w	r2, r2, #31
 8003eae:	2101      	movs	r1, #1
 8003eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d099      	beq.n	8003dee <HAL_RCC_OscConfig+0x8c6>
 8003eba:	e063      	b.n	8003f84 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ebc:	f7fe fa66 	bl	800238c <HAL_GetTick>
 8003ec0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec4:	e00b      	b.n	8003ede <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec6:	f7fe fa61 	bl	800238c <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e225      	b.n	800432a <HAL_RCC_OscConfig+0xe02>
 8003ede:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	fa93 f2a3 	rbit	r2, r3
 8003ef0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003efa:	2202      	movs	r2, #2
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	fa93 f2a3 	rbit	r2, r3
 8003f08:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003f0c:	601a      	str	r2, [r3, #0]
  return result;
 8003f0e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003f12:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f14:	fab3 f383 	clz	r3, r3
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	f043 0302 	orr.w	r3, r3, #2
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d102      	bne.n	8003f2e <HAL_RCC_OscConfig+0xa06>
 8003f28:	4b90      	ldr	r3, [pc, #576]	; (800416c <HAL_RCC_OscConfig+0xc44>)
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	e00d      	b.n	8003f4a <HAL_RCC_OscConfig+0xa22>
 8003f2e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003f32:	2202      	movs	r2, #2
 8003f34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f36:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	fa93 f2a3 	rbit	r2, r3
 8003f40:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	4b89      	ldr	r3, [pc, #548]	; (800416c <HAL_RCC_OscConfig+0xc44>)
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003f4e:	2102      	movs	r1, #2
 8003f50:	6011      	str	r1, [r2, #0]
 8003f52:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003f56:	6812      	ldr	r2, [r2, #0]
 8003f58:	fa92 f1a2 	rbit	r1, r2
 8003f5c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003f60:	6011      	str	r1, [r2, #0]
  return result;
 8003f62:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003f66:	6812      	ldr	r2, [r2, #0]
 8003f68:	fab2 f282 	clz	r2, r2
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	f002 021f 	and.w	r2, r2, #31
 8003f78:	2101      	movs	r1, #1
 8003f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f7e:	4013      	ands	r3, r2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1a0      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f84:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d105      	bne.n	8003f98 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f8c:	4b77      	ldr	r3, [pc, #476]	; (800416c <HAL_RCC_OscConfig+0xc44>)
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	4a76      	ldr	r2, [pc, #472]	; (800416c <HAL_RCC_OscConfig+0xc44>)
 8003f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f96:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f98:	1d3b      	adds	r3, r7, #4
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 81c2 	beq.w	8004328 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fa4:	4b71      	ldr	r3, [pc, #452]	; (800416c <HAL_RCC_OscConfig+0xc44>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 030c 	and.w	r3, r3, #12
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	f000 819c 	beq.w	80042ea <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fb2:	1d3b      	adds	r3, r7, #4
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	f040 8114 	bne.w	80041e6 <HAL_RCC_OscConfig+0xcbe>
 8003fbe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003fc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	fa93 f2a3 	rbit	r2, r3
 8003fd2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003fd6:	601a      	str	r2, [r3, #0]
  return result;
 8003fd8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003fdc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fde:	fab3 f383 	clz	r3, r3
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fe8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	461a      	mov	r2, r3
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff4:	f7fe f9ca 	bl	800238c <HAL_GetTick>
 8003ff8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ffc:	e009      	b.n	8004012 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ffe:	f7fe f9c5 	bl	800238c <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e18b      	b.n	800432a <HAL_RCC_OscConfig+0xe02>
 8004012:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004016:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800401a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	fa93 f2a3 	rbit	r2, r3
 8004026:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800402a:	601a      	str	r2, [r3, #0]
  return result;
 800402c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004030:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004032:	fab3 f383 	clz	r3, r3
 8004036:	b2db      	uxtb	r3, r3
 8004038:	095b      	lsrs	r3, r3, #5
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b01      	cmp	r3, #1
 8004044:	d102      	bne.n	800404c <HAL_RCC_OscConfig+0xb24>
 8004046:	4b49      	ldr	r3, [pc, #292]	; (800416c <HAL_RCC_OscConfig+0xc44>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	e01b      	b.n	8004084 <HAL_RCC_OscConfig+0xb5c>
 800404c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004050:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004054:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004056:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	fa93 f2a3 	rbit	r2, r3
 8004060:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800406a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	fa93 f2a3 	rbit	r2, r3
 800407a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	4b3a      	ldr	r3, [pc, #232]	; (800416c <HAL_RCC_OscConfig+0xc44>)
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004088:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800408c:	6011      	str	r1, [r2, #0]
 800408e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004092:	6812      	ldr	r2, [r2, #0]
 8004094:	fa92 f1a2 	rbit	r1, r2
 8004098:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800409c:	6011      	str	r1, [r2, #0]
  return result;
 800409e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	fab2 f282 	clz	r2, r2
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	f042 0220 	orr.w	r2, r2, #32
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	f002 021f 	and.w	r2, r2, #31
 80040b4:	2101      	movs	r1, #1
 80040b6:	fa01 f202 	lsl.w	r2, r1, r2
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d19e      	bne.n	8003ffe <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040c0:	4b2a      	ldr	r3, [pc, #168]	; (800416c <HAL_RCC_OscConfig+0xc44>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80040c8:	1d3b      	adds	r3, r7, #4
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80040ce:	1d3b      	adds	r3, r7, #4
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	430b      	orrs	r3, r1
 80040d6:	4925      	ldr	r1, [pc, #148]	; (800416c <HAL_RCC_OscConfig+0xc44>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	604b      	str	r3, [r1, #4]
 80040dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80040e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	fa93 f2a3 	rbit	r2, r3
 80040f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040f4:	601a      	str	r2, [r3, #0]
  return result;
 80040f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040fa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040fc:	fab3 f383 	clz	r3, r3
 8004100:	b2db      	uxtb	r3, r3
 8004102:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004106:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	461a      	mov	r2, r3
 800410e:	2301      	movs	r3, #1
 8004110:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004112:	f7fe f93b 	bl	800238c <HAL_GetTick>
 8004116:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800411a:	e009      	b.n	8004130 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800411c:	f7fe f936 	bl	800238c <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e0fc      	b.n	800432a <HAL_RCC_OscConfig+0xe02>
 8004130:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004134:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004138:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	fa93 f2a3 	rbit	r2, r3
 8004144:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004148:	601a      	str	r2, [r3, #0]
  return result;
 800414a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800414e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004150:	fab3 f383 	clz	r3, r3
 8004154:	b2db      	uxtb	r3, r3
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	b2db      	uxtb	r3, r3
 800415a:	f043 0301 	orr.w	r3, r3, #1
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b01      	cmp	r3, #1
 8004162:	d105      	bne.n	8004170 <HAL_RCC_OscConfig+0xc48>
 8004164:	4b01      	ldr	r3, [pc, #4]	; (800416c <HAL_RCC_OscConfig+0xc44>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	e01e      	b.n	80041a8 <HAL_RCC_OscConfig+0xc80>
 800416a:	bf00      	nop
 800416c:	40021000 	.word	0x40021000
 8004170:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004174:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004178:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	fa93 f2a3 	rbit	r2, r3
 8004184:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800418e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	fa93 f2a3 	rbit	r2, r3
 800419e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	4b63      	ldr	r3, [pc, #396]	; (8004334 <HAL_RCC_OscConfig+0xe0c>)
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80041ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80041b0:	6011      	str	r1, [r2, #0]
 80041b2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80041b6:	6812      	ldr	r2, [r2, #0]
 80041b8:	fa92 f1a2 	rbit	r1, r2
 80041bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80041c0:	6011      	str	r1, [r2, #0]
  return result;
 80041c2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	fab2 f282 	clz	r2, r2
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	f042 0220 	orr.w	r2, r2, #32
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	f002 021f 	and.w	r2, r2, #31
 80041d8:	2101      	movs	r1, #1
 80041da:	fa01 f202 	lsl.w	r2, r1, r2
 80041de:	4013      	ands	r3, r2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d09b      	beq.n	800411c <HAL_RCC_OscConfig+0xbf4>
 80041e4:	e0a0      	b.n	8004328 <HAL_RCC_OscConfig+0xe00>
 80041e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	fa93 f2a3 	rbit	r2, r3
 80041fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041fe:	601a      	str	r2, [r3, #0]
  return result;
 8004200:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004204:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004206:	fab3 f383 	clz	r3, r3
 800420a:	b2db      	uxtb	r3, r3
 800420c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004210:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	461a      	mov	r2, r3
 8004218:	2300      	movs	r3, #0
 800421a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7fe f8b6 	bl	800238c <HAL_GetTick>
 8004220:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004224:	e009      	b.n	800423a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004226:	f7fe f8b1 	bl	800238c <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e077      	b.n	800432a <HAL_RCC_OscConfig+0xe02>
 800423a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800423e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004242:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004244:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	fa93 f2a3 	rbit	r2, r3
 800424e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004252:	601a      	str	r2, [r3, #0]
  return result;
 8004254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004258:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800425a:	fab3 f383 	clz	r3, r3
 800425e:	b2db      	uxtb	r3, r3
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	b2db      	uxtb	r3, r3
 8004264:	f043 0301 	orr.w	r3, r3, #1
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b01      	cmp	r3, #1
 800426c:	d102      	bne.n	8004274 <HAL_RCC_OscConfig+0xd4c>
 800426e:	4b31      	ldr	r3, [pc, #196]	; (8004334 <HAL_RCC_OscConfig+0xe0c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	e01b      	b.n	80042ac <HAL_RCC_OscConfig+0xd84>
 8004274:	f107 0320 	add.w	r3, r7, #32
 8004278:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800427c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427e:	f107 0320 	add.w	r3, r7, #32
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	fa93 f2a3 	rbit	r2, r3
 8004288:	f107 031c 	add.w	r3, r7, #28
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	f107 0318 	add.w	r3, r7, #24
 8004292:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	f107 0318 	add.w	r3, r7, #24
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	fa93 f2a3 	rbit	r2, r3
 80042a2:	f107 0314 	add.w	r3, r7, #20
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	4b22      	ldr	r3, [pc, #136]	; (8004334 <HAL_RCC_OscConfig+0xe0c>)
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	f107 0210 	add.w	r2, r7, #16
 80042b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80042b4:	6011      	str	r1, [r2, #0]
 80042b6:	f107 0210 	add.w	r2, r7, #16
 80042ba:	6812      	ldr	r2, [r2, #0]
 80042bc:	fa92 f1a2 	rbit	r1, r2
 80042c0:	f107 020c 	add.w	r2, r7, #12
 80042c4:	6011      	str	r1, [r2, #0]
  return result;
 80042c6:	f107 020c 	add.w	r2, r7, #12
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	fab2 f282 	clz	r2, r2
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	f042 0220 	orr.w	r2, r2, #32
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	f002 021f 	and.w	r2, r2, #31
 80042dc:	2101      	movs	r1, #1
 80042de:	fa01 f202 	lsl.w	r2, r1, r2
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d19e      	bne.n	8004226 <HAL_RCC_OscConfig+0xcfe>
 80042e8:	e01e      	b.n	8004328 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ea:	1d3b      	adds	r3, r7, #4
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e018      	b.n	800432a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042f8:	4b0e      	ldr	r3, [pc, #56]	; (8004334 <HAL_RCC_OscConfig+0xe0c>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004300:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004304:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004308:	1d3b      	adds	r3, r7, #4
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	429a      	cmp	r2, r3
 8004310:	d108      	bne.n	8004324 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004312:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004316:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800431a:	1d3b      	adds	r3, r7, #4
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004320:	429a      	cmp	r2, r3
 8004322:	d001      	beq.n	8004328 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40021000 	.word	0x40021000

08004338 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b09e      	sub	sp, #120	; 0x78
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e162      	b.n	8004616 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004350:	4b90      	ldr	r3, [pc, #576]	; (8004594 <HAL_RCC_ClockConfig+0x25c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d910      	bls.n	8004380 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435e:	4b8d      	ldr	r3, [pc, #564]	; (8004594 <HAL_RCC_ClockConfig+0x25c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f023 0207 	bic.w	r2, r3, #7
 8004366:	498b      	ldr	r1, [pc, #556]	; (8004594 <HAL_RCC_ClockConfig+0x25c>)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	4313      	orrs	r3, r2
 800436c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436e:	4b89      	ldr	r3, [pc, #548]	; (8004594 <HAL_RCC_ClockConfig+0x25c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d001      	beq.n	8004380 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e14a      	b.n	8004616 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d008      	beq.n	800439e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800438c:	4b82      	ldr	r3, [pc, #520]	; (8004598 <HAL_RCC_ClockConfig+0x260>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	497f      	ldr	r1, [pc, #508]	; (8004598 <HAL_RCC_ClockConfig+0x260>)
 800439a:	4313      	orrs	r3, r2
 800439c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 80dc 	beq.w	8004564 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d13c      	bne.n	800442e <HAL_RCC_ClockConfig+0xf6>
 80043b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043bc:	fa93 f3a3 	rbit	r3, r3
 80043c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80043c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c4:	fab3 f383 	clz	r3, r3
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d102      	bne.n	80043de <HAL_RCC_ClockConfig+0xa6>
 80043d8:	4b6f      	ldr	r3, [pc, #444]	; (8004598 <HAL_RCC_ClockConfig+0x260>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	e00f      	b.n	80043fe <HAL_RCC_ClockConfig+0xc6>
 80043de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043e6:	fa93 f3a3 	rbit	r3, r3
 80043ea:	667b      	str	r3, [r7, #100]	; 0x64
 80043ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043f0:	663b      	str	r3, [r7, #96]	; 0x60
 80043f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043f4:	fa93 f3a3 	rbit	r3, r3
 80043f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043fa:	4b67      	ldr	r3, [pc, #412]	; (8004598 <HAL_RCC_ClockConfig+0x260>)
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004402:	65ba      	str	r2, [r7, #88]	; 0x58
 8004404:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004406:	fa92 f2a2 	rbit	r2, r2
 800440a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800440c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800440e:	fab2 f282 	clz	r2, r2
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	f042 0220 	orr.w	r2, r2, #32
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	f002 021f 	and.w	r2, r2, #31
 800441e:	2101      	movs	r1, #1
 8004420:	fa01 f202 	lsl.w	r2, r1, r2
 8004424:	4013      	ands	r3, r2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d17b      	bne.n	8004522 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e0f3      	b.n	8004616 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b02      	cmp	r3, #2
 8004434:	d13c      	bne.n	80044b0 <HAL_RCC_ClockConfig+0x178>
 8004436:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800443a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800443e:	fa93 f3a3 	rbit	r3, r3
 8004442:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004446:	fab3 f383 	clz	r3, r3
 800444a:	b2db      	uxtb	r3, r3
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	b2db      	uxtb	r3, r3
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b01      	cmp	r3, #1
 8004458:	d102      	bne.n	8004460 <HAL_RCC_ClockConfig+0x128>
 800445a:	4b4f      	ldr	r3, [pc, #316]	; (8004598 <HAL_RCC_ClockConfig+0x260>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	e00f      	b.n	8004480 <HAL_RCC_ClockConfig+0x148>
 8004460:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004464:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004468:	fa93 f3a3 	rbit	r3, r3
 800446c:	647b      	str	r3, [r7, #68]	; 0x44
 800446e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004472:	643b      	str	r3, [r7, #64]	; 0x40
 8004474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004476:	fa93 f3a3 	rbit	r3, r3
 800447a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800447c:	4b46      	ldr	r3, [pc, #280]	; (8004598 <HAL_RCC_ClockConfig+0x260>)
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004484:	63ba      	str	r2, [r7, #56]	; 0x38
 8004486:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004488:	fa92 f2a2 	rbit	r2, r2
 800448c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800448e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004490:	fab2 f282 	clz	r2, r2
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	f042 0220 	orr.w	r2, r2, #32
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	f002 021f 	and.w	r2, r2, #31
 80044a0:	2101      	movs	r1, #1
 80044a2:	fa01 f202 	lsl.w	r2, r1, r2
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d13a      	bne.n	8004522 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e0b2      	b.n	8004616 <HAL_RCC_ClockConfig+0x2de>
 80044b0:	2302      	movs	r3, #2
 80044b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	fa93 f3a3 	rbit	r3, r3
 80044ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80044bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044be:	fab3 f383 	clz	r3, r3
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	095b      	lsrs	r3, r3, #5
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d102      	bne.n	80044d8 <HAL_RCC_ClockConfig+0x1a0>
 80044d2:	4b31      	ldr	r3, [pc, #196]	; (8004598 <HAL_RCC_ClockConfig+0x260>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	e00d      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1bc>
 80044d8:	2302      	movs	r3, #2
 80044da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044de:	fa93 f3a3 	rbit	r3, r3
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
 80044e4:	2302      	movs	r3, #2
 80044e6:	623b      	str	r3, [r7, #32]
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	fa93 f3a3 	rbit	r3, r3
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	4b29      	ldr	r3, [pc, #164]	; (8004598 <HAL_RCC_ClockConfig+0x260>)
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	2202      	movs	r2, #2
 80044f6:	61ba      	str	r2, [r7, #24]
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	fa92 f2a2 	rbit	r2, r2
 80044fe:	617a      	str	r2, [r7, #20]
  return result;
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	fab2 f282 	clz	r2, r2
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	f042 0220 	orr.w	r2, r2, #32
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	f002 021f 	and.w	r2, r2, #31
 8004512:	2101      	movs	r1, #1
 8004514:	fa01 f202 	lsl.w	r2, r1, r2
 8004518:	4013      	ands	r3, r2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e079      	b.n	8004616 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004522:	4b1d      	ldr	r3, [pc, #116]	; (8004598 <HAL_RCC_ClockConfig+0x260>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f023 0203 	bic.w	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	491a      	ldr	r1, [pc, #104]	; (8004598 <HAL_RCC_ClockConfig+0x260>)
 8004530:	4313      	orrs	r3, r2
 8004532:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004534:	f7fd ff2a 	bl	800238c <HAL_GetTick>
 8004538:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453a:	e00a      	b.n	8004552 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800453c:	f7fd ff26 	bl	800238c <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	; 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e061      	b.n	8004616 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004552:	4b11      	ldr	r3, [pc, #68]	; (8004598 <HAL_RCC_ClockConfig+0x260>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f003 020c 	and.w	r2, r3, #12
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	429a      	cmp	r2, r3
 8004562:	d1eb      	bne.n	800453c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004564:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <HAL_RCC_ClockConfig+0x25c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d214      	bcs.n	800459c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004572:	4b08      	ldr	r3, [pc, #32]	; (8004594 <HAL_RCC_ClockConfig+0x25c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f023 0207 	bic.w	r2, r3, #7
 800457a:	4906      	ldr	r1, [pc, #24]	; (8004594 <HAL_RCC_ClockConfig+0x25c>)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004582:	4b04      	ldr	r3, [pc, #16]	; (8004594 <HAL_RCC_ClockConfig+0x25c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d005      	beq.n	800459c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e040      	b.n	8004616 <HAL_RCC_ClockConfig+0x2de>
 8004594:	40022000 	.word	0x40022000
 8004598:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a8:	4b1d      	ldr	r3, [pc, #116]	; (8004620 <HAL_RCC_ClockConfig+0x2e8>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	491a      	ldr	r1, [pc, #104]	; (8004620 <HAL_RCC_ClockConfig+0x2e8>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d009      	beq.n	80045da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045c6:	4b16      	ldr	r3, [pc, #88]	; (8004620 <HAL_RCC_ClockConfig+0x2e8>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	4912      	ldr	r1, [pc, #72]	; (8004620 <HAL_RCC_ClockConfig+0x2e8>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80045da:	f000 f829 	bl	8004630 <HAL_RCC_GetSysClockFreq>
 80045de:	4601      	mov	r1, r0
 80045e0:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <HAL_RCC_ClockConfig+0x2e8>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045e8:	22f0      	movs	r2, #240	; 0xf0
 80045ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	fa92 f2a2 	rbit	r2, r2
 80045f2:	60fa      	str	r2, [r7, #12]
  return result;
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	fab2 f282 	clz	r2, r2
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	40d3      	lsrs	r3, r2
 80045fe:	4a09      	ldr	r2, [pc, #36]	; (8004624 <HAL_RCC_ClockConfig+0x2ec>)
 8004600:	5cd3      	ldrb	r3, [r2, r3]
 8004602:	fa21 f303 	lsr.w	r3, r1, r3
 8004606:	4a08      	ldr	r2, [pc, #32]	; (8004628 <HAL_RCC_ClockConfig+0x2f0>)
 8004608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800460a:	4b08      	ldr	r3, [pc, #32]	; (800462c <HAL_RCC_ClockConfig+0x2f4>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f7fd fe78 	bl	8002304 <HAL_InitTick>
  
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3778      	adds	r7, #120	; 0x78
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40021000 	.word	0x40021000
 8004624:	0800ba30 	.word	0x0800ba30
 8004628:	20000008 	.word	0x20000008
 800462c:	2000000c 	.word	0x2000000c

08004630 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004630:	b480      	push	{r7}
 8004632:	b08b      	sub	sp, #44	; 0x2c
 8004634:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004636:	2300      	movs	r3, #0
 8004638:	61fb      	str	r3, [r7, #28]
 800463a:	2300      	movs	r3, #0
 800463c:	61bb      	str	r3, [r7, #24]
 800463e:	2300      	movs	r3, #0
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800464a:	4b29      	ldr	r3, [pc, #164]	; (80046f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	f003 030c 	and.w	r3, r3, #12
 8004656:	2b04      	cmp	r3, #4
 8004658:	d002      	beq.n	8004660 <HAL_RCC_GetSysClockFreq+0x30>
 800465a:	2b08      	cmp	r3, #8
 800465c:	d003      	beq.n	8004666 <HAL_RCC_GetSysClockFreq+0x36>
 800465e:	e03c      	b.n	80046da <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004660:	4b24      	ldr	r3, [pc, #144]	; (80046f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004662:	623b      	str	r3, [r7, #32]
      break;
 8004664:	e03c      	b.n	80046e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800466c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004670:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	fa92 f2a2 	rbit	r2, r2
 8004678:	607a      	str	r2, [r7, #4]
  return result;
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	fab2 f282 	clz	r2, r2
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	40d3      	lsrs	r3, r2
 8004684:	4a1c      	ldr	r2, [pc, #112]	; (80046f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004686:	5cd3      	ldrb	r3, [r2, r3]
 8004688:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800468a:	4b19      	ldr	r3, [pc, #100]	; (80046f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	220f      	movs	r2, #15
 8004694:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	fa92 f2a2 	rbit	r2, r2
 800469c:	60fa      	str	r2, [r7, #12]
  return result;
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	fab2 f282 	clz	r2, r2
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	40d3      	lsrs	r3, r2
 80046a8:	4a14      	ldr	r2, [pc, #80]	; (80046fc <HAL_RCC_GetSysClockFreq+0xcc>)
 80046aa:	5cd3      	ldrb	r3, [r2, r3]
 80046ac:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d008      	beq.n	80046ca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80046b8:	4a0e      	ldr	r2, [pc, #56]	; (80046f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	fb02 f303 	mul.w	r3, r2, r3
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
 80046c8:	e004      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	4a0c      	ldr	r2, [pc, #48]	; (8004700 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046ce:	fb02 f303 	mul.w	r3, r2, r3
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	623b      	str	r3, [r7, #32]
      break;
 80046d8:	e002      	b.n	80046e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046da:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80046dc:	623b      	str	r3, [r7, #32]
      break;
 80046de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046e0:	6a3b      	ldr	r3, [r7, #32]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	372c      	adds	r7, #44	; 0x2c
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40021000 	.word	0x40021000
 80046f4:	007a1200 	.word	0x007a1200
 80046f8:	0800ba48 	.word	0x0800ba48
 80046fc:	0800ba58 	.word	0x0800ba58
 8004700:	003d0900 	.word	0x003d0900

08004704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004708:	4b03      	ldr	r3, [pc, #12]	; (8004718 <HAL_RCC_GetHCLKFreq+0x14>)
 800470a:	681b      	ldr	r3, [r3, #0]
}
 800470c:	4618      	mov	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20000008 	.word	0x20000008

0800471c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004722:	f7ff ffef 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 8004726:	4601      	mov	r1, r0
 8004728:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004730:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004734:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	fa92 f2a2 	rbit	r2, r2
 800473c:	603a      	str	r2, [r7, #0]
  return result;
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	fab2 f282 	clz	r2, r2
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	40d3      	lsrs	r3, r2
 8004748:	4a04      	ldr	r2, [pc, #16]	; (800475c <HAL_RCC_GetPCLK1Freq+0x40>)
 800474a:	5cd3      	ldrb	r3, [r2, r3]
 800474c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004750:	4618      	mov	r0, r3
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40021000 	.word	0x40021000
 800475c:	0800ba40 	.word	0x0800ba40

08004760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004766:	f7ff ffcd 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 800476a:	4601      	mov	r1, r0
 800476c:	4b0b      	ldr	r3, [pc, #44]	; (800479c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004774:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004778:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	fa92 f2a2 	rbit	r2, r2
 8004780:	603a      	str	r2, [r7, #0]
  return result;
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	fab2 f282 	clz	r2, r2
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	40d3      	lsrs	r3, r2
 800478c:	4a04      	ldr	r2, [pc, #16]	; (80047a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800478e:	5cd3      	ldrb	r3, [r2, r3]
 8004790:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004794:	4618      	mov	r0, r3
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40021000 	.word	0x40021000
 80047a0:	0800ba40 	.word	0x0800ba40

080047a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b092      	sub	sp, #72	; 0x48
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80047b4:	2300      	movs	r3, #0
 80047b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 80cd 	beq.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047c8:	4b86      	ldr	r3, [pc, #536]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10e      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d4:	4b83      	ldr	r3, [pc, #524]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	4a82      	ldr	r2, [pc, #520]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047de:	61d3      	str	r3, [r2, #28]
 80047e0:	4b80      	ldr	r3, [pc, #512]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e8:	60bb      	str	r3, [r7, #8]
 80047ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ec:	2301      	movs	r3, #1
 80047ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f2:	4b7d      	ldr	r3, [pc, #500]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d118      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047fe:	4b7a      	ldr	r3, [pc, #488]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a79      	ldr	r2, [pc, #484]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004808:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800480a:	f7fd fdbf 	bl	800238c <HAL_GetTick>
 800480e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004810:	e008      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004812:	f7fd fdbb 	bl	800238c <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b64      	cmp	r3, #100	; 0x64
 800481e:	d901      	bls.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e0db      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004824:	4b70      	ldr	r3, [pc, #448]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0f0      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004830:	4b6c      	ldr	r3, [pc, #432]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004838:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800483a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800483c:	2b00      	cmp	r3, #0
 800483e:	d07d      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004848:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800484a:	429a      	cmp	r2, r3
 800484c:	d076      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800484e:	4b65      	ldr	r3, [pc, #404]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004858:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800485c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004860:	fa93 f3a3 	rbit	r3, r3
 8004864:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004868:	fab3 f383 	clz	r3, r3
 800486c:	b2db      	uxtb	r3, r3
 800486e:	461a      	mov	r2, r3
 8004870:	4b5e      	ldr	r3, [pc, #376]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004872:	4413      	add	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	461a      	mov	r2, r3
 8004878:	2301      	movs	r3, #1
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004880:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004884:	fa93 f3a3 	rbit	r3, r3
 8004888:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800488a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800488c:	fab3 f383 	clz	r3, r3
 8004890:	b2db      	uxtb	r3, r3
 8004892:	461a      	mov	r2, r3
 8004894:	4b55      	ldr	r3, [pc, #340]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004896:	4413      	add	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	461a      	mov	r2, r3
 800489c:	2300      	movs	r3, #0
 800489e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048a0:	4a50      	ldr	r2, [pc, #320]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d045      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b0:	f7fd fd6c 	bl	800238c <HAL_GetTick>
 80048b4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b6:	e00a      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b8:	f7fd fd68 	bl	800238c <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e086      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x238>
 80048ce:	2302      	movs	r3, #2
 80048d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d4:	fa93 f3a3 	rbit	r3, r3
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
 80048da:	2302      	movs	r3, #2
 80048dc:	623b      	str	r3, [r7, #32]
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	fa93 f3a3 	rbit	r3, r3
 80048e4:	61fb      	str	r3, [r7, #28]
  return result;
 80048e6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e8:	fab3 f383 	clz	r3, r3
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	f043 0302 	orr.w	r3, r3, #2
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d102      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80048fc:	4b39      	ldr	r3, [pc, #228]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	e007      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004902:	2302      	movs	r3, #2
 8004904:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	fa93 f3a3 	rbit	r3, r3
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	4b35      	ldr	r3, [pc, #212]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	2202      	movs	r2, #2
 8004914:	613a      	str	r2, [r7, #16]
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	fa92 f2a2 	rbit	r2, r2
 800491c:	60fa      	str	r2, [r7, #12]
  return result;
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	fab2 f282 	clz	r2, r2
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	f002 021f 	and.w	r2, r2, #31
 8004930:	2101      	movs	r1, #1
 8004932:	fa01 f202 	lsl.w	r2, r1, r2
 8004936:	4013      	ands	r3, r2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0bd      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800493c:	4b29      	ldr	r3, [pc, #164]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	4926      	ldr	r1, [pc, #152]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800494a:	4313      	orrs	r3, r2
 800494c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800494e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004952:	2b01      	cmp	r3, #1
 8004954:	d105      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004956:	4b23      	ldr	r3, [pc, #140]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	4a22      	ldr	r2, [pc, #136]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800495c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004960:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d008      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800496e:	4b1d      	ldr	r3, [pc, #116]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	f023 0203 	bic.w	r2, r3, #3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	491a      	ldr	r1, [pc, #104]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800497c:	4313      	orrs	r3, r2
 800497e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0320 	and.w	r3, r3, #32
 8004988:	2b00      	cmp	r3, #0
 800498a:	d008      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800498c:	4b15      	ldr	r3, [pc, #84]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004990:	f023 0210 	bic.w	r2, r3, #16
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	4912      	ldr	r1, [pc, #72]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800499a:	4313      	orrs	r3, r2
 800499c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d008      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049aa:	4b0e      	ldr	r3, [pc, #56]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	490b      	ldr	r1, [pc, #44]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80049c8:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	4903      	ldr	r1, [pc, #12]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3748      	adds	r7, #72	; 0x48
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40021000 	.word	0x40021000
 80049e8:	40007000 	.word	0x40007000
 80049ec:	10908100 	.word	0x10908100

080049f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e040      	b.n	8004a84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fd fab8 	bl	8001f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2224      	movs	r2, #36	; 0x24
 8004a1c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0201 	bic.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fc00 	bl	8005234 <UART_SetConfig>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e022      	b.n	8004a84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fd2a 	bl	80054a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0201 	orr.w	r2, r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fdb1 	bl	80055e4 <UART_CheckIdleState>
 8004a82:	4603      	mov	r3, r0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08a      	sub	sp, #40	; 0x28
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	603b      	str	r3, [r7, #0]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d178      	bne.n	8004b96 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <HAL_UART_Transmit+0x24>
 8004aaa:	88fb      	ldrh	r3, [r7, #6]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e071      	b.n	8004b98 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2221      	movs	r2, #33	; 0x21
 8004ac0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ac2:	f7fd fc63 	bl	800238c <HAL_GetTick>
 8004ac6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	88fa      	ldrh	r2, [r7, #6]
 8004acc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	88fa      	ldrh	r2, [r7, #6]
 8004ad4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae0:	d108      	bne.n	8004af4 <HAL_UART_Transmit+0x68>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d104      	bne.n	8004af4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	61bb      	str	r3, [r7, #24]
 8004af2:	e003      	b.n	8004afc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004afc:	e030      	b.n	8004b60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2200      	movs	r2, #0
 8004b06:	2180      	movs	r1, #128	; 0x80
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 fe13 	bl	8005734 <UART_WaitOnFlagUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d004      	beq.n	8004b1e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e03c      	b.n	8004b98 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10b      	bne.n	8004b3c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	881a      	ldrh	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b30:	b292      	uxth	r2, r2
 8004b32:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	3302      	adds	r3, #2
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	e008      	b.n	8004b4e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	781a      	ldrb	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	b292      	uxth	r2, r2
 8004b46:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1c8      	bne.n	8004afe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2200      	movs	r2, #0
 8004b74:	2140      	movs	r1, #64	; 0x40
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 fddc 	bl	8005734 <UART_WaitOnFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d004      	beq.n	8004b8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2220      	movs	r2, #32
 8004b86:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e005      	b.n	8004b98 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	e000      	b.n	8004b98 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004b96:	2302      	movs	r3, #2
  }
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3720      	adds	r7, #32
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b08a      	sub	sp, #40	; 0x28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	4613      	mov	r3, r2
 8004bac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	d132      	bne.n	8004c1e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <HAL_UART_Receive_IT+0x24>
 8004bbe:	88fb      	ldrh	r3, [r7, #6]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e02b      	b.n	8004c20 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d018      	beq.n	8004c0e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	623b      	str	r3, [r7, #32]
 8004bfc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	69f9      	ldr	r1, [r7, #28]
 8004c00:	6a3a      	ldr	r2, [r7, #32]
 8004c02:	e841 2300 	strex	r3, r2, [r1]
 8004c06:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1e6      	bne.n	8004bdc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c0e:	88fb      	ldrh	r3, [r7, #6]
 8004c10:	461a      	mov	r2, r3
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 fdf5 	bl	8005804 <UART_Start_Receive_IT>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	e000      	b.n	8004c20 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004c1e:	2302      	movs	r3, #2
  }
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3728      	adds	r7, #40	; 0x28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b0ba      	sub	sp, #232	; 0xe8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004c52:	f640 030f 	movw	r3, #2063	; 0x80f
 8004c56:	4013      	ands	r3, r2
 8004c58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004c5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d115      	bne.n	8004c90 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00f      	beq.n	8004c90 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c74:	f003 0320 	and.w	r3, r3, #32
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d009      	beq.n	8004c90 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 82ab 	beq.w	80051dc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	4798      	blx	r3
      }
      return;
 8004c8e:	e2a5      	b.n	80051dc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8117 	beq.w	8004ec8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004ca6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004caa:	4b85      	ldr	r3, [pc, #532]	; (8004ec0 <HAL_UART_IRQHandler+0x298>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 810a 	beq.w	8004ec8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d011      	beq.n	8004ce4 <HAL_UART_IRQHandler+0xbc>
 8004cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00b      	beq.n	8004ce4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cda:	f043 0201 	orr.w	r2, r3, #1
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d011      	beq.n	8004d14 <HAL_UART_IRQHandler+0xec>
 8004cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00b      	beq.n	8004d14 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2202      	movs	r2, #2
 8004d02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d0a:	f043 0204 	orr.w	r2, r3, #4
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d011      	beq.n	8004d44 <HAL_UART_IRQHandler+0x11c>
 8004d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00b      	beq.n	8004d44 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2204      	movs	r2, #4
 8004d32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d3a:	f043 0202 	orr.w	r2, r3, #2
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d017      	beq.n	8004d80 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d105      	bne.n	8004d68 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d60:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00b      	beq.n	8004d80 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2208      	movs	r2, #8
 8004d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d76:	f043 0208 	orr.w	r2, r3, #8
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d012      	beq.n	8004db2 <HAL_UART_IRQHandler+0x18a>
 8004d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00c      	beq.n	8004db2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004da0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004da8:	f043 0220 	orr.w	r2, r3, #32
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8211 	beq.w	80051e0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00d      	beq.n	8004de6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dce:	f003 0320 	and.w	r3, r3, #32
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d007      	beq.n	8004de6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfa:	2b40      	cmp	r3, #64	; 0x40
 8004dfc:	d005      	beq.n	8004e0a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004dfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d04f      	beq.n	8004eaa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fdc0 	bl	8005990 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1a:	2b40      	cmp	r3, #64	; 0x40
 8004e1c:	d141      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3308      	adds	r3, #8
 8004e24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e2c:	e853 3f00 	ldrex	r3, [r3]
 8004e30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3308      	adds	r3, #8
 8004e46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e5a:	e841 2300 	strex	r3, r2, [r1]
 8004e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1d9      	bne.n	8004e1e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d013      	beq.n	8004e9a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e76:	4a13      	ldr	r2, [pc, #76]	; (8004ec4 <HAL_UART_IRQHandler+0x29c>)
 8004e78:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fd fbfe 	bl	8002680 <HAL_DMA_Abort_IT>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d017      	beq.n	8004eba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e94:	4610      	mov	r0, r2
 8004e96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e98:	e00f      	b.n	8004eba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f9b4 	bl	8005208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea0:	e00b      	b.n	8004eba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f9b0 	bl	8005208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea8:	e007      	b.n	8004eba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f9ac 	bl	8005208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004eb8:	e192      	b.n	80051e0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eba:	bf00      	nop
    return;
 8004ebc:	e190      	b.n	80051e0 <HAL_UART_IRQHandler+0x5b8>
 8004ebe:	bf00      	nop
 8004ec0:	04000120 	.word	0x04000120
 8004ec4:	08005a59 	.word	0x08005a59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	f040 814b 	bne.w	8005168 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ed6:	f003 0310 	and.w	r3, r3, #16
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 8144 	beq.w	8005168 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 813d 	beq.w	8005168 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2210      	movs	r2, #16
 8004ef4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f00:	2b40      	cmp	r3, #64	; 0x40
 8004f02:	f040 80b5 	bne.w	8005070 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f12:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 8164 	beq.w	80051e4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f26:	429a      	cmp	r2, r3
 8004f28:	f080 815c 	bcs.w	80051e4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	f000 8086 	beq.w	800504e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f4e:	e853 3f00 	ldrex	r3, [r3]
 8004f52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f70:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f74:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f78:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f7c:	e841 2300 	strex	r3, r2, [r1]
 8004f80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1da      	bne.n	8004f42 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3308      	adds	r3, #8
 8004f92:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f96:	e853 3f00 	ldrex	r3, [r3]
 8004f9a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f9e:	f023 0301 	bic.w	r3, r3, #1
 8004fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3308      	adds	r3, #8
 8004fac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fb0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004fb4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004fb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fbc:	e841 2300 	strex	r3, r2, [r1]
 8004fc0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004fc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e1      	bne.n	8004f8c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3308      	adds	r3, #8
 8004fce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fd2:	e853 3f00 	ldrex	r3, [r3]
 8004fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3308      	adds	r3, #8
 8004fe8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004fec:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004fee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ff2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ff4:	e841 2300 	strex	r3, r2, [r1]
 8004ff8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ffa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e3      	bne.n	8004fc8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005016:	e853 3f00 	ldrex	r3, [r3]
 800501a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800501c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800501e:	f023 0310 	bic.w	r3, r3, #16
 8005022:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	461a      	mov	r2, r3
 800502c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005030:	65bb      	str	r3, [r7, #88]	; 0x58
 8005032:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005034:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005036:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005038:	e841 2300 	strex	r3, r2, [r1]
 800503c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800503e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1e4      	bne.n	800500e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005048:	4618      	mov	r0, r3
 800504a:	f7fd fae0 	bl	800260e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2202      	movs	r2, #2
 8005052:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005060:	b29b      	uxth	r3, r3
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	b29b      	uxth	r3, r3
 8005066:	4619      	mov	r1, r3
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f8d7 	bl	800521c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800506e:	e0b9      	b.n	80051e4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800507c:	b29b      	uxth	r3, r3
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 80ab 	beq.w	80051e8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005092:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 80a6 	beq.w	80051e8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a4:	e853 3f00 	ldrex	r3, [r3]
 80050a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050be:	647b      	str	r3, [r7, #68]	; 0x44
 80050c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050c6:	e841 2300 	strex	r3, r2, [r1]
 80050ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e4      	bne.n	800509c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3308      	adds	r3, #8
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	e853 3f00 	ldrex	r3, [r3]
 80050e0:	623b      	str	r3, [r7, #32]
   return(result);
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	f023 0301 	bic.w	r3, r3, #1
 80050e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3308      	adds	r3, #8
 80050f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050f6:	633a      	str	r2, [r7, #48]	; 0x30
 80050f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050fe:	e841 2300 	strex	r3, r2, [r1]
 8005102:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1e3      	bne.n	80050d2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2220      	movs	r2, #32
 800510e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	e853 3f00 	ldrex	r3, [r3]
 800512a:	60fb      	str	r3, [r7, #12]
   return(result);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0310 	bic.w	r3, r3, #16
 8005132:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005140:	61fb      	str	r3, [r7, #28]
 8005142:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	69b9      	ldr	r1, [r7, #24]
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	617b      	str	r3, [r7, #20]
   return(result);
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e4      	bne.n	800511e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800515a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800515e:	4619      	mov	r1, r3
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f85b 	bl	800521c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005166:	e03f      	b.n	80051e8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800516c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00e      	beq.n	8005192 <HAL_UART_IRQHandler+0x56a>
 8005174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005188:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fe4c 	bl	8005e28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005190:	e02d      	b.n	80051ee <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00e      	beq.n	80051bc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800519e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d008      	beq.n	80051bc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d01c      	beq.n	80051ec <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	4798      	blx	r3
    }
    return;
 80051ba:	e017      	b.n	80051ec <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d012      	beq.n	80051ee <HAL_UART_IRQHandler+0x5c6>
 80051c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00c      	beq.n	80051ee <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fc55 	bl	8005a84 <UART_EndTransmit_IT>
    return;
 80051da:	e008      	b.n	80051ee <HAL_UART_IRQHandler+0x5c6>
      return;
 80051dc:	bf00      	nop
 80051de:	e006      	b.n	80051ee <HAL_UART_IRQHandler+0x5c6>
    return;
 80051e0:	bf00      	nop
 80051e2:	e004      	b.n	80051ee <HAL_UART_IRQHandler+0x5c6>
      return;
 80051e4:	bf00      	nop
 80051e6:	e002      	b.n	80051ee <HAL_UART_IRQHandler+0x5c6>
      return;
 80051e8:	bf00      	nop
 80051ea:	e000      	b.n	80051ee <HAL_UART_IRQHandler+0x5c6>
    return;
 80051ec:	bf00      	nop
  }

}
 80051ee:	37e8      	adds	r7, #232	; 0xe8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	460b      	mov	r3, r1
 8005226:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	431a      	orrs	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	4b8a      	ldr	r3, [pc, #552]	; (8005488 <UART_SetConfig+0x254>)
 8005260:	4013      	ands	r3, r2
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6812      	ldr	r2, [r2, #0]
 8005266:	6979      	ldr	r1, [r7, #20]
 8005268:	430b      	orrs	r3, r1
 800526a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a78      	ldr	r2, [pc, #480]	; (800548c <UART_SetConfig+0x258>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d120      	bne.n	80052f2 <UART_SetConfig+0xbe>
 80052b0:	4b77      	ldr	r3, [pc, #476]	; (8005490 <UART_SetConfig+0x25c>)
 80052b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b4:	f003 0303 	and.w	r3, r3, #3
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d817      	bhi.n	80052ec <UART_SetConfig+0xb8>
 80052bc:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <UART_SetConfig+0x90>)
 80052be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c2:	bf00      	nop
 80052c4:	080052d5 	.word	0x080052d5
 80052c8:	080052e1 	.word	0x080052e1
 80052cc:	080052e7 	.word	0x080052e7
 80052d0:	080052db 	.word	0x080052db
 80052d4:	2300      	movs	r3, #0
 80052d6:	77fb      	strb	r3, [r7, #31]
 80052d8:	e01d      	b.n	8005316 <UART_SetConfig+0xe2>
 80052da:	2302      	movs	r3, #2
 80052dc:	77fb      	strb	r3, [r7, #31]
 80052de:	e01a      	b.n	8005316 <UART_SetConfig+0xe2>
 80052e0:	2304      	movs	r3, #4
 80052e2:	77fb      	strb	r3, [r7, #31]
 80052e4:	e017      	b.n	8005316 <UART_SetConfig+0xe2>
 80052e6:	2308      	movs	r3, #8
 80052e8:	77fb      	strb	r3, [r7, #31]
 80052ea:	e014      	b.n	8005316 <UART_SetConfig+0xe2>
 80052ec:	2310      	movs	r3, #16
 80052ee:	77fb      	strb	r3, [r7, #31]
 80052f0:	e011      	b.n	8005316 <UART_SetConfig+0xe2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a67      	ldr	r2, [pc, #412]	; (8005494 <UART_SetConfig+0x260>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d102      	bne.n	8005302 <UART_SetConfig+0xce>
 80052fc:	2300      	movs	r3, #0
 80052fe:	77fb      	strb	r3, [r7, #31]
 8005300:	e009      	b.n	8005316 <UART_SetConfig+0xe2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a64      	ldr	r2, [pc, #400]	; (8005498 <UART_SetConfig+0x264>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d102      	bne.n	8005312 <UART_SetConfig+0xde>
 800530c:	2300      	movs	r3, #0
 800530e:	77fb      	strb	r3, [r7, #31]
 8005310:	e001      	b.n	8005316 <UART_SetConfig+0xe2>
 8005312:	2310      	movs	r3, #16
 8005314:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800531e:	d15a      	bne.n	80053d6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005320:	7ffb      	ldrb	r3, [r7, #31]
 8005322:	2b08      	cmp	r3, #8
 8005324:	d827      	bhi.n	8005376 <UART_SetConfig+0x142>
 8005326:	a201      	add	r2, pc, #4	; (adr r2, 800532c <UART_SetConfig+0xf8>)
 8005328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532c:	08005351 	.word	0x08005351
 8005330:	08005359 	.word	0x08005359
 8005334:	08005361 	.word	0x08005361
 8005338:	08005377 	.word	0x08005377
 800533c:	08005367 	.word	0x08005367
 8005340:	08005377 	.word	0x08005377
 8005344:	08005377 	.word	0x08005377
 8005348:	08005377 	.word	0x08005377
 800534c:	0800536f 	.word	0x0800536f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005350:	f7ff f9e4 	bl	800471c <HAL_RCC_GetPCLK1Freq>
 8005354:	61b8      	str	r0, [r7, #24]
        break;
 8005356:	e013      	b.n	8005380 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005358:	f7ff fa02 	bl	8004760 <HAL_RCC_GetPCLK2Freq>
 800535c:	61b8      	str	r0, [r7, #24]
        break;
 800535e:	e00f      	b.n	8005380 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005360:	4b4e      	ldr	r3, [pc, #312]	; (800549c <UART_SetConfig+0x268>)
 8005362:	61bb      	str	r3, [r7, #24]
        break;
 8005364:	e00c      	b.n	8005380 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005366:	f7ff f963 	bl	8004630 <HAL_RCC_GetSysClockFreq>
 800536a:	61b8      	str	r0, [r7, #24]
        break;
 800536c:	e008      	b.n	8005380 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800536e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005372:	61bb      	str	r3, [r7, #24]
        break;
 8005374:	e004      	b.n	8005380 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	77bb      	strb	r3, [r7, #30]
        break;
 800537e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d074      	beq.n	8005470 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	005a      	lsls	r2, r3, #1
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	085b      	lsrs	r3, r3, #1
 8005390:	441a      	add	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	fbb2 f3f3 	udiv	r3, r2, r3
 800539a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	2b0f      	cmp	r3, #15
 80053a0:	d916      	bls.n	80053d0 <UART_SetConfig+0x19c>
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a8:	d212      	bcs.n	80053d0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f023 030f 	bic.w	r3, r3, #15
 80053b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	085b      	lsrs	r3, r3, #1
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	b29a      	uxth	r2, r3
 80053c0:	89fb      	ldrh	r3, [r7, #14]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	89fa      	ldrh	r2, [r7, #14]
 80053cc:	60da      	str	r2, [r3, #12]
 80053ce:	e04f      	b.n	8005470 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	77bb      	strb	r3, [r7, #30]
 80053d4:	e04c      	b.n	8005470 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053d6:	7ffb      	ldrb	r3, [r7, #31]
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d828      	bhi.n	800542e <UART_SetConfig+0x1fa>
 80053dc:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <UART_SetConfig+0x1b0>)
 80053de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e2:	bf00      	nop
 80053e4:	08005409 	.word	0x08005409
 80053e8:	08005411 	.word	0x08005411
 80053ec:	08005419 	.word	0x08005419
 80053f0:	0800542f 	.word	0x0800542f
 80053f4:	0800541f 	.word	0x0800541f
 80053f8:	0800542f 	.word	0x0800542f
 80053fc:	0800542f 	.word	0x0800542f
 8005400:	0800542f 	.word	0x0800542f
 8005404:	08005427 	.word	0x08005427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005408:	f7ff f988 	bl	800471c <HAL_RCC_GetPCLK1Freq>
 800540c:	61b8      	str	r0, [r7, #24]
        break;
 800540e:	e013      	b.n	8005438 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005410:	f7ff f9a6 	bl	8004760 <HAL_RCC_GetPCLK2Freq>
 8005414:	61b8      	str	r0, [r7, #24]
        break;
 8005416:	e00f      	b.n	8005438 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005418:	4b20      	ldr	r3, [pc, #128]	; (800549c <UART_SetConfig+0x268>)
 800541a:	61bb      	str	r3, [r7, #24]
        break;
 800541c:	e00c      	b.n	8005438 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800541e:	f7ff f907 	bl	8004630 <HAL_RCC_GetSysClockFreq>
 8005422:	61b8      	str	r0, [r7, #24]
        break;
 8005424:	e008      	b.n	8005438 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800542a:	61bb      	str	r3, [r7, #24]
        break;
 800542c:	e004      	b.n	8005438 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	77bb      	strb	r3, [r7, #30]
        break;
 8005436:	bf00      	nop
    }

    if (pclk != 0U)
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d018      	beq.n	8005470 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	085a      	lsrs	r2, r3, #1
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	441a      	add	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005450:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b0f      	cmp	r3, #15
 8005456:	d909      	bls.n	800546c <UART_SetConfig+0x238>
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800545e:	d205      	bcs.n	800546c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	b29a      	uxth	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	60da      	str	r2, [r3, #12]
 800546a:	e001      	b.n	8005470 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800547c:	7fbb      	ldrb	r3, [r7, #30]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3720      	adds	r7, #32
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	efff69f3 	.word	0xefff69f3
 800548c:	40013800 	.word	0x40013800
 8005490:	40021000 	.word	0x40021000
 8005494:	40004400 	.word	0x40004400
 8005498:	40004800 	.word	0x40004800
 800549c:	007a1200 	.word	0x007a1200

080054a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00a      	beq.n	80054ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00a      	beq.n	80054ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00a      	beq.n	800550e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	f003 0308 	and.w	r3, r3, #8
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00a      	beq.n	8005530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	f003 0310 	and.w	r3, r3, #16
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00a      	beq.n	8005552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	f003 0320 	and.w	r3, r3, #32
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557c:	2b00      	cmp	r3, #0
 800557e:	d01a      	beq.n	80055b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800559e:	d10a      	bne.n	80055b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	605a      	str	r2, [r3, #4]
  }
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b098      	sub	sp, #96	; 0x60
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055f4:	f7fc feca 	bl	800238c <HAL_GetTick>
 80055f8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0308 	and.w	r3, r3, #8
 8005604:	2b08      	cmp	r3, #8
 8005606:	d12e      	bne.n	8005666 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005608:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005610:	2200      	movs	r2, #0
 8005612:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f88c 	bl	8005734 <UART_WaitOnFlagUntilTimeout>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d021      	beq.n	8005666 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005636:	653b      	str	r3, [r7, #80]	; 0x50
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	461a      	mov	r2, r3
 800563e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005640:	647b      	str	r3, [r7, #68]	; 0x44
 8005642:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005646:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005648:	e841 2300 	strex	r3, r2, [r1]
 800564c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800564e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e6      	bne.n	8005622 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e062      	b.n	800572c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	2b04      	cmp	r3, #4
 8005672:	d149      	bne.n	8005708 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005674:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800567c:	2200      	movs	r2, #0
 800567e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f856 	bl	8005734 <UART_WaitOnFlagUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d03c      	beq.n	8005708 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	e853 3f00 	ldrex	r3, [r3]
 800569a:	623b      	str	r3, [r7, #32]
   return(result);
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	461a      	mov	r2, r3
 80056aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ac:	633b      	str	r3, [r7, #48]	; 0x30
 80056ae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056b4:	e841 2300 	strex	r3, r2, [r1]
 80056b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e6      	bne.n	800568e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3308      	adds	r3, #8
 80056c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	e853 3f00 	ldrex	r3, [r3]
 80056ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0301 	bic.w	r3, r3, #1
 80056d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3308      	adds	r3, #8
 80056de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056e0:	61fa      	str	r2, [r7, #28]
 80056e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e4:	69b9      	ldr	r1, [r7, #24]
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	e841 2300 	strex	r3, r2, [r1]
 80056ec:	617b      	str	r3, [r7, #20]
   return(result);
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1e5      	bne.n	80056c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e011      	b.n	800572c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2220      	movs	r2, #32
 800570c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2220      	movs	r2, #32
 8005712:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3758      	adds	r7, #88	; 0x58
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	603b      	str	r3, [r7, #0]
 8005740:	4613      	mov	r3, r2
 8005742:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005744:	e049      	b.n	80057da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574c:	d045      	beq.n	80057da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800574e:	f7fc fe1d 	bl	800238c <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	429a      	cmp	r2, r3
 800575c:	d302      	bcc.n	8005764 <UART_WaitOnFlagUntilTimeout+0x30>
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e048      	b.n	80057fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	2b00      	cmp	r3, #0
 8005774:	d031      	beq.n	80057da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	f003 0308 	and.w	r3, r3, #8
 8005780:	2b08      	cmp	r3, #8
 8005782:	d110      	bne.n	80057a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2208      	movs	r2, #8
 800578a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 f8ff 	bl	8005990 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2208      	movs	r2, #8
 8005796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e029      	b.n	80057fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057b4:	d111      	bne.n	80057da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 f8e5 	bl	8005990 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e00f      	b.n	80057fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69da      	ldr	r2, [r3, #28]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4013      	ands	r3, r2
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	bf0c      	ite	eq
 80057ea:	2301      	moveq	r3, #1
 80057ec:	2300      	movne	r3, #0
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	461a      	mov	r2, r3
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d0a6      	beq.n	8005746 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005804:	b480      	push	{r7}
 8005806:	b097      	sub	sp, #92	; 0x5c
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	4613      	mov	r3, r2
 8005810:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	88fa      	ldrh	r2, [r7, #6]
 800581c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	88fa      	ldrh	r2, [r7, #6]
 8005824:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005836:	d10e      	bne.n	8005856 <UART_Start_Receive_IT+0x52>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d105      	bne.n	800584c <UART_Start_Receive_IT+0x48>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005846:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800584a:	e02d      	b.n	80058a8 <UART_Start_Receive_IT+0xa4>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	22ff      	movs	r2, #255	; 0xff
 8005850:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005854:	e028      	b.n	80058a8 <UART_Start_Receive_IT+0xa4>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10d      	bne.n	800587a <UART_Start_Receive_IT+0x76>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d104      	bne.n	8005870 <UART_Start_Receive_IT+0x6c>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	22ff      	movs	r2, #255	; 0xff
 800586a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800586e:	e01b      	b.n	80058a8 <UART_Start_Receive_IT+0xa4>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	227f      	movs	r2, #127	; 0x7f
 8005874:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005878:	e016      	b.n	80058a8 <UART_Start_Receive_IT+0xa4>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005882:	d10d      	bne.n	80058a0 <UART_Start_Receive_IT+0x9c>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d104      	bne.n	8005896 <UART_Start_Receive_IT+0x92>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	227f      	movs	r2, #127	; 0x7f
 8005890:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005894:	e008      	b.n	80058a8 <UART_Start_Receive_IT+0xa4>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	223f      	movs	r2, #63	; 0x3f
 800589a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800589e:	e003      	b.n	80058a8 <UART_Start_Receive_IT+0xa4>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2222      	movs	r2, #34	; 0x22
 80058b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3308      	adds	r3, #8
 80058be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c2:	e853 3f00 	ldrex	r3, [r3]
 80058c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ca:	f043 0301 	orr.w	r3, r3, #1
 80058ce:	657b      	str	r3, [r7, #84]	; 0x54
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3308      	adds	r3, #8
 80058d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058d8:	64ba      	str	r2, [r7, #72]	; 0x48
 80058da:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058e0:	e841 2300 	strex	r3, r2, [r1]
 80058e4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80058e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e5      	bne.n	80058b8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058f4:	d107      	bne.n	8005906 <UART_Start_Receive_IT+0x102>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d103      	bne.n	8005906 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4a21      	ldr	r2, [pc, #132]	; (8005988 <UART_Start_Receive_IT+0x184>)
 8005902:	669a      	str	r2, [r3, #104]	; 0x68
 8005904:	e002      	b.n	800590c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4a20      	ldr	r2, [pc, #128]	; (800598c <UART_Start_Receive_IT+0x188>)
 800590a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d019      	beq.n	8005948 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005928:	64fb      	str	r3, [r7, #76]	; 0x4c
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005932:	637b      	str	r3, [r7, #52]	; 0x34
 8005934:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005938:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e6      	bne.n	8005914 <UART_Start_Receive_IT+0x110>
 8005946:	e018      	b.n	800597a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	613b      	str	r3, [r7, #16]
   return(result);
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f043 0320 	orr.w	r3, r3, #32
 800595c:	653b      	str	r3, [r7, #80]	; 0x50
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	461a      	mov	r2, r3
 8005964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005966:	623b      	str	r3, [r7, #32]
 8005968:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	69f9      	ldr	r1, [r7, #28]
 800596c:	6a3a      	ldr	r2, [r7, #32]
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	61bb      	str	r3, [r7, #24]
   return(result);
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e6      	bne.n	8005948 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	375c      	adds	r7, #92	; 0x5c
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	08005c81 	.word	0x08005c81
 800598c:	08005ad9 	.word	0x08005ad9

08005990 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005990:	b480      	push	{r7}
 8005992:	b095      	sub	sp, #84	; 0x54
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b6:	643b      	str	r3, [r7, #64]	; 0x40
 80059b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059be:	e841 2300 	strex	r3, r2, [r1]
 80059c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1e6      	bne.n	8005998 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3308      	adds	r3, #8
 80059d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	e853 3f00 	ldrex	r3, [r3]
 80059d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	f023 0301 	bic.w	r3, r3, #1
 80059e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3308      	adds	r3, #8
 80059e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059f2:	e841 2300 	strex	r3, r2, [r1]
 80059f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1e5      	bne.n	80059ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d118      	bne.n	8005a38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	e853 3f00 	ldrex	r3, [r3]
 8005a12:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f023 0310 	bic.w	r3, r3, #16
 8005a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	461a      	mov	r2, r3
 8005a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a24:	61bb      	str	r3, [r7, #24]
 8005a26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a28:	6979      	ldr	r1, [r7, #20]
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	e841 2300 	strex	r3, r2, [r1]
 8005a30:	613b      	str	r3, [r7, #16]
   return(result);
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1e6      	bne.n	8005a06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005a4c:	bf00      	nop
 8005a4e:	3754      	adds	r7, #84	; 0x54
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f7ff fbc6 	bl	8005208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a7c:	bf00      	nop
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b088      	sub	sp, #32
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	e853 3f00 	ldrex	r3, [r3]
 8005a98:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa0:	61fb      	str	r3, [r7, #28]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	61bb      	str	r3, [r7, #24]
 8005aac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aae:	6979      	ldr	r1, [r7, #20]
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e6      	bne.n	8005a8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7ff fb92 	bl	80051f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ad0:	bf00      	nop
 8005ad2:	3720      	adds	r7, #32
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b09c      	sub	sp, #112	; 0x70
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ae6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005af0:	2b22      	cmp	r3, #34	; 0x22
 8005af2:	f040 80b9 	bne.w	8005c68 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005afc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b00:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005b04:	b2d9      	uxtb	r1, r3
 8005b06:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b10:	400a      	ands	r2, r1
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f040 809c 	bne.w	8005c78 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b54:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b60:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e6      	bne.n	8005b40 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3308      	adds	r3, #8
 8005b78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7c:	e853 3f00 	ldrex	r3, [r3]
 8005b80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b84:	f023 0301 	bic.w	r3, r3, #1
 8005b88:	667b      	str	r3, [r7, #100]	; 0x64
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3308      	adds	r3, #8
 8005b90:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b92:	647a      	str	r2, [r7, #68]	; 0x44
 8005b94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b9a:	e841 2300 	strex	r3, r2, [r1]
 8005b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1e5      	bne.n	8005b72 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d018      	beq.n	8005bfa <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	e853 3f00 	ldrex	r3, [r3]
 8005bd4:	623b      	str	r3, [r7, #32]
   return(result);
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005bdc:	663b      	str	r3, [r7, #96]	; 0x60
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	461a      	mov	r2, r3
 8005be4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005be6:	633b      	str	r3, [r7, #48]	; 0x30
 8005be8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bee:	e841 2300 	strex	r3, r2, [r1]
 8005bf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1e6      	bne.n	8005bc8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d12e      	bne.n	8005c60 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f023 0310 	bic.w	r3, r3, #16
 8005c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c26:	61fb      	str	r3, [r7, #28]
 8005c28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	69b9      	ldr	r1, [r7, #24]
 8005c2c:	69fa      	ldr	r2, [r7, #28]
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	617b      	str	r3, [r7, #20]
   return(result);
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e6      	bne.n	8005c08 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	f003 0310 	and.w	r3, r3, #16
 8005c44:	2b10      	cmp	r3, #16
 8005c46:	d103      	bne.n	8005c50 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2210      	movs	r2, #16
 8005c4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff fadf 	bl	800521c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c5e:	e00b      	b.n	8005c78 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7fb fb2b 	bl	80012bc <HAL_UART_RxCpltCallback>
}
 8005c66:	e007      	b.n	8005c78 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699a      	ldr	r2, [r3, #24]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0208 	orr.w	r2, r2, #8
 8005c76:	619a      	str	r2, [r3, #24]
}
 8005c78:	bf00      	nop
 8005c7a:	3770      	adds	r7, #112	; 0x70
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b09c      	sub	sp, #112	; 0x70
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c8e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c98:	2b22      	cmp	r3, #34	; 0x22
 8005c9a:	f040 80b9 	bne.w	8005e10 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ca4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cac:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005cae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005cb2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cbc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc2:	1c9a      	adds	r2, r3, #2
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f040 809c 	bne.w	8005e20 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005cf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cfc:	667b      	str	r3, [r7, #100]	; 0x64
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	461a      	mov	r2, r3
 8005d04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d06:	657b      	str	r3, [r7, #84]	; 0x54
 8005d08:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e6      	bne.n	8005ce8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3308      	adds	r3, #8
 8005d20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d24:	e853 3f00 	ldrex	r3, [r3]
 8005d28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	f023 0301 	bic.w	r3, r3, #1
 8005d30:	663b      	str	r3, [r7, #96]	; 0x60
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3308      	adds	r3, #8
 8005d38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d3a:	643a      	str	r2, [r7, #64]	; 0x40
 8005d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d42:	e841 2300 	strex	r3, r2, [r1]
 8005d46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1e5      	bne.n	8005d1a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d018      	beq.n	8005da2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d90:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e6      	bne.n	8005d70 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d12e      	bne.n	8005e08 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f023 0310 	bic.w	r3, r3, #16
 8005dc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dce:	61bb      	str	r3, [r7, #24]
 8005dd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	6979      	ldr	r1, [r7, #20]
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	613b      	str	r3, [r7, #16]
   return(result);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e6      	bne.n	8005db0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	f003 0310 	and.w	r3, r3, #16
 8005dec:	2b10      	cmp	r3, #16
 8005dee:	d103      	bne.n	8005df8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2210      	movs	r2, #16
 8005df6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005dfe:	4619      	mov	r1, r3
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7ff fa0b 	bl	800521c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e06:	e00b      	b.n	8005e20 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7fb fa57 	bl	80012bc <HAL_UART_RxCpltCallback>
}
 8005e0e:	e007      	b.n	8005e20 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f042 0208 	orr.w	r2, r2, #8
 8005e1e:	619a      	str	r2, [r3, #24]
}
 8005e20:	bf00      	nop
 8005e22:	3770      	adds	r7, #112	; 0x70
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <__errno>:
 8005e3c:	4b01      	ldr	r3, [pc, #4]	; (8005e44 <__errno+0x8>)
 8005e3e:	6818      	ldr	r0, [r3, #0]
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	20000014 	.word	0x20000014

08005e48 <__libc_init_array>:
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	4d0d      	ldr	r5, [pc, #52]	; (8005e80 <__libc_init_array+0x38>)
 8005e4c:	4c0d      	ldr	r4, [pc, #52]	; (8005e84 <__libc_init_array+0x3c>)
 8005e4e:	1b64      	subs	r4, r4, r5
 8005e50:	10a4      	asrs	r4, r4, #2
 8005e52:	2600      	movs	r6, #0
 8005e54:	42a6      	cmp	r6, r4
 8005e56:	d109      	bne.n	8005e6c <__libc_init_array+0x24>
 8005e58:	4d0b      	ldr	r5, [pc, #44]	; (8005e88 <__libc_init_array+0x40>)
 8005e5a:	4c0c      	ldr	r4, [pc, #48]	; (8005e8c <__libc_init_array+0x44>)
 8005e5c:	f005 fda2 	bl	800b9a4 <_init>
 8005e60:	1b64      	subs	r4, r4, r5
 8005e62:	10a4      	asrs	r4, r4, #2
 8005e64:	2600      	movs	r6, #0
 8005e66:	42a6      	cmp	r6, r4
 8005e68:	d105      	bne.n	8005e76 <__libc_init_array+0x2e>
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}
 8005e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e70:	4798      	blx	r3
 8005e72:	3601      	adds	r6, #1
 8005e74:	e7ee      	b.n	8005e54 <__libc_init_array+0xc>
 8005e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e7a:	4798      	blx	r3
 8005e7c:	3601      	adds	r6, #1
 8005e7e:	e7f2      	b.n	8005e66 <__libc_init_array+0x1e>
 8005e80:	0800bfc0 	.word	0x0800bfc0
 8005e84:	0800bfc0 	.word	0x0800bfc0
 8005e88:	0800bfc0 	.word	0x0800bfc0
 8005e8c:	0800bfc4 	.word	0x0800bfc4

08005e90 <memset>:
 8005e90:	4402      	add	r2, r0
 8005e92:	4603      	mov	r3, r0
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d100      	bne.n	8005e9a <memset+0xa>
 8005e98:	4770      	bx	lr
 8005e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e9e:	e7f9      	b.n	8005e94 <memset+0x4>

08005ea0 <__cvt>:
 8005ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea4:	ec55 4b10 	vmov	r4, r5, d0
 8005ea8:	2d00      	cmp	r5, #0
 8005eaa:	460e      	mov	r6, r1
 8005eac:	4619      	mov	r1, r3
 8005eae:	462b      	mov	r3, r5
 8005eb0:	bfbb      	ittet	lt
 8005eb2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005eb6:	461d      	movlt	r5, r3
 8005eb8:	2300      	movge	r3, #0
 8005eba:	232d      	movlt	r3, #45	; 0x2d
 8005ebc:	700b      	strb	r3, [r1, #0]
 8005ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ec0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005ec4:	4691      	mov	r9, r2
 8005ec6:	f023 0820 	bic.w	r8, r3, #32
 8005eca:	bfbc      	itt	lt
 8005ecc:	4622      	movlt	r2, r4
 8005ece:	4614      	movlt	r4, r2
 8005ed0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ed4:	d005      	beq.n	8005ee2 <__cvt+0x42>
 8005ed6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005eda:	d100      	bne.n	8005ede <__cvt+0x3e>
 8005edc:	3601      	adds	r6, #1
 8005ede:	2102      	movs	r1, #2
 8005ee0:	e000      	b.n	8005ee4 <__cvt+0x44>
 8005ee2:	2103      	movs	r1, #3
 8005ee4:	ab03      	add	r3, sp, #12
 8005ee6:	9301      	str	r3, [sp, #4]
 8005ee8:	ab02      	add	r3, sp, #8
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	ec45 4b10 	vmov	d0, r4, r5
 8005ef0:	4653      	mov	r3, sl
 8005ef2:	4632      	mov	r2, r6
 8005ef4:	f002 f848 	bl	8007f88 <_dtoa_r>
 8005ef8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005efc:	4607      	mov	r7, r0
 8005efe:	d102      	bne.n	8005f06 <__cvt+0x66>
 8005f00:	f019 0f01 	tst.w	r9, #1
 8005f04:	d022      	beq.n	8005f4c <__cvt+0xac>
 8005f06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f0a:	eb07 0906 	add.w	r9, r7, r6
 8005f0e:	d110      	bne.n	8005f32 <__cvt+0x92>
 8005f10:	783b      	ldrb	r3, [r7, #0]
 8005f12:	2b30      	cmp	r3, #48	; 0x30
 8005f14:	d10a      	bne.n	8005f2c <__cvt+0x8c>
 8005f16:	2200      	movs	r2, #0
 8005f18:	2300      	movs	r3, #0
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	4629      	mov	r1, r5
 8005f1e:	f7fa fde3 	bl	8000ae8 <__aeabi_dcmpeq>
 8005f22:	b918      	cbnz	r0, 8005f2c <__cvt+0x8c>
 8005f24:	f1c6 0601 	rsb	r6, r6, #1
 8005f28:	f8ca 6000 	str.w	r6, [sl]
 8005f2c:	f8da 3000 	ldr.w	r3, [sl]
 8005f30:	4499      	add	r9, r3
 8005f32:	2200      	movs	r2, #0
 8005f34:	2300      	movs	r3, #0
 8005f36:	4620      	mov	r0, r4
 8005f38:	4629      	mov	r1, r5
 8005f3a:	f7fa fdd5 	bl	8000ae8 <__aeabi_dcmpeq>
 8005f3e:	b108      	cbz	r0, 8005f44 <__cvt+0xa4>
 8005f40:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f44:	2230      	movs	r2, #48	; 0x30
 8005f46:	9b03      	ldr	r3, [sp, #12]
 8005f48:	454b      	cmp	r3, r9
 8005f4a:	d307      	bcc.n	8005f5c <__cvt+0xbc>
 8005f4c:	9b03      	ldr	r3, [sp, #12]
 8005f4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f50:	1bdb      	subs	r3, r3, r7
 8005f52:	4638      	mov	r0, r7
 8005f54:	6013      	str	r3, [r2, #0]
 8005f56:	b004      	add	sp, #16
 8005f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f5c:	1c59      	adds	r1, r3, #1
 8005f5e:	9103      	str	r1, [sp, #12]
 8005f60:	701a      	strb	r2, [r3, #0]
 8005f62:	e7f0      	b.n	8005f46 <__cvt+0xa6>

08005f64 <__exponent>:
 8005f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f66:	4603      	mov	r3, r0
 8005f68:	2900      	cmp	r1, #0
 8005f6a:	bfb8      	it	lt
 8005f6c:	4249      	neglt	r1, r1
 8005f6e:	f803 2b02 	strb.w	r2, [r3], #2
 8005f72:	bfb4      	ite	lt
 8005f74:	222d      	movlt	r2, #45	; 0x2d
 8005f76:	222b      	movge	r2, #43	; 0x2b
 8005f78:	2909      	cmp	r1, #9
 8005f7a:	7042      	strb	r2, [r0, #1]
 8005f7c:	dd2a      	ble.n	8005fd4 <__exponent+0x70>
 8005f7e:	f10d 0407 	add.w	r4, sp, #7
 8005f82:	46a4      	mov	ip, r4
 8005f84:	270a      	movs	r7, #10
 8005f86:	46a6      	mov	lr, r4
 8005f88:	460a      	mov	r2, r1
 8005f8a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005f8e:	fb07 1516 	mls	r5, r7, r6, r1
 8005f92:	3530      	adds	r5, #48	; 0x30
 8005f94:	2a63      	cmp	r2, #99	; 0x63
 8005f96:	f104 34ff 	add.w	r4, r4, #4294967295
 8005f9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005f9e:	4631      	mov	r1, r6
 8005fa0:	dcf1      	bgt.n	8005f86 <__exponent+0x22>
 8005fa2:	3130      	adds	r1, #48	; 0x30
 8005fa4:	f1ae 0502 	sub.w	r5, lr, #2
 8005fa8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005fac:	1c44      	adds	r4, r0, #1
 8005fae:	4629      	mov	r1, r5
 8005fb0:	4561      	cmp	r1, ip
 8005fb2:	d30a      	bcc.n	8005fca <__exponent+0x66>
 8005fb4:	f10d 0209 	add.w	r2, sp, #9
 8005fb8:	eba2 020e 	sub.w	r2, r2, lr
 8005fbc:	4565      	cmp	r5, ip
 8005fbe:	bf88      	it	hi
 8005fc0:	2200      	movhi	r2, #0
 8005fc2:	4413      	add	r3, r2
 8005fc4:	1a18      	subs	r0, r3, r0
 8005fc6:	b003      	add	sp, #12
 8005fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fce:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005fd2:	e7ed      	b.n	8005fb0 <__exponent+0x4c>
 8005fd4:	2330      	movs	r3, #48	; 0x30
 8005fd6:	3130      	adds	r1, #48	; 0x30
 8005fd8:	7083      	strb	r3, [r0, #2]
 8005fda:	70c1      	strb	r1, [r0, #3]
 8005fdc:	1d03      	adds	r3, r0, #4
 8005fde:	e7f1      	b.n	8005fc4 <__exponent+0x60>

08005fe0 <_printf_float>:
 8005fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe4:	ed2d 8b02 	vpush	{d8}
 8005fe8:	b08d      	sub	sp, #52	; 0x34
 8005fea:	460c      	mov	r4, r1
 8005fec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005ff0:	4616      	mov	r6, r2
 8005ff2:	461f      	mov	r7, r3
 8005ff4:	4605      	mov	r5, r0
 8005ff6:	f003 faeb 	bl	80095d0 <_localeconv_r>
 8005ffa:	f8d0 a000 	ldr.w	sl, [r0]
 8005ffe:	4650      	mov	r0, sl
 8006000:	f7fa f8f0 	bl	80001e4 <strlen>
 8006004:	2300      	movs	r3, #0
 8006006:	930a      	str	r3, [sp, #40]	; 0x28
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	9305      	str	r3, [sp, #20]
 800600c:	f8d8 3000 	ldr.w	r3, [r8]
 8006010:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006014:	3307      	adds	r3, #7
 8006016:	f023 0307 	bic.w	r3, r3, #7
 800601a:	f103 0208 	add.w	r2, r3, #8
 800601e:	f8c8 2000 	str.w	r2, [r8]
 8006022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006026:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800602a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800602e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006032:	9307      	str	r3, [sp, #28]
 8006034:	f8cd 8018 	str.w	r8, [sp, #24]
 8006038:	ee08 0a10 	vmov	s16, r0
 800603c:	4b9f      	ldr	r3, [pc, #636]	; (80062bc <_printf_float+0x2dc>)
 800603e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006042:	f04f 32ff 	mov.w	r2, #4294967295
 8006046:	f7fa fd81 	bl	8000b4c <__aeabi_dcmpun>
 800604a:	bb88      	cbnz	r0, 80060b0 <_printf_float+0xd0>
 800604c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006050:	4b9a      	ldr	r3, [pc, #616]	; (80062bc <_printf_float+0x2dc>)
 8006052:	f04f 32ff 	mov.w	r2, #4294967295
 8006056:	f7fa fd5b 	bl	8000b10 <__aeabi_dcmple>
 800605a:	bb48      	cbnz	r0, 80060b0 <_printf_float+0xd0>
 800605c:	2200      	movs	r2, #0
 800605e:	2300      	movs	r3, #0
 8006060:	4640      	mov	r0, r8
 8006062:	4649      	mov	r1, r9
 8006064:	f7fa fd4a 	bl	8000afc <__aeabi_dcmplt>
 8006068:	b110      	cbz	r0, 8006070 <_printf_float+0x90>
 800606a:	232d      	movs	r3, #45	; 0x2d
 800606c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006070:	4b93      	ldr	r3, [pc, #588]	; (80062c0 <_printf_float+0x2e0>)
 8006072:	4894      	ldr	r0, [pc, #592]	; (80062c4 <_printf_float+0x2e4>)
 8006074:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006078:	bf94      	ite	ls
 800607a:	4698      	movls	r8, r3
 800607c:	4680      	movhi	r8, r0
 800607e:	2303      	movs	r3, #3
 8006080:	6123      	str	r3, [r4, #16]
 8006082:	9b05      	ldr	r3, [sp, #20]
 8006084:	f023 0204 	bic.w	r2, r3, #4
 8006088:	6022      	str	r2, [r4, #0]
 800608a:	f04f 0900 	mov.w	r9, #0
 800608e:	9700      	str	r7, [sp, #0]
 8006090:	4633      	mov	r3, r6
 8006092:	aa0b      	add	r2, sp, #44	; 0x2c
 8006094:	4621      	mov	r1, r4
 8006096:	4628      	mov	r0, r5
 8006098:	f000 f9d8 	bl	800644c <_printf_common>
 800609c:	3001      	adds	r0, #1
 800609e:	f040 8090 	bne.w	80061c2 <_printf_float+0x1e2>
 80060a2:	f04f 30ff 	mov.w	r0, #4294967295
 80060a6:	b00d      	add	sp, #52	; 0x34
 80060a8:	ecbd 8b02 	vpop	{d8}
 80060ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b0:	4642      	mov	r2, r8
 80060b2:	464b      	mov	r3, r9
 80060b4:	4640      	mov	r0, r8
 80060b6:	4649      	mov	r1, r9
 80060b8:	f7fa fd48 	bl	8000b4c <__aeabi_dcmpun>
 80060bc:	b140      	cbz	r0, 80060d0 <_printf_float+0xf0>
 80060be:	464b      	mov	r3, r9
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	bfbc      	itt	lt
 80060c4:	232d      	movlt	r3, #45	; 0x2d
 80060c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80060ca:	487f      	ldr	r0, [pc, #508]	; (80062c8 <_printf_float+0x2e8>)
 80060cc:	4b7f      	ldr	r3, [pc, #508]	; (80062cc <_printf_float+0x2ec>)
 80060ce:	e7d1      	b.n	8006074 <_printf_float+0x94>
 80060d0:	6863      	ldr	r3, [r4, #4]
 80060d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80060d6:	9206      	str	r2, [sp, #24]
 80060d8:	1c5a      	adds	r2, r3, #1
 80060da:	d13f      	bne.n	800615c <_printf_float+0x17c>
 80060dc:	2306      	movs	r3, #6
 80060de:	6063      	str	r3, [r4, #4]
 80060e0:	9b05      	ldr	r3, [sp, #20]
 80060e2:	6861      	ldr	r1, [r4, #4]
 80060e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80060e8:	2300      	movs	r3, #0
 80060ea:	9303      	str	r3, [sp, #12]
 80060ec:	ab0a      	add	r3, sp, #40	; 0x28
 80060ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 80060f2:	ab09      	add	r3, sp, #36	; 0x24
 80060f4:	ec49 8b10 	vmov	d0, r8, r9
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	6022      	str	r2, [r4, #0]
 80060fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006100:	4628      	mov	r0, r5
 8006102:	f7ff fecd 	bl	8005ea0 <__cvt>
 8006106:	9b06      	ldr	r3, [sp, #24]
 8006108:	9909      	ldr	r1, [sp, #36]	; 0x24
 800610a:	2b47      	cmp	r3, #71	; 0x47
 800610c:	4680      	mov	r8, r0
 800610e:	d108      	bne.n	8006122 <_printf_float+0x142>
 8006110:	1cc8      	adds	r0, r1, #3
 8006112:	db02      	blt.n	800611a <_printf_float+0x13a>
 8006114:	6863      	ldr	r3, [r4, #4]
 8006116:	4299      	cmp	r1, r3
 8006118:	dd41      	ble.n	800619e <_printf_float+0x1be>
 800611a:	f1ab 0b02 	sub.w	fp, fp, #2
 800611e:	fa5f fb8b 	uxtb.w	fp, fp
 8006122:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006126:	d820      	bhi.n	800616a <_printf_float+0x18a>
 8006128:	3901      	subs	r1, #1
 800612a:	465a      	mov	r2, fp
 800612c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006130:	9109      	str	r1, [sp, #36]	; 0x24
 8006132:	f7ff ff17 	bl	8005f64 <__exponent>
 8006136:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006138:	1813      	adds	r3, r2, r0
 800613a:	2a01      	cmp	r2, #1
 800613c:	4681      	mov	r9, r0
 800613e:	6123      	str	r3, [r4, #16]
 8006140:	dc02      	bgt.n	8006148 <_printf_float+0x168>
 8006142:	6822      	ldr	r2, [r4, #0]
 8006144:	07d2      	lsls	r2, r2, #31
 8006146:	d501      	bpl.n	800614c <_printf_float+0x16c>
 8006148:	3301      	adds	r3, #1
 800614a:	6123      	str	r3, [r4, #16]
 800614c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006150:	2b00      	cmp	r3, #0
 8006152:	d09c      	beq.n	800608e <_printf_float+0xae>
 8006154:	232d      	movs	r3, #45	; 0x2d
 8006156:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800615a:	e798      	b.n	800608e <_printf_float+0xae>
 800615c:	9a06      	ldr	r2, [sp, #24]
 800615e:	2a47      	cmp	r2, #71	; 0x47
 8006160:	d1be      	bne.n	80060e0 <_printf_float+0x100>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1bc      	bne.n	80060e0 <_printf_float+0x100>
 8006166:	2301      	movs	r3, #1
 8006168:	e7b9      	b.n	80060de <_printf_float+0xfe>
 800616a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800616e:	d118      	bne.n	80061a2 <_printf_float+0x1c2>
 8006170:	2900      	cmp	r1, #0
 8006172:	6863      	ldr	r3, [r4, #4]
 8006174:	dd0b      	ble.n	800618e <_printf_float+0x1ae>
 8006176:	6121      	str	r1, [r4, #16]
 8006178:	b913      	cbnz	r3, 8006180 <_printf_float+0x1a0>
 800617a:	6822      	ldr	r2, [r4, #0]
 800617c:	07d0      	lsls	r0, r2, #31
 800617e:	d502      	bpl.n	8006186 <_printf_float+0x1a6>
 8006180:	3301      	adds	r3, #1
 8006182:	440b      	add	r3, r1
 8006184:	6123      	str	r3, [r4, #16]
 8006186:	65a1      	str	r1, [r4, #88]	; 0x58
 8006188:	f04f 0900 	mov.w	r9, #0
 800618c:	e7de      	b.n	800614c <_printf_float+0x16c>
 800618e:	b913      	cbnz	r3, 8006196 <_printf_float+0x1b6>
 8006190:	6822      	ldr	r2, [r4, #0]
 8006192:	07d2      	lsls	r2, r2, #31
 8006194:	d501      	bpl.n	800619a <_printf_float+0x1ba>
 8006196:	3302      	adds	r3, #2
 8006198:	e7f4      	b.n	8006184 <_printf_float+0x1a4>
 800619a:	2301      	movs	r3, #1
 800619c:	e7f2      	b.n	8006184 <_printf_float+0x1a4>
 800619e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80061a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061a4:	4299      	cmp	r1, r3
 80061a6:	db05      	blt.n	80061b4 <_printf_float+0x1d4>
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	6121      	str	r1, [r4, #16]
 80061ac:	07d8      	lsls	r0, r3, #31
 80061ae:	d5ea      	bpl.n	8006186 <_printf_float+0x1a6>
 80061b0:	1c4b      	adds	r3, r1, #1
 80061b2:	e7e7      	b.n	8006184 <_printf_float+0x1a4>
 80061b4:	2900      	cmp	r1, #0
 80061b6:	bfd4      	ite	le
 80061b8:	f1c1 0202 	rsble	r2, r1, #2
 80061bc:	2201      	movgt	r2, #1
 80061be:	4413      	add	r3, r2
 80061c0:	e7e0      	b.n	8006184 <_printf_float+0x1a4>
 80061c2:	6823      	ldr	r3, [r4, #0]
 80061c4:	055a      	lsls	r2, r3, #21
 80061c6:	d407      	bmi.n	80061d8 <_printf_float+0x1f8>
 80061c8:	6923      	ldr	r3, [r4, #16]
 80061ca:	4642      	mov	r2, r8
 80061cc:	4631      	mov	r1, r6
 80061ce:	4628      	mov	r0, r5
 80061d0:	47b8      	blx	r7
 80061d2:	3001      	adds	r0, #1
 80061d4:	d12c      	bne.n	8006230 <_printf_float+0x250>
 80061d6:	e764      	b.n	80060a2 <_printf_float+0xc2>
 80061d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80061dc:	f240 80e0 	bls.w	80063a0 <_printf_float+0x3c0>
 80061e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061e4:	2200      	movs	r2, #0
 80061e6:	2300      	movs	r3, #0
 80061e8:	f7fa fc7e 	bl	8000ae8 <__aeabi_dcmpeq>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d034      	beq.n	800625a <_printf_float+0x27a>
 80061f0:	4a37      	ldr	r2, [pc, #220]	; (80062d0 <_printf_float+0x2f0>)
 80061f2:	2301      	movs	r3, #1
 80061f4:	4631      	mov	r1, r6
 80061f6:	4628      	mov	r0, r5
 80061f8:	47b8      	blx	r7
 80061fa:	3001      	adds	r0, #1
 80061fc:	f43f af51 	beq.w	80060a2 <_printf_float+0xc2>
 8006200:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006204:	429a      	cmp	r2, r3
 8006206:	db02      	blt.n	800620e <_printf_float+0x22e>
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	07d8      	lsls	r0, r3, #31
 800620c:	d510      	bpl.n	8006230 <_printf_float+0x250>
 800620e:	ee18 3a10 	vmov	r3, s16
 8006212:	4652      	mov	r2, sl
 8006214:	4631      	mov	r1, r6
 8006216:	4628      	mov	r0, r5
 8006218:	47b8      	blx	r7
 800621a:	3001      	adds	r0, #1
 800621c:	f43f af41 	beq.w	80060a2 <_printf_float+0xc2>
 8006220:	f04f 0800 	mov.w	r8, #0
 8006224:	f104 091a 	add.w	r9, r4, #26
 8006228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800622a:	3b01      	subs	r3, #1
 800622c:	4543      	cmp	r3, r8
 800622e:	dc09      	bgt.n	8006244 <_printf_float+0x264>
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	079b      	lsls	r3, r3, #30
 8006234:	f100 8105 	bmi.w	8006442 <_printf_float+0x462>
 8006238:	68e0      	ldr	r0, [r4, #12]
 800623a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800623c:	4298      	cmp	r0, r3
 800623e:	bfb8      	it	lt
 8006240:	4618      	movlt	r0, r3
 8006242:	e730      	b.n	80060a6 <_printf_float+0xc6>
 8006244:	2301      	movs	r3, #1
 8006246:	464a      	mov	r2, r9
 8006248:	4631      	mov	r1, r6
 800624a:	4628      	mov	r0, r5
 800624c:	47b8      	blx	r7
 800624e:	3001      	adds	r0, #1
 8006250:	f43f af27 	beq.w	80060a2 <_printf_float+0xc2>
 8006254:	f108 0801 	add.w	r8, r8, #1
 8006258:	e7e6      	b.n	8006228 <_printf_float+0x248>
 800625a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800625c:	2b00      	cmp	r3, #0
 800625e:	dc39      	bgt.n	80062d4 <_printf_float+0x2f4>
 8006260:	4a1b      	ldr	r2, [pc, #108]	; (80062d0 <_printf_float+0x2f0>)
 8006262:	2301      	movs	r3, #1
 8006264:	4631      	mov	r1, r6
 8006266:	4628      	mov	r0, r5
 8006268:	47b8      	blx	r7
 800626a:	3001      	adds	r0, #1
 800626c:	f43f af19 	beq.w	80060a2 <_printf_float+0xc2>
 8006270:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006274:	4313      	orrs	r3, r2
 8006276:	d102      	bne.n	800627e <_printf_float+0x29e>
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	07d9      	lsls	r1, r3, #31
 800627c:	d5d8      	bpl.n	8006230 <_printf_float+0x250>
 800627e:	ee18 3a10 	vmov	r3, s16
 8006282:	4652      	mov	r2, sl
 8006284:	4631      	mov	r1, r6
 8006286:	4628      	mov	r0, r5
 8006288:	47b8      	blx	r7
 800628a:	3001      	adds	r0, #1
 800628c:	f43f af09 	beq.w	80060a2 <_printf_float+0xc2>
 8006290:	f04f 0900 	mov.w	r9, #0
 8006294:	f104 0a1a 	add.w	sl, r4, #26
 8006298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800629a:	425b      	negs	r3, r3
 800629c:	454b      	cmp	r3, r9
 800629e:	dc01      	bgt.n	80062a4 <_printf_float+0x2c4>
 80062a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062a2:	e792      	b.n	80061ca <_printf_float+0x1ea>
 80062a4:	2301      	movs	r3, #1
 80062a6:	4652      	mov	r2, sl
 80062a8:	4631      	mov	r1, r6
 80062aa:	4628      	mov	r0, r5
 80062ac:	47b8      	blx	r7
 80062ae:	3001      	adds	r0, #1
 80062b0:	f43f aef7 	beq.w	80060a2 <_printf_float+0xc2>
 80062b4:	f109 0901 	add.w	r9, r9, #1
 80062b8:	e7ee      	b.n	8006298 <_printf_float+0x2b8>
 80062ba:	bf00      	nop
 80062bc:	7fefffff 	.word	0x7fefffff
 80062c0:	0800ba6c 	.word	0x0800ba6c
 80062c4:	0800ba70 	.word	0x0800ba70
 80062c8:	0800ba78 	.word	0x0800ba78
 80062cc:	0800ba74 	.word	0x0800ba74
 80062d0:	0800ba7c 	.word	0x0800ba7c
 80062d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062d8:	429a      	cmp	r2, r3
 80062da:	bfa8      	it	ge
 80062dc:	461a      	movge	r2, r3
 80062de:	2a00      	cmp	r2, #0
 80062e0:	4691      	mov	r9, r2
 80062e2:	dc37      	bgt.n	8006354 <_printf_float+0x374>
 80062e4:	f04f 0b00 	mov.w	fp, #0
 80062e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062ec:	f104 021a 	add.w	r2, r4, #26
 80062f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062f2:	9305      	str	r3, [sp, #20]
 80062f4:	eba3 0309 	sub.w	r3, r3, r9
 80062f8:	455b      	cmp	r3, fp
 80062fa:	dc33      	bgt.n	8006364 <_printf_float+0x384>
 80062fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006300:	429a      	cmp	r2, r3
 8006302:	db3b      	blt.n	800637c <_printf_float+0x39c>
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	07da      	lsls	r2, r3, #31
 8006308:	d438      	bmi.n	800637c <_printf_float+0x39c>
 800630a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800630c:	9b05      	ldr	r3, [sp, #20]
 800630e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	eba2 0901 	sub.w	r9, r2, r1
 8006316:	4599      	cmp	r9, r3
 8006318:	bfa8      	it	ge
 800631a:	4699      	movge	r9, r3
 800631c:	f1b9 0f00 	cmp.w	r9, #0
 8006320:	dc35      	bgt.n	800638e <_printf_float+0x3ae>
 8006322:	f04f 0800 	mov.w	r8, #0
 8006326:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800632a:	f104 0a1a 	add.w	sl, r4, #26
 800632e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006332:	1a9b      	subs	r3, r3, r2
 8006334:	eba3 0309 	sub.w	r3, r3, r9
 8006338:	4543      	cmp	r3, r8
 800633a:	f77f af79 	ble.w	8006230 <_printf_float+0x250>
 800633e:	2301      	movs	r3, #1
 8006340:	4652      	mov	r2, sl
 8006342:	4631      	mov	r1, r6
 8006344:	4628      	mov	r0, r5
 8006346:	47b8      	blx	r7
 8006348:	3001      	adds	r0, #1
 800634a:	f43f aeaa 	beq.w	80060a2 <_printf_float+0xc2>
 800634e:	f108 0801 	add.w	r8, r8, #1
 8006352:	e7ec      	b.n	800632e <_printf_float+0x34e>
 8006354:	4613      	mov	r3, r2
 8006356:	4631      	mov	r1, r6
 8006358:	4642      	mov	r2, r8
 800635a:	4628      	mov	r0, r5
 800635c:	47b8      	blx	r7
 800635e:	3001      	adds	r0, #1
 8006360:	d1c0      	bne.n	80062e4 <_printf_float+0x304>
 8006362:	e69e      	b.n	80060a2 <_printf_float+0xc2>
 8006364:	2301      	movs	r3, #1
 8006366:	4631      	mov	r1, r6
 8006368:	4628      	mov	r0, r5
 800636a:	9205      	str	r2, [sp, #20]
 800636c:	47b8      	blx	r7
 800636e:	3001      	adds	r0, #1
 8006370:	f43f ae97 	beq.w	80060a2 <_printf_float+0xc2>
 8006374:	9a05      	ldr	r2, [sp, #20]
 8006376:	f10b 0b01 	add.w	fp, fp, #1
 800637a:	e7b9      	b.n	80062f0 <_printf_float+0x310>
 800637c:	ee18 3a10 	vmov	r3, s16
 8006380:	4652      	mov	r2, sl
 8006382:	4631      	mov	r1, r6
 8006384:	4628      	mov	r0, r5
 8006386:	47b8      	blx	r7
 8006388:	3001      	adds	r0, #1
 800638a:	d1be      	bne.n	800630a <_printf_float+0x32a>
 800638c:	e689      	b.n	80060a2 <_printf_float+0xc2>
 800638e:	9a05      	ldr	r2, [sp, #20]
 8006390:	464b      	mov	r3, r9
 8006392:	4442      	add	r2, r8
 8006394:	4631      	mov	r1, r6
 8006396:	4628      	mov	r0, r5
 8006398:	47b8      	blx	r7
 800639a:	3001      	adds	r0, #1
 800639c:	d1c1      	bne.n	8006322 <_printf_float+0x342>
 800639e:	e680      	b.n	80060a2 <_printf_float+0xc2>
 80063a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063a2:	2a01      	cmp	r2, #1
 80063a4:	dc01      	bgt.n	80063aa <_printf_float+0x3ca>
 80063a6:	07db      	lsls	r3, r3, #31
 80063a8:	d538      	bpl.n	800641c <_printf_float+0x43c>
 80063aa:	2301      	movs	r3, #1
 80063ac:	4642      	mov	r2, r8
 80063ae:	4631      	mov	r1, r6
 80063b0:	4628      	mov	r0, r5
 80063b2:	47b8      	blx	r7
 80063b4:	3001      	adds	r0, #1
 80063b6:	f43f ae74 	beq.w	80060a2 <_printf_float+0xc2>
 80063ba:	ee18 3a10 	vmov	r3, s16
 80063be:	4652      	mov	r2, sl
 80063c0:	4631      	mov	r1, r6
 80063c2:	4628      	mov	r0, r5
 80063c4:	47b8      	blx	r7
 80063c6:	3001      	adds	r0, #1
 80063c8:	f43f ae6b 	beq.w	80060a2 <_printf_float+0xc2>
 80063cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063d0:	2200      	movs	r2, #0
 80063d2:	2300      	movs	r3, #0
 80063d4:	f7fa fb88 	bl	8000ae8 <__aeabi_dcmpeq>
 80063d8:	b9d8      	cbnz	r0, 8006412 <_printf_float+0x432>
 80063da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063dc:	f108 0201 	add.w	r2, r8, #1
 80063e0:	3b01      	subs	r3, #1
 80063e2:	4631      	mov	r1, r6
 80063e4:	4628      	mov	r0, r5
 80063e6:	47b8      	blx	r7
 80063e8:	3001      	adds	r0, #1
 80063ea:	d10e      	bne.n	800640a <_printf_float+0x42a>
 80063ec:	e659      	b.n	80060a2 <_printf_float+0xc2>
 80063ee:	2301      	movs	r3, #1
 80063f0:	4652      	mov	r2, sl
 80063f2:	4631      	mov	r1, r6
 80063f4:	4628      	mov	r0, r5
 80063f6:	47b8      	blx	r7
 80063f8:	3001      	adds	r0, #1
 80063fa:	f43f ae52 	beq.w	80060a2 <_printf_float+0xc2>
 80063fe:	f108 0801 	add.w	r8, r8, #1
 8006402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006404:	3b01      	subs	r3, #1
 8006406:	4543      	cmp	r3, r8
 8006408:	dcf1      	bgt.n	80063ee <_printf_float+0x40e>
 800640a:	464b      	mov	r3, r9
 800640c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006410:	e6dc      	b.n	80061cc <_printf_float+0x1ec>
 8006412:	f04f 0800 	mov.w	r8, #0
 8006416:	f104 0a1a 	add.w	sl, r4, #26
 800641a:	e7f2      	b.n	8006402 <_printf_float+0x422>
 800641c:	2301      	movs	r3, #1
 800641e:	4642      	mov	r2, r8
 8006420:	e7df      	b.n	80063e2 <_printf_float+0x402>
 8006422:	2301      	movs	r3, #1
 8006424:	464a      	mov	r2, r9
 8006426:	4631      	mov	r1, r6
 8006428:	4628      	mov	r0, r5
 800642a:	47b8      	blx	r7
 800642c:	3001      	adds	r0, #1
 800642e:	f43f ae38 	beq.w	80060a2 <_printf_float+0xc2>
 8006432:	f108 0801 	add.w	r8, r8, #1
 8006436:	68e3      	ldr	r3, [r4, #12]
 8006438:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800643a:	1a5b      	subs	r3, r3, r1
 800643c:	4543      	cmp	r3, r8
 800643e:	dcf0      	bgt.n	8006422 <_printf_float+0x442>
 8006440:	e6fa      	b.n	8006238 <_printf_float+0x258>
 8006442:	f04f 0800 	mov.w	r8, #0
 8006446:	f104 0919 	add.w	r9, r4, #25
 800644a:	e7f4      	b.n	8006436 <_printf_float+0x456>

0800644c <_printf_common>:
 800644c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006450:	4616      	mov	r6, r2
 8006452:	4699      	mov	r9, r3
 8006454:	688a      	ldr	r2, [r1, #8]
 8006456:	690b      	ldr	r3, [r1, #16]
 8006458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800645c:	4293      	cmp	r3, r2
 800645e:	bfb8      	it	lt
 8006460:	4613      	movlt	r3, r2
 8006462:	6033      	str	r3, [r6, #0]
 8006464:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006468:	4607      	mov	r7, r0
 800646a:	460c      	mov	r4, r1
 800646c:	b10a      	cbz	r2, 8006472 <_printf_common+0x26>
 800646e:	3301      	adds	r3, #1
 8006470:	6033      	str	r3, [r6, #0]
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	0699      	lsls	r1, r3, #26
 8006476:	bf42      	ittt	mi
 8006478:	6833      	ldrmi	r3, [r6, #0]
 800647a:	3302      	addmi	r3, #2
 800647c:	6033      	strmi	r3, [r6, #0]
 800647e:	6825      	ldr	r5, [r4, #0]
 8006480:	f015 0506 	ands.w	r5, r5, #6
 8006484:	d106      	bne.n	8006494 <_printf_common+0x48>
 8006486:	f104 0a19 	add.w	sl, r4, #25
 800648a:	68e3      	ldr	r3, [r4, #12]
 800648c:	6832      	ldr	r2, [r6, #0]
 800648e:	1a9b      	subs	r3, r3, r2
 8006490:	42ab      	cmp	r3, r5
 8006492:	dc26      	bgt.n	80064e2 <_printf_common+0x96>
 8006494:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006498:	1e13      	subs	r3, r2, #0
 800649a:	6822      	ldr	r2, [r4, #0]
 800649c:	bf18      	it	ne
 800649e:	2301      	movne	r3, #1
 80064a0:	0692      	lsls	r2, r2, #26
 80064a2:	d42b      	bmi.n	80064fc <_printf_common+0xb0>
 80064a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064a8:	4649      	mov	r1, r9
 80064aa:	4638      	mov	r0, r7
 80064ac:	47c0      	blx	r8
 80064ae:	3001      	adds	r0, #1
 80064b0:	d01e      	beq.n	80064f0 <_printf_common+0xa4>
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	68e5      	ldr	r5, [r4, #12]
 80064b6:	6832      	ldr	r2, [r6, #0]
 80064b8:	f003 0306 	and.w	r3, r3, #6
 80064bc:	2b04      	cmp	r3, #4
 80064be:	bf08      	it	eq
 80064c0:	1aad      	subeq	r5, r5, r2
 80064c2:	68a3      	ldr	r3, [r4, #8]
 80064c4:	6922      	ldr	r2, [r4, #16]
 80064c6:	bf0c      	ite	eq
 80064c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064cc:	2500      	movne	r5, #0
 80064ce:	4293      	cmp	r3, r2
 80064d0:	bfc4      	itt	gt
 80064d2:	1a9b      	subgt	r3, r3, r2
 80064d4:	18ed      	addgt	r5, r5, r3
 80064d6:	2600      	movs	r6, #0
 80064d8:	341a      	adds	r4, #26
 80064da:	42b5      	cmp	r5, r6
 80064dc:	d11a      	bne.n	8006514 <_printf_common+0xc8>
 80064de:	2000      	movs	r0, #0
 80064e0:	e008      	b.n	80064f4 <_printf_common+0xa8>
 80064e2:	2301      	movs	r3, #1
 80064e4:	4652      	mov	r2, sl
 80064e6:	4649      	mov	r1, r9
 80064e8:	4638      	mov	r0, r7
 80064ea:	47c0      	blx	r8
 80064ec:	3001      	adds	r0, #1
 80064ee:	d103      	bne.n	80064f8 <_printf_common+0xac>
 80064f0:	f04f 30ff 	mov.w	r0, #4294967295
 80064f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f8:	3501      	adds	r5, #1
 80064fa:	e7c6      	b.n	800648a <_printf_common+0x3e>
 80064fc:	18e1      	adds	r1, r4, r3
 80064fe:	1c5a      	adds	r2, r3, #1
 8006500:	2030      	movs	r0, #48	; 0x30
 8006502:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006506:	4422      	add	r2, r4
 8006508:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800650c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006510:	3302      	adds	r3, #2
 8006512:	e7c7      	b.n	80064a4 <_printf_common+0x58>
 8006514:	2301      	movs	r3, #1
 8006516:	4622      	mov	r2, r4
 8006518:	4649      	mov	r1, r9
 800651a:	4638      	mov	r0, r7
 800651c:	47c0      	blx	r8
 800651e:	3001      	adds	r0, #1
 8006520:	d0e6      	beq.n	80064f0 <_printf_common+0xa4>
 8006522:	3601      	adds	r6, #1
 8006524:	e7d9      	b.n	80064da <_printf_common+0x8e>
	...

08006528 <_printf_i>:
 8006528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800652c:	460c      	mov	r4, r1
 800652e:	4691      	mov	r9, r2
 8006530:	7e27      	ldrb	r7, [r4, #24]
 8006532:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006534:	2f78      	cmp	r7, #120	; 0x78
 8006536:	4680      	mov	r8, r0
 8006538:	469a      	mov	sl, r3
 800653a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800653e:	d807      	bhi.n	8006550 <_printf_i+0x28>
 8006540:	2f62      	cmp	r7, #98	; 0x62
 8006542:	d80a      	bhi.n	800655a <_printf_i+0x32>
 8006544:	2f00      	cmp	r7, #0
 8006546:	f000 80d8 	beq.w	80066fa <_printf_i+0x1d2>
 800654a:	2f58      	cmp	r7, #88	; 0x58
 800654c:	f000 80a3 	beq.w	8006696 <_printf_i+0x16e>
 8006550:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006554:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006558:	e03a      	b.n	80065d0 <_printf_i+0xa8>
 800655a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800655e:	2b15      	cmp	r3, #21
 8006560:	d8f6      	bhi.n	8006550 <_printf_i+0x28>
 8006562:	a001      	add	r0, pc, #4	; (adr r0, 8006568 <_printf_i+0x40>)
 8006564:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006568:	080065c1 	.word	0x080065c1
 800656c:	080065d5 	.word	0x080065d5
 8006570:	08006551 	.word	0x08006551
 8006574:	08006551 	.word	0x08006551
 8006578:	08006551 	.word	0x08006551
 800657c:	08006551 	.word	0x08006551
 8006580:	080065d5 	.word	0x080065d5
 8006584:	08006551 	.word	0x08006551
 8006588:	08006551 	.word	0x08006551
 800658c:	08006551 	.word	0x08006551
 8006590:	08006551 	.word	0x08006551
 8006594:	080066e1 	.word	0x080066e1
 8006598:	08006605 	.word	0x08006605
 800659c:	080066c3 	.word	0x080066c3
 80065a0:	08006551 	.word	0x08006551
 80065a4:	08006551 	.word	0x08006551
 80065a8:	08006703 	.word	0x08006703
 80065ac:	08006551 	.word	0x08006551
 80065b0:	08006605 	.word	0x08006605
 80065b4:	08006551 	.word	0x08006551
 80065b8:	08006551 	.word	0x08006551
 80065bc:	080066cb 	.word	0x080066cb
 80065c0:	680b      	ldr	r3, [r1, #0]
 80065c2:	1d1a      	adds	r2, r3, #4
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	600a      	str	r2, [r1, #0]
 80065c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80065cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065d0:	2301      	movs	r3, #1
 80065d2:	e0a3      	b.n	800671c <_printf_i+0x1f4>
 80065d4:	6825      	ldr	r5, [r4, #0]
 80065d6:	6808      	ldr	r0, [r1, #0]
 80065d8:	062e      	lsls	r6, r5, #24
 80065da:	f100 0304 	add.w	r3, r0, #4
 80065de:	d50a      	bpl.n	80065f6 <_printf_i+0xce>
 80065e0:	6805      	ldr	r5, [r0, #0]
 80065e2:	600b      	str	r3, [r1, #0]
 80065e4:	2d00      	cmp	r5, #0
 80065e6:	da03      	bge.n	80065f0 <_printf_i+0xc8>
 80065e8:	232d      	movs	r3, #45	; 0x2d
 80065ea:	426d      	negs	r5, r5
 80065ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065f0:	485e      	ldr	r0, [pc, #376]	; (800676c <_printf_i+0x244>)
 80065f2:	230a      	movs	r3, #10
 80065f4:	e019      	b.n	800662a <_printf_i+0x102>
 80065f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80065fa:	6805      	ldr	r5, [r0, #0]
 80065fc:	600b      	str	r3, [r1, #0]
 80065fe:	bf18      	it	ne
 8006600:	b22d      	sxthne	r5, r5
 8006602:	e7ef      	b.n	80065e4 <_printf_i+0xbc>
 8006604:	680b      	ldr	r3, [r1, #0]
 8006606:	6825      	ldr	r5, [r4, #0]
 8006608:	1d18      	adds	r0, r3, #4
 800660a:	6008      	str	r0, [r1, #0]
 800660c:	0628      	lsls	r0, r5, #24
 800660e:	d501      	bpl.n	8006614 <_printf_i+0xec>
 8006610:	681d      	ldr	r5, [r3, #0]
 8006612:	e002      	b.n	800661a <_printf_i+0xf2>
 8006614:	0669      	lsls	r1, r5, #25
 8006616:	d5fb      	bpl.n	8006610 <_printf_i+0xe8>
 8006618:	881d      	ldrh	r5, [r3, #0]
 800661a:	4854      	ldr	r0, [pc, #336]	; (800676c <_printf_i+0x244>)
 800661c:	2f6f      	cmp	r7, #111	; 0x6f
 800661e:	bf0c      	ite	eq
 8006620:	2308      	moveq	r3, #8
 8006622:	230a      	movne	r3, #10
 8006624:	2100      	movs	r1, #0
 8006626:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800662a:	6866      	ldr	r6, [r4, #4]
 800662c:	60a6      	str	r6, [r4, #8]
 800662e:	2e00      	cmp	r6, #0
 8006630:	bfa2      	ittt	ge
 8006632:	6821      	ldrge	r1, [r4, #0]
 8006634:	f021 0104 	bicge.w	r1, r1, #4
 8006638:	6021      	strge	r1, [r4, #0]
 800663a:	b90d      	cbnz	r5, 8006640 <_printf_i+0x118>
 800663c:	2e00      	cmp	r6, #0
 800663e:	d04d      	beq.n	80066dc <_printf_i+0x1b4>
 8006640:	4616      	mov	r6, r2
 8006642:	fbb5 f1f3 	udiv	r1, r5, r3
 8006646:	fb03 5711 	mls	r7, r3, r1, r5
 800664a:	5dc7      	ldrb	r7, [r0, r7]
 800664c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006650:	462f      	mov	r7, r5
 8006652:	42bb      	cmp	r3, r7
 8006654:	460d      	mov	r5, r1
 8006656:	d9f4      	bls.n	8006642 <_printf_i+0x11a>
 8006658:	2b08      	cmp	r3, #8
 800665a:	d10b      	bne.n	8006674 <_printf_i+0x14c>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	07df      	lsls	r7, r3, #31
 8006660:	d508      	bpl.n	8006674 <_printf_i+0x14c>
 8006662:	6923      	ldr	r3, [r4, #16]
 8006664:	6861      	ldr	r1, [r4, #4]
 8006666:	4299      	cmp	r1, r3
 8006668:	bfde      	ittt	le
 800666a:	2330      	movle	r3, #48	; 0x30
 800666c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006670:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006674:	1b92      	subs	r2, r2, r6
 8006676:	6122      	str	r2, [r4, #16]
 8006678:	f8cd a000 	str.w	sl, [sp]
 800667c:	464b      	mov	r3, r9
 800667e:	aa03      	add	r2, sp, #12
 8006680:	4621      	mov	r1, r4
 8006682:	4640      	mov	r0, r8
 8006684:	f7ff fee2 	bl	800644c <_printf_common>
 8006688:	3001      	adds	r0, #1
 800668a:	d14c      	bne.n	8006726 <_printf_i+0x1fe>
 800668c:	f04f 30ff 	mov.w	r0, #4294967295
 8006690:	b004      	add	sp, #16
 8006692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006696:	4835      	ldr	r0, [pc, #212]	; (800676c <_printf_i+0x244>)
 8006698:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	680e      	ldr	r6, [r1, #0]
 80066a0:	061f      	lsls	r7, r3, #24
 80066a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80066a6:	600e      	str	r6, [r1, #0]
 80066a8:	d514      	bpl.n	80066d4 <_printf_i+0x1ac>
 80066aa:	07d9      	lsls	r1, r3, #31
 80066ac:	bf44      	itt	mi
 80066ae:	f043 0320 	orrmi.w	r3, r3, #32
 80066b2:	6023      	strmi	r3, [r4, #0]
 80066b4:	b91d      	cbnz	r5, 80066be <_printf_i+0x196>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	f023 0320 	bic.w	r3, r3, #32
 80066bc:	6023      	str	r3, [r4, #0]
 80066be:	2310      	movs	r3, #16
 80066c0:	e7b0      	b.n	8006624 <_printf_i+0xfc>
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	f043 0320 	orr.w	r3, r3, #32
 80066c8:	6023      	str	r3, [r4, #0]
 80066ca:	2378      	movs	r3, #120	; 0x78
 80066cc:	4828      	ldr	r0, [pc, #160]	; (8006770 <_printf_i+0x248>)
 80066ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066d2:	e7e3      	b.n	800669c <_printf_i+0x174>
 80066d4:	065e      	lsls	r6, r3, #25
 80066d6:	bf48      	it	mi
 80066d8:	b2ad      	uxthmi	r5, r5
 80066da:	e7e6      	b.n	80066aa <_printf_i+0x182>
 80066dc:	4616      	mov	r6, r2
 80066de:	e7bb      	b.n	8006658 <_printf_i+0x130>
 80066e0:	680b      	ldr	r3, [r1, #0]
 80066e2:	6826      	ldr	r6, [r4, #0]
 80066e4:	6960      	ldr	r0, [r4, #20]
 80066e6:	1d1d      	adds	r5, r3, #4
 80066e8:	600d      	str	r5, [r1, #0]
 80066ea:	0635      	lsls	r5, r6, #24
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	d501      	bpl.n	80066f4 <_printf_i+0x1cc>
 80066f0:	6018      	str	r0, [r3, #0]
 80066f2:	e002      	b.n	80066fa <_printf_i+0x1d2>
 80066f4:	0671      	lsls	r1, r6, #25
 80066f6:	d5fb      	bpl.n	80066f0 <_printf_i+0x1c8>
 80066f8:	8018      	strh	r0, [r3, #0]
 80066fa:	2300      	movs	r3, #0
 80066fc:	6123      	str	r3, [r4, #16]
 80066fe:	4616      	mov	r6, r2
 8006700:	e7ba      	b.n	8006678 <_printf_i+0x150>
 8006702:	680b      	ldr	r3, [r1, #0]
 8006704:	1d1a      	adds	r2, r3, #4
 8006706:	600a      	str	r2, [r1, #0]
 8006708:	681e      	ldr	r6, [r3, #0]
 800670a:	6862      	ldr	r2, [r4, #4]
 800670c:	2100      	movs	r1, #0
 800670e:	4630      	mov	r0, r6
 8006710:	f7f9 fd76 	bl	8000200 <memchr>
 8006714:	b108      	cbz	r0, 800671a <_printf_i+0x1f2>
 8006716:	1b80      	subs	r0, r0, r6
 8006718:	6060      	str	r0, [r4, #4]
 800671a:	6863      	ldr	r3, [r4, #4]
 800671c:	6123      	str	r3, [r4, #16]
 800671e:	2300      	movs	r3, #0
 8006720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006724:	e7a8      	b.n	8006678 <_printf_i+0x150>
 8006726:	6923      	ldr	r3, [r4, #16]
 8006728:	4632      	mov	r2, r6
 800672a:	4649      	mov	r1, r9
 800672c:	4640      	mov	r0, r8
 800672e:	47d0      	blx	sl
 8006730:	3001      	adds	r0, #1
 8006732:	d0ab      	beq.n	800668c <_printf_i+0x164>
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	079b      	lsls	r3, r3, #30
 8006738:	d413      	bmi.n	8006762 <_printf_i+0x23a>
 800673a:	68e0      	ldr	r0, [r4, #12]
 800673c:	9b03      	ldr	r3, [sp, #12]
 800673e:	4298      	cmp	r0, r3
 8006740:	bfb8      	it	lt
 8006742:	4618      	movlt	r0, r3
 8006744:	e7a4      	b.n	8006690 <_printf_i+0x168>
 8006746:	2301      	movs	r3, #1
 8006748:	4632      	mov	r2, r6
 800674a:	4649      	mov	r1, r9
 800674c:	4640      	mov	r0, r8
 800674e:	47d0      	blx	sl
 8006750:	3001      	adds	r0, #1
 8006752:	d09b      	beq.n	800668c <_printf_i+0x164>
 8006754:	3501      	adds	r5, #1
 8006756:	68e3      	ldr	r3, [r4, #12]
 8006758:	9903      	ldr	r1, [sp, #12]
 800675a:	1a5b      	subs	r3, r3, r1
 800675c:	42ab      	cmp	r3, r5
 800675e:	dcf2      	bgt.n	8006746 <_printf_i+0x21e>
 8006760:	e7eb      	b.n	800673a <_printf_i+0x212>
 8006762:	2500      	movs	r5, #0
 8006764:	f104 0619 	add.w	r6, r4, #25
 8006768:	e7f5      	b.n	8006756 <_printf_i+0x22e>
 800676a:	bf00      	nop
 800676c:	0800ba7e 	.word	0x0800ba7e
 8006770:	0800ba8f 	.word	0x0800ba8f

08006774 <_scanf_float>:
 8006774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006778:	b087      	sub	sp, #28
 800677a:	4617      	mov	r7, r2
 800677c:	9303      	str	r3, [sp, #12]
 800677e:	688b      	ldr	r3, [r1, #8]
 8006780:	1e5a      	subs	r2, r3, #1
 8006782:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006786:	bf83      	ittte	hi
 8006788:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800678c:	195b      	addhi	r3, r3, r5
 800678e:	9302      	strhi	r3, [sp, #8]
 8006790:	2300      	movls	r3, #0
 8006792:	bf86      	itte	hi
 8006794:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006798:	608b      	strhi	r3, [r1, #8]
 800679a:	9302      	strls	r3, [sp, #8]
 800679c:	680b      	ldr	r3, [r1, #0]
 800679e:	468b      	mov	fp, r1
 80067a0:	2500      	movs	r5, #0
 80067a2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80067a6:	f84b 3b1c 	str.w	r3, [fp], #28
 80067aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80067ae:	4680      	mov	r8, r0
 80067b0:	460c      	mov	r4, r1
 80067b2:	465e      	mov	r6, fp
 80067b4:	46aa      	mov	sl, r5
 80067b6:	46a9      	mov	r9, r5
 80067b8:	9501      	str	r5, [sp, #4]
 80067ba:	68a2      	ldr	r2, [r4, #8]
 80067bc:	b152      	cbz	r2, 80067d4 <_scanf_float+0x60>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	2b4e      	cmp	r3, #78	; 0x4e
 80067c4:	d864      	bhi.n	8006890 <_scanf_float+0x11c>
 80067c6:	2b40      	cmp	r3, #64	; 0x40
 80067c8:	d83c      	bhi.n	8006844 <_scanf_float+0xd0>
 80067ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80067ce:	b2c8      	uxtb	r0, r1
 80067d0:	280e      	cmp	r0, #14
 80067d2:	d93a      	bls.n	800684a <_scanf_float+0xd6>
 80067d4:	f1b9 0f00 	cmp.w	r9, #0
 80067d8:	d003      	beq.n	80067e2 <_scanf_float+0x6e>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067e6:	f1ba 0f01 	cmp.w	sl, #1
 80067ea:	f200 8113 	bhi.w	8006a14 <_scanf_float+0x2a0>
 80067ee:	455e      	cmp	r6, fp
 80067f0:	f200 8105 	bhi.w	80069fe <_scanf_float+0x28a>
 80067f4:	2501      	movs	r5, #1
 80067f6:	4628      	mov	r0, r5
 80067f8:	b007      	add	sp, #28
 80067fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006802:	2a0d      	cmp	r2, #13
 8006804:	d8e6      	bhi.n	80067d4 <_scanf_float+0x60>
 8006806:	a101      	add	r1, pc, #4	; (adr r1, 800680c <_scanf_float+0x98>)
 8006808:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800680c:	0800694b 	.word	0x0800694b
 8006810:	080067d5 	.word	0x080067d5
 8006814:	080067d5 	.word	0x080067d5
 8006818:	080067d5 	.word	0x080067d5
 800681c:	080069ab 	.word	0x080069ab
 8006820:	08006983 	.word	0x08006983
 8006824:	080067d5 	.word	0x080067d5
 8006828:	080067d5 	.word	0x080067d5
 800682c:	08006959 	.word	0x08006959
 8006830:	080067d5 	.word	0x080067d5
 8006834:	080067d5 	.word	0x080067d5
 8006838:	080067d5 	.word	0x080067d5
 800683c:	080067d5 	.word	0x080067d5
 8006840:	08006911 	.word	0x08006911
 8006844:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006848:	e7db      	b.n	8006802 <_scanf_float+0x8e>
 800684a:	290e      	cmp	r1, #14
 800684c:	d8c2      	bhi.n	80067d4 <_scanf_float+0x60>
 800684e:	a001      	add	r0, pc, #4	; (adr r0, 8006854 <_scanf_float+0xe0>)
 8006850:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006854:	08006903 	.word	0x08006903
 8006858:	080067d5 	.word	0x080067d5
 800685c:	08006903 	.word	0x08006903
 8006860:	08006997 	.word	0x08006997
 8006864:	080067d5 	.word	0x080067d5
 8006868:	080068b1 	.word	0x080068b1
 800686c:	080068ed 	.word	0x080068ed
 8006870:	080068ed 	.word	0x080068ed
 8006874:	080068ed 	.word	0x080068ed
 8006878:	080068ed 	.word	0x080068ed
 800687c:	080068ed 	.word	0x080068ed
 8006880:	080068ed 	.word	0x080068ed
 8006884:	080068ed 	.word	0x080068ed
 8006888:	080068ed 	.word	0x080068ed
 800688c:	080068ed 	.word	0x080068ed
 8006890:	2b6e      	cmp	r3, #110	; 0x6e
 8006892:	d809      	bhi.n	80068a8 <_scanf_float+0x134>
 8006894:	2b60      	cmp	r3, #96	; 0x60
 8006896:	d8b2      	bhi.n	80067fe <_scanf_float+0x8a>
 8006898:	2b54      	cmp	r3, #84	; 0x54
 800689a:	d077      	beq.n	800698c <_scanf_float+0x218>
 800689c:	2b59      	cmp	r3, #89	; 0x59
 800689e:	d199      	bne.n	80067d4 <_scanf_float+0x60>
 80068a0:	2d07      	cmp	r5, #7
 80068a2:	d197      	bne.n	80067d4 <_scanf_float+0x60>
 80068a4:	2508      	movs	r5, #8
 80068a6:	e029      	b.n	80068fc <_scanf_float+0x188>
 80068a8:	2b74      	cmp	r3, #116	; 0x74
 80068aa:	d06f      	beq.n	800698c <_scanf_float+0x218>
 80068ac:	2b79      	cmp	r3, #121	; 0x79
 80068ae:	e7f6      	b.n	800689e <_scanf_float+0x12a>
 80068b0:	6821      	ldr	r1, [r4, #0]
 80068b2:	05c8      	lsls	r0, r1, #23
 80068b4:	d51a      	bpl.n	80068ec <_scanf_float+0x178>
 80068b6:	9b02      	ldr	r3, [sp, #8]
 80068b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80068bc:	6021      	str	r1, [r4, #0]
 80068be:	f109 0901 	add.w	r9, r9, #1
 80068c2:	b11b      	cbz	r3, 80068cc <_scanf_float+0x158>
 80068c4:	3b01      	subs	r3, #1
 80068c6:	3201      	adds	r2, #1
 80068c8:	9302      	str	r3, [sp, #8]
 80068ca:	60a2      	str	r2, [r4, #8]
 80068cc:	68a3      	ldr	r3, [r4, #8]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	60a3      	str	r3, [r4, #8]
 80068d2:	6923      	ldr	r3, [r4, #16]
 80068d4:	3301      	adds	r3, #1
 80068d6:	6123      	str	r3, [r4, #16]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	3b01      	subs	r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	607b      	str	r3, [r7, #4]
 80068e0:	f340 8084 	ble.w	80069ec <_scanf_float+0x278>
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	3301      	adds	r3, #1
 80068e8:	603b      	str	r3, [r7, #0]
 80068ea:	e766      	b.n	80067ba <_scanf_float+0x46>
 80068ec:	eb1a 0f05 	cmn.w	sl, r5
 80068f0:	f47f af70 	bne.w	80067d4 <_scanf_float+0x60>
 80068f4:	6822      	ldr	r2, [r4, #0]
 80068f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80068fa:	6022      	str	r2, [r4, #0]
 80068fc:	f806 3b01 	strb.w	r3, [r6], #1
 8006900:	e7e4      	b.n	80068cc <_scanf_float+0x158>
 8006902:	6822      	ldr	r2, [r4, #0]
 8006904:	0610      	lsls	r0, r2, #24
 8006906:	f57f af65 	bpl.w	80067d4 <_scanf_float+0x60>
 800690a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800690e:	e7f4      	b.n	80068fa <_scanf_float+0x186>
 8006910:	f1ba 0f00 	cmp.w	sl, #0
 8006914:	d10e      	bne.n	8006934 <_scanf_float+0x1c0>
 8006916:	f1b9 0f00 	cmp.w	r9, #0
 800691a:	d10e      	bne.n	800693a <_scanf_float+0x1c6>
 800691c:	6822      	ldr	r2, [r4, #0]
 800691e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006922:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006926:	d108      	bne.n	800693a <_scanf_float+0x1c6>
 8006928:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800692c:	6022      	str	r2, [r4, #0]
 800692e:	f04f 0a01 	mov.w	sl, #1
 8006932:	e7e3      	b.n	80068fc <_scanf_float+0x188>
 8006934:	f1ba 0f02 	cmp.w	sl, #2
 8006938:	d055      	beq.n	80069e6 <_scanf_float+0x272>
 800693a:	2d01      	cmp	r5, #1
 800693c:	d002      	beq.n	8006944 <_scanf_float+0x1d0>
 800693e:	2d04      	cmp	r5, #4
 8006940:	f47f af48 	bne.w	80067d4 <_scanf_float+0x60>
 8006944:	3501      	adds	r5, #1
 8006946:	b2ed      	uxtb	r5, r5
 8006948:	e7d8      	b.n	80068fc <_scanf_float+0x188>
 800694a:	f1ba 0f01 	cmp.w	sl, #1
 800694e:	f47f af41 	bne.w	80067d4 <_scanf_float+0x60>
 8006952:	f04f 0a02 	mov.w	sl, #2
 8006956:	e7d1      	b.n	80068fc <_scanf_float+0x188>
 8006958:	b97d      	cbnz	r5, 800697a <_scanf_float+0x206>
 800695a:	f1b9 0f00 	cmp.w	r9, #0
 800695e:	f47f af3c 	bne.w	80067da <_scanf_float+0x66>
 8006962:	6822      	ldr	r2, [r4, #0]
 8006964:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006968:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800696c:	f47f af39 	bne.w	80067e2 <_scanf_float+0x6e>
 8006970:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006974:	6022      	str	r2, [r4, #0]
 8006976:	2501      	movs	r5, #1
 8006978:	e7c0      	b.n	80068fc <_scanf_float+0x188>
 800697a:	2d03      	cmp	r5, #3
 800697c:	d0e2      	beq.n	8006944 <_scanf_float+0x1d0>
 800697e:	2d05      	cmp	r5, #5
 8006980:	e7de      	b.n	8006940 <_scanf_float+0x1cc>
 8006982:	2d02      	cmp	r5, #2
 8006984:	f47f af26 	bne.w	80067d4 <_scanf_float+0x60>
 8006988:	2503      	movs	r5, #3
 800698a:	e7b7      	b.n	80068fc <_scanf_float+0x188>
 800698c:	2d06      	cmp	r5, #6
 800698e:	f47f af21 	bne.w	80067d4 <_scanf_float+0x60>
 8006992:	2507      	movs	r5, #7
 8006994:	e7b2      	b.n	80068fc <_scanf_float+0x188>
 8006996:	6822      	ldr	r2, [r4, #0]
 8006998:	0591      	lsls	r1, r2, #22
 800699a:	f57f af1b 	bpl.w	80067d4 <_scanf_float+0x60>
 800699e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80069a2:	6022      	str	r2, [r4, #0]
 80069a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80069a8:	e7a8      	b.n	80068fc <_scanf_float+0x188>
 80069aa:	6822      	ldr	r2, [r4, #0]
 80069ac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80069b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80069b4:	d006      	beq.n	80069c4 <_scanf_float+0x250>
 80069b6:	0550      	lsls	r0, r2, #21
 80069b8:	f57f af0c 	bpl.w	80067d4 <_scanf_float+0x60>
 80069bc:	f1b9 0f00 	cmp.w	r9, #0
 80069c0:	f43f af0f 	beq.w	80067e2 <_scanf_float+0x6e>
 80069c4:	0591      	lsls	r1, r2, #22
 80069c6:	bf58      	it	pl
 80069c8:	9901      	ldrpl	r1, [sp, #4]
 80069ca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80069ce:	bf58      	it	pl
 80069d0:	eba9 0101 	subpl.w	r1, r9, r1
 80069d4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80069d8:	bf58      	it	pl
 80069da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80069de:	6022      	str	r2, [r4, #0]
 80069e0:	f04f 0900 	mov.w	r9, #0
 80069e4:	e78a      	b.n	80068fc <_scanf_float+0x188>
 80069e6:	f04f 0a03 	mov.w	sl, #3
 80069ea:	e787      	b.n	80068fc <_scanf_float+0x188>
 80069ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80069f0:	4639      	mov	r1, r7
 80069f2:	4640      	mov	r0, r8
 80069f4:	4798      	blx	r3
 80069f6:	2800      	cmp	r0, #0
 80069f8:	f43f aedf 	beq.w	80067ba <_scanf_float+0x46>
 80069fc:	e6ea      	b.n	80067d4 <_scanf_float+0x60>
 80069fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a06:	463a      	mov	r2, r7
 8006a08:	4640      	mov	r0, r8
 8006a0a:	4798      	blx	r3
 8006a0c:	6923      	ldr	r3, [r4, #16]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	6123      	str	r3, [r4, #16]
 8006a12:	e6ec      	b.n	80067ee <_scanf_float+0x7a>
 8006a14:	1e6b      	subs	r3, r5, #1
 8006a16:	2b06      	cmp	r3, #6
 8006a18:	d825      	bhi.n	8006a66 <_scanf_float+0x2f2>
 8006a1a:	2d02      	cmp	r5, #2
 8006a1c:	d836      	bhi.n	8006a8c <_scanf_float+0x318>
 8006a1e:	455e      	cmp	r6, fp
 8006a20:	f67f aee8 	bls.w	80067f4 <_scanf_float+0x80>
 8006a24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a28:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a2c:	463a      	mov	r2, r7
 8006a2e:	4640      	mov	r0, r8
 8006a30:	4798      	blx	r3
 8006a32:	6923      	ldr	r3, [r4, #16]
 8006a34:	3b01      	subs	r3, #1
 8006a36:	6123      	str	r3, [r4, #16]
 8006a38:	e7f1      	b.n	8006a1e <_scanf_float+0x2aa>
 8006a3a:	9802      	ldr	r0, [sp, #8]
 8006a3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a40:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006a44:	9002      	str	r0, [sp, #8]
 8006a46:	463a      	mov	r2, r7
 8006a48:	4640      	mov	r0, r8
 8006a4a:	4798      	blx	r3
 8006a4c:	6923      	ldr	r3, [r4, #16]
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	6123      	str	r3, [r4, #16]
 8006a52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a56:	fa5f fa8a 	uxtb.w	sl, sl
 8006a5a:	f1ba 0f02 	cmp.w	sl, #2
 8006a5e:	d1ec      	bne.n	8006a3a <_scanf_float+0x2c6>
 8006a60:	3d03      	subs	r5, #3
 8006a62:	b2ed      	uxtb	r5, r5
 8006a64:	1b76      	subs	r6, r6, r5
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	05da      	lsls	r2, r3, #23
 8006a6a:	d52f      	bpl.n	8006acc <_scanf_float+0x358>
 8006a6c:	055b      	lsls	r3, r3, #21
 8006a6e:	d510      	bpl.n	8006a92 <_scanf_float+0x31e>
 8006a70:	455e      	cmp	r6, fp
 8006a72:	f67f aebf 	bls.w	80067f4 <_scanf_float+0x80>
 8006a76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a7e:	463a      	mov	r2, r7
 8006a80:	4640      	mov	r0, r8
 8006a82:	4798      	blx	r3
 8006a84:	6923      	ldr	r3, [r4, #16]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	6123      	str	r3, [r4, #16]
 8006a8a:	e7f1      	b.n	8006a70 <_scanf_float+0x2fc>
 8006a8c:	46aa      	mov	sl, r5
 8006a8e:	9602      	str	r6, [sp, #8]
 8006a90:	e7df      	b.n	8006a52 <_scanf_float+0x2de>
 8006a92:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006a96:	6923      	ldr	r3, [r4, #16]
 8006a98:	2965      	cmp	r1, #101	; 0x65
 8006a9a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a9e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006aa2:	6123      	str	r3, [r4, #16]
 8006aa4:	d00c      	beq.n	8006ac0 <_scanf_float+0x34c>
 8006aa6:	2945      	cmp	r1, #69	; 0x45
 8006aa8:	d00a      	beq.n	8006ac0 <_scanf_float+0x34c>
 8006aaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006aae:	463a      	mov	r2, r7
 8006ab0:	4640      	mov	r0, r8
 8006ab2:	4798      	blx	r3
 8006ab4:	6923      	ldr	r3, [r4, #16]
 8006ab6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006aba:	3b01      	subs	r3, #1
 8006abc:	1eb5      	subs	r5, r6, #2
 8006abe:	6123      	str	r3, [r4, #16]
 8006ac0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ac4:	463a      	mov	r2, r7
 8006ac6:	4640      	mov	r0, r8
 8006ac8:	4798      	blx	r3
 8006aca:	462e      	mov	r6, r5
 8006acc:	6825      	ldr	r5, [r4, #0]
 8006ace:	f015 0510 	ands.w	r5, r5, #16
 8006ad2:	d158      	bne.n	8006b86 <_scanf_float+0x412>
 8006ad4:	7035      	strb	r5, [r6, #0]
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae0:	d11c      	bne.n	8006b1c <_scanf_float+0x3a8>
 8006ae2:	9b01      	ldr	r3, [sp, #4]
 8006ae4:	454b      	cmp	r3, r9
 8006ae6:	eba3 0209 	sub.w	r2, r3, r9
 8006aea:	d124      	bne.n	8006b36 <_scanf_float+0x3c2>
 8006aec:	2200      	movs	r2, #0
 8006aee:	4659      	mov	r1, fp
 8006af0:	4640      	mov	r0, r8
 8006af2:	f000 ff8f 	bl	8007a14 <_strtod_r>
 8006af6:	9b03      	ldr	r3, [sp, #12]
 8006af8:	6821      	ldr	r1, [r4, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f011 0f02 	tst.w	r1, #2
 8006b00:	ec57 6b10 	vmov	r6, r7, d0
 8006b04:	f103 0204 	add.w	r2, r3, #4
 8006b08:	d020      	beq.n	8006b4c <_scanf_float+0x3d8>
 8006b0a:	9903      	ldr	r1, [sp, #12]
 8006b0c:	600a      	str	r2, [r1, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	e9c3 6700 	strd	r6, r7, [r3]
 8006b14:	68e3      	ldr	r3, [r4, #12]
 8006b16:	3301      	adds	r3, #1
 8006b18:	60e3      	str	r3, [r4, #12]
 8006b1a:	e66c      	b.n	80067f6 <_scanf_float+0x82>
 8006b1c:	9b04      	ldr	r3, [sp, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d0e4      	beq.n	8006aec <_scanf_float+0x378>
 8006b22:	9905      	ldr	r1, [sp, #20]
 8006b24:	230a      	movs	r3, #10
 8006b26:	462a      	mov	r2, r5
 8006b28:	3101      	adds	r1, #1
 8006b2a:	4640      	mov	r0, r8
 8006b2c:	f001 f8be 	bl	8007cac <_strtol_r>
 8006b30:	9b04      	ldr	r3, [sp, #16]
 8006b32:	9e05      	ldr	r6, [sp, #20]
 8006b34:	1ac2      	subs	r2, r0, r3
 8006b36:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006b3a:	429e      	cmp	r6, r3
 8006b3c:	bf28      	it	cs
 8006b3e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006b42:	4912      	ldr	r1, [pc, #72]	; (8006b8c <_scanf_float+0x418>)
 8006b44:	4630      	mov	r0, r6
 8006b46:	f000 f91f 	bl	8006d88 <siprintf>
 8006b4a:	e7cf      	b.n	8006aec <_scanf_float+0x378>
 8006b4c:	f011 0f04 	tst.w	r1, #4
 8006b50:	9903      	ldr	r1, [sp, #12]
 8006b52:	600a      	str	r2, [r1, #0]
 8006b54:	d1db      	bne.n	8006b0e <_scanf_float+0x39a>
 8006b56:	f8d3 8000 	ldr.w	r8, [r3]
 8006b5a:	ee10 2a10 	vmov	r2, s0
 8006b5e:	ee10 0a10 	vmov	r0, s0
 8006b62:	463b      	mov	r3, r7
 8006b64:	4639      	mov	r1, r7
 8006b66:	f7f9 fff1 	bl	8000b4c <__aeabi_dcmpun>
 8006b6a:	b128      	cbz	r0, 8006b78 <_scanf_float+0x404>
 8006b6c:	4808      	ldr	r0, [pc, #32]	; (8006b90 <_scanf_float+0x41c>)
 8006b6e:	f000 f8d1 	bl	8006d14 <nanf>
 8006b72:	ed88 0a00 	vstr	s0, [r8]
 8006b76:	e7cd      	b.n	8006b14 <_scanf_float+0x3a0>
 8006b78:	4630      	mov	r0, r6
 8006b7a:	4639      	mov	r1, r7
 8006b7c:	f7fa f844 	bl	8000c08 <__aeabi_d2f>
 8006b80:	f8c8 0000 	str.w	r0, [r8]
 8006b84:	e7c6      	b.n	8006b14 <_scanf_float+0x3a0>
 8006b86:	2500      	movs	r5, #0
 8006b88:	e635      	b.n	80067f6 <_scanf_float+0x82>
 8006b8a:	bf00      	nop
 8006b8c:	0800baa0 	.word	0x0800baa0
 8006b90:	0800bbab 	.word	0x0800bbab

08006b94 <_puts_r>:
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	460e      	mov	r6, r1
 8006b98:	4605      	mov	r5, r0
 8006b9a:	b118      	cbz	r0, 8006ba4 <_puts_r+0x10>
 8006b9c:	6983      	ldr	r3, [r0, #24]
 8006b9e:	b90b      	cbnz	r3, 8006ba4 <_puts_r+0x10>
 8006ba0:	f002 f8f8 	bl	8008d94 <__sinit>
 8006ba4:	69ab      	ldr	r3, [r5, #24]
 8006ba6:	68ac      	ldr	r4, [r5, #8]
 8006ba8:	b913      	cbnz	r3, 8006bb0 <_puts_r+0x1c>
 8006baa:	4628      	mov	r0, r5
 8006bac:	f002 f8f2 	bl	8008d94 <__sinit>
 8006bb0:	4b2c      	ldr	r3, [pc, #176]	; (8006c64 <_puts_r+0xd0>)
 8006bb2:	429c      	cmp	r4, r3
 8006bb4:	d120      	bne.n	8006bf8 <_puts_r+0x64>
 8006bb6:	686c      	ldr	r4, [r5, #4]
 8006bb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bba:	07db      	lsls	r3, r3, #31
 8006bbc:	d405      	bmi.n	8006bca <_puts_r+0x36>
 8006bbe:	89a3      	ldrh	r3, [r4, #12]
 8006bc0:	0598      	lsls	r0, r3, #22
 8006bc2:	d402      	bmi.n	8006bca <_puts_r+0x36>
 8006bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bc6:	f002 fd08 	bl	80095da <__retarget_lock_acquire_recursive>
 8006bca:	89a3      	ldrh	r3, [r4, #12]
 8006bcc:	0719      	lsls	r1, r3, #28
 8006bce:	d51d      	bpl.n	8006c0c <_puts_r+0x78>
 8006bd0:	6923      	ldr	r3, [r4, #16]
 8006bd2:	b1db      	cbz	r3, 8006c0c <_puts_r+0x78>
 8006bd4:	3e01      	subs	r6, #1
 8006bd6:	68a3      	ldr	r3, [r4, #8]
 8006bd8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	60a3      	str	r3, [r4, #8]
 8006be0:	bb39      	cbnz	r1, 8006c32 <_puts_r+0x9e>
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	da38      	bge.n	8006c58 <_puts_r+0xc4>
 8006be6:	4622      	mov	r2, r4
 8006be8:	210a      	movs	r1, #10
 8006bea:	4628      	mov	r0, r5
 8006bec:	f001 f860 	bl	8007cb0 <__swbuf_r>
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d011      	beq.n	8006c18 <_puts_r+0x84>
 8006bf4:	250a      	movs	r5, #10
 8006bf6:	e011      	b.n	8006c1c <_puts_r+0x88>
 8006bf8:	4b1b      	ldr	r3, [pc, #108]	; (8006c68 <_puts_r+0xd4>)
 8006bfa:	429c      	cmp	r4, r3
 8006bfc:	d101      	bne.n	8006c02 <_puts_r+0x6e>
 8006bfe:	68ac      	ldr	r4, [r5, #8]
 8006c00:	e7da      	b.n	8006bb8 <_puts_r+0x24>
 8006c02:	4b1a      	ldr	r3, [pc, #104]	; (8006c6c <_puts_r+0xd8>)
 8006c04:	429c      	cmp	r4, r3
 8006c06:	bf08      	it	eq
 8006c08:	68ec      	ldreq	r4, [r5, #12]
 8006c0a:	e7d5      	b.n	8006bb8 <_puts_r+0x24>
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f001 f8a0 	bl	8007d54 <__swsetup_r>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	d0dd      	beq.n	8006bd4 <_puts_r+0x40>
 8006c18:	f04f 35ff 	mov.w	r5, #4294967295
 8006c1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c1e:	07da      	lsls	r2, r3, #31
 8006c20:	d405      	bmi.n	8006c2e <_puts_r+0x9a>
 8006c22:	89a3      	ldrh	r3, [r4, #12]
 8006c24:	059b      	lsls	r3, r3, #22
 8006c26:	d402      	bmi.n	8006c2e <_puts_r+0x9a>
 8006c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c2a:	f002 fcd7 	bl	80095dc <__retarget_lock_release_recursive>
 8006c2e:	4628      	mov	r0, r5
 8006c30:	bd70      	pop	{r4, r5, r6, pc}
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	da04      	bge.n	8006c40 <_puts_r+0xac>
 8006c36:	69a2      	ldr	r2, [r4, #24]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	dc06      	bgt.n	8006c4a <_puts_r+0xb6>
 8006c3c:	290a      	cmp	r1, #10
 8006c3e:	d004      	beq.n	8006c4a <_puts_r+0xb6>
 8006c40:	6823      	ldr	r3, [r4, #0]
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	6022      	str	r2, [r4, #0]
 8006c46:	7019      	strb	r1, [r3, #0]
 8006c48:	e7c5      	b.n	8006bd6 <_puts_r+0x42>
 8006c4a:	4622      	mov	r2, r4
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	f001 f82f 	bl	8007cb0 <__swbuf_r>
 8006c52:	3001      	adds	r0, #1
 8006c54:	d1bf      	bne.n	8006bd6 <_puts_r+0x42>
 8006c56:	e7df      	b.n	8006c18 <_puts_r+0x84>
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	250a      	movs	r5, #10
 8006c5c:	1c5a      	adds	r2, r3, #1
 8006c5e:	6022      	str	r2, [r4, #0]
 8006c60:	701d      	strb	r5, [r3, #0]
 8006c62:	e7db      	b.n	8006c1c <_puts_r+0x88>
 8006c64:	0800bd4c 	.word	0x0800bd4c
 8006c68:	0800bd6c 	.word	0x0800bd6c
 8006c6c:	0800bd2c 	.word	0x0800bd2c

08006c70 <puts>:
 8006c70:	4b02      	ldr	r3, [pc, #8]	; (8006c7c <puts+0xc>)
 8006c72:	4601      	mov	r1, r0
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	f7ff bf8d 	b.w	8006b94 <_puts_r>
 8006c7a:	bf00      	nop
 8006c7c:	20000014 	.word	0x20000014

08006c80 <modf>:
 8006c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c82:	ec55 4b10 	vmov	r4, r5, d0
 8006c86:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006c8a:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8006c8e:	2e13      	cmp	r6, #19
 8006c90:	dc24      	bgt.n	8006cdc <modf+0x5c>
 8006c92:	2e00      	cmp	r6, #0
 8006c94:	da07      	bge.n	8006ca6 <modf+0x26>
 8006c96:	2600      	movs	r6, #0
 8006c98:	f005 4700 	and.w	r7, r5, #2147483648	; 0x80000000
 8006c9c:	e9c0 6700 	strd	r6, r7, [r0]
 8006ca0:	ec45 4b10 	vmov	d0, r4, r5
 8006ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ca6:	491a      	ldr	r1, [pc, #104]	; (8006d10 <modf+0x90>)
 8006ca8:	4131      	asrs	r1, r6
 8006caa:	ea05 0601 	and.w	r6, r5, r1
 8006cae:	ea56 0204 	orrs.w	r2, r6, r4
 8006cb2:	d105      	bne.n	8006cc0 <modf+0x40>
 8006cb4:	ed80 0b00 	vstr	d0, [r0]
 8006cb8:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8006cbc:	4614      	mov	r4, r2
 8006cbe:	e7ef      	b.n	8006ca0 <modf+0x20>
 8006cc0:	2600      	movs	r6, #0
 8006cc2:	ea25 0701 	bic.w	r7, r5, r1
 8006cc6:	4632      	mov	r2, r6
 8006cc8:	463b      	mov	r3, r7
 8006cca:	e9c0 2300 	strd	r2, r3, [r0]
 8006cce:	4629      	mov	r1, r5
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	f7f9 fae9 	bl	80002a8 <__aeabi_dsub>
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	460d      	mov	r5, r1
 8006cda:	e7e1      	b.n	8006ca0 <modf+0x20>
 8006cdc:	2e33      	cmp	r6, #51	; 0x33
 8006cde:	dd05      	ble.n	8006cec <modf+0x6c>
 8006ce0:	ed80 0b00 	vstr	d0, [r0]
 8006ce4:	2400      	movs	r4, #0
 8006ce6:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8006cea:	e7d9      	b.n	8006ca0 <modf+0x20>
 8006cec:	f2a1 4613 	subw	r6, r1, #1043	; 0x413
 8006cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8006cf4:	40f1      	lsrs	r1, r6
 8006cf6:	ea11 0604 	ands.w	r6, r1, r4
 8006cfa:	d105      	bne.n	8006d08 <modf+0x88>
 8006cfc:	ed80 0b00 	vstr	d0, [r0]
 8006d00:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8006d04:	4634      	mov	r4, r6
 8006d06:	e7cb      	b.n	8006ca0 <modf+0x20>
 8006d08:	462f      	mov	r7, r5
 8006d0a:	ea24 0601 	bic.w	r6, r4, r1
 8006d0e:	e7da      	b.n	8006cc6 <modf+0x46>
 8006d10:	000fffff 	.word	0x000fffff

08006d14 <nanf>:
 8006d14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006d1c <nanf+0x8>
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	7fc00000 	.word	0x7fc00000

08006d20 <sniprintf>:
 8006d20:	b40c      	push	{r2, r3}
 8006d22:	b530      	push	{r4, r5, lr}
 8006d24:	4b17      	ldr	r3, [pc, #92]	; (8006d84 <sniprintf+0x64>)
 8006d26:	1e0c      	subs	r4, r1, #0
 8006d28:	681d      	ldr	r5, [r3, #0]
 8006d2a:	b09d      	sub	sp, #116	; 0x74
 8006d2c:	da08      	bge.n	8006d40 <sniprintf+0x20>
 8006d2e:	238b      	movs	r3, #139	; 0x8b
 8006d30:	602b      	str	r3, [r5, #0]
 8006d32:	f04f 30ff 	mov.w	r0, #4294967295
 8006d36:	b01d      	add	sp, #116	; 0x74
 8006d38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d3c:	b002      	add	sp, #8
 8006d3e:	4770      	bx	lr
 8006d40:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006d44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006d48:	bf14      	ite	ne
 8006d4a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006d4e:	4623      	moveq	r3, r4
 8006d50:	9304      	str	r3, [sp, #16]
 8006d52:	9307      	str	r3, [sp, #28]
 8006d54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d58:	9002      	str	r0, [sp, #8]
 8006d5a:	9006      	str	r0, [sp, #24]
 8006d5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006d60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006d62:	ab21      	add	r3, sp, #132	; 0x84
 8006d64:	a902      	add	r1, sp, #8
 8006d66:	4628      	mov	r0, r5
 8006d68:	9301      	str	r3, [sp, #4]
 8006d6a:	f003 fa95 	bl	800a298 <_svfiprintf_r>
 8006d6e:	1c43      	adds	r3, r0, #1
 8006d70:	bfbc      	itt	lt
 8006d72:	238b      	movlt	r3, #139	; 0x8b
 8006d74:	602b      	strlt	r3, [r5, #0]
 8006d76:	2c00      	cmp	r4, #0
 8006d78:	d0dd      	beq.n	8006d36 <sniprintf+0x16>
 8006d7a:	9b02      	ldr	r3, [sp, #8]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	701a      	strb	r2, [r3, #0]
 8006d80:	e7d9      	b.n	8006d36 <sniprintf+0x16>
 8006d82:	bf00      	nop
 8006d84:	20000014 	.word	0x20000014

08006d88 <siprintf>:
 8006d88:	b40e      	push	{r1, r2, r3}
 8006d8a:	b500      	push	{lr}
 8006d8c:	b09c      	sub	sp, #112	; 0x70
 8006d8e:	ab1d      	add	r3, sp, #116	; 0x74
 8006d90:	9002      	str	r0, [sp, #8]
 8006d92:	9006      	str	r0, [sp, #24]
 8006d94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d98:	4809      	ldr	r0, [pc, #36]	; (8006dc0 <siprintf+0x38>)
 8006d9a:	9107      	str	r1, [sp, #28]
 8006d9c:	9104      	str	r1, [sp, #16]
 8006d9e:	4909      	ldr	r1, [pc, #36]	; (8006dc4 <siprintf+0x3c>)
 8006da0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006da4:	9105      	str	r1, [sp, #20]
 8006da6:	6800      	ldr	r0, [r0, #0]
 8006da8:	9301      	str	r3, [sp, #4]
 8006daa:	a902      	add	r1, sp, #8
 8006dac:	f003 fa74 	bl	800a298 <_svfiprintf_r>
 8006db0:	9b02      	ldr	r3, [sp, #8]
 8006db2:	2200      	movs	r2, #0
 8006db4:	701a      	strb	r2, [r3, #0]
 8006db6:	b01c      	add	sp, #112	; 0x70
 8006db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dbc:	b003      	add	sp, #12
 8006dbe:	4770      	bx	lr
 8006dc0:	20000014 	.word	0x20000014
 8006dc4:	ffff0208 	.word	0xffff0208

08006dc8 <sulp>:
 8006dc8:	b570      	push	{r4, r5, r6, lr}
 8006dca:	4604      	mov	r4, r0
 8006dcc:	460d      	mov	r5, r1
 8006dce:	ec45 4b10 	vmov	d0, r4, r5
 8006dd2:	4616      	mov	r6, r2
 8006dd4:	f002 fffc 	bl	8009dd0 <__ulp>
 8006dd8:	ec51 0b10 	vmov	r0, r1, d0
 8006ddc:	b17e      	cbz	r6, 8006dfe <sulp+0x36>
 8006dde:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006de2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	dd09      	ble.n	8006dfe <sulp+0x36>
 8006dea:	051b      	lsls	r3, r3, #20
 8006dec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006df0:	2400      	movs	r4, #0
 8006df2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006df6:	4622      	mov	r2, r4
 8006df8:	462b      	mov	r3, r5
 8006dfa:	f7f9 fc0d 	bl	8000618 <__aeabi_dmul>
 8006dfe:	bd70      	pop	{r4, r5, r6, pc}

08006e00 <_strtod_l>:
 8006e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e04:	b0a3      	sub	sp, #140	; 0x8c
 8006e06:	461f      	mov	r7, r3
 8006e08:	2300      	movs	r3, #0
 8006e0a:	931e      	str	r3, [sp, #120]	; 0x78
 8006e0c:	4ba4      	ldr	r3, [pc, #656]	; (80070a0 <_strtod_l+0x2a0>)
 8006e0e:	9219      	str	r2, [sp, #100]	; 0x64
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	9307      	str	r3, [sp, #28]
 8006e14:	4604      	mov	r4, r0
 8006e16:	4618      	mov	r0, r3
 8006e18:	4688      	mov	r8, r1
 8006e1a:	f7f9 f9e3 	bl	80001e4 <strlen>
 8006e1e:	f04f 0a00 	mov.w	sl, #0
 8006e22:	4605      	mov	r5, r0
 8006e24:	f04f 0b00 	mov.w	fp, #0
 8006e28:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006e2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e2e:	781a      	ldrb	r2, [r3, #0]
 8006e30:	2a2b      	cmp	r2, #43	; 0x2b
 8006e32:	d04c      	beq.n	8006ece <_strtod_l+0xce>
 8006e34:	d839      	bhi.n	8006eaa <_strtod_l+0xaa>
 8006e36:	2a0d      	cmp	r2, #13
 8006e38:	d832      	bhi.n	8006ea0 <_strtod_l+0xa0>
 8006e3a:	2a08      	cmp	r2, #8
 8006e3c:	d832      	bhi.n	8006ea4 <_strtod_l+0xa4>
 8006e3e:	2a00      	cmp	r2, #0
 8006e40:	d03c      	beq.n	8006ebc <_strtod_l+0xbc>
 8006e42:	2300      	movs	r3, #0
 8006e44:	930e      	str	r3, [sp, #56]	; 0x38
 8006e46:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006e48:	7833      	ldrb	r3, [r6, #0]
 8006e4a:	2b30      	cmp	r3, #48	; 0x30
 8006e4c:	f040 80b4 	bne.w	8006fb8 <_strtod_l+0x1b8>
 8006e50:	7873      	ldrb	r3, [r6, #1]
 8006e52:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006e56:	2b58      	cmp	r3, #88	; 0x58
 8006e58:	d16c      	bne.n	8006f34 <_strtod_l+0x134>
 8006e5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e5c:	9301      	str	r3, [sp, #4]
 8006e5e:	ab1e      	add	r3, sp, #120	; 0x78
 8006e60:	9702      	str	r7, [sp, #8]
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	4a8f      	ldr	r2, [pc, #572]	; (80070a4 <_strtod_l+0x2a4>)
 8006e66:	ab1f      	add	r3, sp, #124	; 0x7c
 8006e68:	a91d      	add	r1, sp, #116	; 0x74
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f002 f8a8 	bl	8008fc0 <__gethex>
 8006e70:	f010 0707 	ands.w	r7, r0, #7
 8006e74:	4605      	mov	r5, r0
 8006e76:	d005      	beq.n	8006e84 <_strtod_l+0x84>
 8006e78:	2f06      	cmp	r7, #6
 8006e7a:	d12a      	bne.n	8006ed2 <_strtod_l+0xd2>
 8006e7c:	3601      	adds	r6, #1
 8006e7e:	2300      	movs	r3, #0
 8006e80:	961d      	str	r6, [sp, #116]	; 0x74
 8006e82:	930e      	str	r3, [sp, #56]	; 0x38
 8006e84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f040 8596 	bne.w	80079b8 <_strtod_l+0xbb8>
 8006e8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e8e:	b1db      	cbz	r3, 8006ec8 <_strtod_l+0xc8>
 8006e90:	4652      	mov	r2, sl
 8006e92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006e96:	ec43 2b10 	vmov	d0, r2, r3
 8006e9a:	b023      	add	sp, #140	; 0x8c
 8006e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea0:	2a20      	cmp	r2, #32
 8006ea2:	d1ce      	bne.n	8006e42 <_strtod_l+0x42>
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	931d      	str	r3, [sp, #116]	; 0x74
 8006ea8:	e7c0      	b.n	8006e2c <_strtod_l+0x2c>
 8006eaa:	2a2d      	cmp	r2, #45	; 0x2d
 8006eac:	d1c9      	bne.n	8006e42 <_strtod_l+0x42>
 8006eae:	2201      	movs	r2, #1
 8006eb0:	920e      	str	r2, [sp, #56]	; 0x38
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	921d      	str	r2, [sp, #116]	; 0x74
 8006eb6:	785b      	ldrb	r3, [r3, #1]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1c4      	bne.n	8006e46 <_strtod_l+0x46>
 8006ebc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ebe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f040 8576 	bne.w	80079b4 <_strtod_l+0xbb4>
 8006ec8:	4652      	mov	r2, sl
 8006eca:	465b      	mov	r3, fp
 8006ecc:	e7e3      	b.n	8006e96 <_strtod_l+0x96>
 8006ece:	2200      	movs	r2, #0
 8006ed0:	e7ee      	b.n	8006eb0 <_strtod_l+0xb0>
 8006ed2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006ed4:	b13a      	cbz	r2, 8006ee6 <_strtod_l+0xe6>
 8006ed6:	2135      	movs	r1, #53	; 0x35
 8006ed8:	a820      	add	r0, sp, #128	; 0x80
 8006eda:	f003 f884 	bl	8009fe6 <__copybits>
 8006ede:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f002 fc49 	bl	8009778 <_Bfree>
 8006ee6:	3f01      	subs	r7, #1
 8006ee8:	2f05      	cmp	r7, #5
 8006eea:	d807      	bhi.n	8006efc <_strtod_l+0xfc>
 8006eec:	e8df f007 	tbb	[pc, r7]
 8006ef0:	1d180b0e 	.word	0x1d180b0e
 8006ef4:	030e      	.short	0x030e
 8006ef6:	f04f 0b00 	mov.w	fp, #0
 8006efa:	46da      	mov	sl, fp
 8006efc:	0728      	lsls	r0, r5, #28
 8006efe:	d5c1      	bpl.n	8006e84 <_strtod_l+0x84>
 8006f00:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006f04:	e7be      	b.n	8006e84 <_strtod_l+0x84>
 8006f06:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8006f0a:	e7f7      	b.n	8006efc <_strtod_l+0xfc>
 8006f0c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006f10:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006f12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006f16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006f1a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006f1e:	e7ed      	b.n	8006efc <_strtod_l+0xfc>
 8006f20:	f8df b184 	ldr.w	fp, [pc, #388]	; 80070a8 <_strtod_l+0x2a8>
 8006f24:	f04f 0a00 	mov.w	sl, #0
 8006f28:	e7e8      	b.n	8006efc <_strtod_l+0xfc>
 8006f2a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006f2e:	f04f 3aff 	mov.w	sl, #4294967295
 8006f32:	e7e3      	b.n	8006efc <_strtod_l+0xfc>
 8006f34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	921d      	str	r2, [sp, #116]	; 0x74
 8006f3a:	785b      	ldrb	r3, [r3, #1]
 8006f3c:	2b30      	cmp	r3, #48	; 0x30
 8006f3e:	d0f9      	beq.n	8006f34 <_strtod_l+0x134>
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d09f      	beq.n	8006e84 <_strtod_l+0x84>
 8006f44:	2301      	movs	r3, #1
 8006f46:	f04f 0900 	mov.w	r9, #0
 8006f4a:	9304      	str	r3, [sp, #16]
 8006f4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8006f50:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006f54:	464f      	mov	r7, r9
 8006f56:	220a      	movs	r2, #10
 8006f58:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006f5a:	7806      	ldrb	r6, [r0, #0]
 8006f5c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006f60:	b2d9      	uxtb	r1, r3
 8006f62:	2909      	cmp	r1, #9
 8006f64:	d92a      	bls.n	8006fbc <_strtod_l+0x1bc>
 8006f66:	9907      	ldr	r1, [sp, #28]
 8006f68:	462a      	mov	r2, r5
 8006f6a:	f003 fc4c 	bl	800a806 <strncmp>
 8006f6e:	b398      	cbz	r0, 8006fd8 <_strtod_l+0x1d8>
 8006f70:	2000      	movs	r0, #0
 8006f72:	4633      	mov	r3, r6
 8006f74:	463d      	mov	r5, r7
 8006f76:	9007      	str	r0, [sp, #28]
 8006f78:	4602      	mov	r2, r0
 8006f7a:	2b65      	cmp	r3, #101	; 0x65
 8006f7c:	d001      	beq.n	8006f82 <_strtod_l+0x182>
 8006f7e:	2b45      	cmp	r3, #69	; 0x45
 8006f80:	d118      	bne.n	8006fb4 <_strtod_l+0x1b4>
 8006f82:	b91d      	cbnz	r5, 8006f8c <_strtod_l+0x18c>
 8006f84:	9b04      	ldr	r3, [sp, #16]
 8006f86:	4303      	orrs	r3, r0
 8006f88:	d098      	beq.n	8006ebc <_strtod_l+0xbc>
 8006f8a:	2500      	movs	r5, #0
 8006f8c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006f90:	f108 0301 	add.w	r3, r8, #1
 8006f94:	931d      	str	r3, [sp, #116]	; 0x74
 8006f96:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006f9a:	2b2b      	cmp	r3, #43	; 0x2b
 8006f9c:	d075      	beq.n	800708a <_strtod_l+0x28a>
 8006f9e:	2b2d      	cmp	r3, #45	; 0x2d
 8006fa0:	d07b      	beq.n	800709a <_strtod_l+0x29a>
 8006fa2:	f04f 0c00 	mov.w	ip, #0
 8006fa6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006faa:	2909      	cmp	r1, #9
 8006fac:	f240 8082 	bls.w	80070b4 <_strtod_l+0x2b4>
 8006fb0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006fb4:	2600      	movs	r6, #0
 8006fb6:	e09d      	b.n	80070f4 <_strtod_l+0x2f4>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	e7c4      	b.n	8006f46 <_strtod_l+0x146>
 8006fbc:	2f08      	cmp	r7, #8
 8006fbe:	bfd8      	it	le
 8006fc0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006fc2:	f100 0001 	add.w	r0, r0, #1
 8006fc6:	bfda      	itte	le
 8006fc8:	fb02 3301 	mlale	r3, r2, r1, r3
 8006fcc:	9309      	strle	r3, [sp, #36]	; 0x24
 8006fce:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006fd2:	3701      	adds	r7, #1
 8006fd4:	901d      	str	r0, [sp, #116]	; 0x74
 8006fd6:	e7bf      	b.n	8006f58 <_strtod_l+0x158>
 8006fd8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006fda:	195a      	adds	r2, r3, r5
 8006fdc:	921d      	str	r2, [sp, #116]	; 0x74
 8006fde:	5d5b      	ldrb	r3, [r3, r5]
 8006fe0:	2f00      	cmp	r7, #0
 8006fe2:	d037      	beq.n	8007054 <_strtod_l+0x254>
 8006fe4:	9007      	str	r0, [sp, #28]
 8006fe6:	463d      	mov	r5, r7
 8006fe8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006fec:	2a09      	cmp	r2, #9
 8006fee:	d912      	bls.n	8007016 <_strtod_l+0x216>
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	e7c2      	b.n	8006f7a <_strtod_l+0x17a>
 8006ff4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ff6:	1c5a      	adds	r2, r3, #1
 8006ff8:	921d      	str	r2, [sp, #116]	; 0x74
 8006ffa:	785b      	ldrb	r3, [r3, #1]
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	2b30      	cmp	r3, #48	; 0x30
 8007000:	d0f8      	beq.n	8006ff4 <_strtod_l+0x1f4>
 8007002:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007006:	2a08      	cmp	r2, #8
 8007008:	f200 84db 	bhi.w	80079c2 <_strtod_l+0xbc2>
 800700c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800700e:	9007      	str	r0, [sp, #28]
 8007010:	2000      	movs	r0, #0
 8007012:	920a      	str	r2, [sp, #40]	; 0x28
 8007014:	4605      	mov	r5, r0
 8007016:	3b30      	subs	r3, #48	; 0x30
 8007018:	f100 0201 	add.w	r2, r0, #1
 800701c:	d014      	beq.n	8007048 <_strtod_l+0x248>
 800701e:	9907      	ldr	r1, [sp, #28]
 8007020:	4411      	add	r1, r2
 8007022:	9107      	str	r1, [sp, #28]
 8007024:	462a      	mov	r2, r5
 8007026:	eb00 0e05 	add.w	lr, r0, r5
 800702a:	210a      	movs	r1, #10
 800702c:	4572      	cmp	r2, lr
 800702e:	d113      	bne.n	8007058 <_strtod_l+0x258>
 8007030:	182a      	adds	r2, r5, r0
 8007032:	2a08      	cmp	r2, #8
 8007034:	f105 0501 	add.w	r5, r5, #1
 8007038:	4405      	add	r5, r0
 800703a:	dc1c      	bgt.n	8007076 <_strtod_l+0x276>
 800703c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800703e:	220a      	movs	r2, #10
 8007040:	fb02 3301 	mla	r3, r2, r1, r3
 8007044:	9309      	str	r3, [sp, #36]	; 0x24
 8007046:	2200      	movs	r2, #0
 8007048:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800704a:	1c59      	adds	r1, r3, #1
 800704c:	911d      	str	r1, [sp, #116]	; 0x74
 800704e:	785b      	ldrb	r3, [r3, #1]
 8007050:	4610      	mov	r0, r2
 8007052:	e7c9      	b.n	8006fe8 <_strtod_l+0x1e8>
 8007054:	4638      	mov	r0, r7
 8007056:	e7d2      	b.n	8006ffe <_strtod_l+0x1fe>
 8007058:	2a08      	cmp	r2, #8
 800705a:	dc04      	bgt.n	8007066 <_strtod_l+0x266>
 800705c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800705e:	434e      	muls	r6, r1
 8007060:	9609      	str	r6, [sp, #36]	; 0x24
 8007062:	3201      	adds	r2, #1
 8007064:	e7e2      	b.n	800702c <_strtod_l+0x22c>
 8007066:	f102 0c01 	add.w	ip, r2, #1
 800706a:	f1bc 0f10 	cmp.w	ip, #16
 800706e:	bfd8      	it	le
 8007070:	fb01 f909 	mulle.w	r9, r1, r9
 8007074:	e7f5      	b.n	8007062 <_strtod_l+0x262>
 8007076:	2d10      	cmp	r5, #16
 8007078:	bfdc      	itt	le
 800707a:	220a      	movle	r2, #10
 800707c:	fb02 3909 	mlale	r9, r2, r9, r3
 8007080:	e7e1      	b.n	8007046 <_strtod_l+0x246>
 8007082:	2300      	movs	r3, #0
 8007084:	9307      	str	r3, [sp, #28]
 8007086:	2201      	movs	r2, #1
 8007088:	e77c      	b.n	8006f84 <_strtod_l+0x184>
 800708a:	f04f 0c00 	mov.w	ip, #0
 800708e:	f108 0302 	add.w	r3, r8, #2
 8007092:	931d      	str	r3, [sp, #116]	; 0x74
 8007094:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007098:	e785      	b.n	8006fa6 <_strtod_l+0x1a6>
 800709a:	f04f 0c01 	mov.w	ip, #1
 800709e:	e7f6      	b.n	800708e <_strtod_l+0x28e>
 80070a0:	0800bdf8 	.word	0x0800bdf8
 80070a4:	0800baa8 	.word	0x0800baa8
 80070a8:	7ff00000 	.word	0x7ff00000
 80070ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80070ae:	1c59      	adds	r1, r3, #1
 80070b0:	911d      	str	r1, [sp, #116]	; 0x74
 80070b2:	785b      	ldrb	r3, [r3, #1]
 80070b4:	2b30      	cmp	r3, #48	; 0x30
 80070b6:	d0f9      	beq.n	80070ac <_strtod_l+0x2ac>
 80070b8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80070bc:	2908      	cmp	r1, #8
 80070be:	f63f af79 	bhi.w	8006fb4 <_strtod_l+0x1b4>
 80070c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80070c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80070c8:	9308      	str	r3, [sp, #32]
 80070ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80070cc:	1c59      	adds	r1, r3, #1
 80070ce:	911d      	str	r1, [sp, #116]	; 0x74
 80070d0:	785b      	ldrb	r3, [r3, #1]
 80070d2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80070d6:	2e09      	cmp	r6, #9
 80070d8:	d937      	bls.n	800714a <_strtod_l+0x34a>
 80070da:	9e08      	ldr	r6, [sp, #32]
 80070dc:	1b89      	subs	r1, r1, r6
 80070de:	2908      	cmp	r1, #8
 80070e0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80070e4:	dc02      	bgt.n	80070ec <_strtod_l+0x2ec>
 80070e6:	4576      	cmp	r6, lr
 80070e8:	bfa8      	it	ge
 80070ea:	4676      	movge	r6, lr
 80070ec:	f1bc 0f00 	cmp.w	ip, #0
 80070f0:	d000      	beq.n	80070f4 <_strtod_l+0x2f4>
 80070f2:	4276      	negs	r6, r6
 80070f4:	2d00      	cmp	r5, #0
 80070f6:	d14f      	bne.n	8007198 <_strtod_l+0x398>
 80070f8:	9904      	ldr	r1, [sp, #16]
 80070fa:	4301      	orrs	r1, r0
 80070fc:	f47f aec2 	bne.w	8006e84 <_strtod_l+0x84>
 8007100:	2a00      	cmp	r2, #0
 8007102:	f47f aedb 	bne.w	8006ebc <_strtod_l+0xbc>
 8007106:	2b69      	cmp	r3, #105	; 0x69
 8007108:	d027      	beq.n	800715a <_strtod_l+0x35a>
 800710a:	dc24      	bgt.n	8007156 <_strtod_l+0x356>
 800710c:	2b49      	cmp	r3, #73	; 0x49
 800710e:	d024      	beq.n	800715a <_strtod_l+0x35a>
 8007110:	2b4e      	cmp	r3, #78	; 0x4e
 8007112:	f47f aed3 	bne.w	8006ebc <_strtod_l+0xbc>
 8007116:	499e      	ldr	r1, [pc, #632]	; (8007390 <_strtod_l+0x590>)
 8007118:	a81d      	add	r0, sp, #116	; 0x74
 800711a:	f002 f9a9 	bl	8009470 <__match>
 800711e:	2800      	cmp	r0, #0
 8007120:	f43f aecc 	beq.w	8006ebc <_strtod_l+0xbc>
 8007124:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b28      	cmp	r3, #40	; 0x28
 800712a:	d12d      	bne.n	8007188 <_strtod_l+0x388>
 800712c:	4999      	ldr	r1, [pc, #612]	; (8007394 <_strtod_l+0x594>)
 800712e:	aa20      	add	r2, sp, #128	; 0x80
 8007130:	a81d      	add	r0, sp, #116	; 0x74
 8007132:	f002 f9b1 	bl	8009498 <__hexnan>
 8007136:	2805      	cmp	r0, #5
 8007138:	d126      	bne.n	8007188 <_strtod_l+0x388>
 800713a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800713c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8007140:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007144:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007148:	e69c      	b.n	8006e84 <_strtod_l+0x84>
 800714a:	210a      	movs	r1, #10
 800714c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007150:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007154:	e7b9      	b.n	80070ca <_strtod_l+0x2ca>
 8007156:	2b6e      	cmp	r3, #110	; 0x6e
 8007158:	e7db      	b.n	8007112 <_strtod_l+0x312>
 800715a:	498f      	ldr	r1, [pc, #572]	; (8007398 <_strtod_l+0x598>)
 800715c:	a81d      	add	r0, sp, #116	; 0x74
 800715e:	f002 f987 	bl	8009470 <__match>
 8007162:	2800      	cmp	r0, #0
 8007164:	f43f aeaa 	beq.w	8006ebc <_strtod_l+0xbc>
 8007168:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800716a:	498c      	ldr	r1, [pc, #560]	; (800739c <_strtod_l+0x59c>)
 800716c:	3b01      	subs	r3, #1
 800716e:	a81d      	add	r0, sp, #116	; 0x74
 8007170:	931d      	str	r3, [sp, #116]	; 0x74
 8007172:	f002 f97d 	bl	8009470 <__match>
 8007176:	b910      	cbnz	r0, 800717e <_strtod_l+0x37e>
 8007178:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800717a:	3301      	adds	r3, #1
 800717c:	931d      	str	r3, [sp, #116]	; 0x74
 800717e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80073ac <_strtod_l+0x5ac>
 8007182:	f04f 0a00 	mov.w	sl, #0
 8007186:	e67d      	b.n	8006e84 <_strtod_l+0x84>
 8007188:	4885      	ldr	r0, [pc, #532]	; (80073a0 <_strtod_l+0x5a0>)
 800718a:	f003 fae1 	bl	800a750 <nan>
 800718e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007192:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007196:	e675      	b.n	8006e84 <_strtod_l+0x84>
 8007198:	9b07      	ldr	r3, [sp, #28]
 800719a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800719c:	1af3      	subs	r3, r6, r3
 800719e:	2f00      	cmp	r7, #0
 80071a0:	bf08      	it	eq
 80071a2:	462f      	moveq	r7, r5
 80071a4:	2d10      	cmp	r5, #16
 80071a6:	9308      	str	r3, [sp, #32]
 80071a8:	46a8      	mov	r8, r5
 80071aa:	bfa8      	it	ge
 80071ac:	f04f 0810 	movge.w	r8, #16
 80071b0:	f7f9 f9b8 	bl	8000524 <__aeabi_ui2d>
 80071b4:	2d09      	cmp	r5, #9
 80071b6:	4682      	mov	sl, r0
 80071b8:	468b      	mov	fp, r1
 80071ba:	dd13      	ble.n	80071e4 <_strtod_l+0x3e4>
 80071bc:	4b79      	ldr	r3, [pc, #484]	; (80073a4 <_strtod_l+0x5a4>)
 80071be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80071c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80071c6:	f7f9 fa27 	bl	8000618 <__aeabi_dmul>
 80071ca:	4682      	mov	sl, r0
 80071cc:	4648      	mov	r0, r9
 80071ce:	468b      	mov	fp, r1
 80071d0:	f7f9 f9a8 	bl	8000524 <__aeabi_ui2d>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	4650      	mov	r0, sl
 80071da:	4659      	mov	r1, fp
 80071dc:	f7f9 f866 	bl	80002ac <__adddf3>
 80071e0:	4682      	mov	sl, r0
 80071e2:	468b      	mov	fp, r1
 80071e4:	2d0f      	cmp	r5, #15
 80071e6:	dc38      	bgt.n	800725a <_strtod_l+0x45a>
 80071e8:	9b08      	ldr	r3, [sp, #32]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f43f ae4a 	beq.w	8006e84 <_strtod_l+0x84>
 80071f0:	dd24      	ble.n	800723c <_strtod_l+0x43c>
 80071f2:	2b16      	cmp	r3, #22
 80071f4:	dc0b      	bgt.n	800720e <_strtod_l+0x40e>
 80071f6:	4d6b      	ldr	r5, [pc, #428]	; (80073a4 <_strtod_l+0x5a4>)
 80071f8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80071fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007200:	4652      	mov	r2, sl
 8007202:	465b      	mov	r3, fp
 8007204:	f7f9 fa08 	bl	8000618 <__aeabi_dmul>
 8007208:	4682      	mov	sl, r0
 800720a:	468b      	mov	fp, r1
 800720c:	e63a      	b.n	8006e84 <_strtod_l+0x84>
 800720e:	9a08      	ldr	r2, [sp, #32]
 8007210:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007214:	4293      	cmp	r3, r2
 8007216:	db20      	blt.n	800725a <_strtod_l+0x45a>
 8007218:	4c62      	ldr	r4, [pc, #392]	; (80073a4 <_strtod_l+0x5a4>)
 800721a:	f1c5 050f 	rsb	r5, r5, #15
 800721e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007222:	4652      	mov	r2, sl
 8007224:	465b      	mov	r3, fp
 8007226:	e9d1 0100 	ldrd	r0, r1, [r1]
 800722a:	f7f9 f9f5 	bl	8000618 <__aeabi_dmul>
 800722e:	9b08      	ldr	r3, [sp, #32]
 8007230:	1b5d      	subs	r5, r3, r5
 8007232:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007236:	e9d4 2300 	ldrd	r2, r3, [r4]
 800723a:	e7e3      	b.n	8007204 <_strtod_l+0x404>
 800723c:	9b08      	ldr	r3, [sp, #32]
 800723e:	3316      	adds	r3, #22
 8007240:	db0b      	blt.n	800725a <_strtod_l+0x45a>
 8007242:	9b07      	ldr	r3, [sp, #28]
 8007244:	4a57      	ldr	r2, [pc, #348]	; (80073a4 <_strtod_l+0x5a4>)
 8007246:	1b9e      	subs	r6, r3, r6
 8007248:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800724c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007250:	4650      	mov	r0, sl
 8007252:	4659      	mov	r1, fp
 8007254:	f7f9 fb0a 	bl	800086c <__aeabi_ddiv>
 8007258:	e7d6      	b.n	8007208 <_strtod_l+0x408>
 800725a:	9b08      	ldr	r3, [sp, #32]
 800725c:	eba5 0808 	sub.w	r8, r5, r8
 8007260:	4498      	add	r8, r3
 8007262:	f1b8 0f00 	cmp.w	r8, #0
 8007266:	dd71      	ble.n	800734c <_strtod_l+0x54c>
 8007268:	f018 030f 	ands.w	r3, r8, #15
 800726c:	d00a      	beq.n	8007284 <_strtod_l+0x484>
 800726e:	494d      	ldr	r1, [pc, #308]	; (80073a4 <_strtod_l+0x5a4>)
 8007270:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007274:	4652      	mov	r2, sl
 8007276:	465b      	mov	r3, fp
 8007278:	e9d1 0100 	ldrd	r0, r1, [r1]
 800727c:	f7f9 f9cc 	bl	8000618 <__aeabi_dmul>
 8007280:	4682      	mov	sl, r0
 8007282:	468b      	mov	fp, r1
 8007284:	f038 080f 	bics.w	r8, r8, #15
 8007288:	d04d      	beq.n	8007326 <_strtod_l+0x526>
 800728a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800728e:	dd22      	ble.n	80072d6 <_strtod_l+0x4d6>
 8007290:	2500      	movs	r5, #0
 8007292:	462e      	mov	r6, r5
 8007294:	9509      	str	r5, [sp, #36]	; 0x24
 8007296:	9507      	str	r5, [sp, #28]
 8007298:	2322      	movs	r3, #34	; 0x22
 800729a:	f8df b110 	ldr.w	fp, [pc, #272]	; 80073ac <_strtod_l+0x5ac>
 800729e:	6023      	str	r3, [r4, #0]
 80072a0:	f04f 0a00 	mov.w	sl, #0
 80072a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f43f adec 	beq.w	8006e84 <_strtod_l+0x84>
 80072ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 80072ae:	4620      	mov	r0, r4
 80072b0:	f002 fa62 	bl	8009778 <_Bfree>
 80072b4:	9907      	ldr	r1, [sp, #28]
 80072b6:	4620      	mov	r0, r4
 80072b8:	f002 fa5e 	bl	8009778 <_Bfree>
 80072bc:	4631      	mov	r1, r6
 80072be:	4620      	mov	r0, r4
 80072c0:	f002 fa5a 	bl	8009778 <_Bfree>
 80072c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072c6:	4620      	mov	r0, r4
 80072c8:	f002 fa56 	bl	8009778 <_Bfree>
 80072cc:	4629      	mov	r1, r5
 80072ce:	4620      	mov	r0, r4
 80072d0:	f002 fa52 	bl	8009778 <_Bfree>
 80072d4:	e5d6      	b.n	8006e84 <_strtod_l+0x84>
 80072d6:	2300      	movs	r3, #0
 80072d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80072dc:	4650      	mov	r0, sl
 80072de:	4659      	mov	r1, fp
 80072e0:	4699      	mov	r9, r3
 80072e2:	f1b8 0f01 	cmp.w	r8, #1
 80072e6:	dc21      	bgt.n	800732c <_strtod_l+0x52c>
 80072e8:	b10b      	cbz	r3, 80072ee <_strtod_l+0x4ee>
 80072ea:	4682      	mov	sl, r0
 80072ec:	468b      	mov	fp, r1
 80072ee:	4b2e      	ldr	r3, [pc, #184]	; (80073a8 <_strtod_l+0x5a8>)
 80072f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80072f4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80072f8:	4652      	mov	r2, sl
 80072fa:	465b      	mov	r3, fp
 80072fc:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007300:	f7f9 f98a 	bl	8000618 <__aeabi_dmul>
 8007304:	4b29      	ldr	r3, [pc, #164]	; (80073ac <_strtod_l+0x5ac>)
 8007306:	460a      	mov	r2, r1
 8007308:	400b      	ands	r3, r1
 800730a:	4929      	ldr	r1, [pc, #164]	; (80073b0 <_strtod_l+0x5b0>)
 800730c:	428b      	cmp	r3, r1
 800730e:	4682      	mov	sl, r0
 8007310:	d8be      	bhi.n	8007290 <_strtod_l+0x490>
 8007312:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007316:	428b      	cmp	r3, r1
 8007318:	bf86      	itte	hi
 800731a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80073b4 <_strtod_l+0x5b4>
 800731e:	f04f 3aff 	movhi.w	sl, #4294967295
 8007322:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007326:	2300      	movs	r3, #0
 8007328:	9304      	str	r3, [sp, #16]
 800732a:	e081      	b.n	8007430 <_strtod_l+0x630>
 800732c:	f018 0f01 	tst.w	r8, #1
 8007330:	d007      	beq.n	8007342 <_strtod_l+0x542>
 8007332:	4b1d      	ldr	r3, [pc, #116]	; (80073a8 <_strtod_l+0x5a8>)
 8007334:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733c:	f7f9 f96c 	bl	8000618 <__aeabi_dmul>
 8007340:	2301      	movs	r3, #1
 8007342:	f109 0901 	add.w	r9, r9, #1
 8007346:	ea4f 0868 	mov.w	r8, r8, asr #1
 800734a:	e7ca      	b.n	80072e2 <_strtod_l+0x4e2>
 800734c:	d0eb      	beq.n	8007326 <_strtod_l+0x526>
 800734e:	f1c8 0800 	rsb	r8, r8, #0
 8007352:	f018 020f 	ands.w	r2, r8, #15
 8007356:	d00a      	beq.n	800736e <_strtod_l+0x56e>
 8007358:	4b12      	ldr	r3, [pc, #72]	; (80073a4 <_strtod_l+0x5a4>)
 800735a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800735e:	4650      	mov	r0, sl
 8007360:	4659      	mov	r1, fp
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	f7f9 fa81 	bl	800086c <__aeabi_ddiv>
 800736a:	4682      	mov	sl, r0
 800736c:	468b      	mov	fp, r1
 800736e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007372:	d0d8      	beq.n	8007326 <_strtod_l+0x526>
 8007374:	f1b8 0f1f 	cmp.w	r8, #31
 8007378:	dd1e      	ble.n	80073b8 <_strtod_l+0x5b8>
 800737a:	2500      	movs	r5, #0
 800737c:	462e      	mov	r6, r5
 800737e:	9509      	str	r5, [sp, #36]	; 0x24
 8007380:	9507      	str	r5, [sp, #28]
 8007382:	2322      	movs	r3, #34	; 0x22
 8007384:	f04f 0a00 	mov.w	sl, #0
 8007388:	f04f 0b00 	mov.w	fp, #0
 800738c:	6023      	str	r3, [r4, #0]
 800738e:	e789      	b.n	80072a4 <_strtod_l+0x4a4>
 8007390:	0800ba79 	.word	0x0800ba79
 8007394:	0800babc 	.word	0x0800babc
 8007398:	0800ba71 	.word	0x0800ba71
 800739c:	0800bcb0 	.word	0x0800bcb0
 80073a0:	0800bbab 	.word	0x0800bbab
 80073a4:	0800be98 	.word	0x0800be98
 80073a8:	0800be70 	.word	0x0800be70
 80073ac:	7ff00000 	.word	0x7ff00000
 80073b0:	7ca00000 	.word	0x7ca00000
 80073b4:	7fefffff 	.word	0x7fefffff
 80073b8:	f018 0310 	ands.w	r3, r8, #16
 80073bc:	bf18      	it	ne
 80073be:	236a      	movne	r3, #106	; 0x6a
 80073c0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8007778 <_strtod_l+0x978>
 80073c4:	9304      	str	r3, [sp, #16]
 80073c6:	4650      	mov	r0, sl
 80073c8:	4659      	mov	r1, fp
 80073ca:	2300      	movs	r3, #0
 80073cc:	f018 0f01 	tst.w	r8, #1
 80073d0:	d004      	beq.n	80073dc <_strtod_l+0x5dc>
 80073d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80073d6:	f7f9 f91f 	bl	8000618 <__aeabi_dmul>
 80073da:	2301      	movs	r3, #1
 80073dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80073e0:	f109 0908 	add.w	r9, r9, #8
 80073e4:	d1f2      	bne.n	80073cc <_strtod_l+0x5cc>
 80073e6:	b10b      	cbz	r3, 80073ec <_strtod_l+0x5ec>
 80073e8:	4682      	mov	sl, r0
 80073ea:	468b      	mov	fp, r1
 80073ec:	9b04      	ldr	r3, [sp, #16]
 80073ee:	b1bb      	cbz	r3, 8007420 <_strtod_l+0x620>
 80073f0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80073f4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	4659      	mov	r1, fp
 80073fc:	dd10      	ble.n	8007420 <_strtod_l+0x620>
 80073fe:	2b1f      	cmp	r3, #31
 8007400:	f340 8128 	ble.w	8007654 <_strtod_l+0x854>
 8007404:	2b34      	cmp	r3, #52	; 0x34
 8007406:	bfde      	ittt	le
 8007408:	3b20      	suble	r3, #32
 800740a:	f04f 32ff 	movle.w	r2, #4294967295
 800740e:	fa02 f303 	lslle.w	r3, r2, r3
 8007412:	f04f 0a00 	mov.w	sl, #0
 8007416:	bfcc      	ite	gt
 8007418:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800741c:	ea03 0b01 	andle.w	fp, r3, r1
 8007420:	2200      	movs	r2, #0
 8007422:	2300      	movs	r3, #0
 8007424:	4650      	mov	r0, sl
 8007426:	4659      	mov	r1, fp
 8007428:	f7f9 fb5e 	bl	8000ae8 <__aeabi_dcmpeq>
 800742c:	2800      	cmp	r0, #0
 800742e:	d1a4      	bne.n	800737a <_strtod_l+0x57a>
 8007430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007436:	462b      	mov	r3, r5
 8007438:	463a      	mov	r2, r7
 800743a:	4620      	mov	r0, r4
 800743c:	f002 fa08 	bl	8009850 <__s2b>
 8007440:	9009      	str	r0, [sp, #36]	; 0x24
 8007442:	2800      	cmp	r0, #0
 8007444:	f43f af24 	beq.w	8007290 <_strtod_l+0x490>
 8007448:	9b07      	ldr	r3, [sp, #28]
 800744a:	1b9e      	subs	r6, r3, r6
 800744c:	9b08      	ldr	r3, [sp, #32]
 800744e:	2b00      	cmp	r3, #0
 8007450:	bfb4      	ite	lt
 8007452:	4633      	movlt	r3, r6
 8007454:	2300      	movge	r3, #0
 8007456:	9310      	str	r3, [sp, #64]	; 0x40
 8007458:	9b08      	ldr	r3, [sp, #32]
 800745a:	2500      	movs	r5, #0
 800745c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007460:	9318      	str	r3, [sp, #96]	; 0x60
 8007462:	462e      	mov	r6, r5
 8007464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007466:	4620      	mov	r0, r4
 8007468:	6859      	ldr	r1, [r3, #4]
 800746a:	f002 f945 	bl	80096f8 <_Balloc>
 800746e:	9007      	str	r0, [sp, #28]
 8007470:	2800      	cmp	r0, #0
 8007472:	f43f af11 	beq.w	8007298 <_strtod_l+0x498>
 8007476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007478:	691a      	ldr	r2, [r3, #16]
 800747a:	3202      	adds	r2, #2
 800747c:	f103 010c 	add.w	r1, r3, #12
 8007480:	0092      	lsls	r2, r2, #2
 8007482:	300c      	adds	r0, #12
 8007484:	f002 f92a 	bl	80096dc <memcpy>
 8007488:	ec4b ab10 	vmov	d0, sl, fp
 800748c:	aa20      	add	r2, sp, #128	; 0x80
 800748e:	a91f      	add	r1, sp, #124	; 0x7c
 8007490:	4620      	mov	r0, r4
 8007492:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007496:	f002 fd17 	bl	8009ec8 <__d2b>
 800749a:	901e      	str	r0, [sp, #120]	; 0x78
 800749c:	2800      	cmp	r0, #0
 800749e:	f43f aefb 	beq.w	8007298 <_strtod_l+0x498>
 80074a2:	2101      	movs	r1, #1
 80074a4:	4620      	mov	r0, r4
 80074a6:	f002 fa6d 	bl	8009984 <__i2b>
 80074aa:	4606      	mov	r6, r0
 80074ac:	2800      	cmp	r0, #0
 80074ae:	f43f aef3 	beq.w	8007298 <_strtod_l+0x498>
 80074b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80074b4:	9904      	ldr	r1, [sp, #16]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	bfab      	itete	ge
 80074ba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80074bc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80074be:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80074c0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80074c4:	bfac      	ite	ge
 80074c6:	eb03 0902 	addge.w	r9, r3, r2
 80074ca:	1ad7      	sublt	r7, r2, r3
 80074cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80074ce:	eba3 0801 	sub.w	r8, r3, r1
 80074d2:	4490      	add	r8, r2
 80074d4:	4ba3      	ldr	r3, [pc, #652]	; (8007764 <_strtod_l+0x964>)
 80074d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80074da:	4598      	cmp	r8, r3
 80074dc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80074e0:	f280 80cc 	bge.w	800767c <_strtod_l+0x87c>
 80074e4:	eba3 0308 	sub.w	r3, r3, r8
 80074e8:	2b1f      	cmp	r3, #31
 80074ea:	eba2 0203 	sub.w	r2, r2, r3
 80074ee:	f04f 0101 	mov.w	r1, #1
 80074f2:	f300 80b6 	bgt.w	8007662 <_strtod_l+0x862>
 80074f6:	fa01 f303 	lsl.w	r3, r1, r3
 80074fa:	9311      	str	r3, [sp, #68]	; 0x44
 80074fc:	2300      	movs	r3, #0
 80074fe:	930c      	str	r3, [sp, #48]	; 0x30
 8007500:	eb09 0802 	add.w	r8, r9, r2
 8007504:	9b04      	ldr	r3, [sp, #16]
 8007506:	45c1      	cmp	r9, r8
 8007508:	4417      	add	r7, r2
 800750a:	441f      	add	r7, r3
 800750c:	464b      	mov	r3, r9
 800750e:	bfa8      	it	ge
 8007510:	4643      	movge	r3, r8
 8007512:	42bb      	cmp	r3, r7
 8007514:	bfa8      	it	ge
 8007516:	463b      	movge	r3, r7
 8007518:	2b00      	cmp	r3, #0
 800751a:	bfc2      	ittt	gt
 800751c:	eba8 0803 	subgt.w	r8, r8, r3
 8007520:	1aff      	subgt	r7, r7, r3
 8007522:	eba9 0903 	subgt.w	r9, r9, r3
 8007526:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007528:	2b00      	cmp	r3, #0
 800752a:	dd17      	ble.n	800755c <_strtod_l+0x75c>
 800752c:	4631      	mov	r1, r6
 800752e:	461a      	mov	r2, r3
 8007530:	4620      	mov	r0, r4
 8007532:	f002 fae3 	bl	8009afc <__pow5mult>
 8007536:	4606      	mov	r6, r0
 8007538:	2800      	cmp	r0, #0
 800753a:	f43f aead 	beq.w	8007298 <_strtod_l+0x498>
 800753e:	4601      	mov	r1, r0
 8007540:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007542:	4620      	mov	r0, r4
 8007544:	f002 fa34 	bl	80099b0 <__multiply>
 8007548:	900f      	str	r0, [sp, #60]	; 0x3c
 800754a:	2800      	cmp	r0, #0
 800754c:	f43f aea4 	beq.w	8007298 <_strtod_l+0x498>
 8007550:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007552:	4620      	mov	r0, r4
 8007554:	f002 f910 	bl	8009778 <_Bfree>
 8007558:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800755a:	931e      	str	r3, [sp, #120]	; 0x78
 800755c:	f1b8 0f00 	cmp.w	r8, #0
 8007560:	f300 8091 	bgt.w	8007686 <_strtod_l+0x886>
 8007564:	9b08      	ldr	r3, [sp, #32]
 8007566:	2b00      	cmp	r3, #0
 8007568:	dd08      	ble.n	800757c <_strtod_l+0x77c>
 800756a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800756c:	9907      	ldr	r1, [sp, #28]
 800756e:	4620      	mov	r0, r4
 8007570:	f002 fac4 	bl	8009afc <__pow5mult>
 8007574:	9007      	str	r0, [sp, #28]
 8007576:	2800      	cmp	r0, #0
 8007578:	f43f ae8e 	beq.w	8007298 <_strtod_l+0x498>
 800757c:	2f00      	cmp	r7, #0
 800757e:	dd08      	ble.n	8007592 <_strtod_l+0x792>
 8007580:	9907      	ldr	r1, [sp, #28]
 8007582:	463a      	mov	r2, r7
 8007584:	4620      	mov	r0, r4
 8007586:	f002 fb13 	bl	8009bb0 <__lshift>
 800758a:	9007      	str	r0, [sp, #28]
 800758c:	2800      	cmp	r0, #0
 800758e:	f43f ae83 	beq.w	8007298 <_strtod_l+0x498>
 8007592:	f1b9 0f00 	cmp.w	r9, #0
 8007596:	dd08      	ble.n	80075aa <_strtod_l+0x7aa>
 8007598:	4631      	mov	r1, r6
 800759a:	464a      	mov	r2, r9
 800759c:	4620      	mov	r0, r4
 800759e:	f002 fb07 	bl	8009bb0 <__lshift>
 80075a2:	4606      	mov	r6, r0
 80075a4:	2800      	cmp	r0, #0
 80075a6:	f43f ae77 	beq.w	8007298 <_strtod_l+0x498>
 80075aa:	9a07      	ldr	r2, [sp, #28]
 80075ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 80075ae:	4620      	mov	r0, r4
 80075b0:	f002 fb86 	bl	8009cc0 <__mdiff>
 80075b4:	4605      	mov	r5, r0
 80075b6:	2800      	cmp	r0, #0
 80075b8:	f43f ae6e 	beq.w	8007298 <_strtod_l+0x498>
 80075bc:	68c3      	ldr	r3, [r0, #12]
 80075be:	930f      	str	r3, [sp, #60]	; 0x3c
 80075c0:	2300      	movs	r3, #0
 80075c2:	60c3      	str	r3, [r0, #12]
 80075c4:	4631      	mov	r1, r6
 80075c6:	f002 fb5f 	bl	8009c88 <__mcmp>
 80075ca:	2800      	cmp	r0, #0
 80075cc:	da65      	bge.n	800769a <_strtod_l+0x89a>
 80075ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075d0:	ea53 030a 	orrs.w	r3, r3, sl
 80075d4:	f040 8087 	bne.w	80076e6 <_strtod_l+0x8e6>
 80075d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f040 8082 	bne.w	80076e6 <_strtod_l+0x8e6>
 80075e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80075e6:	0d1b      	lsrs	r3, r3, #20
 80075e8:	051b      	lsls	r3, r3, #20
 80075ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80075ee:	d97a      	bls.n	80076e6 <_strtod_l+0x8e6>
 80075f0:	696b      	ldr	r3, [r5, #20]
 80075f2:	b913      	cbnz	r3, 80075fa <_strtod_l+0x7fa>
 80075f4:	692b      	ldr	r3, [r5, #16]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	dd75      	ble.n	80076e6 <_strtod_l+0x8e6>
 80075fa:	4629      	mov	r1, r5
 80075fc:	2201      	movs	r2, #1
 80075fe:	4620      	mov	r0, r4
 8007600:	f002 fad6 	bl	8009bb0 <__lshift>
 8007604:	4631      	mov	r1, r6
 8007606:	4605      	mov	r5, r0
 8007608:	f002 fb3e 	bl	8009c88 <__mcmp>
 800760c:	2800      	cmp	r0, #0
 800760e:	dd6a      	ble.n	80076e6 <_strtod_l+0x8e6>
 8007610:	9904      	ldr	r1, [sp, #16]
 8007612:	4a55      	ldr	r2, [pc, #340]	; (8007768 <_strtod_l+0x968>)
 8007614:	465b      	mov	r3, fp
 8007616:	2900      	cmp	r1, #0
 8007618:	f000 8085 	beq.w	8007726 <_strtod_l+0x926>
 800761c:	ea02 010b 	and.w	r1, r2, fp
 8007620:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007624:	dc7f      	bgt.n	8007726 <_strtod_l+0x926>
 8007626:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800762a:	f77f aeaa 	ble.w	8007382 <_strtod_l+0x582>
 800762e:	4a4f      	ldr	r2, [pc, #316]	; (800776c <_strtod_l+0x96c>)
 8007630:	2300      	movs	r3, #0
 8007632:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8007636:	4650      	mov	r0, sl
 8007638:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800763c:	4659      	mov	r1, fp
 800763e:	f7f8 ffeb 	bl	8000618 <__aeabi_dmul>
 8007642:	460b      	mov	r3, r1
 8007644:	4303      	orrs	r3, r0
 8007646:	bf08      	it	eq
 8007648:	2322      	moveq	r3, #34	; 0x22
 800764a:	4682      	mov	sl, r0
 800764c:	468b      	mov	fp, r1
 800764e:	bf08      	it	eq
 8007650:	6023      	streq	r3, [r4, #0]
 8007652:	e62b      	b.n	80072ac <_strtod_l+0x4ac>
 8007654:	f04f 32ff 	mov.w	r2, #4294967295
 8007658:	fa02 f303 	lsl.w	r3, r2, r3
 800765c:	ea03 0a0a 	and.w	sl, r3, sl
 8007660:	e6de      	b.n	8007420 <_strtod_l+0x620>
 8007662:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007666:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800766a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800766e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007672:	fa01 f308 	lsl.w	r3, r1, r8
 8007676:	930c      	str	r3, [sp, #48]	; 0x30
 8007678:	9111      	str	r1, [sp, #68]	; 0x44
 800767a:	e741      	b.n	8007500 <_strtod_l+0x700>
 800767c:	2300      	movs	r3, #0
 800767e:	930c      	str	r3, [sp, #48]	; 0x30
 8007680:	2301      	movs	r3, #1
 8007682:	9311      	str	r3, [sp, #68]	; 0x44
 8007684:	e73c      	b.n	8007500 <_strtod_l+0x700>
 8007686:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007688:	4642      	mov	r2, r8
 800768a:	4620      	mov	r0, r4
 800768c:	f002 fa90 	bl	8009bb0 <__lshift>
 8007690:	901e      	str	r0, [sp, #120]	; 0x78
 8007692:	2800      	cmp	r0, #0
 8007694:	f47f af66 	bne.w	8007564 <_strtod_l+0x764>
 8007698:	e5fe      	b.n	8007298 <_strtod_l+0x498>
 800769a:	465f      	mov	r7, fp
 800769c:	d16e      	bne.n	800777c <_strtod_l+0x97c>
 800769e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80076a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80076a4:	b342      	cbz	r2, 80076f8 <_strtod_l+0x8f8>
 80076a6:	4a32      	ldr	r2, [pc, #200]	; (8007770 <_strtod_l+0x970>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d128      	bne.n	80076fe <_strtod_l+0x8fe>
 80076ac:	9b04      	ldr	r3, [sp, #16]
 80076ae:	4650      	mov	r0, sl
 80076b0:	b1eb      	cbz	r3, 80076ee <_strtod_l+0x8ee>
 80076b2:	4a2d      	ldr	r2, [pc, #180]	; (8007768 <_strtod_l+0x968>)
 80076b4:	403a      	ands	r2, r7
 80076b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80076ba:	f04f 31ff 	mov.w	r1, #4294967295
 80076be:	d819      	bhi.n	80076f4 <_strtod_l+0x8f4>
 80076c0:	0d12      	lsrs	r2, r2, #20
 80076c2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80076c6:	fa01 f303 	lsl.w	r3, r1, r3
 80076ca:	4298      	cmp	r0, r3
 80076cc:	d117      	bne.n	80076fe <_strtod_l+0x8fe>
 80076ce:	4b29      	ldr	r3, [pc, #164]	; (8007774 <_strtod_l+0x974>)
 80076d0:	429f      	cmp	r7, r3
 80076d2:	d102      	bne.n	80076da <_strtod_l+0x8da>
 80076d4:	3001      	adds	r0, #1
 80076d6:	f43f addf 	beq.w	8007298 <_strtod_l+0x498>
 80076da:	4b23      	ldr	r3, [pc, #140]	; (8007768 <_strtod_l+0x968>)
 80076dc:	403b      	ands	r3, r7
 80076de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80076e2:	f04f 0a00 	mov.w	sl, #0
 80076e6:	9b04      	ldr	r3, [sp, #16]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1a0      	bne.n	800762e <_strtod_l+0x82e>
 80076ec:	e5de      	b.n	80072ac <_strtod_l+0x4ac>
 80076ee:	f04f 33ff 	mov.w	r3, #4294967295
 80076f2:	e7ea      	b.n	80076ca <_strtod_l+0x8ca>
 80076f4:	460b      	mov	r3, r1
 80076f6:	e7e8      	b.n	80076ca <_strtod_l+0x8ca>
 80076f8:	ea53 030a 	orrs.w	r3, r3, sl
 80076fc:	d088      	beq.n	8007610 <_strtod_l+0x810>
 80076fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007700:	b1db      	cbz	r3, 800773a <_strtod_l+0x93a>
 8007702:	423b      	tst	r3, r7
 8007704:	d0ef      	beq.n	80076e6 <_strtod_l+0x8e6>
 8007706:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007708:	9a04      	ldr	r2, [sp, #16]
 800770a:	4650      	mov	r0, sl
 800770c:	4659      	mov	r1, fp
 800770e:	b1c3      	cbz	r3, 8007742 <_strtod_l+0x942>
 8007710:	f7ff fb5a 	bl	8006dc8 <sulp>
 8007714:	4602      	mov	r2, r0
 8007716:	460b      	mov	r3, r1
 8007718:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800771c:	f7f8 fdc6 	bl	80002ac <__adddf3>
 8007720:	4682      	mov	sl, r0
 8007722:	468b      	mov	fp, r1
 8007724:	e7df      	b.n	80076e6 <_strtod_l+0x8e6>
 8007726:	4013      	ands	r3, r2
 8007728:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800772c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007730:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007734:	f04f 3aff 	mov.w	sl, #4294967295
 8007738:	e7d5      	b.n	80076e6 <_strtod_l+0x8e6>
 800773a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800773c:	ea13 0f0a 	tst.w	r3, sl
 8007740:	e7e0      	b.n	8007704 <_strtod_l+0x904>
 8007742:	f7ff fb41 	bl	8006dc8 <sulp>
 8007746:	4602      	mov	r2, r0
 8007748:	460b      	mov	r3, r1
 800774a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800774e:	f7f8 fdab 	bl	80002a8 <__aeabi_dsub>
 8007752:	2200      	movs	r2, #0
 8007754:	2300      	movs	r3, #0
 8007756:	4682      	mov	sl, r0
 8007758:	468b      	mov	fp, r1
 800775a:	f7f9 f9c5 	bl	8000ae8 <__aeabi_dcmpeq>
 800775e:	2800      	cmp	r0, #0
 8007760:	d0c1      	beq.n	80076e6 <_strtod_l+0x8e6>
 8007762:	e60e      	b.n	8007382 <_strtod_l+0x582>
 8007764:	fffffc02 	.word	0xfffffc02
 8007768:	7ff00000 	.word	0x7ff00000
 800776c:	39500000 	.word	0x39500000
 8007770:	000fffff 	.word	0x000fffff
 8007774:	7fefffff 	.word	0x7fefffff
 8007778:	0800bad0 	.word	0x0800bad0
 800777c:	4631      	mov	r1, r6
 800777e:	4628      	mov	r0, r5
 8007780:	f002 fbfe 	bl	8009f80 <__ratio>
 8007784:	ec59 8b10 	vmov	r8, r9, d0
 8007788:	ee10 0a10 	vmov	r0, s0
 800778c:	2200      	movs	r2, #0
 800778e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007792:	4649      	mov	r1, r9
 8007794:	f7f9 f9bc 	bl	8000b10 <__aeabi_dcmple>
 8007798:	2800      	cmp	r0, #0
 800779a:	d07c      	beq.n	8007896 <_strtod_l+0xa96>
 800779c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d04c      	beq.n	800783c <_strtod_l+0xa3c>
 80077a2:	4b95      	ldr	r3, [pc, #596]	; (80079f8 <_strtod_l+0xbf8>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80077aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80079f8 <_strtod_l+0xbf8>
 80077ae:	f04f 0800 	mov.w	r8, #0
 80077b2:	4b92      	ldr	r3, [pc, #584]	; (80079fc <_strtod_l+0xbfc>)
 80077b4:	403b      	ands	r3, r7
 80077b6:	9311      	str	r3, [sp, #68]	; 0x44
 80077b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80077ba:	4b91      	ldr	r3, [pc, #580]	; (8007a00 <_strtod_l+0xc00>)
 80077bc:	429a      	cmp	r2, r3
 80077be:	f040 80b2 	bne.w	8007926 <_strtod_l+0xb26>
 80077c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80077c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077ca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80077ce:	ec4b ab10 	vmov	d0, sl, fp
 80077d2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80077d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80077da:	f002 faf9 	bl	8009dd0 <__ulp>
 80077de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077e2:	ec53 2b10 	vmov	r2, r3, d0
 80077e6:	f7f8 ff17 	bl	8000618 <__aeabi_dmul>
 80077ea:	4652      	mov	r2, sl
 80077ec:	465b      	mov	r3, fp
 80077ee:	f7f8 fd5d 	bl	80002ac <__adddf3>
 80077f2:	460b      	mov	r3, r1
 80077f4:	4981      	ldr	r1, [pc, #516]	; (80079fc <_strtod_l+0xbfc>)
 80077f6:	4a83      	ldr	r2, [pc, #524]	; (8007a04 <_strtod_l+0xc04>)
 80077f8:	4019      	ands	r1, r3
 80077fa:	4291      	cmp	r1, r2
 80077fc:	4682      	mov	sl, r0
 80077fe:	d95e      	bls.n	80078be <_strtod_l+0xabe>
 8007800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007802:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007806:	4293      	cmp	r3, r2
 8007808:	d103      	bne.n	8007812 <_strtod_l+0xa12>
 800780a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800780c:	3301      	adds	r3, #1
 800780e:	f43f ad43 	beq.w	8007298 <_strtod_l+0x498>
 8007812:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007a10 <_strtod_l+0xc10>
 8007816:	f04f 3aff 	mov.w	sl, #4294967295
 800781a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800781c:	4620      	mov	r0, r4
 800781e:	f001 ffab 	bl	8009778 <_Bfree>
 8007822:	9907      	ldr	r1, [sp, #28]
 8007824:	4620      	mov	r0, r4
 8007826:	f001 ffa7 	bl	8009778 <_Bfree>
 800782a:	4631      	mov	r1, r6
 800782c:	4620      	mov	r0, r4
 800782e:	f001 ffa3 	bl	8009778 <_Bfree>
 8007832:	4629      	mov	r1, r5
 8007834:	4620      	mov	r0, r4
 8007836:	f001 ff9f 	bl	8009778 <_Bfree>
 800783a:	e613      	b.n	8007464 <_strtod_l+0x664>
 800783c:	f1ba 0f00 	cmp.w	sl, #0
 8007840:	d11b      	bne.n	800787a <_strtod_l+0xa7a>
 8007842:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007846:	b9f3      	cbnz	r3, 8007886 <_strtod_l+0xa86>
 8007848:	4b6b      	ldr	r3, [pc, #428]	; (80079f8 <_strtod_l+0xbf8>)
 800784a:	2200      	movs	r2, #0
 800784c:	4640      	mov	r0, r8
 800784e:	4649      	mov	r1, r9
 8007850:	f7f9 f954 	bl	8000afc <__aeabi_dcmplt>
 8007854:	b9d0      	cbnz	r0, 800788c <_strtod_l+0xa8c>
 8007856:	4640      	mov	r0, r8
 8007858:	4649      	mov	r1, r9
 800785a:	4b6b      	ldr	r3, [pc, #428]	; (8007a08 <_strtod_l+0xc08>)
 800785c:	2200      	movs	r2, #0
 800785e:	f7f8 fedb 	bl	8000618 <__aeabi_dmul>
 8007862:	4680      	mov	r8, r0
 8007864:	4689      	mov	r9, r1
 8007866:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800786a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800786e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007870:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8007874:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007878:	e79b      	b.n	80077b2 <_strtod_l+0x9b2>
 800787a:	f1ba 0f01 	cmp.w	sl, #1
 800787e:	d102      	bne.n	8007886 <_strtod_l+0xa86>
 8007880:	2f00      	cmp	r7, #0
 8007882:	f43f ad7e 	beq.w	8007382 <_strtod_l+0x582>
 8007886:	4b61      	ldr	r3, [pc, #388]	; (8007a0c <_strtod_l+0xc0c>)
 8007888:	2200      	movs	r2, #0
 800788a:	e78c      	b.n	80077a6 <_strtod_l+0x9a6>
 800788c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007a08 <_strtod_l+0xc08>
 8007890:	f04f 0800 	mov.w	r8, #0
 8007894:	e7e7      	b.n	8007866 <_strtod_l+0xa66>
 8007896:	4b5c      	ldr	r3, [pc, #368]	; (8007a08 <_strtod_l+0xc08>)
 8007898:	4640      	mov	r0, r8
 800789a:	4649      	mov	r1, r9
 800789c:	2200      	movs	r2, #0
 800789e:	f7f8 febb 	bl	8000618 <__aeabi_dmul>
 80078a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078a4:	4680      	mov	r8, r0
 80078a6:	4689      	mov	r9, r1
 80078a8:	b933      	cbnz	r3, 80078b8 <_strtod_l+0xab8>
 80078aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078ae:	9012      	str	r0, [sp, #72]	; 0x48
 80078b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80078b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80078b6:	e7dd      	b.n	8007874 <_strtod_l+0xa74>
 80078b8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80078bc:	e7f9      	b.n	80078b2 <_strtod_l+0xab2>
 80078be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80078c2:	9b04      	ldr	r3, [sp, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d1a8      	bne.n	800781a <_strtod_l+0xa1a>
 80078c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80078ce:	0d1b      	lsrs	r3, r3, #20
 80078d0:	051b      	lsls	r3, r3, #20
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d1a1      	bne.n	800781a <_strtod_l+0xa1a>
 80078d6:	4640      	mov	r0, r8
 80078d8:	4649      	mov	r1, r9
 80078da:	f7f9 f9e5 	bl	8000ca8 <__aeabi_d2lz>
 80078de:	f7f8 fe6d 	bl	80005bc <__aeabi_l2d>
 80078e2:	4602      	mov	r2, r0
 80078e4:	460b      	mov	r3, r1
 80078e6:	4640      	mov	r0, r8
 80078e8:	4649      	mov	r1, r9
 80078ea:	f7f8 fcdd 	bl	80002a8 <__aeabi_dsub>
 80078ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078f4:	ea43 030a 	orr.w	r3, r3, sl
 80078f8:	4313      	orrs	r3, r2
 80078fa:	4680      	mov	r8, r0
 80078fc:	4689      	mov	r9, r1
 80078fe:	d053      	beq.n	80079a8 <_strtod_l+0xba8>
 8007900:	a335      	add	r3, pc, #212	; (adr r3, 80079d8 <_strtod_l+0xbd8>)
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	f7f9 f8f9 	bl	8000afc <__aeabi_dcmplt>
 800790a:	2800      	cmp	r0, #0
 800790c:	f47f acce 	bne.w	80072ac <_strtod_l+0x4ac>
 8007910:	a333      	add	r3, pc, #204	; (adr r3, 80079e0 <_strtod_l+0xbe0>)
 8007912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007916:	4640      	mov	r0, r8
 8007918:	4649      	mov	r1, r9
 800791a:	f7f9 f90d 	bl	8000b38 <__aeabi_dcmpgt>
 800791e:	2800      	cmp	r0, #0
 8007920:	f43f af7b 	beq.w	800781a <_strtod_l+0xa1a>
 8007924:	e4c2      	b.n	80072ac <_strtod_l+0x4ac>
 8007926:	9b04      	ldr	r3, [sp, #16]
 8007928:	b333      	cbz	r3, 8007978 <_strtod_l+0xb78>
 800792a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800792c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007930:	d822      	bhi.n	8007978 <_strtod_l+0xb78>
 8007932:	a32d      	add	r3, pc, #180	; (adr r3, 80079e8 <_strtod_l+0xbe8>)
 8007934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007938:	4640      	mov	r0, r8
 800793a:	4649      	mov	r1, r9
 800793c:	f7f9 f8e8 	bl	8000b10 <__aeabi_dcmple>
 8007940:	b1a0      	cbz	r0, 800796c <_strtod_l+0xb6c>
 8007942:	4649      	mov	r1, r9
 8007944:	4640      	mov	r0, r8
 8007946:	f7f9 f93f 	bl	8000bc8 <__aeabi_d2uiz>
 800794a:	2801      	cmp	r0, #1
 800794c:	bf38      	it	cc
 800794e:	2001      	movcc	r0, #1
 8007950:	f7f8 fde8 	bl	8000524 <__aeabi_ui2d>
 8007954:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007956:	4680      	mov	r8, r0
 8007958:	4689      	mov	r9, r1
 800795a:	bb13      	cbnz	r3, 80079a2 <_strtod_l+0xba2>
 800795c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007960:	9014      	str	r0, [sp, #80]	; 0x50
 8007962:	9315      	str	r3, [sp, #84]	; 0x54
 8007964:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007968:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800796c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800796e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007970:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007974:	1a9b      	subs	r3, r3, r2
 8007976:	930d      	str	r3, [sp, #52]	; 0x34
 8007978:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800797c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007980:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007984:	f002 fa24 	bl	8009dd0 <__ulp>
 8007988:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800798c:	ec53 2b10 	vmov	r2, r3, d0
 8007990:	f7f8 fe42 	bl	8000618 <__aeabi_dmul>
 8007994:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007998:	f7f8 fc88 	bl	80002ac <__adddf3>
 800799c:	4682      	mov	sl, r0
 800799e:	468b      	mov	fp, r1
 80079a0:	e78f      	b.n	80078c2 <_strtod_l+0xac2>
 80079a2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80079a6:	e7dd      	b.n	8007964 <_strtod_l+0xb64>
 80079a8:	a311      	add	r3, pc, #68	; (adr r3, 80079f0 <_strtod_l+0xbf0>)
 80079aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ae:	f7f9 f8a5 	bl	8000afc <__aeabi_dcmplt>
 80079b2:	e7b4      	b.n	800791e <_strtod_l+0xb1e>
 80079b4:	2300      	movs	r3, #0
 80079b6:	930e      	str	r3, [sp, #56]	; 0x38
 80079b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80079ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80079bc:	6013      	str	r3, [r2, #0]
 80079be:	f7ff ba65 	b.w	8006e8c <_strtod_l+0x8c>
 80079c2:	2b65      	cmp	r3, #101	; 0x65
 80079c4:	f43f ab5d 	beq.w	8007082 <_strtod_l+0x282>
 80079c8:	2b45      	cmp	r3, #69	; 0x45
 80079ca:	f43f ab5a 	beq.w	8007082 <_strtod_l+0x282>
 80079ce:	2201      	movs	r2, #1
 80079d0:	f7ff bb92 	b.w	80070f8 <_strtod_l+0x2f8>
 80079d4:	f3af 8000 	nop.w
 80079d8:	94a03595 	.word	0x94a03595
 80079dc:	3fdfffff 	.word	0x3fdfffff
 80079e0:	35afe535 	.word	0x35afe535
 80079e4:	3fe00000 	.word	0x3fe00000
 80079e8:	ffc00000 	.word	0xffc00000
 80079ec:	41dfffff 	.word	0x41dfffff
 80079f0:	94a03595 	.word	0x94a03595
 80079f4:	3fcfffff 	.word	0x3fcfffff
 80079f8:	3ff00000 	.word	0x3ff00000
 80079fc:	7ff00000 	.word	0x7ff00000
 8007a00:	7fe00000 	.word	0x7fe00000
 8007a04:	7c9fffff 	.word	0x7c9fffff
 8007a08:	3fe00000 	.word	0x3fe00000
 8007a0c:	bff00000 	.word	0xbff00000
 8007a10:	7fefffff 	.word	0x7fefffff

08007a14 <_strtod_r>:
 8007a14:	4b01      	ldr	r3, [pc, #4]	; (8007a1c <_strtod_r+0x8>)
 8007a16:	f7ff b9f3 	b.w	8006e00 <_strtod_l>
 8007a1a:	bf00      	nop
 8007a1c:	2000007c 	.word	0x2000007c

08007a20 <strtod>:
 8007a20:	460a      	mov	r2, r1
 8007a22:	4601      	mov	r1, r0
 8007a24:	4802      	ldr	r0, [pc, #8]	; (8007a30 <strtod+0x10>)
 8007a26:	4b03      	ldr	r3, [pc, #12]	; (8007a34 <strtod+0x14>)
 8007a28:	6800      	ldr	r0, [r0, #0]
 8007a2a:	f7ff b9e9 	b.w	8006e00 <_strtod_l>
 8007a2e:	bf00      	nop
 8007a30:	20000014 	.word	0x20000014
 8007a34:	2000007c 	.word	0x2000007c

08007a38 <strtof>:
 8007a38:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8007a3c:	4e26      	ldr	r6, [pc, #152]	; (8007ad8 <strtof+0xa0>)
 8007a3e:	4b27      	ldr	r3, [pc, #156]	; (8007adc <strtof+0xa4>)
 8007a40:	460a      	mov	r2, r1
 8007a42:	ed2d 8b02 	vpush	{d8}
 8007a46:	4601      	mov	r1, r0
 8007a48:	6830      	ldr	r0, [r6, #0]
 8007a4a:	f7ff f9d9 	bl	8006e00 <_strtod_l>
 8007a4e:	ec55 4b10 	vmov	r4, r5, d0
 8007a52:	ee10 2a10 	vmov	r2, s0
 8007a56:	ee10 0a10 	vmov	r0, s0
 8007a5a:	462b      	mov	r3, r5
 8007a5c:	4629      	mov	r1, r5
 8007a5e:	f7f9 f875 	bl	8000b4c <__aeabi_dcmpun>
 8007a62:	b190      	cbz	r0, 8007a8a <strtof+0x52>
 8007a64:	2d00      	cmp	r5, #0
 8007a66:	481e      	ldr	r0, [pc, #120]	; (8007ae0 <strtof+0xa8>)
 8007a68:	da09      	bge.n	8007a7e <strtof+0x46>
 8007a6a:	f7ff f953 	bl	8006d14 <nanf>
 8007a6e:	eeb1 8a40 	vneg.f32	s16, s0
 8007a72:	eeb0 0a48 	vmov.f32	s0, s16
 8007a76:	ecbd 8b02 	vpop	{d8}
 8007a7a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007a7e:	ecbd 8b02 	vpop	{d8}
 8007a82:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8007a86:	f7ff b945 	b.w	8006d14 <nanf>
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	4629      	mov	r1, r5
 8007a8e:	f7f9 f8bb 	bl	8000c08 <__aeabi_d2f>
 8007a92:	ee08 0a10 	vmov	s16, r0
 8007a96:	eddf 7a13 	vldr	s15, [pc, #76]	; 8007ae4 <strtof+0xac>
 8007a9a:	eeb0 7ac8 	vabs.f32	s14, s16
 8007a9e:	eeb4 7a67 	vcmp.f32	s14, s15
 8007aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa6:	dde4      	ble.n	8007a72 <strtof+0x3a>
 8007aa8:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 8007aac:	4b0e      	ldr	r3, [pc, #56]	; (8007ae8 <strtof+0xb0>)
 8007aae:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	4649      	mov	r1, r9
 8007ab6:	f7f9 f849 	bl	8000b4c <__aeabi_dcmpun>
 8007aba:	b940      	cbnz	r0, 8007ace <strtof+0x96>
 8007abc:	4b0a      	ldr	r3, [pc, #40]	; (8007ae8 <strtof+0xb0>)
 8007abe:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	4649      	mov	r1, r9
 8007ac6:	f7f9 f823 	bl	8000b10 <__aeabi_dcmple>
 8007aca:	2800      	cmp	r0, #0
 8007acc:	d0d1      	beq.n	8007a72 <strtof+0x3a>
 8007ace:	6833      	ldr	r3, [r6, #0]
 8007ad0:	2222      	movs	r2, #34	; 0x22
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	e7cd      	b.n	8007a72 <strtof+0x3a>
 8007ad6:	bf00      	nop
 8007ad8:	20000014 	.word	0x20000014
 8007adc:	2000007c 	.word	0x2000007c
 8007ae0:	0800bbab 	.word	0x0800bbab
 8007ae4:	7f7fffff 	.word	0x7f7fffff
 8007ae8:	7fefffff 	.word	0x7fefffff

08007aec <strtok>:
 8007aec:	4b16      	ldr	r3, [pc, #88]	; (8007b48 <strtok+0x5c>)
 8007aee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007af0:	681e      	ldr	r6, [r3, #0]
 8007af2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8007af4:	4605      	mov	r5, r0
 8007af6:	b9fc      	cbnz	r4, 8007b38 <strtok+0x4c>
 8007af8:	2050      	movs	r0, #80	; 0x50
 8007afa:	9101      	str	r1, [sp, #4]
 8007afc:	f001 fdd4 	bl	80096a8 <malloc>
 8007b00:	9901      	ldr	r1, [sp, #4]
 8007b02:	65b0      	str	r0, [r6, #88]	; 0x58
 8007b04:	4602      	mov	r2, r0
 8007b06:	b920      	cbnz	r0, 8007b12 <strtok+0x26>
 8007b08:	4b10      	ldr	r3, [pc, #64]	; (8007b4c <strtok+0x60>)
 8007b0a:	4811      	ldr	r0, [pc, #68]	; (8007b50 <strtok+0x64>)
 8007b0c:	2157      	movs	r1, #87	; 0x57
 8007b0e:	f000 f98f 	bl	8007e30 <__assert_func>
 8007b12:	e9c0 4400 	strd	r4, r4, [r0]
 8007b16:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007b1a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007b1e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007b22:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007b26:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007b2a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007b2e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007b32:	6184      	str	r4, [r0, #24]
 8007b34:	7704      	strb	r4, [r0, #28]
 8007b36:	6244      	str	r4, [r0, #36]	; 0x24
 8007b38:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	b002      	add	sp, #8
 8007b40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007b44:	f000 b806 	b.w	8007b54 <__strtok_r>
 8007b48:	20000014 	.word	0x20000014
 8007b4c:	0800baf8 	.word	0x0800baf8
 8007b50:	0800bb0f 	.word	0x0800bb0f

08007b54 <__strtok_r>:
 8007b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b56:	b908      	cbnz	r0, 8007b5c <__strtok_r+0x8>
 8007b58:	6810      	ldr	r0, [r2, #0]
 8007b5a:	b188      	cbz	r0, 8007b80 <__strtok_r+0x2c>
 8007b5c:	4604      	mov	r4, r0
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007b64:	460f      	mov	r7, r1
 8007b66:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007b6a:	b91e      	cbnz	r6, 8007b74 <__strtok_r+0x20>
 8007b6c:	b965      	cbnz	r5, 8007b88 <__strtok_r+0x34>
 8007b6e:	6015      	str	r5, [r2, #0]
 8007b70:	4628      	mov	r0, r5
 8007b72:	e005      	b.n	8007b80 <__strtok_r+0x2c>
 8007b74:	42b5      	cmp	r5, r6
 8007b76:	d1f6      	bne.n	8007b66 <__strtok_r+0x12>
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1f0      	bne.n	8007b5e <__strtok_r+0xa>
 8007b7c:	6014      	str	r4, [r2, #0]
 8007b7e:	7003      	strb	r3, [r0, #0]
 8007b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b82:	461c      	mov	r4, r3
 8007b84:	e00c      	b.n	8007ba0 <__strtok_r+0x4c>
 8007b86:	b915      	cbnz	r5, 8007b8e <__strtok_r+0x3a>
 8007b88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b8c:	460e      	mov	r6, r1
 8007b8e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007b92:	42ab      	cmp	r3, r5
 8007b94:	d1f7      	bne.n	8007b86 <__strtok_r+0x32>
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d0f3      	beq.n	8007b82 <__strtok_r+0x2e>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007ba0:	6014      	str	r4, [r2, #0]
 8007ba2:	e7ed      	b.n	8007b80 <__strtok_r+0x2c>

08007ba4 <_strtol_l.isra.0>:
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007baa:	d001      	beq.n	8007bb0 <_strtol_l.isra.0+0xc>
 8007bac:	2b24      	cmp	r3, #36	; 0x24
 8007bae:	d906      	bls.n	8007bbe <_strtol_l.isra.0+0x1a>
 8007bb0:	f7fe f944 	bl	8005e3c <__errno>
 8007bb4:	2316      	movs	r3, #22
 8007bb6:	6003      	str	r3, [r0, #0]
 8007bb8:	2000      	movs	r0, #0
 8007bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bbe:	4f3a      	ldr	r7, [pc, #232]	; (8007ca8 <_strtol_l.isra.0+0x104>)
 8007bc0:	468e      	mov	lr, r1
 8007bc2:	4676      	mov	r6, lr
 8007bc4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007bc8:	5de5      	ldrb	r5, [r4, r7]
 8007bca:	f015 0508 	ands.w	r5, r5, #8
 8007bce:	d1f8      	bne.n	8007bc2 <_strtol_l.isra.0+0x1e>
 8007bd0:	2c2d      	cmp	r4, #45	; 0x2d
 8007bd2:	d134      	bne.n	8007c3e <_strtol_l.isra.0+0x9a>
 8007bd4:	f89e 4000 	ldrb.w	r4, [lr]
 8007bd8:	f04f 0801 	mov.w	r8, #1
 8007bdc:	f106 0e02 	add.w	lr, r6, #2
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d05c      	beq.n	8007c9e <_strtol_l.isra.0+0xfa>
 8007be4:	2b10      	cmp	r3, #16
 8007be6:	d10c      	bne.n	8007c02 <_strtol_l.isra.0+0x5e>
 8007be8:	2c30      	cmp	r4, #48	; 0x30
 8007bea:	d10a      	bne.n	8007c02 <_strtol_l.isra.0+0x5e>
 8007bec:	f89e 4000 	ldrb.w	r4, [lr]
 8007bf0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007bf4:	2c58      	cmp	r4, #88	; 0x58
 8007bf6:	d14d      	bne.n	8007c94 <_strtol_l.isra.0+0xf0>
 8007bf8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007bfc:	2310      	movs	r3, #16
 8007bfe:	f10e 0e02 	add.w	lr, lr, #2
 8007c02:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007c06:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007c0a:	2600      	movs	r6, #0
 8007c0c:	fbbc f9f3 	udiv	r9, ip, r3
 8007c10:	4635      	mov	r5, r6
 8007c12:	fb03 ca19 	mls	sl, r3, r9, ip
 8007c16:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007c1a:	2f09      	cmp	r7, #9
 8007c1c:	d818      	bhi.n	8007c50 <_strtol_l.isra.0+0xac>
 8007c1e:	463c      	mov	r4, r7
 8007c20:	42a3      	cmp	r3, r4
 8007c22:	dd24      	ble.n	8007c6e <_strtol_l.isra.0+0xca>
 8007c24:	2e00      	cmp	r6, #0
 8007c26:	db1f      	blt.n	8007c68 <_strtol_l.isra.0+0xc4>
 8007c28:	45a9      	cmp	r9, r5
 8007c2a:	d31d      	bcc.n	8007c68 <_strtol_l.isra.0+0xc4>
 8007c2c:	d101      	bne.n	8007c32 <_strtol_l.isra.0+0x8e>
 8007c2e:	45a2      	cmp	sl, r4
 8007c30:	db1a      	blt.n	8007c68 <_strtol_l.isra.0+0xc4>
 8007c32:	fb05 4503 	mla	r5, r5, r3, r4
 8007c36:	2601      	movs	r6, #1
 8007c38:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007c3c:	e7eb      	b.n	8007c16 <_strtol_l.isra.0+0x72>
 8007c3e:	2c2b      	cmp	r4, #43	; 0x2b
 8007c40:	bf08      	it	eq
 8007c42:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007c46:	46a8      	mov	r8, r5
 8007c48:	bf08      	it	eq
 8007c4a:	f106 0e02 	addeq.w	lr, r6, #2
 8007c4e:	e7c7      	b.n	8007be0 <_strtol_l.isra.0+0x3c>
 8007c50:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007c54:	2f19      	cmp	r7, #25
 8007c56:	d801      	bhi.n	8007c5c <_strtol_l.isra.0+0xb8>
 8007c58:	3c37      	subs	r4, #55	; 0x37
 8007c5a:	e7e1      	b.n	8007c20 <_strtol_l.isra.0+0x7c>
 8007c5c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007c60:	2f19      	cmp	r7, #25
 8007c62:	d804      	bhi.n	8007c6e <_strtol_l.isra.0+0xca>
 8007c64:	3c57      	subs	r4, #87	; 0x57
 8007c66:	e7db      	b.n	8007c20 <_strtol_l.isra.0+0x7c>
 8007c68:	f04f 36ff 	mov.w	r6, #4294967295
 8007c6c:	e7e4      	b.n	8007c38 <_strtol_l.isra.0+0x94>
 8007c6e:	2e00      	cmp	r6, #0
 8007c70:	da05      	bge.n	8007c7e <_strtol_l.isra.0+0xda>
 8007c72:	2322      	movs	r3, #34	; 0x22
 8007c74:	6003      	str	r3, [r0, #0]
 8007c76:	4665      	mov	r5, ip
 8007c78:	b942      	cbnz	r2, 8007c8c <_strtol_l.isra.0+0xe8>
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	e79d      	b.n	8007bba <_strtol_l.isra.0+0x16>
 8007c7e:	f1b8 0f00 	cmp.w	r8, #0
 8007c82:	d000      	beq.n	8007c86 <_strtol_l.isra.0+0xe2>
 8007c84:	426d      	negs	r5, r5
 8007c86:	2a00      	cmp	r2, #0
 8007c88:	d0f7      	beq.n	8007c7a <_strtol_l.isra.0+0xd6>
 8007c8a:	b10e      	cbz	r6, 8007c90 <_strtol_l.isra.0+0xec>
 8007c8c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007c90:	6011      	str	r1, [r2, #0]
 8007c92:	e7f2      	b.n	8007c7a <_strtol_l.isra.0+0xd6>
 8007c94:	2430      	movs	r4, #48	; 0x30
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1b3      	bne.n	8007c02 <_strtol_l.isra.0+0x5e>
 8007c9a:	2308      	movs	r3, #8
 8007c9c:	e7b1      	b.n	8007c02 <_strtol_l.isra.0+0x5e>
 8007c9e:	2c30      	cmp	r4, #48	; 0x30
 8007ca0:	d0a4      	beq.n	8007bec <_strtol_l.isra.0+0x48>
 8007ca2:	230a      	movs	r3, #10
 8007ca4:	e7ad      	b.n	8007c02 <_strtol_l.isra.0+0x5e>
 8007ca6:	bf00      	nop
 8007ca8:	0800bbad 	.word	0x0800bbad

08007cac <_strtol_r>:
 8007cac:	f7ff bf7a 	b.w	8007ba4 <_strtol_l.isra.0>

08007cb0 <__swbuf_r>:
 8007cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb2:	460e      	mov	r6, r1
 8007cb4:	4614      	mov	r4, r2
 8007cb6:	4605      	mov	r5, r0
 8007cb8:	b118      	cbz	r0, 8007cc2 <__swbuf_r+0x12>
 8007cba:	6983      	ldr	r3, [r0, #24]
 8007cbc:	b90b      	cbnz	r3, 8007cc2 <__swbuf_r+0x12>
 8007cbe:	f001 f869 	bl	8008d94 <__sinit>
 8007cc2:	4b21      	ldr	r3, [pc, #132]	; (8007d48 <__swbuf_r+0x98>)
 8007cc4:	429c      	cmp	r4, r3
 8007cc6:	d12b      	bne.n	8007d20 <__swbuf_r+0x70>
 8007cc8:	686c      	ldr	r4, [r5, #4]
 8007cca:	69a3      	ldr	r3, [r4, #24]
 8007ccc:	60a3      	str	r3, [r4, #8]
 8007cce:	89a3      	ldrh	r3, [r4, #12]
 8007cd0:	071a      	lsls	r2, r3, #28
 8007cd2:	d52f      	bpl.n	8007d34 <__swbuf_r+0x84>
 8007cd4:	6923      	ldr	r3, [r4, #16]
 8007cd6:	b36b      	cbz	r3, 8007d34 <__swbuf_r+0x84>
 8007cd8:	6923      	ldr	r3, [r4, #16]
 8007cda:	6820      	ldr	r0, [r4, #0]
 8007cdc:	1ac0      	subs	r0, r0, r3
 8007cde:	6963      	ldr	r3, [r4, #20]
 8007ce0:	b2f6      	uxtb	r6, r6
 8007ce2:	4283      	cmp	r3, r0
 8007ce4:	4637      	mov	r7, r6
 8007ce6:	dc04      	bgt.n	8007cf2 <__swbuf_r+0x42>
 8007ce8:	4621      	mov	r1, r4
 8007cea:	4628      	mov	r0, r5
 8007cec:	f000 ffbe 	bl	8008c6c <_fflush_r>
 8007cf0:	bb30      	cbnz	r0, 8007d40 <__swbuf_r+0x90>
 8007cf2:	68a3      	ldr	r3, [r4, #8]
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	60a3      	str	r3, [r4, #8]
 8007cf8:	6823      	ldr	r3, [r4, #0]
 8007cfa:	1c5a      	adds	r2, r3, #1
 8007cfc:	6022      	str	r2, [r4, #0]
 8007cfe:	701e      	strb	r6, [r3, #0]
 8007d00:	6963      	ldr	r3, [r4, #20]
 8007d02:	3001      	adds	r0, #1
 8007d04:	4283      	cmp	r3, r0
 8007d06:	d004      	beq.n	8007d12 <__swbuf_r+0x62>
 8007d08:	89a3      	ldrh	r3, [r4, #12]
 8007d0a:	07db      	lsls	r3, r3, #31
 8007d0c:	d506      	bpl.n	8007d1c <__swbuf_r+0x6c>
 8007d0e:	2e0a      	cmp	r6, #10
 8007d10:	d104      	bne.n	8007d1c <__swbuf_r+0x6c>
 8007d12:	4621      	mov	r1, r4
 8007d14:	4628      	mov	r0, r5
 8007d16:	f000 ffa9 	bl	8008c6c <_fflush_r>
 8007d1a:	b988      	cbnz	r0, 8007d40 <__swbuf_r+0x90>
 8007d1c:	4638      	mov	r0, r7
 8007d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d20:	4b0a      	ldr	r3, [pc, #40]	; (8007d4c <__swbuf_r+0x9c>)
 8007d22:	429c      	cmp	r4, r3
 8007d24:	d101      	bne.n	8007d2a <__swbuf_r+0x7a>
 8007d26:	68ac      	ldr	r4, [r5, #8]
 8007d28:	e7cf      	b.n	8007cca <__swbuf_r+0x1a>
 8007d2a:	4b09      	ldr	r3, [pc, #36]	; (8007d50 <__swbuf_r+0xa0>)
 8007d2c:	429c      	cmp	r4, r3
 8007d2e:	bf08      	it	eq
 8007d30:	68ec      	ldreq	r4, [r5, #12]
 8007d32:	e7ca      	b.n	8007cca <__swbuf_r+0x1a>
 8007d34:	4621      	mov	r1, r4
 8007d36:	4628      	mov	r0, r5
 8007d38:	f000 f80c 	bl	8007d54 <__swsetup_r>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d0cb      	beq.n	8007cd8 <__swbuf_r+0x28>
 8007d40:	f04f 37ff 	mov.w	r7, #4294967295
 8007d44:	e7ea      	b.n	8007d1c <__swbuf_r+0x6c>
 8007d46:	bf00      	nop
 8007d48:	0800bd4c 	.word	0x0800bd4c
 8007d4c:	0800bd6c 	.word	0x0800bd6c
 8007d50:	0800bd2c 	.word	0x0800bd2c

08007d54 <__swsetup_r>:
 8007d54:	4b32      	ldr	r3, [pc, #200]	; (8007e20 <__swsetup_r+0xcc>)
 8007d56:	b570      	push	{r4, r5, r6, lr}
 8007d58:	681d      	ldr	r5, [r3, #0]
 8007d5a:	4606      	mov	r6, r0
 8007d5c:	460c      	mov	r4, r1
 8007d5e:	b125      	cbz	r5, 8007d6a <__swsetup_r+0x16>
 8007d60:	69ab      	ldr	r3, [r5, #24]
 8007d62:	b913      	cbnz	r3, 8007d6a <__swsetup_r+0x16>
 8007d64:	4628      	mov	r0, r5
 8007d66:	f001 f815 	bl	8008d94 <__sinit>
 8007d6a:	4b2e      	ldr	r3, [pc, #184]	; (8007e24 <__swsetup_r+0xd0>)
 8007d6c:	429c      	cmp	r4, r3
 8007d6e:	d10f      	bne.n	8007d90 <__swsetup_r+0x3c>
 8007d70:	686c      	ldr	r4, [r5, #4]
 8007d72:	89a3      	ldrh	r3, [r4, #12]
 8007d74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d78:	0719      	lsls	r1, r3, #28
 8007d7a:	d42c      	bmi.n	8007dd6 <__swsetup_r+0x82>
 8007d7c:	06dd      	lsls	r5, r3, #27
 8007d7e:	d411      	bmi.n	8007da4 <__swsetup_r+0x50>
 8007d80:	2309      	movs	r3, #9
 8007d82:	6033      	str	r3, [r6, #0]
 8007d84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d88:	81a3      	strh	r3, [r4, #12]
 8007d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d8e:	e03e      	b.n	8007e0e <__swsetup_r+0xba>
 8007d90:	4b25      	ldr	r3, [pc, #148]	; (8007e28 <__swsetup_r+0xd4>)
 8007d92:	429c      	cmp	r4, r3
 8007d94:	d101      	bne.n	8007d9a <__swsetup_r+0x46>
 8007d96:	68ac      	ldr	r4, [r5, #8]
 8007d98:	e7eb      	b.n	8007d72 <__swsetup_r+0x1e>
 8007d9a:	4b24      	ldr	r3, [pc, #144]	; (8007e2c <__swsetup_r+0xd8>)
 8007d9c:	429c      	cmp	r4, r3
 8007d9e:	bf08      	it	eq
 8007da0:	68ec      	ldreq	r4, [r5, #12]
 8007da2:	e7e6      	b.n	8007d72 <__swsetup_r+0x1e>
 8007da4:	0758      	lsls	r0, r3, #29
 8007da6:	d512      	bpl.n	8007dce <__swsetup_r+0x7a>
 8007da8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007daa:	b141      	cbz	r1, 8007dbe <__swsetup_r+0x6a>
 8007dac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007db0:	4299      	cmp	r1, r3
 8007db2:	d002      	beq.n	8007dba <__swsetup_r+0x66>
 8007db4:	4630      	mov	r0, r6
 8007db6:	f002 f969 	bl	800a08c <_free_r>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	6363      	str	r3, [r4, #52]	; 0x34
 8007dbe:	89a3      	ldrh	r3, [r4, #12]
 8007dc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007dc4:	81a3      	strh	r3, [r4, #12]
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	6063      	str	r3, [r4, #4]
 8007dca:	6923      	ldr	r3, [r4, #16]
 8007dcc:	6023      	str	r3, [r4, #0]
 8007dce:	89a3      	ldrh	r3, [r4, #12]
 8007dd0:	f043 0308 	orr.w	r3, r3, #8
 8007dd4:	81a3      	strh	r3, [r4, #12]
 8007dd6:	6923      	ldr	r3, [r4, #16]
 8007dd8:	b94b      	cbnz	r3, 8007dee <__swsetup_r+0x9a>
 8007dda:	89a3      	ldrh	r3, [r4, #12]
 8007ddc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007de4:	d003      	beq.n	8007dee <__swsetup_r+0x9a>
 8007de6:	4621      	mov	r1, r4
 8007de8:	4630      	mov	r0, r6
 8007dea:	f001 fc1d 	bl	8009628 <__smakebuf_r>
 8007dee:	89a0      	ldrh	r0, [r4, #12]
 8007df0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007df4:	f010 0301 	ands.w	r3, r0, #1
 8007df8:	d00a      	beq.n	8007e10 <__swsetup_r+0xbc>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	60a3      	str	r3, [r4, #8]
 8007dfe:	6963      	ldr	r3, [r4, #20]
 8007e00:	425b      	negs	r3, r3
 8007e02:	61a3      	str	r3, [r4, #24]
 8007e04:	6923      	ldr	r3, [r4, #16]
 8007e06:	b943      	cbnz	r3, 8007e1a <__swsetup_r+0xc6>
 8007e08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e0c:	d1ba      	bne.n	8007d84 <__swsetup_r+0x30>
 8007e0e:	bd70      	pop	{r4, r5, r6, pc}
 8007e10:	0781      	lsls	r1, r0, #30
 8007e12:	bf58      	it	pl
 8007e14:	6963      	ldrpl	r3, [r4, #20]
 8007e16:	60a3      	str	r3, [r4, #8]
 8007e18:	e7f4      	b.n	8007e04 <__swsetup_r+0xb0>
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	e7f7      	b.n	8007e0e <__swsetup_r+0xba>
 8007e1e:	bf00      	nop
 8007e20:	20000014 	.word	0x20000014
 8007e24:	0800bd4c 	.word	0x0800bd4c
 8007e28:	0800bd6c 	.word	0x0800bd6c
 8007e2c:	0800bd2c 	.word	0x0800bd2c

08007e30 <__assert_func>:
 8007e30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e32:	4614      	mov	r4, r2
 8007e34:	461a      	mov	r2, r3
 8007e36:	4b09      	ldr	r3, [pc, #36]	; (8007e5c <__assert_func+0x2c>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4605      	mov	r5, r0
 8007e3c:	68d8      	ldr	r0, [r3, #12]
 8007e3e:	b14c      	cbz	r4, 8007e54 <__assert_func+0x24>
 8007e40:	4b07      	ldr	r3, [pc, #28]	; (8007e60 <__assert_func+0x30>)
 8007e42:	9100      	str	r1, [sp, #0]
 8007e44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e48:	4906      	ldr	r1, [pc, #24]	; (8007e64 <__assert_func+0x34>)
 8007e4a:	462b      	mov	r3, r5
 8007e4c:	f001 f820 	bl	8008e90 <fiprintf>
 8007e50:	f002 fd0a 	bl	800a868 <abort>
 8007e54:	4b04      	ldr	r3, [pc, #16]	; (8007e68 <__assert_func+0x38>)
 8007e56:	461c      	mov	r4, r3
 8007e58:	e7f3      	b.n	8007e42 <__assert_func+0x12>
 8007e5a:	bf00      	nop
 8007e5c:	20000014 	.word	0x20000014
 8007e60:	0800bb70 	.word	0x0800bb70
 8007e64:	0800bb7d 	.word	0x0800bb7d
 8007e68:	0800bbab 	.word	0x0800bbab

08007e6c <quorem>:
 8007e6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e70:	6903      	ldr	r3, [r0, #16]
 8007e72:	690c      	ldr	r4, [r1, #16]
 8007e74:	42a3      	cmp	r3, r4
 8007e76:	4607      	mov	r7, r0
 8007e78:	f2c0 8081 	blt.w	8007f7e <quorem+0x112>
 8007e7c:	3c01      	subs	r4, #1
 8007e7e:	f101 0814 	add.w	r8, r1, #20
 8007e82:	f100 0514 	add.w	r5, r0, #20
 8007e86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e8a:	9301      	str	r3, [sp, #4]
 8007e8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e94:	3301      	adds	r3, #1
 8007e96:	429a      	cmp	r2, r3
 8007e98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ea0:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ea4:	d331      	bcc.n	8007f0a <quorem+0x9e>
 8007ea6:	f04f 0e00 	mov.w	lr, #0
 8007eaa:	4640      	mov	r0, r8
 8007eac:	46ac      	mov	ip, r5
 8007eae:	46f2      	mov	sl, lr
 8007eb0:	f850 2b04 	ldr.w	r2, [r0], #4
 8007eb4:	b293      	uxth	r3, r2
 8007eb6:	fb06 e303 	mla	r3, r6, r3, lr
 8007eba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	ebaa 0303 	sub.w	r3, sl, r3
 8007ec4:	0c12      	lsrs	r2, r2, #16
 8007ec6:	f8dc a000 	ldr.w	sl, [ip]
 8007eca:	fb06 e202 	mla	r2, r6, r2, lr
 8007ece:	fa13 f38a 	uxtah	r3, r3, sl
 8007ed2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007ed6:	fa1f fa82 	uxth.w	sl, r2
 8007eda:	f8dc 2000 	ldr.w	r2, [ip]
 8007ede:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007ee2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007eec:	4581      	cmp	r9, r0
 8007eee:	f84c 3b04 	str.w	r3, [ip], #4
 8007ef2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ef6:	d2db      	bcs.n	8007eb0 <quorem+0x44>
 8007ef8:	f855 300b 	ldr.w	r3, [r5, fp]
 8007efc:	b92b      	cbnz	r3, 8007f0a <quorem+0x9e>
 8007efe:	9b01      	ldr	r3, [sp, #4]
 8007f00:	3b04      	subs	r3, #4
 8007f02:	429d      	cmp	r5, r3
 8007f04:	461a      	mov	r2, r3
 8007f06:	d32e      	bcc.n	8007f66 <quorem+0xfa>
 8007f08:	613c      	str	r4, [r7, #16]
 8007f0a:	4638      	mov	r0, r7
 8007f0c:	f001 febc 	bl	8009c88 <__mcmp>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	db24      	blt.n	8007f5e <quorem+0xf2>
 8007f14:	3601      	adds	r6, #1
 8007f16:	4628      	mov	r0, r5
 8007f18:	f04f 0c00 	mov.w	ip, #0
 8007f1c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f20:	f8d0 e000 	ldr.w	lr, [r0]
 8007f24:	b293      	uxth	r3, r2
 8007f26:	ebac 0303 	sub.w	r3, ip, r3
 8007f2a:	0c12      	lsrs	r2, r2, #16
 8007f2c:	fa13 f38e 	uxtah	r3, r3, lr
 8007f30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f3e:	45c1      	cmp	r9, r8
 8007f40:	f840 3b04 	str.w	r3, [r0], #4
 8007f44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f48:	d2e8      	bcs.n	8007f1c <quorem+0xb0>
 8007f4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f52:	b922      	cbnz	r2, 8007f5e <quorem+0xf2>
 8007f54:	3b04      	subs	r3, #4
 8007f56:	429d      	cmp	r5, r3
 8007f58:	461a      	mov	r2, r3
 8007f5a:	d30a      	bcc.n	8007f72 <quorem+0x106>
 8007f5c:	613c      	str	r4, [r7, #16]
 8007f5e:	4630      	mov	r0, r6
 8007f60:	b003      	add	sp, #12
 8007f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f66:	6812      	ldr	r2, [r2, #0]
 8007f68:	3b04      	subs	r3, #4
 8007f6a:	2a00      	cmp	r2, #0
 8007f6c:	d1cc      	bne.n	8007f08 <quorem+0x9c>
 8007f6e:	3c01      	subs	r4, #1
 8007f70:	e7c7      	b.n	8007f02 <quorem+0x96>
 8007f72:	6812      	ldr	r2, [r2, #0]
 8007f74:	3b04      	subs	r3, #4
 8007f76:	2a00      	cmp	r2, #0
 8007f78:	d1f0      	bne.n	8007f5c <quorem+0xf0>
 8007f7a:	3c01      	subs	r4, #1
 8007f7c:	e7eb      	b.n	8007f56 <quorem+0xea>
 8007f7e:	2000      	movs	r0, #0
 8007f80:	e7ee      	b.n	8007f60 <quorem+0xf4>
 8007f82:	0000      	movs	r0, r0
 8007f84:	0000      	movs	r0, r0
	...

08007f88 <_dtoa_r>:
 8007f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8c:	ed2d 8b02 	vpush	{d8}
 8007f90:	ec57 6b10 	vmov	r6, r7, d0
 8007f94:	b095      	sub	sp, #84	; 0x54
 8007f96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f9c:	9105      	str	r1, [sp, #20]
 8007f9e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	9209      	str	r2, [sp, #36]	; 0x24
 8007fa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fa8:	b975      	cbnz	r5, 8007fc8 <_dtoa_r+0x40>
 8007faa:	2010      	movs	r0, #16
 8007fac:	f001 fb7c 	bl	80096a8 <malloc>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	6260      	str	r0, [r4, #36]	; 0x24
 8007fb4:	b920      	cbnz	r0, 8007fc0 <_dtoa_r+0x38>
 8007fb6:	4bb2      	ldr	r3, [pc, #712]	; (8008280 <_dtoa_r+0x2f8>)
 8007fb8:	21ea      	movs	r1, #234	; 0xea
 8007fba:	48b2      	ldr	r0, [pc, #712]	; (8008284 <_dtoa_r+0x2fc>)
 8007fbc:	f7ff ff38 	bl	8007e30 <__assert_func>
 8007fc0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fc4:	6005      	str	r5, [r0, #0]
 8007fc6:	60c5      	str	r5, [r0, #12]
 8007fc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fca:	6819      	ldr	r1, [r3, #0]
 8007fcc:	b151      	cbz	r1, 8007fe4 <_dtoa_r+0x5c>
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	604a      	str	r2, [r1, #4]
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	4093      	lsls	r3, r2
 8007fd6:	608b      	str	r3, [r1, #8]
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f001 fbcd 	bl	8009778 <_Bfree>
 8007fde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	601a      	str	r2, [r3, #0]
 8007fe4:	1e3b      	subs	r3, r7, #0
 8007fe6:	bfb9      	ittee	lt
 8007fe8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007fec:	9303      	strlt	r3, [sp, #12]
 8007fee:	2300      	movge	r3, #0
 8007ff0:	f8c8 3000 	strge.w	r3, [r8]
 8007ff4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007ff8:	4ba3      	ldr	r3, [pc, #652]	; (8008288 <_dtoa_r+0x300>)
 8007ffa:	bfbc      	itt	lt
 8007ffc:	2201      	movlt	r2, #1
 8007ffe:	f8c8 2000 	strlt.w	r2, [r8]
 8008002:	ea33 0309 	bics.w	r3, r3, r9
 8008006:	d11b      	bne.n	8008040 <_dtoa_r+0xb8>
 8008008:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800800a:	f242 730f 	movw	r3, #9999	; 0x270f
 800800e:	6013      	str	r3, [r2, #0]
 8008010:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008014:	4333      	orrs	r3, r6
 8008016:	f000 857a 	beq.w	8008b0e <_dtoa_r+0xb86>
 800801a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800801c:	b963      	cbnz	r3, 8008038 <_dtoa_r+0xb0>
 800801e:	4b9b      	ldr	r3, [pc, #620]	; (800828c <_dtoa_r+0x304>)
 8008020:	e024      	b.n	800806c <_dtoa_r+0xe4>
 8008022:	4b9b      	ldr	r3, [pc, #620]	; (8008290 <_dtoa_r+0x308>)
 8008024:	9300      	str	r3, [sp, #0]
 8008026:	3308      	adds	r3, #8
 8008028:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800802a:	6013      	str	r3, [r2, #0]
 800802c:	9800      	ldr	r0, [sp, #0]
 800802e:	b015      	add	sp, #84	; 0x54
 8008030:	ecbd 8b02 	vpop	{d8}
 8008034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008038:	4b94      	ldr	r3, [pc, #592]	; (800828c <_dtoa_r+0x304>)
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	3303      	adds	r3, #3
 800803e:	e7f3      	b.n	8008028 <_dtoa_r+0xa0>
 8008040:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008044:	2200      	movs	r2, #0
 8008046:	ec51 0b17 	vmov	r0, r1, d7
 800804a:	2300      	movs	r3, #0
 800804c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008050:	f7f8 fd4a 	bl	8000ae8 <__aeabi_dcmpeq>
 8008054:	4680      	mov	r8, r0
 8008056:	b158      	cbz	r0, 8008070 <_dtoa_r+0xe8>
 8008058:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800805a:	2301      	movs	r3, #1
 800805c:	6013      	str	r3, [r2, #0]
 800805e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 8551 	beq.w	8008b08 <_dtoa_r+0xb80>
 8008066:	488b      	ldr	r0, [pc, #556]	; (8008294 <_dtoa_r+0x30c>)
 8008068:	6018      	str	r0, [r3, #0]
 800806a:	1e43      	subs	r3, r0, #1
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	e7dd      	b.n	800802c <_dtoa_r+0xa4>
 8008070:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008074:	aa12      	add	r2, sp, #72	; 0x48
 8008076:	a913      	add	r1, sp, #76	; 0x4c
 8008078:	4620      	mov	r0, r4
 800807a:	f001 ff25 	bl	8009ec8 <__d2b>
 800807e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008082:	4683      	mov	fp, r0
 8008084:	2d00      	cmp	r5, #0
 8008086:	d07c      	beq.n	8008182 <_dtoa_r+0x1fa>
 8008088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800808a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800808e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008092:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008096:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800809a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800809e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80080a2:	4b7d      	ldr	r3, [pc, #500]	; (8008298 <_dtoa_r+0x310>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	4630      	mov	r0, r6
 80080a8:	4639      	mov	r1, r7
 80080aa:	f7f8 f8fd 	bl	80002a8 <__aeabi_dsub>
 80080ae:	a36e      	add	r3, pc, #440	; (adr r3, 8008268 <_dtoa_r+0x2e0>)
 80080b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b4:	f7f8 fab0 	bl	8000618 <__aeabi_dmul>
 80080b8:	a36d      	add	r3, pc, #436	; (adr r3, 8008270 <_dtoa_r+0x2e8>)
 80080ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080be:	f7f8 f8f5 	bl	80002ac <__adddf3>
 80080c2:	4606      	mov	r6, r0
 80080c4:	4628      	mov	r0, r5
 80080c6:	460f      	mov	r7, r1
 80080c8:	f7f8 fa3c 	bl	8000544 <__aeabi_i2d>
 80080cc:	a36a      	add	r3, pc, #424	; (adr r3, 8008278 <_dtoa_r+0x2f0>)
 80080ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d2:	f7f8 faa1 	bl	8000618 <__aeabi_dmul>
 80080d6:	4602      	mov	r2, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	4630      	mov	r0, r6
 80080dc:	4639      	mov	r1, r7
 80080de:	f7f8 f8e5 	bl	80002ac <__adddf3>
 80080e2:	4606      	mov	r6, r0
 80080e4:	460f      	mov	r7, r1
 80080e6:	f7f8 fd47 	bl	8000b78 <__aeabi_d2iz>
 80080ea:	2200      	movs	r2, #0
 80080ec:	4682      	mov	sl, r0
 80080ee:	2300      	movs	r3, #0
 80080f0:	4630      	mov	r0, r6
 80080f2:	4639      	mov	r1, r7
 80080f4:	f7f8 fd02 	bl	8000afc <__aeabi_dcmplt>
 80080f8:	b148      	cbz	r0, 800810e <_dtoa_r+0x186>
 80080fa:	4650      	mov	r0, sl
 80080fc:	f7f8 fa22 	bl	8000544 <__aeabi_i2d>
 8008100:	4632      	mov	r2, r6
 8008102:	463b      	mov	r3, r7
 8008104:	f7f8 fcf0 	bl	8000ae8 <__aeabi_dcmpeq>
 8008108:	b908      	cbnz	r0, 800810e <_dtoa_r+0x186>
 800810a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800810e:	f1ba 0f16 	cmp.w	sl, #22
 8008112:	d854      	bhi.n	80081be <_dtoa_r+0x236>
 8008114:	4b61      	ldr	r3, [pc, #388]	; (800829c <_dtoa_r+0x314>)
 8008116:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008122:	f7f8 fceb 	bl	8000afc <__aeabi_dcmplt>
 8008126:	2800      	cmp	r0, #0
 8008128:	d04b      	beq.n	80081c2 <_dtoa_r+0x23a>
 800812a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800812e:	2300      	movs	r3, #0
 8008130:	930e      	str	r3, [sp, #56]	; 0x38
 8008132:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008134:	1b5d      	subs	r5, r3, r5
 8008136:	1e6b      	subs	r3, r5, #1
 8008138:	9304      	str	r3, [sp, #16]
 800813a:	bf43      	ittte	mi
 800813c:	2300      	movmi	r3, #0
 800813e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008142:	9304      	strmi	r3, [sp, #16]
 8008144:	f04f 0800 	movpl.w	r8, #0
 8008148:	f1ba 0f00 	cmp.w	sl, #0
 800814c:	db3b      	blt.n	80081c6 <_dtoa_r+0x23e>
 800814e:	9b04      	ldr	r3, [sp, #16]
 8008150:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008154:	4453      	add	r3, sl
 8008156:	9304      	str	r3, [sp, #16]
 8008158:	2300      	movs	r3, #0
 800815a:	9306      	str	r3, [sp, #24]
 800815c:	9b05      	ldr	r3, [sp, #20]
 800815e:	2b09      	cmp	r3, #9
 8008160:	d869      	bhi.n	8008236 <_dtoa_r+0x2ae>
 8008162:	2b05      	cmp	r3, #5
 8008164:	bfc4      	itt	gt
 8008166:	3b04      	subgt	r3, #4
 8008168:	9305      	strgt	r3, [sp, #20]
 800816a:	9b05      	ldr	r3, [sp, #20]
 800816c:	f1a3 0302 	sub.w	r3, r3, #2
 8008170:	bfcc      	ite	gt
 8008172:	2500      	movgt	r5, #0
 8008174:	2501      	movle	r5, #1
 8008176:	2b03      	cmp	r3, #3
 8008178:	d869      	bhi.n	800824e <_dtoa_r+0x2c6>
 800817a:	e8df f003 	tbb	[pc, r3]
 800817e:	4e2c      	.short	0x4e2c
 8008180:	5a4c      	.short	0x5a4c
 8008182:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008186:	441d      	add	r5, r3
 8008188:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800818c:	2b20      	cmp	r3, #32
 800818e:	bfc1      	itttt	gt
 8008190:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008194:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008198:	fa09 f303 	lslgt.w	r3, r9, r3
 800819c:	fa26 f000 	lsrgt.w	r0, r6, r0
 80081a0:	bfda      	itte	le
 80081a2:	f1c3 0320 	rsble	r3, r3, #32
 80081a6:	fa06 f003 	lslle.w	r0, r6, r3
 80081aa:	4318      	orrgt	r0, r3
 80081ac:	f7f8 f9ba 	bl	8000524 <__aeabi_ui2d>
 80081b0:	2301      	movs	r3, #1
 80081b2:	4606      	mov	r6, r0
 80081b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80081b8:	3d01      	subs	r5, #1
 80081ba:	9310      	str	r3, [sp, #64]	; 0x40
 80081bc:	e771      	b.n	80080a2 <_dtoa_r+0x11a>
 80081be:	2301      	movs	r3, #1
 80081c0:	e7b6      	b.n	8008130 <_dtoa_r+0x1a8>
 80081c2:	900e      	str	r0, [sp, #56]	; 0x38
 80081c4:	e7b5      	b.n	8008132 <_dtoa_r+0x1aa>
 80081c6:	f1ca 0300 	rsb	r3, sl, #0
 80081ca:	9306      	str	r3, [sp, #24]
 80081cc:	2300      	movs	r3, #0
 80081ce:	eba8 080a 	sub.w	r8, r8, sl
 80081d2:	930d      	str	r3, [sp, #52]	; 0x34
 80081d4:	e7c2      	b.n	800815c <_dtoa_r+0x1d4>
 80081d6:	2300      	movs	r3, #0
 80081d8:	9308      	str	r3, [sp, #32]
 80081da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081dc:	2b00      	cmp	r3, #0
 80081de:	dc39      	bgt.n	8008254 <_dtoa_r+0x2cc>
 80081e0:	f04f 0901 	mov.w	r9, #1
 80081e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80081e8:	464b      	mov	r3, r9
 80081ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80081ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80081f0:	2200      	movs	r2, #0
 80081f2:	6042      	str	r2, [r0, #4]
 80081f4:	2204      	movs	r2, #4
 80081f6:	f102 0614 	add.w	r6, r2, #20
 80081fa:	429e      	cmp	r6, r3
 80081fc:	6841      	ldr	r1, [r0, #4]
 80081fe:	d92f      	bls.n	8008260 <_dtoa_r+0x2d8>
 8008200:	4620      	mov	r0, r4
 8008202:	f001 fa79 	bl	80096f8 <_Balloc>
 8008206:	9000      	str	r0, [sp, #0]
 8008208:	2800      	cmp	r0, #0
 800820a:	d14b      	bne.n	80082a4 <_dtoa_r+0x31c>
 800820c:	4b24      	ldr	r3, [pc, #144]	; (80082a0 <_dtoa_r+0x318>)
 800820e:	4602      	mov	r2, r0
 8008210:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008214:	e6d1      	b.n	8007fba <_dtoa_r+0x32>
 8008216:	2301      	movs	r3, #1
 8008218:	e7de      	b.n	80081d8 <_dtoa_r+0x250>
 800821a:	2300      	movs	r3, #0
 800821c:	9308      	str	r3, [sp, #32]
 800821e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008220:	eb0a 0903 	add.w	r9, sl, r3
 8008224:	f109 0301 	add.w	r3, r9, #1
 8008228:	2b01      	cmp	r3, #1
 800822a:	9301      	str	r3, [sp, #4]
 800822c:	bfb8      	it	lt
 800822e:	2301      	movlt	r3, #1
 8008230:	e7dd      	b.n	80081ee <_dtoa_r+0x266>
 8008232:	2301      	movs	r3, #1
 8008234:	e7f2      	b.n	800821c <_dtoa_r+0x294>
 8008236:	2501      	movs	r5, #1
 8008238:	2300      	movs	r3, #0
 800823a:	9305      	str	r3, [sp, #20]
 800823c:	9508      	str	r5, [sp, #32]
 800823e:	f04f 39ff 	mov.w	r9, #4294967295
 8008242:	2200      	movs	r2, #0
 8008244:	f8cd 9004 	str.w	r9, [sp, #4]
 8008248:	2312      	movs	r3, #18
 800824a:	9209      	str	r2, [sp, #36]	; 0x24
 800824c:	e7cf      	b.n	80081ee <_dtoa_r+0x266>
 800824e:	2301      	movs	r3, #1
 8008250:	9308      	str	r3, [sp, #32]
 8008252:	e7f4      	b.n	800823e <_dtoa_r+0x2b6>
 8008254:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008258:	f8cd 9004 	str.w	r9, [sp, #4]
 800825c:	464b      	mov	r3, r9
 800825e:	e7c6      	b.n	80081ee <_dtoa_r+0x266>
 8008260:	3101      	adds	r1, #1
 8008262:	6041      	str	r1, [r0, #4]
 8008264:	0052      	lsls	r2, r2, #1
 8008266:	e7c6      	b.n	80081f6 <_dtoa_r+0x26e>
 8008268:	636f4361 	.word	0x636f4361
 800826c:	3fd287a7 	.word	0x3fd287a7
 8008270:	8b60c8b3 	.word	0x8b60c8b3
 8008274:	3fc68a28 	.word	0x3fc68a28
 8008278:	509f79fb 	.word	0x509f79fb
 800827c:	3fd34413 	.word	0x3fd34413
 8008280:	0800baf8 	.word	0x0800baf8
 8008284:	0800bcba 	.word	0x0800bcba
 8008288:	7ff00000 	.word	0x7ff00000
 800828c:	0800bcb6 	.word	0x0800bcb6
 8008290:	0800bcad 	.word	0x0800bcad
 8008294:	0800ba7d 	.word	0x0800ba7d
 8008298:	3ff80000 	.word	0x3ff80000
 800829c:	0800be98 	.word	0x0800be98
 80082a0:	0800bd19 	.word	0x0800bd19
 80082a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082a6:	9a00      	ldr	r2, [sp, #0]
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	9b01      	ldr	r3, [sp, #4]
 80082ac:	2b0e      	cmp	r3, #14
 80082ae:	f200 80ad 	bhi.w	800840c <_dtoa_r+0x484>
 80082b2:	2d00      	cmp	r5, #0
 80082b4:	f000 80aa 	beq.w	800840c <_dtoa_r+0x484>
 80082b8:	f1ba 0f00 	cmp.w	sl, #0
 80082bc:	dd36      	ble.n	800832c <_dtoa_r+0x3a4>
 80082be:	4ac3      	ldr	r2, [pc, #780]	; (80085cc <_dtoa_r+0x644>)
 80082c0:	f00a 030f 	and.w	r3, sl, #15
 80082c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80082c8:	ed93 7b00 	vldr	d7, [r3]
 80082cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80082d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80082d4:	eeb0 8a47 	vmov.f32	s16, s14
 80082d8:	eef0 8a67 	vmov.f32	s17, s15
 80082dc:	d016      	beq.n	800830c <_dtoa_r+0x384>
 80082de:	4bbc      	ldr	r3, [pc, #752]	; (80085d0 <_dtoa_r+0x648>)
 80082e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80082e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082e8:	f7f8 fac0 	bl	800086c <__aeabi_ddiv>
 80082ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082f0:	f007 070f 	and.w	r7, r7, #15
 80082f4:	2503      	movs	r5, #3
 80082f6:	4eb6      	ldr	r6, [pc, #728]	; (80085d0 <_dtoa_r+0x648>)
 80082f8:	b957      	cbnz	r7, 8008310 <_dtoa_r+0x388>
 80082fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082fe:	ec53 2b18 	vmov	r2, r3, d8
 8008302:	f7f8 fab3 	bl	800086c <__aeabi_ddiv>
 8008306:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800830a:	e029      	b.n	8008360 <_dtoa_r+0x3d8>
 800830c:	2502      	movs	r5, #2
 800830e:	e7f2      	b.n	80082f6 <_dtoa_r+0x36e>
 8008310:	07f9      	lsls	r1, r7, #31
 8008312:	d508      	bpl.n	8008326 <_dtoa_r+0x39e>
 8008314:	ec51 0b18 	vmov	r0, r1, d8
 8008318:	e9d6 2300 	ldrd	r2, r3, [r6]
 800831c:	f7f8 f97c 	bl	8000618 <__aeabi_dmul>
 8008320:	ec41 0b18 	vmov	d8, r0, r1
 8008324:	3501      	adds	r5, #1
 8008326:	107f      	asrs	r7, r7, #1
 8008328:	3608      	adds	r6, #8
 800832a:	e7e5      	b.n	80082f8 <_dtoa_r+0x370>
 800832c:	f000 80a6 	beq.w	800847c <_dtoa_r+0x4f4>
 8008330:	f1ca 0600 	rsb	r6, sl, #0
 8008334:	4ba5      	ldr	r3, [pc, #660]	; (80085cc <_dtoa_r+0x644>)
 8008336:	4fa6      	ldr	r7, [pc, #664]	; (80085d0 <_dtoa_r+0x648>)
 8008338:	f006 020f 	and.w	r2, r6, #15
 800833c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008344:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008348:	f7f8 f966 	bl	8000618 <__aeabi_dmul>
 800834c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008350:	1136      	asrs	r6, r6, #4
 8008352:	2300      	movs	r3, #0
 8008354:	2502      	movs	r5, #2
 8008356:	2e00      	cmp	r6, #0
 8008358:	f040 8085 	bne.w	8008466 <_dtoa_r+0x4de>
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1d2      	bne.n	8008306 <_dtoa_r+0x37e>
 8008360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008362:	2b00      	cmp	r3, #0
 8008364:	f000 808c 	beq.w	8008480 <_dtoa_r+0x4f8>
 8008368:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800836c:	4b99      	ldr	r3, [pc, #612]	; (80085d4 <_dtoa_r+0x64c>)
 800836e:	2200      	movs	r2, #0
 8008370:	4630      	mov	r0, r6
 8008372:	4639      	mov	r1, r7
 8008374:	f7f8 fbc2 	bl	8000afc <__aeabi_dcmplt>
 8008378:	2800      	cmp	r0, #0
 800837a:	f000 8081 	beq.w	8008480 <_dtoa_r+0x4f8>
 800837e:	9b01      	ldr	r3, [sp, #4]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d07d      	beq.n	8008480 <_dtoa_r+0x4f8>
 8008384:	f1b9 0f00 	cmp.w	r9, #0
 8008388:	dd3c      	ble.n	8008404 <_dtoa_r+0x47c>
 800838a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800838e:	9307      	str	r3, [sp, #28]
 8008390:	2200      	movs	r2, #0
 8008392:	4b91      	ldr	r3, [pc, #580]	; (80085d8 <_dtoa_r+0x650>)
 8008394:	4630      	mov	r0, r6
 8008396:	4639      	mov	r1, r7
 8008398:	f7f8 f93e 	bl	8000618 <__aeabi_dmul>
 800839c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083a0:	3501      	adds	r5, #1
 80083a2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80083a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80083aa:	4628      	mov	r0, r5
 80083ac:	f7f8 f8ca 	bl	8000544 <__aeabi_i2d>
 80083b0:	4632      	mov	r2, r6
 80083b2:	463b      	mov	r3, r7
 80083b4:	f7f8 f930 	bl	8000618 <__aeabi_dmul>
 80083b8:	4b88      	ldr	r3, [pc, #544]	; (80085dc <_dtoa_r+0x654>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	f7f7 ff76 	bl	80002ac <__adddf3>
 80083c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80083c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083c8:	9303      	str	r3, [sp, #12]
 80083ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d15c      	bne.n	800848a <_dtoa_r+0x502>
 80083d0:	4b83      	ldr	r3, [pc, #524]	; (80085e0 <_dtoa_r+0x658>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	4630      	mov	r0, r6
 80083d6:	4639      	mov	r1, r7
 80083d8:	f7f7 ff66 	bl	80002a8 <__aeabi_dsub>
 80083dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083e0:	4606      	mov	r6, r0
 80083e2:	460f      	mov	r7, r1
 80083e4:	f7f8 fba8 	bl	8000b38 <__aeabi_dcmpgt>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	f040 8296 	bne.w	800891a <_dtoa_r+0x992>
 80083ee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80083f2:	4630      	mov	r0, r6
 80083f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083f8:	4639      	mov	r1, r7
 80083fa:	f7f8 fb7f 	bl	8000afc <__aeabi_dcmplt>
 80083fe:	2800      	cmp	r0, #0
 8008400:	f040 8288 	bne.w	8008914 <_dtoa_r+0x98c>
 8008404:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008408:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800840c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800840e:	2b00      	cmp	r3, #0
 8008410:	f2c0 8158 	blt.w	80086c4 <_dtoa_r+0x73c>
 8008414:	f1ba 0f0e 	cmp.w	sl, #14
 8008418:	f300 8154 	bgt.w	80086c4 <_dtoa_r+0x73c>
 800841c:	4b6b      	ldr	r3, [pc, #428]	; (80085cc <_dtoa_r+0x644>)
 800841e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008422:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008428:	2b00      	cmp	r3, #0
 800842a:	f280 80e3 	bge.w	80085f4 <_dtoa_r+0x66c>
 800842e:	9b01      	ldr	r3, [sp, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	f300 80df 	bgt.w	80085f4 <_dtoa_r+0x66c>
 8008436:	f040 826d 	bne.w	8008914 <_dtoa_r+0x98c>
 800843a:	4b69      	ldr	r3, [pc, #420]	; (80085e0 <_dtoa_r+0x658>)
 800843c:	2200      	movs	r2, #0
 800843e:	4640      	mov	r0, r8
 8008440:	4649      	mov	r1, r9
 8008442:	f7f8 f8e9 	bl	8000618 <__aeabi_dmul>
 8008446:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800844a:	f7f8 fb6b 	bl	8000b24 <__aeabi_dcmpge>
 800844e:	9e01      	ldr	r6, [sp, #4]
 8008450:	4637      	mov	r7, r6
 8008452:	2800      	cmp	r0, #0
 8008454:	f040 8243 	bne.w	80088de <_dtoa_r+0x956>
 8008458:	9d00      	ldr	r5, [sp, #0]
 800845a:	2331      	movs	r3, #49	; 0x31
 800845c:	f805 3b01 	strb.w	r3, [r5], #1
 8008460:	f10a 0a01 	add.w	sl, sl, #1
 8008464:	e23f      	b.n	80088e6 <_dtoa_r+0x95e>
 8008466:	07f2      	lsls	r2, r6, #31
 8008468:	d505      	bpl.n	8008476 <_dtoa_r+0x4ee>
 800846a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800846e:	f7f8 f8d3 	bl	8000618 <__aeabi_dmul>
 8008472:	3501      	adds	r5, #1
 8008474:	2301      	movs	r3, #1
 8008476:	1076      	asrs	r6, r6, #1
 8008478:	3708      	adds	r7, #8
 800847a:	e76c      	b.n	8008356 <_dtoa_r+0x3ce>
 800847c:	2502      	movs	r5, #2
 800847e:	e76f      	b.n	8008360 <_dtoa_r+0x3d8>
 8008480:	9b01      	ldr	r3, [sp, #4]
 8008482:	f8cd a01c 	str.w	sl, [sp, #28]
 8008486:	930c      	str	r3, [sp, #48]	; 0x30
 8008488:	e78d      	b.n	80083a6 <_dtoa_r+0x41e>
 800848a:	9900      	ldr	r1, [sp, #0]
 800848c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800848e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008490:	4b4e      	ldr	r3, [pc, #312]	; (80085cc <_dtoa_r+0x644>)
 8008492:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008496:	4401      	add	r1, r0
 8008498:	9102      	str	r1, [sp, #8]
 800849a:	9908      	ldr	r1, [sp, #32]
 800849c:	eeb0 8a47 	vmov.f32	s16, s14
 80084a0:	eef0 8a67 	vmov.f32	s17, s15
 80084a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80084ac:	2900      	cmp	r1, #0
 80084ae:	d045      	beq.n	800853c <_dtoa_r+0x5b4>
 80084b0:	494c      	ldr	r1, [pc, #304]	; (80085e4 <_dtoa_r+0x65c>)
 80084b2:	2000      	movs	r0, #0
 80084b4:	f7f8 f9da 	bl	800086c <__aeabi_ddiv>
 80084b8:	ec53 2b18 	vmov	r2, r3, d8
 80084bc:	f7f7 fef4 	bl	80002a8 <__aeabi_dsub>
 80084c0:	9d00      	ldr	r5, [sp, #0]
 80084c2:	ec41 0b18 	vmov	d8, r0, r1
 80084c6:	4639      	mov	r1, r7
 80084c8:	4630      	mov	r0, r6
 80084ca:	f7f8 fb55 	bl	8000b78 <__aeabi_d2iz>
 80084ce:	900c      	str	r0, [sp, #48]	; 0x30
 80084d0:	f7f8 f838 	bl	8000544 <__aeabi_i2d>
 80084d4:	4602      	mov	r2, r0
 80084d6:	460b      	mov	r3, r1
 80084d8:	4630      	mov	r0, r6
 80084da:	4639      	mov	r1, r7
 80084dc:	f7f7 fee4 	bl	80002a8 <__aeabi_dsub>
 80084e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084e2:	3330      	adds	r3, #48	; 0x30
 80084e4:	f805 3b01 	strb.w	r3, [r5], #1
 80084e8:	ec53 2b18 	vmov	r2, r3, d8
 80084ec:	4606      	mov	r6, r0
 80084ee:	460f      	mov	r7, r1
 80084f0:	f7f8 fb04 	bl	8000afc <__aeabi_dcmplt>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	d165      	bne.n	80085c4 <_dtoa_r+0x63c>
 80084f8:	4632      	mov	r2, r6
 80084fa:	463b      	mov	r3, r7
 80084fc:	4935      	ldr	r1, [pc, #212]	; (80085d4 <_dtoa_r+0x64c>)
 80084fe:	2000      	movs	r0, #0
 8008500:	f7f7 fed2 	bl	80002a8 <__aeabi_dsub>
 8008504:	ec53 2b18 	vmov	r2, r3, d8
 8008508:	f7f8 faf8 	bl	8000afc <__aeabi_dcmplt>
 800850c:	2800      	cmp	r0, #0
 800850e:	f040 80b9 	bne.w	8008684 <_dtoa_r+0x6fc>
 8008512:	9b02      	ldr	r3, [sp, #8]
 8008514:	429d      	cmp	r5, r3
 8008516:	f43f af75 	beq.w	8008404 <_dtoa_r+0x47c>
 800851a:	4b2f      	ldr	r3, [pc, #188]	; (80085d8 <_dtoa_r+0x650>)
 800851c:	ec51 0b18 	vmov	r0, r1, d8
 8008520:	2200      	movs	r2, #0
 8008522:	f7f8 f879 	bl	8000618 <__aeabi_dmul>
 8008526:	4b2c      	ldr	r3, [pc, #176]	; (80085d8 <_dtoa_r+0x650>)
 8008528:	ec41 0b18 	vmov	d8, r0, r1
 800852c:	2200      	movs	r2, #0
 800852e:	4630      	mov	r0, r6
 8008530:	4639      	mov	r1, r7
 8008532:	f7f8 f871 	bl	8000618 <__aeabi_dmul>
 8008536:	4606      	mov	r6, r0
 8008538:	460f      	mov	r7, r1
 800853a:	e7c4      	b.n	80084c6 <_dtoa_r+0x53e>
 800853c:	ec51 0b17 	vmov	r0, r1, d7
 8008540:	f7f8 f86a 	bl	8000618 <__aeabi_dmul>
 8008544:	9b02      	ldr	r3, [sp, #8]
 8008546:	9d00      	ldr	r5, [sp, #0]
 8008548:	930c      	str	r3, [sp, #48]	; 0x30
 800854a:	ec41 0b18 	vmov	d8, r0, r1
 800854e:	4639      	mov	r1, r7
 8008550:	4630      	mov	r0, r6
 8008552:	f7f8 fb11 	bl	8000b78 <__aeabi_d2iz>
 8008556:	9011      	str	r0, [sp, #68]	; 0x44
 8008558:	f7f7 fff4 	bl	8000544 <__aeabi_i2d>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	4630      	mov	r0, r6
 8008562:	4639      	mov	r1, r7
 8008564:	f7f7 fea0 	bl	80002a8 <__aeabi_dsub>
 8008568:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800856a:	3330      	adds	r3, #48	; 0x30
 800856c:	f805 3b01 	strb.w	r3, [r5], #1
 8008570:	9b02      	ldr	r3, [sp, #8]
 8008572:	429d      	cmp	r5, r3
 8008574:	4606      	mov	r6, r0
 8008576:	460f      	mov	r7, r1
 8008578:	f04f 0200 	mov.w	r2, #0
 800857c:	d134      	bne.n	80085e8 <_dtoa_r+0x660>
 800857e:	4b19      	ldr	r3, [pc, #100]	; (80085e4 <_dtoa_r+0x65c>)
 8008580:	ec51 0b18 	vmov	r0, r1, d8
 8008584:	f7f7 fe92 	bl	80002ac <__adddf3>
 8008588:	4602      	mov	r2, r0
 800858a:	460b      	mov	r3, r1
 800858c:	4630      	mov	r0, r6
 800858e:	4639      	mov	r1, r7
 8008590:	f7f8 fad2 	bl	8000b38 <__aeabi_dcmpgt>
 8008594:	2800      	cmp	r0, #0
 8008596:	d175      	bne.n	8008684 <_dtoa_r+0x6fc>
 8008598:	ec53 2b18 	vmov	r2, r3, d8
 800859c:	4911      	ldr	r1, [pc, #68]	; (80085e4 <_dtoa_r+0x65c>)
 800859e:	2000      	movs	r0, #0
 80085a0:	f7f7 fe82 	bl	80002a8 <__aeabi_dsub>
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	4630      	mov	r0, r6
 80085aa:	4639      	mov	r1, r7
 80085ac:	f7f8 faa6 	bl	8000afc <__aeabi_dcmplt>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	f43f af27 	beq.w	8008404 <_dtoa_r+0x47c>
 80085b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085b8:	1e6b      	subs	r3, r5, #1
 80085ba:	930c      	str	r3, [sp, #48]	; 0x30
 80085bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085c0:	2b30      	cmp	r3, #48	; 0x30
 80085c2:	d0f8      	beq.n	80085b6 <_dtoa_r+0x62e>
 80085c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80085c8:	e04a      	b.n	8008660 <_dtoa_r+0x6d8>
 80085ca:	bf00      	nop
 80085cc:	0800be98 	.word	0x0800be98
 80085d0:	0800be70 	.word	0x0800be70
 80085d4:	3ff00000 	.word	0x3ff00000
 80085d8:	40240000 	.word	0x40240000
 80085dc:	401c0000 	.word	0x401c0000
 80085e0:	40140000 	.word	0x40140000
 80085e4:	3fe00000 	.word	0x3fe00000
 80085e8:	4baf      	ldr	r3, [pc, #700]	; (80088a8 <_dtoa_r+0x920>)
 80085ea:	f7f8 f815 	bl	8000618 <__aeabi_dmul>
 80085ee:	4606      	mov	r6, r0
 80085f0:	460f      	mov	r7, r1
 80085f2:	e7ac      	b.n	800854e <_dtoa_r+0x5c6>
 80085f4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80085f8:	9d00      	ldr	r5, [sp, #0]
 80085fa:	4642      	mov	r2, r8
 80085fc:	464b      	mov	r3, r9
 80085fe:	4630      	mov	r0, r6
 8008600:	4639      	mov	r1, r7
 8008602:	f7f8 f933 	bl	800086c <__aeabi_ddiv>
 8008606:	f7f8 fab7 	bl	8000b78 <__aeabi_d2iz>
 800860a:	9002      	str	r0, [sp, #8]
 800860c:	f7f7 ff9a 	bl	8000544 <__aeabi_i2d>
 8008610:	4642      	mov	r2, r8
 8008612:	464b      	mov	r3, r9
 8008614:	f7f8 f800 	bl	8000618 <__aeabi_dmul>
 8008618:	4602      	mov	r2, r0
 800861a:	460b      	mov	r3, r1
 800861c:	4630      	mov	r0, r6
 800861e:	4639      	mov	r1, r7
 8008620:	f7f7 fe42 	bl	80002a8 <__aeabi_dsub>
 8008624:	9e02      	ldr	r6, [sp, #8]
 8008626:	9f01      	ldr	r7, [sp, #4]
 8008628:	3630      	adds	r6, #48	; 0x30
 800862a:	f805 6b01 	strb.w	r6, [r5], #1
 800862e:	9e00      	ldr	r6, [sp, #0]
 8008630:	1bae      	subs	r6, r5, r6
 8008632:	42b7      	cmp	r7, r6
 8008634:	4602      	mov	r2, r0
 8008636:	460b      	mov	r3, r1
 8008638:	d137      	bne.n	80086aa <_dtoa_r+0x722>
 800863a:	f7f7 fe37 	bl	80002ac <__adddf3>
 800863e:	4642      	mov	r2, r8
 8008640:	464b      	mov	r3, r9
 8008642:	4606      	mov	r6, r0
 8008644:	460f      	mov	r7, r1
 8008646:	f7f8 fa77 	bl	8000b38 <__aeabi_dcmpgt>
 800864a:	b9c8      	cbnz	r0, 8008680 <_dtoa_r+0x6f8>
 800864c:	4642      	mov	r2, r8
 800864e:	464b      	mov	r3, r9
 8008650:	4630      	mov	r0, r6
 8008652:	4639      	mov	r1, r7
 8008654:	f7f8 fa48 	bl	8000ae8 <__aeabi_dcmpeq>
 8008658:	b110      	cbz	r0, 8008660 <_dtoa_r+0x6d8>
 800865a:	9b02      	ldr	r3, [sp, #8]
 800865c:	07d9      	lsls	r1, r3, #31
 800865e:	d40f      	bmi.n	8008680 <_dtoa_r+0x6f8>
 8008660:	4620      	mov	r0, r4
 8008662:	4659      	mov	r1, fp
 8008664:	f001 f888 	bl	8009778 <_Bfree>
 8008668:	2300      	movs	r3, #0
 800866a:	702b      	strb	r3, [r5, #0]
 800866c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800866e:	f10a 0001 	add.w	r0, sl, #1
 8008672:	6018      	str	r0, [r3, #0]
 8008674:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008676:	2b00      	cmp	r3, #0
 8008678:	f43f acd8 	beq.w	800802c <_dtoa_r+0xa4>
 800867c:	601d      	str	r5, [r3, #0]
 800867e:	e4d5      	b.n	800802c <_dtoa_r+0xa4>
 8008680:	f8cd a01c 	str.w	sl, [sp, #28]
 8008684:	462b      	mov	r3, r5
 8008686:	461d      	mov	r5, r3
 8008688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800868c:	2a39      	cmp	r2, #57	; 0x39
 800868e:	d108      	bne.n	80086a2 <_dtoa_r+0x71a>
 8008690:	9a00      	ldr	r2, [sp, #0]
 8008692:	429a      	cmp	r2, r3
 8008694:	d1f7      	bne.n	8008686 <_dtoa_r+0x6fe>
 8008696:	9a07      	ldr	r2, [sp, #28]
 8008698:	9900      	ldr	r1, [sp, #0]
 800869a:	3201      	adds	r2, #1
 800869c:	9207      	str	r2, [sp, #28]
 800869e:	2230      	movs	r2, #48	; 0x30
 80086a0:	700a      	strb	r2, [r1, #0]
 80086a2:	781a      	ldrb	r2, [r3, #0]
 80086a4:	3201      	adds	r2, #1
 80086a6:	701a      	strb	r2, [r3, #0]
 80086a8:	e78c      	b.n	80085c4 <_dtoa_r+0x63c>
 80086aa:	4b7f      	ldr	r3, [pc, #508]	; (80088a8 <_dtoa_r+0x920>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	f7f7 ffb3 	bl	8000618 <__aeabi_dmul>
 80086b2:	2200      	movs	r2, #0
 80086b4:	2300      	movs	r3, #0
 80086b6:	4606      	mov	r6, r0
 80086b8:	460f      	mov	r7, r1
 80086ba:	f7f8 fa15 	bl	8000ae8 <__aeabi_dcmpeq>
 80086be:	2800      	cmp	r0, #0
 80086c0:	d09b      	beq.n	80085fa <_dtoa_r+0x672>
 80086c2:	e7cd      	b.n	8008660 <_dtoa_r+0x6d8>
 80086c4:	9a08      	ldr	r2, [sp, #32]
 80086c6:	2a00      	cmp	r2, #0
 80086c8:	f000 80c4 	beq.w	8008854 <_dtoa_r+0x8cc>
 80086cc:	9a05      	ldr	r2, [sp, #20]
 80086ce:	2a01      	cmp	r2, #1
 80086d0:	f300 80a8 	bgt.w	8008824 <_dtoa_r+0x89c>
 80086d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086d6:	2a00      	cmp	r2, #0
 80086d8:	f000 80a0 	beq.w	800881c <_dtoa_r+0x894>
 80086dc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80086e0:	9e06      	ldr	r6, [sp, #24]
 80086e2:	4645      	mov	r5, r8
 80086e4:	9a04      	ldr	r2, [sp, #16]
 80086e6:	2101      	movs	r1, #1
 80086e8:	441a      	add	r2, r3
 80086ea:	4620      	mov	r0, r4
 80086ec:	4498      	add	r8, r3
 80086ee:	9204      	str	r2, [sp, #16]
 80086f0:	f001 f948 	bl	8009984 <__i2b>
 80086f4:	4607      	mov	r7, r0
 80086f6:	2d00      	cmp	r5, #0
 80086f8:	dd0b      	ble.n	8008712 <_dtoa_r+0x78a>
 80086fa:	9b04      	ldr	r3, [sp, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	dd08      	ble.n	8008712 <_dtoa_r+0x78a>
 8008700:	42ab      	cmp	r3, r5
 8008702:	9a04      	ldr	r2, [sp, #16]
 8008704:	bfa8      	it	ge
 8008706:	462b      	movge	r3, r5
 8008708:	eba8 0803 	sub.w	r8, r8, r3
 800870c:	1aed      	subs	r5, r5, r3
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	9304      	str	r3, [sp, #16]
 8008712:	9b06      	ldr	r3, [sp, #24]
 8008714:	b1fb      	cbz	r3, 8008756 <_dtoa_r+0x7ce>
 8008716:	9b08      	ldr	r3, [sp, #32]
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 809f 	beq.w	800885c <_dtoa_r+0x8d4>
 800871e:	2e00      	cmp	r6, #0
 8008720:	dd11      	ble.n	8008746 <_dtoa_r+0x7be>
 8008722:	4639      	mov	r1, r7
 8008724:	4632      	mov	r2, r6
 8008726:	4620      	mov	r0, r4
 8008728:	f001 f9e8 	bl	8009afc <__pow5mult>
 800872c:	465a      	mov	r2, fp
 800872e:	4601      	mov	r1, r0
 8008730:	4607      	mov	r7, r0
 8008732:	4620      	mov	r0, r4
 8008734:	f001 f93c 	bl	80099b0 <__multiply>
 8008738:	4659      	mov	r1, fp
 800873a:	9007      	str	r0, [sp, #28]
 800873c:	4620      	mov	r0, r4
 800873e:	f001 f81b 	bl	8009778 <_Bfree>
 8008742:	9b07      	ldr	r3, [sp, #28]
 8008744:	469b      	mov	fp, r3
 8008746:	9b06      	ldr	r3, [sp, #24]
 8008748:	1b9a      	subs	r2, r3, r6
 800874a:	d004      	beq.n	8008756 <_dtoa_r+0x7ce>
 800874c:	4659      	mov	r1, fp
 800874e:	4620      	mov	r0, r4
 8008750:	f001 f9d4 	bl	8009afc <__pow5mult>
 8008754:	4683      	mov	fp, r0
 8008756:	2101      	movs	r1, #1
 8008758:	4620      	mov	r0, r4
 800875a:	f001 f913 	bl	8009984 <__i2b>
 800875e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008760:	2b00      	cmp	r3, #0
 8008762:	4606      	mov	r6, r0
 8008764:	dd7c      	ble.n	8008860 <_dtoa_r+0x8d8>
 8008766:	461a      	mov	r2, r3
 8008768:	4601      	mov	r1, r0
 800876a:	4620      	mov	r0, r4
 800876c:	f001 f9c6 	bl	8009afc <__pow5mult>
 8008770:	9b05      	ldr	r3, [sp, #20]
 8008772:	2b01      	cmp	r3, #1
 8008774:	4606      	mov	r6, r0
 8008776:	dd76      	ble.n	8008866 <_dtoa_r+0x8de>
 8008778:	2300      	movs	r3, #0
 800877a:	9306      	str	r3, [sp, #24]
 800877c:	6933      	ldr	r3, [r6, #16]
 800877e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008782:	6918      	ldr	r0, [r3, #16]
 8008784:	f001 f8ae 	bl	80098e4 <__hi0bits>
 8008788:	f1c0 0020 	rsb	r0, r0, #32
 800878c:	9b04      	ldr	r3, [sp, #16]
 800878e:	4418      	add	r0, r3
 8008790:	f010 001f 	ands.w	r0, r0, #31
 8008794:	f000 8086 	beq.w	80088a4 <_dtoa_r+0x91c>
 8008798:	f1c0 0320 	rsb	r3, r0, #32
 800879c:	2b04      	cmp	r3, #4
 800879e:	dd7f      	ble.n	80088a0 <_dtoa_r+0x918>
 80087a0:	f1c0 001c 	rsb	r0, r0, #28
 80087a4:	9b04      	ldr	r3, [sp, #16]
 80087a6:	4403      	add	r3, r0
 80087a8:	4480      	add	r8, r0
 80087aa:	4405      	add	r5, r0
 80087ac:	9304      	str	r3, [sp, #16]
 80087ae:	f1b8 0f00 	cmp.w	r8, #0
 80087b2:	dd05      	ble.n	80087c0 <_dtoa_r+0x838>
 80087b4:	4659      	mov	r1, fp
 80087b6:	4642      	mov	r2, r8
 80087b8:	4620      	mov	r0, r4
 80087ba:	f001 f9f9 	bl	8009bb0 <__lshift>
 80087be:	4683      	mov	fp, r0
 80087c0:	9b04      	ldr	r3, [sp, #16]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	dd05      	ble.n	80087d2 <_dtoa_r+0x84a>
 80087c6:	4631      	mov	r1, r6
 80087c8:	461a      	mov	r2, r3
 80087ca:	4620      	mov	r0, r4
 80087cc:	f001 f9f0 	bl	8009bb0 <__lshift>
 80087d0:	4606      	mov	r6, r0
 80087d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d069      	beq.n	80088ac <_dtoa_r+0x924>
 80087d8:	4631      	mov	r1, r6
 80087da:	4658      	mov	r0, fp
 80087dc:	f001 fa54 	bl	8009c88 <__mcmp>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	da63      	bge.n	80088ac <_dtoa_r+0x924>
 80087e4:	2300      	movs	r3, #0
 80087e6:	4659      	mov	r1, fp
 80087e8:	220a      	movs	r2, #10
 80087ea:	4620      	mov	r0, r4
 80087ec:	f000 ffe6 	bl	80097bc <__multadd>
 80087f0:	9b08      	ldr	r3, [sp, #32]
 80087f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087f6:	4683      	mov	fp, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f000 818f 	beq.w	8008b1c <_dtoa_r+0xb94>
 80087fe:	4639      	mov	r1, r7
 8008800:	2300      	movs	r3, #0
 8008802:	220a      	movs	r2, #10
 8008804:	4620      	mov	r0, r4
 8008806:	f000 ffd9 	bl	80097bc <__multadd>
 800880a:	f1b9 0f00 	cmp.w	r9, #0
 800880e:	4607      	mov	r7, r0
 8008810:	f300 808e 	bgt.w	8008930 <_dtoa_r+0x9a8>
 8008814:	9b05      	ldr	r3, [sp, #20]
 8008816:	2b02      	cmp	r3, #2
 8008818:	dc50      	bgt.n	80088bc <_dtoa_r+0x934>
 800881a:	e089      	b.n	8008930 <_dtoa_r+0x9a8>
 800881c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800881e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008822:	e75d      	b.n	80086e0 <_dtoa_r+0x758>
 8008824:	9b01      	ldr	r3, [sp, #4]
 8008826:	1e5e      	subs	r6, r3, #1
 8008828:	9b06      	ldr	r3, [sp, #24]
 800882a:	42b3      	cmp	r3, r6
 800882c:	bfbf      	itttt	lt
 800882e:	9b06      	ldrlt	r3, [sp, #24]
 8008830:	9606      	strlt	r6, [sp, #24]
 8008832:	1af2      	sublt	r2, r6, r3
 8008834:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008836:	bfb6      	itet	lt
 8008838:	189b      	addlt	r3, r3, r2
 800883a:	1b9e      	subge	r6, r3, r6
 800883c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800883e:	9b01      	ldr	r3, [sp, #4]
 8008840:	bfb8      	it	lt
 8008842:	2600      	movlt	r6, #0
 8008844:	2b00      	cmp	r3, #0
 8008846:	bfb5      	itete	lt
 8008848:	eba8 0503 	sublt.w	r5, r8, r3
 800884c:	9b01      	ldrge	r3, [sp, #4]
 800884e:	2300      	movlt	r3, #0
 8008850:	4645      	movge	r5, r8
 8008852:	e747      	b.n	80086e4 <_dtoa_r+0x75c>
 8008854:	9e06      	ldr	r6, [sp, #24]
 8008856:	9f08      	ldr	r7, [sp, #32]
 8008858:	4645      	mov	r5, r8
 800885a:	e74c      	b.n	80086f6 <_dtoa_r+0x76e>
 800885c:	9a06      	ldr	r2, [sp, #24]
 800885e:	e775      	b.n	800874c <_dtoa_r+0x7c4>
 8008860:	9b05      	ldr	r3, [sp, #20]
 8008862:	2b01      	cmp	r3, #1
 8008864:	dc18      	bgt.n	8008898 <_dtoa_r+0x910>
 8008866:	9b02      	ldr	r3, [sp, #8]
 8008868:	b9b3      	cbnz	r3, 8008898 <_dtoa_r+0x910>
 800886a:	9b03      	ldr	r3, [sp, #12]
 800886c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008870:	b9a3      	cbnz	r3, 800889c <_dtoa_r+0x914>
 8008872:	9b03      	ldr	r3, [sp, #12]
 8008874:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008878:	0d1b      	lsrs	r3, r3, #20
 800887a:	051b      	lsls	r3, r3, #20
 800887c:	b12b      	cbz	r3, 800888a <_dtoa_r+0x902>
 800887e:	9b04      	ldr	r3, [sp, #16]
 8008880:	3301      	adds	r3, #1
 8008882:	9304      	str	r3, [sp, #16]
 8008884:	f108 0801 	add.w	r8, r8, #1
 8008888:	2301      	movs	r3, #1
 800888a:	9306      	str	r3, [sp, #24]
 800888c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800888e:	2b00      	cmp	r3, #0
 8008890:	f47f af74 	bne.w	800877c <_dtoa_r+0x7f4>
 8008894:	2001      	movs	r0, #1
 8008896:	e779      	b.n	800878c <_dtoa_r+0x804>
 8008898:	2300      	movs	r3, #0
 800889a:	e7f6      	b.n	800888a <_dtoa_r+0x902>
 800889c:	9b02      	ldr	r3, [sp, #8]
 800889e:	e7f4      	b.n	800888a <_dtoa_r+0x902>
 80088a0:	d085      	beq.n	80087ae <_dtoa_r+0x826>
 80088a2:	4618      	mov	r0, r3
 80088a4:	301c      	adds	r0, #28
 80088a6:	e77d      	b.n	80087a4 <_dtoa_r+0x81c>
 80088a8:	40240000 	.word	0x40240000
 80088ac:	9b01      	ldr	r3, [sp, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	dc38      	bgt.n	8008924 <_dtoa_r+0x99c>
 80088b2:	9b05      	ldr	r3, [sp, #20]
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	dd35      	ble.n	8008924 <_dtoa_r+0x99c>
 80088b8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80088bc:	f1b9 0f00 	cmp.w	r9, #0
 80088c0:	d10d      	bne.n	80088de <_dtoa_r+0x956>
 80088c2:	4631      	mov	r1, r6
 80088c4:	464b      	mov	r3, r9
 80088c6:	2205      	movs	r2, #5
 80088c8:	4620      	mov	r0, r4
 80088ca:	f000 ff77 	bl	80097bc <__multadd>
 80088ce:	4601      	mov	r1, r0
 80088d0:	4606      	mov	r6, r0
 80088d2:	4658      	mov	r0, fp
 80088d4:	f001 f9d8 	bl	8009c88 <__mcmp>
 80088d8:	2800      	cmp	r0, #0
 80088da:	f73f adbd 	bgt.w	8008458 <_dtoa_r+0x4d0>
 80088de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e0:	9d00      	ldr	r5, [sp, #0]
 80088e2:	ea6f 0a03 	mvn.w	sl, r3
 80088e6:	f04f 0800 	mov.w	r8, #0
 80088ea:	4631      	mov	r1, r6
 80088ec:	4620      	mov	r0, r4
 80088ee:	f000 ff43 	bl	8009778 <_Bfree>
 80088f2:	2f00      	cmp	r7, #0
 80088f4:	f43f aeb4 	beq.w	8008660 <_dtoa_r+0x6d8>
 80088f8:	f1b8 0f00 	cmp.w	r8, #0
 80088fc:	d005      	beq.n	800890a <_dtoa_r+0x982>
 80088fe:	45b8      	cmp	r8, r7
 8008900:	d003      	beq.n	800890a <_dtoa_r+0x982>
 8008902:	4641      	mov	r1, r8
 8008904:	4620      	mov	r0, r4
 8008906:	f000 ff37 	bl	8009778 <_Bfree>
 800890a:	4639      	mov	r1, r7
 800890c:	4620      	mov	r0, r4
 800890e:	f000 ff33 	bl	8009778 <_Bfree>
 8008912:	e6a5      	b.n	8008660 <_dtoa_r+0x6d8>
 8008914:	2600      	movs	r6, #0
 8008916:	4637      	mov	r7, r6
 8008918:	e7e1      	b.n	80088de <_dtoa_r+0x956>
 800891a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800891c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008920:	4637      	mov	r7, r6
 8008922:	e599      	b.n	8008458 <_dtoa_r+0x4d0>
 8008924:	9b08      	ldr	r3, [sp, #32]
 8008926:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	f000 80fd 	beq.w	8008b2a <_dtoa_r+0xba2>
 8008930:	2d00      	cmp	r5, #0
 8008932:	dd05      	ble.n	8008940 <_dtoa_r+0x9b8>
 8008934:	4639      	mov	r1, r7
 8008936:	462a      	mov	r2, r5
 8008938:	4620      	mov	r0, r4
 800893a:	f001 f939 	bl	8009bb0 <__lshift>
 800893e:	4607      	mov	r7, r0
 8008940:	9b06      	ldr	r3, [sp, #24]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d05c      	beq.n	8008a00 <_dtoa_r+0xa78>
 8008946:	6879      	ldr	r1, [r7, #4]
 8008948:	4620      	mov	r0, r4
 800894a:	f000 fed5 	bl	80096f8 <_Balloc>
 800894e:	4605      	mov	r5, r0
 8008950:	b928      	cbnz	r0, 800895e <_dtoa_r+0x9d6>
 8008952:	4b80      	ldr	r3, [pc, #512]	; (8008b54 <_dtoa_r+0xbcc>)
 8008954:	4602      	mov	r2, r0
 8008956:	f240 21ea 	movw	r1, #746	; 0x2ea
 800895a:	f7ff bb2e 	b.w	8007fba <_dtoa_r+0x32>
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	3202      	adds	r2, #2
 8008962:	0092      	lsls	r2, r2, #2
 8008964:	f107 010c 	add.w	r1, r7, #12
 8008968:	300c      	adds	r0, #12
 800896a:	f000 feb7 	bl	80096dc <memcpy>
 800896e:	2201      	movs	r2, #1
 8008970:	4629      	mov	r1, r5
 8008972:	4620      	mov	r0, r4
 8008974:	f001 f91c 	bl	8009bb0 <__lshift>
 8008978:	9b00      	ldr	r3, [sp, #0]
 800897a:	3301      	adds	r3, #1
 800897c:	9301      	str	r3, [sp, #4]
 800897e:	9b00      	ldr	r3, [sp, #0]
 8008980:	444b      	add	r3, r9
 8008982:	9307      	str	r3, [sp, #28]
 8008984:	9b02      	ldr	r3, [sp, #8]
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	46b8      	mov	r8, r7
 800898c:	9306      	str	r3, [sp, #24]
 800898e:	4607      	mov	r7, r0
 8008990:	9b01      	ldr	r3, [sp, #4]
 8008992:	4631      	mov	r1, r6
 8008994:	3b01      	subs	r3, #1
 8008996:	4658      	mov	r0, fp
 8008998:	9302      	str	r3, [sp, #8]
 800899a:	f7ff fa67 	bl	8007e6c <quorem>
 800899e:	4603      	mov	r3, r0
 80089a0:	3330      	adds	r3, #48	; 0x30
 80089a2:	9004      	str	r0, [sp, #16]
 80089a4:	4641      	mov	r1, r8
 80089a6:	4658      	mov	r0, fp
 80089a8:	9308      	str	r3, [sp, #32]
 80089aa:	f001 f96d 	bl	8009c88 <__mcmp>
 80089ae:	463a      	mov	r2, r7
 80089b0:	4681      	mov	r9, r0
 80089b2:	4631      	mov	r1, r6
 80089b4:	4620      	mov	r0, r4
 80089b6:	f001 f983 	bl	8009cc0 <__mdiff>
 80089ba:	68c2      	ldr	r2, [r0, #12]
 80089bc:	9b08      	ldr	r3, [sp, #32]
 80089be:	4605      	mov	r5, r0
 80089c0:	bb02      	cbnz	r2, 8008a04 <_dtoa_r+0xa7c>
 80089c2:	4601      	mov	r1, r0
 80089c4:	4658      	mov	r0, fp
 80089c6:	f001 f95f 	bl	8009c88 <__mcmp>
 80089ca:	9b08      	ldr	r3, [sp, #32]
 80089cc:	4602      	mov	r2, r0
 80089ce:	4629      	mov	r1, r5
 80089d0:	4620      	mov	r0, r4
 80089d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80089d6:	f000 fecf 	bl	8009778 <_Bfree>
 80089da:	9b05      	ldr	r3, [sp, #20]
 80089dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089de:	9d01      	ldr	r5, [sp, #4]
 80089e0:	ea43 0102 	orr.w	r1, r3, r2
 80089e4:	9b06      	ldr	r3, [sp, #24]
 80089e6:	430b      	orrs	r3, r1
 80089e8:	9b08      	ldr	r3, [sp, #32]
 80089ea:	d10d      	bne.n	8008a08 <_dtoa_r+0xa80>
 80089ec:	2b39      	cmp	r3, #57	; 0x39
 80089ee:	d029      	beq.n	8008a44 <_dtoa_r+0xabc>
 80089f0:	f1b9 0f00 	cmp.w	r9, #0
 80089f4:	dd01      	ble.n	80089fa <_dtoa_r+0xa72>
 80089f6:	9b04      	ldr	r3, [sp, #16]
 80089f8:	3331      	adds	r3, #49	; 0x31
 80089fa:	9a02      	ldr	r2, [sp, #8]
 80089fc:	7013      	strb	r3, [r2, #0]
 80089fe:	e774      	b.n	80088ea <_dtoa_r+0x962>
 8008a00:	4638      	mov	r0, r7
 8008a02:	e7b9      	b.n	8008978 <_dtoa_r+0x9f0>
 8008a04:	2201      	movs	r2, #1
 8008a06:	e7e2      	b.n	80089ce <_dtoa_r+0xa46>
 8008a08:	f1b9 0f00 	cmp.w	r9, #0
 8008a0c:	db06      	blt.n	8008a1c <_dtoa_r+0xa94>
 8008a0e:	9905      	ldr	r1, [sp, #20]
 8008a10:	ea41 0909 	orr.w	r9, r1, r9
 8008a14:	9906      	ldr	r1, [sp, #24]
 8008a16:	ea59 0101 	orrs.w	r1, r9, r1
 8008a1a:	d120      	bne.n	8008a5e <_dtoa_r+0xad6>
 8008a1c:	2a00      	cmp	r2, #0
 8008a1e:	ddec      	ble.n	80089fa <_dtoa_r+0xa72>
 8008a20:	4659      	mov	r1, fp
 8008a22:	2201      	movs	r2, #1
 8008a24:	4620      	mov	r0, r4
 8008a26:	9301      	str	r3, [sp, #4]
 8008a28:	f001 f8c2 	bl	8009bb0 <__lshift>
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	4683      	mov	fp, r0
 8008a30:	f001 f92a 	bl	8009c88 <__mcmp>
 8008a34:	2800      	cmp	r0, #0
 8008a36:	9b01      	ldr	r3, [sp, #4]
 8008a38:	dc02      	bgt.n	8008a40 <_dtoa_r+0xab8>
 8008a3a:	d1de      	bne.n	80089fa <_dtoa_r+0xa72>
 8008a3c:	07da      	lsls	r2, r3, #31
 8008a3e:	d5dc      	bpl.n	80089fa <_dtoa_r+0xa72>
 8008a40:	2b39      	cmp	r3, #57	; 0x39
 8008a42:	d1d8      	bne.n	80089f6 <_dtoa_r+0xa6e>
 8008a44:	9a02      	ldr	r2, [sp, #8]
 8008a46:	2339      	movs	r3, #57	; 0x39
 8008a48:	7013      	strb	r3, [r2, #0]
 8008a4a:	462b      	mov	r3, r5
 8008a4c:	461d      	mov	r5, r3
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a54:	2a39      	cmp	r2, #57	; 0x39
 8008a56:	d050      	beq.n	8008afa <_dtoa_r+0xb72>
 8008a58:	3201      	adds	r2, #1
 8008a5a:	701a      	strb	r2, [r3, #0]
 8008a5c:	e745      	b.n	80088ea <_dtoa_r+0x962>
 8008a5e:	2a00      	cmp	r2, #0
 8008a60:	dd03      	ble.n	8008a6a <_dtoa_r+0xae2>
 8008a62:	2b39      	cmp	r3, #57	; 0x39
 8008a64:	d0ee      	beq.n	8008a44 <_dtoa_r+0xabc>
 8008a66:	3301      	adds	r3, #1
 8008a68:	e7c7      	b.n	80089fa <_dtoa_r+0xa72>
 8008a6a:	9a01      	ldr	r2, [sp, #4]
 8008a6c:	9907      	ldr	r1, [sp, #28]
 8008a6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008a72:	428a      	cmp	r2, r1
 8008a74:	d02a      	beq.n	8008acc <_dtoa_r+0xb44>
 8008a76:	4659      	mov	r1, fp
 8008a78:	2300      	movs	r3, #0
 8008a7a:	220a      	movs	r2, #10
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f000 fe9d 	bl	80097bc <__multadd>
 8008a82:	45b8      	cmp	r8, r7
 8008a84:	4683      	mov	fp, r0
 8008a86:	f04f 0300 	mov.w	r3, #0
 8008a8a:	f04f 020a 	mov.w	r2, #10
 8008a8e:	4641      	mov	r1, r8
 8008a90:	4620      	mov	r0, r4
 8008a92:	d107      	bne.n	8008aa4 <_dtoa_r+0xb1c>
 8008a94:	f000 fe92 	bl	80097bc <__multadd>
 8008a98:	4680      	mov	r8, r0
 8008a9a:	4607      	mov	r7, r0
 8008a9c:	9b01      	ldr	r3, [sp, #4]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	9301      	str	r3, [sp, #4]
 8008aa2:	e775      	b.n	8008990 <_dtoa_r+0xa08>
 8008aa4:	f000 fe8a 	bl	80097bc <__multadd>
 8008aa8:	4639      	mov	r1, r7
 8008aaa:	4680      	mov	r8, r0
 8008aac:	2300      	movs	r3, #0
 8008aae:	220a      	movs	r2, #10
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f000 fe83 	bl	80097bc <__multadd>
 8008ab6:	4607      	mov	r7, r0
 8008ab8:	e7f0      	b.n	8008a9c <_dtoa_r+0xb14>
 8008aba:	f1b9 0f00 	cmp.w	r9, #0
 8008abe:	9a00      	ldr	r2, [sp, #0]
 8008ac0:	bfcc      	ite	gt
 8008ac2:	464d      	movgt	r5, r9
 8008ac4:	2501      	movle	r5, #1
 8008ac6:	4415      	add	r5, r2
 8008ac8:	f04f 0800 	mov.w	r8, #0
 8008acc:	4659      	mov	r1, fp
 8008ace:	2201      	movs	r2, #1
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	9301      	str	r3, [sp, #4]
 8008ad4:	f001 f86c 	bl	8009bb0 <__lshift>
 8008ad8:	4631      	mov	r1, r6
 8008ada:	4683      	mov	fp, r0
 8008adc:	f001 f8d4 	bl	8009c88 <__mcmp>
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	dcb2      	bgt.n	8008a4a <_dtoa_r+0xac2>
 8008ae4:	d102      	bne.n	8008aec <_dtoa_r+0xb64>
 8008ae6:	9b01      	ldr	r3, [sp, #4]
 8008ae8:	07db      	lsls	r3, r3, #31
 8008aea:	d4ae      	bmi.n	8008a4a <_dtoa_r+0xac2>
 8008aec:	462b      	mov	r3, r5
 8008aee:	461d      	mov	r5, r3
 8008af0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008af4:	2a30      	cmp	r2, #48	; 0x30
 8008af6:	d0fa      	beq.n	8008aee <_dtoa_r+0xb66>
 8008af8:	e6f7      	b.n	80088ea <_dtoa_r+0x962>
 8008afa:	9a00      	ldr	r2, [sp, #0]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d1a5      	bne.n	8008a4c <_dtoa_r+0xac4>
 8008b00:	f10a 0a01 	add.w	sl, sl, #1
 8008b04:	2331      	movs	r3, #49	; 0x31
 8008b06:	e779      	b.n	80089fc <_dtoa_r+0xa74>
 8008b08:	4b13      	ldr	r3, [pc, #76]	; (8008b58 <_dtoa_r+0xbd0>)
 8008b0a:	f7ff baaf 	b.w	800806c <_dtoa_r+0xe4>
 8008b0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f47f aa86 	bne.w	8008022 <_dtoa_r+0x9a>
 8008b16:	4b11      	ldr	r3, [pc, #68]	; (8008b5c <_dtoa_r+0xbd4>)
 8008b18:	f7ff baa8 	b.w	800806c <_dtoa_r+0xe4>
 8008b1c:	f1b9 0f00 	cmp.w	r9, #0
 8008b20:	dc03      	bgt.n	8008b2a <_dtoa_r+0xba2>
 8008b22:	9b05      	ldr	r3, [sp, #20]
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	f73f aec9 	bgt.w	80088bc <_dtoa_r+0x934>
 8008b2a:	9d00      	ldr	r5, [sp, #0]
 8008b2c:	4631      	mov	r1, r6
 8008b2e:	4658      	mov	r0, fp
 8008b30:	f7ff f99c 	bl	8007e6c <quorem>
 8008b34:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008b38:	f805 3b01 	strb.w	r3, [r5], #1
 8008b3c:	9a00      	ldr	r2, [sp, #0]
 8008b3e:	1aaa      	subs	r2, r5, r2
 8008b40:	4591      	cmp	r9, r2
 8008b42:	ddba      	ble.n	8008aba <_dtoa_r+0xb32>
 8008b44:	4659      	mov	r1, fp
 8008b46:	2300      	movs	r3, #0
 8008b48:	220a      	movs	r2, #10
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f000 fe36 	bl	80097bc <__multadd>
 8008b50:	4683      	mov	fp, r0
 8008b52:	e7eb      	b.n	8008b2c <_dtoa_r+0xba4>
 8008b54:	0800bd19 	.word	0x0800bd19
 8008b58:	0800ba7c 	.word	0x0800ba7c
 8008b5c:	0800bcad 	.word	0x0800bcad

08008b60 <__sflush_r>:
 8008b60:	898a      	ldrh	r2, [r1, #12]
 8008b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b66:	4605      	mov	r5, r0
 8008b68:	0710      	lsls	r0, r2, #28
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	d458      	bmi.n	8008c20 <__sflush_r+0xc0>
 8008b6e:	684b      	ldr	r3, [r1, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	dc05      	bgt.n	8008b80 <__sflush_r+0x20>
 8008b74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	dc02      	bgt.n	8008b80 <__sflush_r+0x20>
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b82:	2e00      	cmp	r6, #0
 8008b84:	d0f9      	beq.n	8008b7a <__sflush_r+0x1a>
 8008b86:	2300      	movs	r3, #0
 8008b88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b8c:	682f      	ldr	r7, [r5, #0]
 8008b8e:	602b      	str	r3, [r5, #0]
 8008b90:	d032      	beq.n	8008bf8 <__sflush_r+0x98>
 8008b92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b94:	89a3      	ldrh	r3, [r4, #12]
 8008b96:	075a      	lsls	r2, r3, #29
 8008b98:	d505      	bpl.n	8008ba6 <__sflush_r+0x46>
 8008b9a:	6863      	ldr	r3, [r4, #4]
 8008b9c:	1ac0      	subs	r0, r0, r3
 8008b9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ba0:	b10b      	cbz	r3, 8008ba6 <__sflush_r+0x46>
 8008ba2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ba4:	1ac0      	subs	r0, r0, r3
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	4602      	mov	r2, r0
 8008baa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bac:	6a21      	ldr	r1, [r4, #32]
 8008bae:	4628      	mov	r0, r5
 8008bb0:	47b0      	blx	r6
 8008bb2:	1c43      	adds	r3, r0, #1
 8008bb4:	89a3      	ldrh	r3, [r4, #12]
 8008bb6:	d106      	bne.n	8008bc6 <__sflush_r+0x66>
 8008bb8:	6829      	ldr	r1, [r5, #0]
 8008bba:	291d      	cmp	r1, #29
 8008bbc:	d82c      	bhi.n	8008c18 <__sflush_r+0xb8>
 8008bbe:	4a2a      	ldr	r2, [pc, #168]	; (8008c68 <__sflush_r+0x108>)
 8008bc0:	40ca      	lsrs	r2, r1
 8008bc2:	07d6      	lsls	r6, r2, #31
 8008bc4:	d528      	bpl.n	8008c18 <__sflush_r+0xb8>
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	6062      	str	r2, [r4, #4]
 8008bca:	04d9      	lsls	r1, r3, #19
 8008bcc:	6922      	ldr	r2, [r4, #16]
 8008bce:	6022      	str	r2, [r4, #0]
 8008bd0:	d504      	bpl.n	8008bdc <__sflush_r+0x7c>
 8008bd2:	1c42      	adds	r2, r0, #1
 8008bd4:	d101      	bne.n	8008bda <__sflush_r+0x7a>
 8008bd6:	682b      	ldr	r3, [r5, #0]
 8008bd8:	b903      	cbnz	r3, 8008bdc <__sflush_r+0x7c>
 8008bda:	6560      	str	r0, [r4, #84]	; 0x54
 8008bdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bde:	602f      	str	r7, [r5, #0]
 8008be0:	2900      	cmp	r1, #0
 8008be2:	d0ca      	beq.n	8008b7a <__sflush_r+0x1a>
 8008be4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008be8:	4299      	cmp	r1, r3
 8008bea:	d002      	beq.n	8008bf2 <__sflush_r+0x92>
 8008bec:	4628      	mov	r0, r5
 8008bee:	f001 fa4d 	bl	800a08c <_free_r>
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	6360      	str	r0, [r4, #52]	; 0x34
 8008bf6:	e7c1      	b.n	8008b7c <__sflush_r+0x1c>
 8008bf8:	6a21      	ldr	r1, [r4, #32]
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	47b0      	blx	r6
 8008c00:	1c41      	adds	r1, r0, #1
 8008c02:	d1c7      	bne.n	8008b94 <__sflush_r+0x34>
 8008c04:	682b      	ldr	r3, [r5, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d0c4      	beq.n	8008b94 <__sflush_r+0x34>
 8008c0a:	2b1d      	cmp	r3, #29
 8008c0c:	d001      	beq.n	8008c12 <__sflush_r+0xb2>
 8008c0e:	2b16      	cmp	r3, #22
 8008c10:	d101      	bne.n	8008c16 <__sflush_r+0xb6>
 8008c12:	602f      	str	r7, [r5, #0]
 8008c14:	e7b1      	b.n	8008b7a <__sflush_r+0x1a>
 8008c16:	89a3      	ldrh	r3, [r4, #12]
 8008c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c1c:	81a3      	strh	r3, [r4, #12]
 8008c1e:	e7ad      	b.n	8008b7c <__sflush_r+0x1c>
 8008c20:	690f      	ldr	r7, [r1, #16]
 8008c22:	2f00      	cmp	r7, #0
 8008c24:	d0a9      	beq.n	8008b7a <__sflush_r+0x1a>
 8008c26:	0793      	lsls	r3, r2, #30
 8008c28:	680e      	ldr	r6, [r1, #0]
 8008c2a:	bf08      	it	eq
 8008c2c:	694b      	ldreq	r3, [r1, #20]
 8008c2e:	600f      	str	r7, [r1, #0]
 8008c30:	bf18      	it	ne
 8008c32:	2300      	movne	r3, #0
 8008c34:	eba6 0807 	sub.w	r8, r6, r7
 8008c38:	608b      	str	r3, [r1, #8]
 8008c3a:	f1b8 0f00 	cmp.w	r8, #0
 8008c3e:	dd9c      	ble.n	8008b7a <__sflush_r+0x1a>
 8008c40:	6a21      	ldr	r1, [r4, #32]
 8008c42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c44:	4643      	mov	r3, r8
 8008c46:	463a      	mov	r2, r7
 8008c48:	4628      	mov	r0, r5
 8008c4a:	47b0      	blx	r6
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	dc06      	bgt.n	8008c5e <__sflush_r+0xfe>
 8008c50:	89a3      	ldrh	r3, [r4, #12]
 8008c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c56:	81a3      	strh	r3, [r4, #12]
 8008c58:	f04f 30ff 	mov.w	r0, #4294967295
 8008c5c:	e78e      	b.n	8008b7c <__sflush_r+0x1c>
 8008c5e:	4407      	add	r7, r0
 8008c60:	eba8 0800 	sub.w	r8, r8, r0
 8008c64:	e7e9      	b.n	8008c3a <__sflush_r+0xda>
 8008c66:	bf00      	nop
 8008c68:	20400001 	.word	0x20400001

08008c6c <_fflush_r>:
 8008c6c:	b538      	push	{r3, r4, r5, lr}
 8008c6e:	690b      	ldr	r3, [r1, #16]
 8008c70:	4605      	mov	r5, r0
 8008c72:	460c      	mov	r4, r1
 8008c74:	b913      	cbnz	r3, 8008c7c <_fflush_r+0x10>
 8008c76:	2500      	movs	r5, #0
 8008c78:	4628      	mov	r0, r5
 8008c7a:	bd38      	pop	{r3, r4, r5, pc}
 8008c7c:	b118      	cbz	r0, 8008c86 <_fflush_r+0x1a>
 8008c7e:	6983      	ldr	r3, [r0, #24]
 8008c80:	b90b      	cbnz	r3, 8008c86 <_fflush_r+0x1a>
 8008c82:	f000 f887 	bl	8008d94 <__sinit>
 8008c86:	4b14      	ldr	r3, [pc, #80]	; (8008cd8 <_fflush_r+0x6c>)
 8008c88:	429c      	cmp	r4, r3
 8008c8a:	d11b      	bne.n	8008cc4 <_fflush_r+0x58>
 8008c8c:	686c      	ldr	r4, [r5, #4]
 8008c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d0ef      	beq.n	8008c76 <_fflush_r+0xa>
 8008c96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c98:	07d0      	lsls	r0, r2, #31
 8008c9a:	d404      	bmi.n	8008ca6 <_fflush_r+0x3a>
 8008c9c:	0599      	lsls	r1, r3, #22
 8008c9e:	d402      	bmi.n	8008ca6 <_fflush_r+0x3a>
 8008ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ca2:	f000 fc9a 	bl	80095da <__retarget_lock_acquire_recursive>
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	4621      	mov	r1, r4
 8008caa:	f7ff ff59 	bl	8008b60 <__sflush_r>
 8008cae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cb0:	07da      	lsls	r2, r3, #31
 8008cb2:	4605      	mov	r5, r0
 8008cb4:	d4e0      	bmi.n	8008c78 <_fflush_r+0xc>
 8008cb6:	89a3      	ldrh	r3, [r4, #12]
 8008cb8:	059b      	lsls	r3, r3, #22
 8008cba:	d4dd      	bmi.n	8008c78 <_fflush_r+0xc>
 8008cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cbe:	f000 fc8d 	bl	80095dc <__retarget_lock_release_recursive>
 8008cc2:	e7d9      	b.n	8008c78 <_fflush_r+0xc>
 8008cc4:	4b05      	ldr	r3, [pc, #20]	; (8008cdc <_fflush_r+0x70>)
 8008cc6:	429c      	cmp	r4, r3
 8008cc8:	d101      	bne.n	8008cce <_fflush_r+0x62>
 8008cca:	68ac      	ldr	r4, [r5, #8]
 8008ccc:	e7df      	b.n	8008c8e <_fflush_r+0x22>
 8008cce:	4b04      	ldr	r3, [pc, #16]	; (8008ce0 <_fflush_r+0x74>)
 8008cd0:	429c      	cmp	r4, r3
 8008cd2:	bf08      	it	eq
 8008cd4:	68ec      	ldreq	r4, [r5, #12]
 8008cd6:	e7da      	b.n	8008c8e <_fflush_r+0x22>
 8008cd8:	0800bd4c 	.word	0x0800bd4c
 8008cdc:	0800bd6c 	.word	0x0800bd6c
 8008ce0:	0800bd2c 	.word	0x0800bd2c

08008ce4 <std>:
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	b510      	push	{r4, lr}
 8008ce8:	4604      	mov	r4, r0
 8008cea:	e9c0 3300 	strd	r3, r3, [r0]
 8008cee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cf2:	6083      	str	r3, [r0, #8]
 8008cf4:	8181      	strh	r1, [r0, #12]
 8008cf6:	6643      	str	r3, [r0, #100]	; 0x64
 8008cf8:	81c2      	strh	r2, [r0, #14]
 8008cfa:	6183      	str	r3, [r0, #24]
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	2208      	movs	r2, #8
 8008d00:	305c      	adds	r0, #92	; 0x5c
 8008d02:	f7fd f8c5 	bl	8005e90 <memset>
 8008d06:	4b05      	ldr	r3, [pc, #20]	; (8008d1c <std+0x38>)
 8008d08:	6263      	str	r3, [r4, #36]	; 0x24
 8008d0a:	4b05      	ldr	r3, [pc, #20]	; (8008d20 <std+0x3c>)
 8008d0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d0e:	4b05      	ldr	r3, [pc, #20]	; (8008d24 <std+0x40>)
 8008d10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d12:	4b05      	ldr	r3, [pc, #20]	; (8008d28 <std+0x44>)
 8008d14:	6224      	str	r4, [r4, #32]
 8008d16:	6323      	str	r3, [r4, #48]	; 0x30
 8008d18:	bd10      	pop	{r4, pc}
 8008d1a:	bf00      	nop
 8008d1c:	0800a781 	.word	0x0800a781
 8008d20:	0800a7a3 	.word	0x0800a7a3
 8008d24:	0800a7db 	.word	0x0800a7db
 8008d28:	0800a7ff 	.word	0x0800a7ff

08008d2c <_cleanup_r>:
 8008d2c:	4901      	ldr	r1, [pc, #4]	; (8008d34 <_cleanup_r+0x8>)
 8008d2e:	f000 b8c1 	b.w	8008eb4 <_fwalk_reent>
 8008d32:	bf00      	nop
 8008d34:	08008c6d 	.word	0x08008c6d

08008d38 <__sfmoreglue>:
 8008d38:	b570      	push	{r4, r5, r6, lr}
 8008d3a:	1e4a      	subs	r2, r1, #1
 8008d3c:	2568      	movs	r5, #104	; 0x68
 8008d3e:	4355      	muls	r5, r2
 8008d40:	460e      	mov	r6, r1
 8008d42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d46:	f001 f9f1 	bl	800a12c <_malloc_r>
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	b140      	cbz	r0, 8008d60 <__sfmoreglue+0x28>
 8008d4e:	2100      	movs	r1, #0
 8008d50:	e9c0 1600 	strd	r1, r6, [r0]
 8008d54:	300c      	adds	r0, #12
 8008d56:	60a0      	str	r0, [r4, #8]
 8008d58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d5c:	f7fd f898 	bl	8005e90 <memset>
 8008d60:	4620      	mov	r0, r4
 8008d62:	bd70      	pop	{r4, r5, r6, pc}

08008d64 <__sfp_lock_acquire>:
 8008d64:	4801      	ldr	r0, [pc, #4]	; (8008d6c <__sfp_lock_acquire+0x8>)
 8008d66:	f000 bc38 	b.w	80095da <__retarget_lock_acquire_recursive>
 8008d6a:	bf00      	nop
 8008d6c:	20000744 	.word	0x20000744

08008d70 <__sfp_lock_release>:
 8008d70:	4801      	ldr	r0, [pc, #4]	; (8008d78 <__sfp_lock_release+0x8>)
 8008d72:	f000 bc33 	b.w	80095dc <__retarget_lock_release_recursive>
 8008d76:	bf00      	nop
 8008d78:	20000744 	.word	0x20000744

08008d7c <__sinit_lock_acquire>:
 8008d7c:	4801      	ldr	r0, [pc, #4]	; (8008d84 <__sinit_lock_acquire+0x8>)
 8008d7e:	f000 bc2c 	b.w	80095da <__retarget_lock_acquire_recursive>
 8008d82:	bf00      	nop
 8008d84:	2000073f 	.word	0x2000073f

08008d88 <__sinit_lock_release>:
 8008d88:	4801      	ldr	r0, [pc, #4]	; (8008d90 <__sinit_lock_release+0x8>)
 8008d8a:	f000 bc27 	b.w	80095dc <__retarget_lock_release_recursive>
 8008d8e:	bf00      	nop
 8008d90:	2000073f 	.word	0x2000073f

08008d94 <__sinit>:
 8008d94:	b510      	push	{r4, lr}
 8008d96:	4604      	mov	r4, r0
 8008d98:	f7ff fff0 	bl	8008d7c <__sinit_lock_acquire>
 8008d9c:	69a3      	ldr	r3, [r4, #24]
 8008d9e:	b11b      	cbz	r3, 8008da8 <__sinit+0x14>
 8008da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008da4:	f7ff bff0 	b.w	8008d88 <__sinit_lock_release>
 8008da8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008dac:	6523      	str	r3, [r4, #80]	; 0x50
 8008dae:	4b13      	ldr	r3, [pc, #76]	; (8008dfc <__sinit+0x68>)
 8008db0:	4a13      	ldr	r2, [pc, #76]	; (8008e00 <__sinit+0x6c>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008db6:	42a3      	cmp	r3, r4
 8008db8:	bf04      	itt	eq
 8008dba:	2301      	moveq	r3, #1
 8008dbc:	61a3      	streq	r3, [r4, #24]
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f000 f820 	bl	8008e04 <__sfp>
 8008dc4:	6060      	str	r0, [r4, #4]
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f000 f81c 	bl	8008e04 <__sfp>
 8008dcc:	60a0      	str	r0, [r4, #8]
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f000 f818 	bl	8008e04 <__sfp>
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	60e0      	str	r0, [r4, #12]
 8008dd8:	2104      	movs	r1, #4
 8008dda:	6860      	ldr	r0, [r4, #4]
 8008ddc:	f7ff ff82 	bl	8008ce4 <std>
 8008de0:	68a0      	ldr	r0, [r4, #8]
 8008de2:	2201      	movs	r2, #1
 8008de4:	2109      	movs	r1, #9
 8008de6:	f7ff ff7d 	bl	8008ce4 <std>
 8008dea:	68e0      	ldr	r0, [r4, #12]
 8008dec:	2202      	movs	r2, #2
 8008dee:	2112      	movs	r1, #18
 8008df0:	f7ff ff78 	bl	8008ce4 <std>
 8008df4:	2301      	movs	r3, #1
 8008df6:	61a3      	str	r3, [r4, #24]
 8008df8:	e7d2      	b.n	8008da0 <__sinit+0xc>
 8008dfa:	bf00      	nop
 8008dfc:	0800ba68 	.word	0x0800ba68
 8008e00:	08008d2d 	.word	0x08008d2d

08008e04 <__sfp>:
 8008e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e06:	4607      	mov	r7, r0
 8008e08:	f7ff ffac 	bl	8008d64 <__sfp_lock_acquire>
 8008e0c:	4b1e      	ldr	r3, [pc, #120]	; (8008e88 <__sfp+0x84>)
 8008e0e:	681e      	ldr	r6, [r3, #0]
 8008e10:	69b3      	ldr	r3, [r6, #24]
 8008e12:	b913      	cbnz	r3, 8008e1a <__sfp+0x16>
 8008e14:	4630      	mov	r0, r6
 8008e16:	f7ff ffbd 	bl	8008d94 <__sinit>
 8008e1a:	3648      	adds	r6, #72	; 0x48
 8008e1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e20:	3b01      	subs	r3, #1
 8008e22:	d503      	bpl.n	8008e2c <__sfp+0x28>
 8008e24:	6833      	ldr	r3, [r6, #0]
 8008e26:	b30b      	cbz	r3, 8008e6c <__sfp+0x68>
 8008e28:	6836      	ldr	r6, [r6, #0]
 8008e2a:	e7f7      	b.n	8008e1c <__sfp+0x18>
 8008e2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e30:	b9d5      	cbnz	r5, 8008e68 <__sfp+0x64>
 8008e32:	4b16      	ldr	r3, [pc, #88]	; (8008e8c <__sfp+0x88>)
 8008e34:	60e3      	str	r3, [r4, #12]
 8008e36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e3a:	6665      	str	r5, [r4, #100]	; 0x64
 8008e3c:	f000 fbcc 	bl	80095d8 <__retarget_lock_init_recursive>
 8008e40:	f7ff ff96 	bl	8008d70 <__sfp_lock_release>
 8008e44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e4c:	6025      	str	r5, [r4, #0]
 8008e4e:	61a5      	str	r5, [r4, #24]
 8008e50:	2208      	movs	r2, #8
 8008e52:	4629      	mov	r1, r5
 8008e54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e58:	f7fd f81a 	bl	8005e90 <memset>
 8008e5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e64:	4620      	mov	r0, r4
 8008e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e68:	3468      	adds	r4, #104	; 0x68
 8008e6a:	e7d9      	b.n	8008e20 <__sfp+0x1c>
 8008e6c:	2104      	movs	r1, #4
 8008e6e:	4638      	mov	r0, r7
 8008e70:	f7ff ff62 	bl	8008d38 <__sfmoreglue>
 8008e74:	4604      	mov	r4, r0
 8008e76:	6030      	str	r0, [r6, #0]
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d1d5      	bne.n	8008e28 <__sfp+0x24>
 8008e7c:	f7ff ff78 	bl	8008d70 <__sfp_lock_release>
 8008e80:	230c      	movs	r3, #12
 8008e82:	603b      	str	r3, [r7, #0]
 8008e84:	e7ee      	b.n	8008e64 <__sfp+0x60>
 8008e86:	bf00      	nop
 8008e88:	0800ba68 	.word	0x0800ba68
 8008e8c:	ffff0001 	.word	0xffff0001

08008e90 <fiprintf>:
 8008e90:	b40e      	push	{r1, r2, r3}
 8008e92:	b503      	push	{r0, r1, lr}
 8008e94:	4601      	mov	r1, r0
 8008e96:	ab03      	add	r3, sp, #12
 8008e98:	4805      	ldr	r0, [pc, #20]	; (8008eb0 <fiprintf+0x20>)
 8008e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e9e:	6800      	ldr	r0, [r0, #0]
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	f001 fb23 	bl	800a4ec <_vfiprintf_r>
 8008ea6:	b002      	add	sp, #8
 8008ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008eac:	b003      	add	sp, #12
 8008eae:	4770      	bx	lr
 8008eb0:	20000014 	.word	0x20000014

08008eb4 <_fwalk_reent>:
 8008eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eb8:	4606      	mov	r6, r0
 8008eba:	4688      	mov	r8, r1
 8008ebc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ec0:	2700      	movs	r7, #0
 8008ec2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ec6:	f1b9 0901 	subs.w	r9, r9, #1
 8008eca:	d505      	bpl.n	8008ed8 <_fwalk_reent+0x24>
 8008ecc:	6824      	ldr	r4, [r4, #0]
 8008ece:	2c00      	cmp	r4, #0
 8008ed0:	d1f7      	bne.n	8008ec2 <_fwalk_reent+0xe>
 8008ed2:	4638      	mov	r0, r7
 8008ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ed8:	89ab      	ldrh	r3, [r5, #12]
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d907      	bls.n	8008eee <_fwalk_reent+0x3a>
 8008ede:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	d003      	beq.n	8008eee <_fwalk_reent+0x3a>
 8008ee6:	4629      	mov	r1, r5
 8008ee8:	4630      	mov	r0, r6
 8008eea:	47c0      	blx	r8
 8008eec:	4307      	orrs	r7, r0
 8008eee:	3568      	adds	r5, #104	; 0x68
 8008ef0:	e7e9      	b.n	8008ec6 <_fwalk_reent+0x12>

08008ef2 <rshift>:
 8008ef2:	6903      	ldr	r3, [r0, #16]
 8008ef4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008efc:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008f00:	f100 0414 	add.w	r4, r0, #20
 8008f04:	dd45      	ble.n	8008f92 <rshift+0xa0>
 8008f06:	f011 011f 	ands.w	r1, r1, #31
 8008f0a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008f0e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008f12:	d10c      	bne.n	8008f2e <rshift+0x3c>
 8008f14:	f100 0710 	add.w	r7, r0, #16
 8008f18:	4629      	mov	r1, r5
 8008f1a:	42b1      	cmp	r1, r6
 8008f1c:	d334      	bcc.n	8008f88 <rshift+0x96>
 8008f1e:	1a9b      	subs	r3, r3, r2
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	1eea      	subs	r2, r5, #3
 8008f24:	4296      	cmp	r6, r2
 8008f26:	bf38      	it	cc
 8008f28:	2300      	movcc	r3, #0
 8008f2a:	4423      	add	r3, r4
 8008f2c:	e015      	b.n	8008f5a <rshift+0x68>
 8008f2e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008f32:	f1c1 0820 	rsb	r8, r1, #32
 8008f36:	40cf      	lsrs	r7, r1
 8008f38:	f105 0e04 	add.w	lr, r5, #4
 8008f3c:	46a1      	mov	r9, r4
 8008f3e:	4576      	cmp	r6, lr
 8008f40:	46f4      	mov	ip, lr
 8008f42:	d815      	bhi.n	8008f70 <rshift+0x7e>
 8008f44:	1a9b      	subs	r3, r3, r2
 8008f46:	009a      	lsls	r2, r3, #2
 8008f48:	3a04      	subs	r2, #4
 8008f4a:	3501      	adds	r5, #1
 8008f4c:	42ae      	cmp	r6, r5
 8008f4e:	bf38      	it	cc
 8008f50:	2200      	movcc	r2, #0
 8008f52:	18a3      	adds	r3, r4, r2
 8008f54:	50a7      	str	r7, [r4, r2]
 8008f56:	b107      	cbz	r7, 8008f5a <rshift+0x68>
 8008f58:	3304      	adds	r3, #4
 8008f5a:	1b1a      	subs	r2, r3, r4
 8008f5c:	42a3      	cmp	r3, r4
 8008f5e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008f62:	bf08      	it	eq
 8008f64:	2300      	moveq	r3, #0
 8008f66:	6102      	str	r2, [r0, #16]
 8008f68:	bf08      	it	eq
 8008f6a:	6143      	streq	r3, [r0, #20]
 8008f6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f70:	f8dc c000 	ldr.w	ip, [ip]
 8008f74:	fa0c fc08 	lsl.w	ip, ip, r8
 8008f78:	ea4c 0707 	orr.w	r7, ip, r7
 8008f7c:	f849 7b04 	str.w	r7, [r9], #4
 8008f80:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f84:	40cf      	lsrs	r7, r1
 8008f86:	e7da      	b.n	8008f3e <rshift+0x4c>
 8008f88:	f851 cb04 	ldr.w	ip, [r1], #4
 8008f8c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008f90:	e7c3      	b.n	8008f1a <rshift+0x28>
 8008f92:	4623      	mov	r3, r4
 8008f94:	e7e1      	b.n	8008f5a <rshift+0x68>

08008f96 <__hexdig_fun>:
 8008f96:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008f9a:	2b09      	cmp	r3, #9
 8008f9c:	d802      	bhi.n	8008fa4 <__hexdig_fun+0xe>
 8008f9e:	3820      	subs	r0, #32
 8008fa0:	b2c0      	uxtb	r0, r0
 8008fa2:	4770      	bx	lr
 8008fa4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008fa8:	2b05      	cmp	r3, #5
 8008faa:	d801      	bhi.n	8008fb0 <__hexdig_fun+0x1a>
 8008fac:	3847      	subs	r0, #71	; 0x47
 8008fae:	e7f7      	b.n	8008fa0 <__hexdig_fun+0xa>
 8008fb0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008fb4:	2b05      	cmp	r3, #5
 8008fb6:	d801      	bhi.n	8008fbc <__hexdig_fun+0x26>
 8008fb8:	3827      	subs	r0, #39	; 0x27
 8008fba:	e7f1      	b.n	8008fa0 <__hexdig_fun+0xa>
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	4770      	bx	lr

08008fc0 <__gethex>:
 8008fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc4:	ed2d 8b02 	vpush	{d8}
 8008fc8:	b089      	sub	sp, #36	; 0x24
 8008fca:	ee08 0a10 	vmov	s16, r0
 8008fce:	9304      	str	r3, [sp, #16]
 8008fd0:	4bbc      	ldr	r3, [pc, #752]	; (80092c4 <__gethex+0x304>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	9301      	str	r3, [sp, #4]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	468b      	mov	fp, r1
 8008fda:	4690      	mov	r8, r2
 8008fdc:	f7f7 f902 	bl	80001e4 <strlen>
 8008fe0:	9b01      	ldr	r3, [sp, #4]
 8008fe2:	f8db 2000 	ldr.w	r2, [fp]
 8008fe6:	4403      	add	r3, r0
 8008fe8:	4682      	mov	sl, r0
 8008fea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008fee:	9305      	str	r3, [sp, #20]
 8008ff0:	1c93      	adds	r3, r2, #2
 8008ff2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008ff6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008ffa:	32fe      	adds	r2, #254	; 0xfe
 8008ffc:	18d1      	adds	r1, r2, r3
 8008ffe:	461f      	mov	r7, r3
 8009000:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009004:	9100      	str	r1, [sp, #0]
 8009006:	2830      	cmp	r0, #48	; 0x30
 8009008:	d0f8      	beq.n	8008ffc <__gethex+0x3c>
 800900a:	f7ff ffc4 	bl	8008f96 <__hexdig_fun>
 800900e:	4604      	mov	r4, r0
 8009010:	2800      	cmp	r0, #0
 8009012:	d13a      	bne.n	800908a <__gethex+0xca>
 8009014:	9901      	ldr	r1, [sp, #4]
 8009016:	4652      	mov	r2, sl
 8009018:	4638      	mov	r0, r7
 800901a:	f001 fbf4 	bl	800a806 <strncmp>
 800901e:	4605      	mov	r5, r0
 8009020:	2800      	cmp	r0, #0
 8009022:	d168      	bne.n	80090f6 <__gethex+0x136>
 8009024:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009028:	eb07 060a 	add.w	r6, r7, sl
 800902c:	f7ff ffb3 	bl	8008f96 <__hexdig_fun>
 8009030:	2800      	cmp	r0, #0
 8009032:	d062      	beq.n	80090fa <__gethex+0x13a>
 8009034:	4633      	mov	r3, r6
 8009036:	7818      	ldrb	r0, [r3, #0]
 8009038:	2830      	cmp	r0, #48	; 0x30
 800903a:	461f      	mov	r7, r3
 800903c:	f103 0301 	add.w	r3, r3, #1
 8009040:	d0f9      	beq.n	8009036 <__gethex+0x76>
 8009042:	f7ff ffa8 	bl	8008f96 <__hexdig_fun>
 8009046:	2301      	movs	r3, #1
 8009048:	fab0 f480 	clz	r4, r0
 800904c:	0964      	lsrs	r4, r4, #5
 800904e:	4635      	mov	r5, r6
 8009050:	9300      	str	r3, [sp, #0]
 8009052:	463a      	mov	r2, r7
 8009054:	4616      	mov	r6, r2
 8009056:	3201      	adds	r2, #1
 8009058:	7830      	ldrb	r0, [r6, #0]
 800905a:	f7ff ff9c 	bl	8008f96 <__hexdig_fun>
 800905e:	2800      	cmp	r0, #0
 8009060:	d1f8      	bne.n	8009054 <__gethex+0x94>
 8009062:	9901      	ldr	r1, [sp, #4]
 8009064:	4652      	mov	r2, sl
 8009066:	4630      	mov	r0, r6
 8009068:	f001 fbcd 	bl	800a806 <strncmp>
 800906c:	b980      	cbnz	r0, 8009090 <__gethex+0xd0>
 800906e:	b94d      	cbnz	r5, 8009084 <__gethex+0xc4>
 8009070:	eb06 050a 	add.w	r5, r6, sl
 8009074:	462a      	mov	r2, r5
 8009076:	4616      	mov	r6, r2
 8009078:	3201      	adds	r2, #1
 800907a:	7830      	ldrb	r0, [r6, #0]
 800907c:	f7ff ff8b 	bl	8008f96 <__hexdig_fun>
 8009080:	2800      	cmp	r0, #0
 8009082:	d1f8      	bne.n	8009076 <__gethex+0xb6>
 8009084:	1bad      	subs	r5, r5, r6
 8009086:	00ad      	lsls	r5, r5, #2
 8009088:	e004      	b.n	8009094 <__gethex+0xd4>
 800908a:	2400      	movs	r4, #0
 800908c:	4625      	mov	r5, r4
 800908e:	e7e0      	b.n	8009052 <__gethex+0x92>
 8009090:	2d00      	cmp	r5, #0
 8009092:	d1f7      	bne.n	8009084 <__gethex+0xc4>
 8009094:	7833      	ldrb	r3, [r6, #0]
 8009096:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800909a:	2b50      	cmp	r3, #80	; 0x50
 800909c:	d13b      	bne.n	8009116 <__gethex+0x156>
 800909e:	7873      	ldrb	r3, [r6, #1]
 80090a0:	2b2b      	cmp	r3, #43	; 0x2b
 80090a2:	d02c      	beq.n	80090fe <__gethex+0x13e>
 80090a4:	2b2d      	cmp	r3, #45	; 0x2d
 80090a6:	d02e      	beq.n	8009106 <__gethex+0x146>
 80090a8:	1c71      	adds	r1, r6, #1
 80090aa:	f04f 0900 	mov.w	r9, #0
 80090ae:	7808      	ldrb	r0, [r1, #0]
 80090b0:	f7ff ff71 	bl	8008f96 <__hexdig_fun>
 80090b4:	1e43      	subs	r3, r0, #1
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	2b18      	cmp	r3, #24
 80090ba:	d82c      	bhi.n	8009116 <__gethex+0x156>
 80090bc:	f1a0 0210 	sub.w	r2, r0, #16
 80090c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80090c4:	f7ff ff67 	bl	8008f96 <__hexdig_fun>
 80090c8:	1e43      	subs	r3, r0, #1
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	2b18      	cmp	r3, #24
 80090ce:	d91d      	bls.n	800910c <__gethex+0x14c>
 80090d0:	f1b9 0f00 	cmp.w	r9, #0
 80090d4:	d000      	beq.n	80090d8 <__gethex+0x118>
 80090d6:	4252      	negs	r2, r2
 80090d8:	4415      	add	r5, r2
 80090da:	f8cb 1000 	str.w	r1, [fp]
 80090de:	b1e4      	cbz	r4, 800911a <__gethex+0x15a>
 80090e0:	9b00      	ldr	r3, [sp, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	bf14      	ite	ne
 80090e6:	2700      	movne	r7, #0
 80090e8:	2706      	moveq	r7, #6
 80090ea:	4638      	mov	r0, r7
 80090ec:	b009      	add	sp, #36	; 0x24
 80090ee:	ecbd 8b02 	vpop	{d8}
 80090f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f6:	463e      	mov	r6, r7
 80090f8:	4625      	mov	r5, r4
 80090fa:	2401      	movs	r4, #1
 80090fc:	e7ca      	b.n	8009094 <__gethex+0xd4>
 80090fe:	f04f 0900 	mov.w	r9, #0
 8009102:	1cb1      	adds	r1, r6, #2
 8009104:	e7d3      	b.n	80090ae <__gethex+0xee>
 8009106:	f04f 0901 	mov.w	r9, #1
 800910a:	e7fa      	b.n	8009102 <__gethex+0x142>
 800910c:	230a      	movs	r3, #10
 800910e:	fb03 0202 	mla	r2, r3, r2, r0
 8009112:	3a10      	subs	r2, #16
 8009114:	e7d4      	b.n	80090c0 <__gethex+0x100>
 8009116:	4631      	mov	r1, r6
 8009118:	e7df      	b.n	80090da <__gethex+0x11a>
 800911a:	1bf3      	subs	r3, r6, r7
 800911c:	3b01      	subs	r3, #1
 800911e:	4621      	mov	r1, r4
 8009120:	2b07      	cmp	r3, #7
 8009122:	dc0b      	bgt.n	800913c <__gethex+0x17c>
 8009124:	ee18 0a10 	vmov	r0, s16
 8009128:	f000 fae6 	bl	80096f8 <_Balloc>
 800912c:	4604      	mov	r4, r0
 800912e:	b940      	cbnz	r0, 8009142 <__gethex+0x182>
 8009130:	4b65      	ldr	r3, [pc, #404]	; (80092c8 <__gethex+0x308>)
 8009132:	4602      	mov	r2, r0
 8009134:	21de      	movs	r1, #222	; 0xde
 8009136:	4865      	ldr	r0, [pc, #404]	; (80092cc <__gethex+0x30c>)
 8009138:	f7fe fe7a 	bl	8007e30 <__assert_func>
 800913c:	3101      	adds	r1, #1
 800913e:	105b      	asrs	r3, r3, #1
 8009140:	e7ee      	b.n	8009120 <__gethex+0x160>
 8009142:	f100 0914 	add.w	r9, r0, #20
 8009146:	f04f 0b00 	mov.w	fp, #0
 800914a:	f1ca 0301 	rsb	r3, sl, #1
 800914e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009152:	f8cd b000 	str.w	fp, [sp]
 8009156:	9306      	str	r3, [sp, #24]
 8009158:	42b7      	cmp	r7, r6
 800915a:	d340      	bcc.n	80091de <__gethex+0x21e>
 800915c:	9802      	ldr	r0, [sp, #8]
 800915e:	9b00      	ldr	r3, [sp, #0]
 8009160:	f840 3b04 	str.w	r3, [r0], #4
 8009164:	eba0 0009 	sub.w	r0, r0, r9
 8009168:	1080      	asrs	r0, r0, #2
 800916a:	0146      	lsls	r6, r0, #5
 800916c:	6120      	str	r0, [r4, #16]
 800916e:	4618      	mov	r0, r3
 8009170:	f000 fbb8 	bl	80098e4 <__hi0bits>
 8009174:	1a30      	subs	r0, r6, r0
 8009176:	f8d8 6000 	ldr.w	r6, [r8]
 800917a:	42b0      	cmp	r0, r6
 800917c:	dd63      	ble.n	8009246 <__gethex+0x286>
 800917e:	1b87      	subs	r7, r0, r6
 8009180:	4639      	mov	r1, r7
 8009182:	4620      	mov	r0, r4
 8009184:	f000 ff52 	bl	800a02c <__any_on>
 8009188:	4682      	mov	sl, r0
 800918a:	b1a8      	cbz	r0, 80091b8 <__gethex+0x1f8>
 800918c:	1e7b      	subs	r3, r7, #1
 800918e:	1159      	asrs	r1, r3, #5
 8009190:	f003 021f 	and.w	r2, r3, #31
 8009194:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009198:	f04f 0a01 	mov.w	sl, #1
 800919c:	fa0a f202 	lsl.w	r2, sl, r2
 80091a0:	420a      	tst	r2, r1
 80091a2:	d009      	beq.n	80091b8 <__gethex+0x1f8>
 80091a4:	4553      	cmp	r3, sl
 80091a6:	dd05      	ble.n	80091b4 <__gethex+0x1f4>
 80091a8:	1eb9      	subs	r1, r7, #2
 80091aa:	4620      	mov	r0, r4
 80091ac:	f000 ff3e 	bl	800a02c <__any_on>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d145      	bne.n	8009240 <__gethex+0x280>
 80091b4:	f04f 0a02 	mov.w	sl, #2
 80091b8:	4639      	mov	r1, r7
 80091ba:	4620      	mov	r0, r4
 80091bc:	f7ff fe99 	bl	8008ef2 <rshift>
 80091c0:	443d      	add	r5, r7
 80091c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80091c6:	42ab      	cmp	r3, r5
 80091c8:	da4c      	bge.n	8009264 <__gethex+0x2a4>
 80091ca:	ee18 0a10 	vmov	r0, s16
 80091ce:	4621      	mov	r1, r4
 80091d0:	f000 fad2 	bl	8009778 <_Bfree>
 80091d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80091d6:	2300      	movs	r3, #0
 80091d8:	6013      	str	r3, [r2, #0]
 80091da:	27a3      	movs	r7, #163	; 0xa3
 80091dc:	e785      	b.n	80090ea <__gethex+0x12a>
 80091de:	1e73      	subs	r3, r6, #1
 80091e0:	9a05      	ldr	r2, [sp, #20]
 80091e2:	9303      	str	r3, [sp, #12]
 80091e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d019      	beq.n	8009220 <__gethex+0x260>
 80091ec:	f1bb 0f20 	cmp.w	fp, #32
 80091f0:	d107      	bne.n	8009202 <__gethex+0x242>
 80091f2:	9b02      	ldr	r3, [sp, #8]
 80091f4:	9a00      	ldr	r2, [sp, #0]
 80091f6:	f843 2b04 	str.w	r2, [r3], #4
 80091fa:	9302      	str	r3, [sp, #8]
 80091fc:	2300      	movs	r3, #0
 80091fe:	9300      	str	r3, [sp, #0]
 8009200:	469b      	mov	fp, r3
 8009202:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009206:	f7ff fec6 	bl	8008f96 <__hexdig_fun>
 800920a:	9b00      	ldr	r3, [sp, #0]
 800920c:	f000 000f 	and.w	r0, r0, #15
 8009210:	fa00 f00b 	lsl.w	r0, r0, fp
 8009214:	4303      	orrs	r3, r0
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	f10b 0b04 	add.w	fp, fp, #4
 800921c:	9b03      	ldr	r3, [sp, #12]
 800921e:	e00d      	b.n	800923c <__gethex+0x27c>
 8009220:	9b03      	ldr	r3, [sp, #12]
 8009222:	9a06      	ldr	r2, [sp, #24]
 8009224:	4413      	add	r3, r2
 8009226:	42bb      	cmp	r3, r7
 8009228:	d3e0      	bcc.n	80091ec <__gethex+0x22c>
 800922a:	4618      	mov	r0, r3
 800922c:	9901      	ldr	r1, [sp, #4]
 800922e:	9307      	str	r3, [sp, #28]
 8009230:	4652      	mov	r2, sl
 8009232:	f001 fae8 	bl	800a806 <strncmp>
 8009236:	9b07      	ldr	r3, [sp, #28]
 8009238:	2800      	cmp	r0, #0
 800923a:	d1d7      	bne.n	80091ec <__gethex+0x22c>
 800923c:	461e      	mov	r6, r3
 800923e:	e78b      	b.n	8009158 <__gethex+0x198>
 8009240:	f04f 0a03 	mov.w	sl, #3
 8009244:	e7b8      	b.n	80091b8 <__gethex+0x1f8>
 8009246:	da0a      	bge.n	800925e <__gethex+0x29e>
 8009248:	1a37      	subs	r7, r6, r0
 800924a:	4621      	mov	r1, r4
 800924c:	ee18 0a10 	vmov	r0, s16
 8009250:	463a      	mov	r2, r7
 8009252:	f000 fcad 	bl	8009bb0 <__lshift>
 8009256:	1bed      	subs	r5, r5, r7
 8009258:	4604      	mov	r4, r0
 800925a:	f100 0914 	add.w	r9, r0, #20
 800925e:	f04f 0a00 	mov.w	sl, #0
 8009262:	e7ae      	b.n	80091c2 <__gethex+0x202>
 8009264:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009268:	42a8      	cmp	r0, r5
 800926a:	dd72      	ble.n	8009352 <__gethex+0x392>
 800926c:	1b45      	subs	r5, r0, r5
 800926e:	42ae      	cmp	r6, r5
 8009270:	dc36      	bgt.n	80092e0 <__gethex+0x320>
 8009272:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009276:	2b02      	cmp	r3, #2
 8009278:	d02a      	beq.n	80092d0 <__gethex+0x310>
 800927a:	2b03      	cmp	r3, #3
 800927c:	d02c      	beq.n	80092d8 <__gethex+0x318>
 800927e:	2b01      	cmp	r3, #1
 8009280:	d115      	bne.n	80092ae <__gethex+0x2ee>
 8009282:	42ae      	cmp	r6, r5
 8009284:	d113      	bne.n	80092ae <__gethex+0x2ee>
 8009286:	2e01      	cmp	r6, #1
 8009288:	d10b      	bne.n	80092a2 <__gethex+0x2e2>
 800928a:	9a04      	ldr	r2, [sp, #16]
 800928c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009290:	6013      	str	r3, [r2, #0]
 8009292:	2301      	movs	r3, #1
 8009294:	6123      	str	r3, [r4, #16]
 8009296:	f8c9 3000 	str.w	r3, [r9]
 800929a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800929c:	2762      	movs	r7, #98	; 0x62
 800929e:	601c      	str	r4, [r3, #0]
 80092a0:	e723      	b.n	80090ea <__gethex+0x12a>
 80092a2:	1e71      	subs	r1, r6, #1
 80092a4:	4620      	mov	r0, r4
 80092a6:	f000 fec1 	bl	800a02c <__any_on>
 80092aa:	2800      	cmp	r0, #0
 80092ac:	d1ed      	bne.n	800928a <__gethex+0x2ca>
 80092ae:	ee18 0a10 	vmov	r0, s16
 80092b2:	4621      	mov	r1, r4
 80092b4:	f000 fa60 	bl	8009778 <_Bfree>
 80092b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80092ba:	2300      	movs	r3, #0
 80092bc:	6013      	str	r3, [r2, #0]
 80092be:	2750      	movs	r7, #80	; 0x50
 80092c0:	e713      	b.n	80090ea <__gethex+0x12a>
 80092c2:	bf00      	nop
 80092c4:	0800bdf8 	.word	0x0800bdf8
 80092c8:	0800bd19 	.word	0x0800bd19
 80092cc:	0800bd8c 	.word	0x0800bd8c
 80092d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1eb      	bne.n	80092ae <__gethex+0x2ee>
 80092d6:	e7d8      	b.n	800928a <__gethex+0x2ca>
 80092d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1d5      	bne.n	800928a <__gethex+0x2ca>
 80092de:	e7e6      	b.n	80092ae <__gethex+0x2ee>
 80092e0:	1e6f      	subs	r7, r5, #1
 80092e2:	f1ba 0f00 	cmp.w	sl, #0
 80092e6:	d131      	bne.n	800934c <__gethex+0x38c>
 80092e8:	b127      	cbz	r7, 80092f4 <__gethex+0x334>
 80092ea:	4639      	mov	r1, r7
 80092ec:	4620      	mov	r0, r4
 80092ee:	f000 fe9d 	bl	800a02c <__any_on>
 80092f2:	4682      	mov	sl, r0
 80092f4:	117b      	asrs	r3, r7, #5
 80092f6:	2101      	movs	r1, #1
 80092f8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80092fc:	f007 071f 	and.w	r7, r7, #31
 8009300:	fa01 f707 	lsl.w	r7, r1, r7
 8009304:	421f      	tst	r7, r3
 8009306:	4629      	mov	r1, r5
 8009308:	4620      	mov	r0, r4
 800930a:	bf18      	it	ne
 800930c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009310:	1b76      	subs	r6, r6, r5
 8009312:	f7ff fdee 	bl	8008ef2 <rshift>
 8009316:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800931a:	2702      	movs	r7, #2
 800931c:	f1ba 0f00 	cmp.w	sl, #0
 8009320:	d048      	beq.n	80093b4 <__gethex+0x3f4>
 8009322:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009326:	2b02      	cmp	r3, #2
 8009328:	d015      	beq.n	8009356 <__gethex+0x396>
 800932a:	2b03      	cmp	r3, #3
 800932c:	d017      	beq.n	800935e <__gethex+0x39e>
 800932e:	2b01      	cmp	r3, #1
 8009330:	d109      	bne.n	8009346 <__gethex+0x386>
 8009332:	f01a 0f02 	tst.w	sl, #2
 8009336:	d006      	beq.n	8009346 <__gethex+0x386>
 8009338:	f8d9 0000 	ldr.w	r0, [r9]
 800933c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009340:	f01a 0f01 	tst.w	sl, #1
 8009344:	d10e      	bne.n	8009364 <__gethex+0x3a4>
 8009346:	f047 0710 	orr.w	r7, r7, #16
 800934a:	e033      	b.n	80093b4 <__gethex+0x3f4>
 800934c:	f04f 0a01 	mov.w	sl, #1
 8009350:	e7d0      	b.n	80092f4 <__gethex+0x334>
 8009352:	2701      	movs	r7, #1
 8009354:	e7e2      	b.n	800931c <__gethex+0x35c>
 8009356:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009358:	f1c3 0301 	rsb	r3, r3, #1
 800935c:	9315      	str	r3, [sp, #84]	; 0x54
 800935e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009360:	2b00      	cmp	r3, #0
 8009362:	d0f0      	beq.n	8009346 <__gethex+0x386>
 8009364:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009368:	f104 0314 	add.w	r3, r4, #20
 800936c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009370:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009374:	f04f 0c00 	mov.w	ip, #0
 8009378:	4618      	mov	r0, r3
 800937a:	f853 2b04 	ldr.w	r2, [r3], #4
 800937e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009382:	d01c      	beq.n	80093be <__gethex+0x3fe>
 8009384:	3201      	adds	r2, #1
 8009386:	6002      	str	r2, [r0, #0]
 8009388:	2f02      	cmp	r7, #2
 800938a:	f104 0314 	add.w	r3, r4, #20
 800938e:	d13f      	bne.n	8009410 <__gethex+0x450>
 8009390:	f8d8 2000 	ldr.w	r2, [r8]
 8009394:	3a01      	subs	r2, #1
 8009396:	42b2      	cmp	r2, r6
 8009398:	d10a      	bne.n	80093b0 <__gethex+0x3f0>
 800939a:	1171      	asrs	r1, r6, #5
 800939c:	2201      	movs	r2, #1
 800939e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80093a2:	f006 061f 	and.w	r6, r6, #31
 80093a6:	fa02 f606 	lsl.w	r6, r2, r6
 80093aa:	421e      	tst	r6, r3
 80093ac:	bf18      	it	ne
 80093ae:	4617      	movne	r7, r2
 80093b0:	f047 0720 	orr.w	r7, r7, #32
 80093b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093b6:	601c      	str	r4, [r3, #0]
 80093b8:	9b04      	ldr	r3, [sp, #16]
 80093ba:	601d      	str	r5, [r3, #0]
 80093bc:	e695      	b.n	80090ea <__gethex+0x12a>
 80093be:	4299      	cmp	r1, r3
 80093c0:	f843 cc04 	str.w	ip, [r3, #-4]
 80093c4:	d8d8      	bhi.n	8009378 <__gethex+0x3b8>
 80093c6:	68a3      	ldr	r3, [r4, #8]
 80093c8:	459b      	cmp	fp, r3
 80093ca:	db19      	blt.n	8009400 <__gethex+0x440>
 80093cc:	6861      	ldr	r1, [r4, #4]
 80093ce:	ee18 0a10 	vmov	r0, s16
 80093d2:	3101      	adds	r1, #1
 80093d4:	f000 f990 	bl	80096f8 <_Balloc>
 80093d8:	4681      	mov	r9, r0
 80093da:	b918      	cbnz	r0, 80093e4 <__gethex+0x424>
 80093dc:	4b1a      	ldr	r3, [pc, #104]	; (8009448 <__gethex+0x488>)
 80093de:	4602      	mov	r2, r0
 80093e0:	2184      	movs	r1, #132	; 0x84
 80093e2:	e6a8      	b.n	8009136 <__gethex+0x176>
 80093e4:	6922      	ldr	r2, [r4, #16]
 80093e6:	3202      	adds	r2, #2
 80093e8:	f104 010c 	add.w	r1, r4, #12
 80093ec:	0092      	lsls	r2, r2, #2
 80093ee:	300c      	adds	r0, #12
 80093f0:	f000 f974 	bl	80096dc <memcpy>
 80093f4:	4621      	mov	r1, r4
 80093f6:	ee18 0a10 	vmov	r0, s16
 80093fa:	f000 f9bd 	bl	8009778 <_Bfree>
 80093fe:	464c      	mov	r4, r9
 8009400:	6923      	ldr	r3, [r4, #16]
 8009402:	1c5a      	adds	r2, r3, #1
 8009404:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009408:	6122      	str	r2, [r4, #16]
 800940a:	2201      	movs	r2, #1
 800940c:	615a      	str	r2, [r3, #20]
 800940e:	e7bb      	b.n	8009388 <__gethex+0x3c8>
 8009410:	6922      	ldr	r2, [r4, #16]
 8009412:	455a      	cmp	r2, fp
 8009414:	dd0b      	ble.n	800942e <__gethex+0x46e>
 8009416:	2101      	movs	r1, #1
 8009418:	4620      	mov	r0, r4
 800941a:	f7ff fd6a 	bl	8008ef2 <rshift>
 800941e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009422:	3501      	adds	r5, #1
 8009424:	42ab      	cmp	r3, r5
 8009426:	f6ff aed0 	blt.w	80091ca <__gethex+0x20a>
 800942a:	2701      	movs	r7, #1
 800942c:	e7c0      	b.n	80093b0 <__gethex+0x3f0>
 800942e:	f016 061f 	ands.w	r6, r6, #31
 8009432:	d0fa      	beq.n	800942a <__gethex+0x46a>
 8009434:	449a      	add	sl, r3
 8009436:	f1c6 0620 	rsb	r6, r6, #32
 800943a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800943e:	f000 fa51 	bl	80098e4 <__hi0bits>
 8009442:	42b0      	cmp	r0, r6
 8009444:	dbe7      	blt.n	8009416 <__gethex+0x456>
 8009446:	e7f0      	b.n	800942a <__gethex+0x46a>
 8009448:	0800bd19 	.word	0x0800bd19

0800944c <L_shift>:
 800944c:	f1c2 0208 	rsb	r2, r2, #8
 8009450:	0092      	lsls	r2, r2, #2
 8009452:	b570      	push	{r4, r5, r6, lr}
 8009454:	f1c2 0620 	rsb	r6, r2, #32
 8009458:	6843      	ldr	r3, [r0, #4]
 800945a:	6804      	ldr	r4, [r0, #0]
 800945c:	fa03 f506 	lsl.w	r5, r3, r6
 8009460:	432c      	orrs	r4, r5
 8009462:	40d3      	lsrs	r3, r2
 8009464:	6004      	str	r4, [r0, #0]
 8009466:	f840 3f04 	str.w	r3, [r0, #4]!
 800946a:	4288      	cmp	r0, r1
 800946c:	d3f4      	bcc.n	8009458 <L_shift+0xc>
 800946e:	bd70      	pop	{r4, r5, r6, pc}

08009470 <__match>:
 8009470:	b530      	push	{r4, r5, lr}
 8009472:	6803      	ldr	r3, [r0, #0]
 8009474:	3301      	adds	r3, #1
 8009476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800947a:	b914      	cbnz	r4, 8009482 <__match+0x12>
 800947c:	6003      	str	r3, [r0, #0]
 800947e:	2001      	movs	r0, #1
 8009480:	bd30      	pop	{r4, r5, pc}
 8009482:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009486:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800948a:	2d19      	cmp	r5, #25
 800948c:	bf98      	it	ls
 800948e:	3220      	addls	r2, #32
 8009490:	42a2      	cmp	r2, r4
 8009492:	d0f0      	beq.n	8009476 <__match+0x6>
 8009494:	2000      	movs	r0, #0
 8009496:	e7f3      	b.n	8009480 <__match+0x10>

08009498 <__hexnan>:
 8009498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800949c:	680b      	ldr	r3, [r1, #0]
 800949e:	6801      	ldr	r1, [r0, #0]
 80094a0:	115e      	asrs	r6, r3, #5
 80094a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80094a6:	f013 031f 	ands.w	r3, r3, #31
 80094aa:	b087      	sub	sp, #28
 80094ac:	bf18      	it	ne
 80094ae:	3604      	addne	r6, #4
 80094b0:	2500      	movs	r5, #0
 80094b2:	1f37      	subs	r7, r6, #4
 80094b4:	4682      	mov	sl, r0
 80094b6:	4690      	mov	r8, r2
 80094b8:	9301      	str	r3, [sp, #4]
 80094ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80094be:	46b9      	mov	r9, r7
 80094c0:	463c      	mov	r4, r7
 80094c2:	9502      	str	r5, [sp, #8]
 80094c4:	46ab      	mov	fp, r5
 80094c6:	784a      	ldrb	r2, [r1, #1]
 80094c8:	1c4b      	adds	r3, r1, #1
 80094ca:	9303      	str	r3, [sp, #12]
 80094cc:	b342      	cbz	r2, 8009520 <__hexnan+0x88>
 80094ce:	4610      	mov	r0, r2
 80094d0:	9105      	str	r1, [sp, #20]
 80094d2:	9204      	str	r2, [sp, #16]
 80094d4:	f7ff fd5f 	bl	8008f96 <__hexdig_fun>
 80094d8:	2800      	cmp	r0, #0
 80094da:	d14f      	bne.n	800957c <__hexnan+0xe4>
 80094dc:	9a04      	ldr	r2, [sp, #16]
 80094de:	9905      	ldr	r1, [sp, #20]
 80094e0:	2a20      	cmp	r2, #32
 80094e2:	d818      	bhi.n	8009516 <__hexnan+0x7e>
 80094e4:	9b02      	ldr	r3, [sp, #8]
 80094e6:	459b      	cmp	fp, r3
 80094e8:	dd13      	ble.n	8009512 <__hexnan+0x7a>
 80094ea:	454c      	cmp	r4, r9
 80094ec:	d206      	bcs.n	80094fc <__hexnan+0x64>
 80094ee:	2d07      	cmp	r5, #7
 80094f0:	dc04      	bgt.n	80094fc <__hexnan+0x64>
 80094f2:	462a      	mov	r2, r5
 80094f4:	4649      	mov	r1, r9
 80094f6:	4620      	mov	r0, r4
 80094f8:	f7ff ffa8 	bl	800944c <L_shift>
 80094fc:	4544      	cmp	r4, r8
 80094fe:	d950      	bls.n	80095a2 <__hexnan+0x10a>
 8009500:	2300      	movs	r3, #0
 8009502:	f1a4 0904 	sub.w	r9, r4, #4
 8009506:	f844 3c04 	str.w	r3, [r4, #-4]
 800950a:	f8cd b008 	str.w	fp, [sp, #8]
 800950e:	464c      	mov	r4, r9
 8009510:	461d      	mov	r5, r3
 8009512:	9903      	ldr	r1, [sp, #12]
 8009514:	e7d7      	b.n	80094c6 <__hexnan+0x2e>
 8009516:	2a29      	cmp	r2, #41	; 0x29
 8009518:	d156      	bne.n	80095c8 <__hexnan+0x130>
 800951a:	3102      	adds	r1, #2
 800951c:	f8ca 1000 	str.w	r1, [sl]
 8009520:	f1bb 0f00 	cmp.w	fp, #0
 8009524:	d050      	beq.n	80095c8 <__hexnan+0x130>
 8009526:	454c      	cmp	r4, r9
 8009528:	d206      	bcs.n	8009538 <__hexnan+0xa0>
 800952a:	2d07      	cmp	r5, #7
 800952c:	dc04      	bgt.n	8009538 <__hexnan+0xa0>
 800952e:	462a      	mov	r2, r5
 8009530:	4649      	mov	r1, r9
 8009532:	4620      	mov	r0, r4
 8009534:	f7ff ff8a 	bl	800944c <L_shift>
 8009538:	4544      	cmp	r4, r8
 800953a:	d934      	bls.n	80095a6 <__hexnan+0x10e>
 800953c:	f1a8 0204 	sub.w	r2, r8, #4
 8009540:	4623      	mov	r3, r4
 8009542:	f853 1b04 	ldr.w	r1, [r3], #4
 8009546:	f842 1f04 	str.w	r1, [r2, #4]!
 800954a:	429f      	cmp	r7, r3
 800954c:	d2f9      	bcs.n	8009542 <__hexnan+0xaa>
 800954e:	1b3b      	subs	r3, r7, r4
 8009550:	f023 0303 	bic.w	r3, r3, #3
 8009554:	3304      	adds	r3, #4
 8009556:	3401      	adds	r4, #1
 8009558:	3e03      	subs	r6, #3
 800955a:	42b4      	cmp	r4, r6
 800955c:	bf88      	it	hi
 800955e:	2304      	movhi	r3, #4
 8009560:	4443      	add	r3, r8
 8009562:	2200      	movs	r2, #0
 8009564:	f843 2b04 	str.w	r2, [r3], #4
 8009568:	429f      	cmp	r7, r3
 800956a:	d2fb      	bcs.n	8009564 <__hexnan+0xcc>
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	b91b      	cbnz	r3, 8009578 <__hexnan+0xe0>
 8009570:	4547      	cmp	r7, r8
 8009572:	d127      	bne.n	80095c4 <__hexnan+0x12c>
 8009574:	2301      	movs	r3, #1
 8009576:	603b      	str	r3, [r7, #0]
 8009578:	2005      	movs	r0, #5
 800957a:	e026      	b.n	80095ca <__hexnan+0x132>
 800957c:	3501      	adds	r5, #1
 800957e:	2d08      	cmp	r5, #8
 8009580:	f10b 0b01 	add.w	fp, fp, #1
 8009584:	dd06      	ble.n	8009594 <__hexnan+0xfc>
 8009586:	4544      	cmp	r4, r8
 8009588:	d9c3      	bls.n	8009512 <__hexnan+0x7a>
 800958a:	2300      	movs	r3, #0
 800958c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009590:	2501      	movs	r5, #1
 8009592:	3c04      	subs	r4, #4
 8009594:	6822      	ldr	r2, [r4, #0]
 8009596:	f000 000f 	and.w	r0, r0, #15
 800959a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800959e:	6022      	str	r2, [r4, #0]
 80095a0:	e7b7      	b.n	8009512 <__hexnan+0x7a>
 80095a2:	2508      	movs	r5, #8
 80095a4:	e7b5      	b.n	8009512 <__hexnan+0x7a>
 80095a6:	9b01      	ldr	r3, [sp, #4]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d0df      	beq.n	800956c <__hexnan+0xd4>
 80095ac:	f04f 32ff 	mov.w	r2, #4294967295
 80095b0:	f1c3 0320 	rsb	r3, r3, #32
 80095b4:	fa22 f303 	lsr.w	r3, r2, r3
 80095b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80095bc:	401a      	ands	r2, r3
 80095be:	f846 2c04 	str.w	r2, [r6, #-4]
 80095c2:	e7d3      	b.n	800956c <__hexnan+0xd4>
 80095c4:	3f04      	subs	r7, #4
 80095c6:	e7d1      	b.n	800956c <__hexnan+0xd4>
 80095c8:	2004      	movs	r0, #4
 80095ca:	b007      	add	sp, #28
 80095cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080095d0 <_localeconv_r>:
 80095d0:	4800      	ldr	r0, [pc, #0]	; (80095d4 <_localeconv_r+0x4>)
 80095d2:	4770      	bx	lr
 80095d4:	2000016c 	.word	0x2000016c

080095d8 <__retarget_lock_init_recursive>:
 80095d8:	4770      	bx	lr

080095da <__retarget_lock_acquire_recursive>:
 80095da:	4770      	bx	lr

080095dc <__retarget_lock_release_recursive>:
 80095dc:	4770      	bx	lr

080095de <__swhatbuf_r>:
 80095de:	b570      	push	{r4, r5, r6, lr}
 80095e0:	460e      	mov	r6, r1
 80095e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e6:	2900      	cmp	r1, #0
 80095e8:	b096      	sub	sp, #88	; 0x58
 80095ea:	4614      	mov	r4, r2
 80095ec:	461d      	mov	r5, r3
 80095ee:	da07      	bge.n	8009600 <__swhatbuf_r+0x22>
 80095f0:	2300      	movs	r3, #0
 80095f2:	602b      	str	r3, [r5, #0]
 80095f4:	89b3      	ldrh	r3, [r6, #12]
 80095f6:	061a      	lsls	r2, r3, #24
 80095f8:	d410      	bmi.n	800961c <__swhatbuf_r+0x3e>
 80095fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095fe:	e00e      	b.n	800961e <__swhatbuf_r+0x40>
 8009600:	466a      	mov	r2, sp
 8009602:	f001 f949 	bl	800a898 <_fstat_r>
 8009606:	2800      	cmp	r0, #0
 8009608:	dbf2      	blt.n	80095f0 <__swhatbuf_r+0x12>
 800960a:	9a01      	ldr	r2, [sp, #4]
 800960c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009610:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009614:	425a      	negs	r2, r3
 8009616:	415a      	adcs	r2, r3
 8009618:	602a      	str	r2, [r5, #0]
 800961a:	e7ee      	b.n	80095fa <__swhatbuf_r+0x1c>
 800961c:	2340      	movs	r3, #64	; 0x40
 800961e:	2000      	movs	r0, #0
 8009620:	6023      	str	r3, [r4, #0]
 8009622:	b016      	add	sp, #88	; 0x58
 8009624:	bd70      	pop	{r4, r5, r6, pc}
	...

08009628 <__smakebuf_r>:
 8009628:	898b      	ldrh	r3, [r1, #12]
 800962a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800962c:	079d      	lsls	r5, r3, #30
 800962e:	4606      	mov	r6, r0
 8009630:	460c      	mov	r4, r1
 8009632:	d507      	bpl.n	8009644 <__smakebuf_r+0x1c>
 8009634:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	6123      	str	r3, [r4, #16]
 800963c:	2301      	movs	r3, #1
 800963e:	6163      	str	r3, [r4, #20]
 8009640:	b002      	add	sp, #8
 8009642:	bd70      	pop	{r4, r5, r6, pc}
 8009644:	ab01      	add	r3, sp, #4
 8009646:	466a      	mov	r2, sp
 8009648:	f7ff ffc9 	bl	80095de <__swhatbuf_r>
 800964c:	9900      	ldr	r1, [sp, #0]
 800964e:	4605      	mov	r5, r0
 8009650:	4630      	mov	r0, r6
 8009652:	f000 fd6b 	bl	800a12c <_malloc_r>
 8009656:	b948      	cbnz	r0, 800966c <__smakebuf_r+0x44>
 8009658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800965c:	059a      	lsls	r2, r3, #22
 800965e:	d4ef      	bmi.n	8009640 <__smakebuf_r+0x18>
 8009660:	f023 0303 	bic.w	r3, r3, #3
 8009664:	f043 0302 	orr.w	r3, r3, #2
 8009668:	81a3      	strh	r3, [r4, #12]
 800966a:	e7e3      	b.n	8009634 <__smakebuf_r+0xc>
 800966c:	4b0d      	ldr	r3, [pc, #52]	; (80096a4 <__smakebuf_r+0x7c>)
 800966e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009670:	89a3      	ldrh	r3, [r4, #12]
 8009672:	6020      	str	r0, [r4, #0]
 8009674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009678:	81a3      	strh	r3, [r4, #12]
 800967a:	9b00      	ldr	r3, [sp, #0]
 800967c:	6163      	str	r3, [r4, #20]
 800967e:	9b01      	ldr	r3, [sp, #4]
 8009680:	6120      	str	r0, [r4, #16]
 8009682:	b15b      	cbz	r3, 800969c <__smakebuf_r+0x74>
 8009684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009688:	4630      	mov	r0, r6
 800968a:	f001 f917 	bl	800a8bc <_isatty_r>
 800968e:	b128      	cbz	r0, 800969c <__smakebuf_r+0x74>
 8009690:	89a3      	ldrh	r3, [r4, #12]
 8009692:	f023 0303 	bic.w	r3, r3, #3
 8009696:	f043 0301 	orr.w	r3, r3, #1
 800969a:	81a3      	strh	r3, [r4, #12]
 800969c:	89a0      	ldrh	r0, [r4, #12]
 800969e:	4305      	orrs	r5, r0
 80096a0:	81a5      	strh	r5, [r4, #12]
 80096a2:	e7cd      	b.n	8009640 <__smakebuf_r+0x18>
 80096a4:	08008d2d 	.word	0x08008d2d

080096a8 <malloc>:
 80096a8:	4b02      	ldr	r3, [pc, #8]	; (80096b4 <malloc+0xc>)
 80096aa:	4601      	mov	r1, r0
 80096ac:	6818      	ldr	r0, [r3, #0]
 80096ae:	f000 bd3d 	b.w	800a12c <_malloc_r>
 80096b2:	bf00      	nop
 80096b4:	20000014 	.word	0x20000014

080096b8 <__ascii_mbtowc>:
 80096b8:	b082      	sub	sp, #8
 80096ba:	b901      	cbnz	r1, 80096be <__ascii_mbtowc+0x6>
 80096bc:	a901      	add	r1, sp, #4
 80096be:	b142      	cbz	r2, 80096d2 <__ascii_mbtowc+0x1a>
 80096c0:	b14b      	cbz	r3, 80096d6 <__ascii_mbtowc+0x1e>
 80096c2:	7813      	ldrb	r3, [r2, #0]
 80096c4:	600b      	str	r3, [r1, #0]
 80096c6:	7812      	ldrb	r2, [r2, #0]
 80096c8:	1e10      	subs	r0, r2, #0
 80096ca:	bf18      	it	ne
 80096cc:	2001      	movne	r0, #1
 80096ce:	b002      	add	sp, #8
 80096d0:	4770      	bx	lr
 80096d2:	4610      	mov	r0, r2
 80096d4:	e7fb      	b.n	80096ce <__ascii_mbtowc+0x16>
 80096d6:	f06f 0001 	mvn.w	r0, #1
 80096da:	e7f8      	b.n	80096ce <__ascii_mbtowc+0x16>

080096dc <memcpy>:
 80096dc:	440a      	add	r2, r1
 80096de:	4291      	cmp	r1, r2
 80096e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80096e4:	d100      	bne.n	80096e8 <memcpy+0xc>
 80096e6:	4770      	bx	lr
 80096e8:	b510      	push	{r4, lr}
 80096ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096f2:	4291      	cmp	r1, r2
 80096f4:	d1f9      	bne.n	80096ea <memcpy+0xe>
 80096f6:	bd10      	pop	{r4, pc}

080096f8 <_Balloc>:
 80096f8:	b570      	push	{r4, r5, r6, lr}
 80096fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096fc:	4604      	mov	r4, r0
 80096fe:	460d      	mov	r5, r1
 8009700:	b976      	cbnz	r6, 8009720 <_Balloc+0x28>
 8009702:	2010      	movs	r0, #16
 8009704:	f7ff ffd0 	bl	80096a8 <malloc>
 8009708:	4602      	mov	r2, r0
 800970a:	6260      	str	r0, [r4, #36]	; 0x24
 800970c:	b920      	cbnz	r0, 8009718 <_Balloc+0x20>
 800970e:	4b18      	ldr	r3, [pc, #96]	; (8009770 <_Balloc+0x78>)
 8009710:	4818      	ldr	r0, [pc, #96]	; (8009774 <_Balloc+0x7c>)
 8009712:	2166      	movs	r1, #102	; 0x66
 8009714:	f7fe fb8c 	bl	8007e30 <__assert_func>
 8009718:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800971c:	6006      	str	r6, [r0, #0]
 800971e:	60c6      	str	r6, [r0, #12]
 8009720:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009722:	68f3      	ldr	r3, [r6, #12]
 8009724:	b183      	cbz	r3, 8009748 <_Balloc+0x50>
 8009726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800972e:	b9b8      	cbnz	r0, 8009760 <_Balloc+0x68>
 8009730:	2101      	movs	r1, #1
 8009732:	fa01 f605 	lsl.w	r6, r1, r5
 8009736:	1d72      	adds	r2, r6, #5
 8009738:	0092      	lsls	r2, r2, #2
 800973a:	4620      	mov	r0, r4
 800973c:	f000 fc97 	bl	800a06e <_calloc_r>
 8009740:	b160      	cbz	r0, 800975c <_Balloc+0x64>
 8009742:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009746:	e00e      	b.n	8009766 <_Balloc+0x6e>
 8009748:	2221      	movs	r2, #33	; 0x21
 800974a:	2104      	movs	r1, #4
 800974c:	4620      	mov	r0, r4
 800974e:	f000 fc8e 	bl	800a06e <_calloc_r>
 8009752:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009754:	60f0      	str	r0, [r6, #12]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1e4      	bne.n	8009726 <_Balloc+0x2e>
 800975c:	2000      	movs	r0, #0
 800975e:	bd70      	pop	{r4, r5, r6, pc}
 8009760:	6802      	ldr	r2, [r0, #0]
 8009762:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009766:	2300      	movs	r3, #0
 8009768:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800976c:	e7f7      	b.n	800975e <_Balloc+0x66>
 800976e:	bf00      	nop
 8009770:	0800baf8 	.word	0x0800baf8
 8009774:	0800be0c 	.word	0x0800be0c

08009778 <_Bfree>:
 8009778:	b570      	push	{r4, r5, r6, lr}
 800977a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800977c:	4605      	mov	r5, r0
 800977e:	460c      	mov	r4, r1
 8009780:	b976      	cbnz	r6, 80097a0 <_Bfree+0x28>
 8009782:	2010      	movs	r0, #16
 8009784:	f7ff ff90 	bl	80096a8 <malloc>
 8009788:	4602      	mov	r2, r0
 800978a:	6268      	str	r0, [r5, #36]	; 0x24
 800978c:	b920      	cbnz	r0, 8009798 <_Bfree+0x20>
 800978e:	4b09      	ldr	r3, [pc, #36]	; (80097b4 <_Bfree+0x3c>)
 8009790:	4809      	ldr	r0, [pc, #36]	; (80097b8 <_Bfree+0x40>)
 8009792:	218a      	movs	r1, #138	; 0x8a
 8009794:	f7fe fb4c 	bl	8007e30 <__assert_func>
 8009798:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800979c:	6006      	str	r6, [r0, #0]
 800979e:	60c6      	str	r6, [r0, #12]
 80097a0:	b13c      	cbz	r4, 80097b2 <_Bfree+0x3a>
 80097a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80097a4:	6862      	ldr	r2, [r4, #4]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097ac:	6021      	str	r1, [r4, #0]
 80097ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097b2:	bd70      	pop	{r4, r5, r6, pc}
 80097b4:	0800baf8 	.word	0x0800baf8
 80097b8:	0800be0c 	.word	0x0800be0c

080097bc <__multadd>:
 80097bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097c0:	690e      	ldr	r6, [r1, #16]
 80097c2:	4607      	mov	r7, r0
 80097c4:	4698      	mov	r8, r3
 80097c6:	460c      	mov	r4, r1
 80097c8:	f101 0014 	add.w	r0, r1, #20
 80097cc:	2300      	movs	r3, #0
 80097ce:	6805      	ldr	r5, [r0, #0]
 80097d0:	b2a9      	uxth	r1, r5
 80097d2:	fb02 8101 	mla	r1, r2, r1, r8
 80097d6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80097da:	0c2d      	lsrs	r5, r5, #16
 80097dc:	fb02 c505 	mla	r5, r2, r5, ip
 80097e0:	b289      	uxth	r1, r1
 80097e2:	3301      	adds	r3, #1
 80097e4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80097e8:	429e      	cmp	r6, r3
 80097ea:	f840 1b04 	str.w	r1, [r0], #4
 80097ee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80097f2:	dcec      	bgt.n	80097ce <__multadd+0x12>
 80097f4:	f1b8 0f00 	cmp.w	r8, #0
 80097f8:	d022      	beq.n	8009840 <__multadd+0x84>
 80097fa:	68a3      	ldr	r3, [r4, #8]
 80097fc:	42b3      	cmp	r3, r6
 80097fe:	dc19      	bgt.n	8009834 <__multadd+0x78>
 8009800:	6861      	ldr	r1, [r4, #4]
 8009802:	4638      	mov	r0, r7
 8009804:	3101      	adds	r1, #1
 8009806:	f7ff ff77 	bl	80096f8 <_Balloc>
 800980a:	4605      	mov	r5, r0
 800980c:	b928      	cbnz	r0, 800981a <__multadd+0x5e>
 800980e:	4602      	mov	r2, r0
 8009810:	4b0d      	ldr	r3, [pc, #52]	; (8009848 <__multadd+0x8c>)
 8009812:	480e      	ldr	r0, [pc, #56]	; (800984c <__multadd+0x90>)
 8009814:	21b5      	movs	r1, #181	; 0xb5
 8009816:	f7fe fb0b 	bl	8007e30 <__assert_func>
 800981a:	6922      	ldr	r2, [r4, #16]
 800981c:	3202      	adds	r2, #2
 800981e:	f104 010c 	add.w	r1, r4, #12
 8009822:	0092      	lsls	r2, r2, #2
 8009824:	300c      	adds	r0, #12
 8009826:	f7ff ff59 	bl	80096dc <memcpy>
 800982a:	4621      	mov	r1, r4
 800982c:	4638      	mov	r0, r7
 800982e:	f7ff ffa3 	bl	8009778 <_Bfree>
 8009832:	462c      	mov	r4, r5
 8009834:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009838:	3601      	adds	r6, #1
 800983a:	f8c3 8014 	str.w	r8, [r3, #20]
 800983e:	6126      	str	r6, [r4, #16]
 8009840:	4620      	mov	r0, r4
 8009842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009846:	bf00      	nop
 8009848:	0800bd19 	.word	0x0800bd19
 800984c:	0800be0c 	.word	0x0800be0c

08009850 <__s2b>:
 8009850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009854:	460c      	mov	r4, r1
 8009856:	4615      	mov	r5, r2
 8009858:	461f      	mov	r7, r3
 800985a:	2209      	movs	r2, #9
 800985c:	3308      	adds	r3, #8
 800985e:	4606      	mov	r6, r0
 8009860:	fb93 f3f2 	sdiv	r3, r3, r2
 8009864:	2100      	movs	r1, #0
 8009866:	2201      	movs	r2, #1
 8009868:	429a      	cmp	r2, r3
 800986a:	db09      	blt.n	8009880 <__s2b+0x30>
 800986c:	4630      	mov	r0, r6
 800986e:	f7ff ff43 	bl	80096f8 <_Balloc>
 8009872:	b940      	cbnz	r0, 8009886 <__s2b+0x36>
 8009874:	4602      	mov	r2, r0
 8009876:	4b19      	ldr	r3, [pc, #100]	; (80098dc <__s2b+0x8c>)
 8009878:	4819      	ldr	r0, [pc, #100]	; (80098e0 <__s2b+0x90>)
 800987a:	21ce      	movs	r1, #206	; 0xce
 800987c:	f7fe fad8 	bl	8007e30 <__assert_func>
 8009880:	0052      	lsls	r2, r2, #1
 8009882:	3101      	adds	r1, #1
 8009884:	e7f0      	b.n	8009868 <__s2b+0x18>
 8009886:	9b08      	ldr	r3, [sp, #32]
 8009888:	6143      	str	r3, [r0, #20]
 800988a:	2d09      	cmp	r5, #9
 800988c:	f04f 0301 	mov.w	r3, #1
 8009890:	6103      	str	r3, [r0, #16]
 8009892:	dd16      	ble.n	80098c2 <__s2b+0x72>
 8009894:	f104 0909 	add.w	r9, r4, #9
 8009898:	46c8      	mov	r8, r9
 800989a:	442c      	add	r4, r5
 800989c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80098a0:	4601      	mov	r1, r0
 80098a2:	3b30      	subs	r3, #48	; 0x30
 80098a4:	220a      	movs	r2, #10
 80098a6:	4630      	mov	r0, r6
 80098a8:	f7ff ff88 	bl	80097bc <__multadd>
 80098ac:	45a0      	cmp	r8, r4
 80098ae:	d1f5      	bne.n	800989c <__s2b+0x4c>
 80098b0:	f1a5 0408 	sub.w	r4, r5, #8
 80098b4:	444c      	add	r4, r9
 80098b6:	1b2d      	subs	r5, r5, r4
 80098b8:	1963      	adds	r3, r4, r5
 80098ba:	42bb      	cmp	r3, r7
 80098bc:	db04      	blt.n	80098c8 <__s2b+0x78>
 80098be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098c2:	340a      	adds	r4, #10
 80098c4:	2509      	movs	r5, #9
 80098c6:	e7f6      	b.n	80098b6 <__s2b+0x66>
 80098c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80098cc:	4601      	mov	r1, r0
 80098ce:	3b30      	subs	r3, #48	; 0x30
 80098d0:	220a      	movs	r2, #10
 80098d2:	4630      	mov	r0, r6
 80098d4:	f7ff ff72 	bl	80097bc <__multadd>
 80098d8:	e7ee      	b.n	80098b8 <__s2b+0x68>
 80098da:	bf00      	nop
 80098dc:	0800bd19 	.word	0x0800bd19
 80098e0:	0800be0c 	.word	0x0800be0c

080098e4 <__hi0bits>:
 80098e4:	0c03      	lsrs	r3, r0, #16
 80098e6:	041b      	lsls	r3, r3, #16
 80098e8:	b9d3      	cbnz	r3, 8009920 <__hi0bits+0x3c>
 80098ea:	0400      	lsls	r0, r0, #16
 80098ec:	2310      	movs	r3, #16
 80098ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80098f2:	bf04      	itt	eq
 80098f4:	0200      	lsleq	r0, r0, #8
 80098f6:	3308      	addeq	r3, #8
 80098f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80098fc:	bf04      	itt	eq
 80098fe:	0100      	lsleq	r0, r0, #4
 8009900:	3304      	addeq	r3, #4
 8009902:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009906:	bf04      	itt	eq
 8009908:	0080      	lsleq	r0, r0, #2
 800990a:	3302      	addeq	r3, #2
 800990c:	2800      	cmp	r0, #0
 800990e:	db05      	blt.n	800991c <__hi0bits+0x38>
 8009910:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009914:	f103 0301 	add.w	r3, r3, #1
 8009918:	bf08      	it	eq
 800991a:	2320      	moveq	r3, #32
 800991c:	4618      	mov	r0, r3
 800991e:	4770      	bx	lr
 8009920:	2300      	movs	r3, #0
 8009922:	e7e4      	b.n	80098ee <__hi0bits+0xa>

08009924 <__lo0bits>:
 8009924:	6803      	ldr	r3, [r0, #0]
 8009926:	f013 0207 	ands.w	r2, r3, #7
 800992a:	4601      	mov	r1, r0
 800992c:	d00b      	beq.n	8009946 <__lo0bits+0x22>
 800992e:	07da      	lsls	r2, r3, #31
 8009930:	d424      	bmi.n	800997c <__lo0bits+0x58>
 8009932:	0798      	lsls	r0, r3, #30
 8009934:	bf49      	itett	mi
 8009936:	085b      	lsrmi	r3, r3, #1
 8009938:	089b      	lsrpl	r3, r3, #2
 800993a:	2001      	movmi	r0, #1
 800993c:	600b      	strmi	r3, [r1, #0]
 800993e:	bf5c      	itt	pl
 8009940:	600b      	strpl	r3, [r1, #0]
 8009942:	2002      	movpl	r0, #2
 8009944:	4770      	bx	lr
 8009946:	b298      	uxth	r0, r3
 8009948:	b9b0      	cbnz	r0, 8009978 <__lo0bits+0x54>
 800994a:	0c1b      	lsrs	r3, r3, #16
 800994c:	2010      	movs	r0, #16
 800994e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009952:	bf04      	itt	eq
 8009954:	0a1b      	lsreq	r3, r3, #8
 8009956:	3008      	addeq	r0, #8
 8009958:	071a      	lsls	r2, r3, #28
 800995a:	bf04      	itt	eq
 800995c:	091b      	lsreq	r3, r3, #4
 800995e:	3004      	addeq	r0, #4
 8009960:	079a      	lsls	r2, r3, #30
 8009962:	bf04      	itt	eq
 8009964:	089b      	lsreq	r3, r3, #2
 8009966:	3002      	addeq	r0, #2
 8009968:	07da      	lsls	r2, r3, #31
 800996a:	d403      	bmi.n	8009974 <__lo0bits+0x50>
 800996c:	085b      	lsrs	r3, r3, #1
 800996e:	f100 0001 	add.w	r0, r0, #1
 8009972:	d005      	beq.n	8009980 <__lo0bits+0x5c>
 8009974:	600b      	str	r3, [r1, #0]
 8009976:	4770      	bx	lr
 8009978:	4610      	mov	r0, r2
 800997a:	e7e8      	b.n	800994e <__lo0bits+0x2a>
 800997c:	2000      	movs	r0, #0
 800997e:	4770      	bx	lr
 8009980:	2020      	movs	r0, #32
 8009982:	4770      	bx	lr

08009984 <__i2b>:
 8009984:	b510      	push	{r4, lr}
 8009986:	460c      	mov	r4, r1
 8009988:	2101      	movs	r1, #1
 800998a:	f7ff feb5 	bl	80096f8 <_Balloc>
 800998e:	4602      	mov	r2, r0
 8009990:	b928      	cbnz	r0, 800999e <__i2b+0x1a>
 8009992:	4b05      	ldr	r3, [pc, #20]	; (80099a8 <__i2b+0x24>)
 8009994:	4805      	ldr	r0, [pc, #20]	; (80099ac <__i2b+0x28>)
 8009996:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800999a:	f7fe fa49 	bl	8007e30 <__assert_func>
 800999e:	2301      	movs	r3, #1
 80099a0:	6144      	str	r4, [r0, #20]
 80099a2:	6103      	str	r3, [r0, #16]
 80099a4:	bd10      	pop	{r4, pc}
 80099a6:	bf00      	nop
 80099a8:	0800bd19 	.word	0x0800bd19
 80099ac:	0800be0c 	.word	0x0800be0c

080099b0 <__multiply>:
 80099b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b4:	4614      	mov	r4, r2
 80099b6:	690a      	ldr	r2, [r1, #16]
 80099b8:	6923      	ldr	r3, [r4, #16]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	bfb8      	it	lt
 80099be:	460b      	movlt	r3, r1
 80099c0:	460d      	mov	r5, r1
 80099c2:	bfbc      	itt	lt
 80099c4:	4625      	movlt	r5, r4
 80099c6:	461c      	movlt	r4, r3
 80099c8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80099cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80099d0:	68ab      	ldr	r3, [r5, #8]
 80099d2:	6869      	ldr	r1, [r5, #4]
 80099d4:	eb0a 0709 	add.w	r7, sl, r9
 80099d8:	42bb      	cmp	r3, r7
 80099da:	b085      	sub	sp, #20
 80099dc:	bfb8      	it	lt
 80099de:	3101      	addlt	r1, #1
 80099e0:	f7ff fe8a 	bl	80096f8 <_Balloc>
 80099e4:	b930      	cbnz	r0, 80099f4 <__multiply+0x44>
 80099e6:	4602      	mov	r2, r0
 80099e8:	4b42      	ldr	r3, [pc, #264]	; (8009af4 <__multiply+0x144>)
 80099ea:	4843      	ldr	r0, [pc, #268]	; (8009af8 <__multiply+0x148>)
 80099ec:	f240 115d 	movw	r1, #349	; 0x15d
 80099f0:	f7fe fa1e 	bl	8007e30 <__assert_func>
 80099f4:	f100 0614 	add.w	r6, r0, #20
 80099f8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80099fc:	4633      	mov	r3, r6
 80099fe:	2200      	movs	r2, #0
 8009a00:	4543      	cmp	r3, r8
 8009a02:	d31e      	bcc.n	8009a42 <__multiply+0x92>
 8009a04:	f105 0c14 	add.w	ip, r5, #20
 8009a08:	f104 0314 	add.w	r3, r4, #20
 8009a0c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009a10:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009a14:	9202      	str	r2, [sp, #8]
 8009a16:	ebac 0205 	sub.w	r2, ip, r5
 8009a1a:	3a15      	subs	r2, #21
 8009a1c:	f022 0203 	bic.w	r2, r2, #3
 8009a20:	3204      	adds	r2, #4
 8009a22:	f105 0115 	add.w	r1, r5, #21
 8009a26:	458c      	cmp	ip, r1
 8009a28:	bf38      	it	cc
 8009a2a:	2204      	movcc	r2, #4
 8009a2c:	9201      	str	r2, [sp, #4]
 8009a2e:	9a02      	ldr	r2, [sp, #8]
 8009a30:	9303      	str	r3, [sp, #12]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d808      	bhi.n	8009a48 <__multiply+0x98>
 8009a36:	2f00      	cmp	r7, #0
 8009a38:	dc55      	bgt.n	8009ae6 <__multiply+0x136>
 8009a3a:	6107      	str	r7, [r0, #16]
 8009a3c:	b005      	add	sp, #20
 8009a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a42:	f843 2b04 	str.w	r2, [r3], #4
 8009a46:	e7db      	b.n	8009a00 <__multiply+0x50>
 8009a48:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a4c:	f1ba 0f00 	cmp.w	sl, #0
 8009a50:	d020      	beq.n	8009a94 <__multiply+0xe4>
 8009a52:	f105 0e14 	add.w	lr, r5, #20
 8009a56:	46b1      	mov	r9, r6
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009a5e:	f8d9 b000 	ldr.w	fp, [r9]
 8009a62:	b2a1      	uxth	r1, r4
 8009a64:	fa1f fb8b 	uxth.w	fp, fp
 8009a68:	fb0a b101 	mla	r1, sl, r1, fp
 8009a6c:	4411      	add	r1, r2
 8009a6e:	f8d9 2000 	ldr.w	r2, [r9]
 8009a72:	0c24      	lsrs	r4, r4, #16
 8009a74:	0c12      	lsrs	r2, r2, #16
 8009a76:	fb0a 2404 	mla	r4, sl, r4, r2
 8009a7a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009a7e:	b289      	uxth	r1, r1
 8009a80:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009a84:	45f4      	cmp	ip, lr
 8009a86:	f849 1b04 	str.w	r1, [r9], #4
 8009a8a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009a8e:	d8e4      	bhi.n	8009a5a <__multiply+0xaa>
 8009a90:	9901      	ldr	r1, [sp, #4]
 8009a92:	5072      	str	r2, [r6, r1]
 8009a94:	9a03      	ldr	r2, [sp, #12]
 8009a96:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	f1b9 0f00 	cmp.w	r9, #0
 8009aa0:	d01f      	beq.n	8009ae2 <__multiply+0x132>
 8009aa2:	6834      	ldr	r4, [r6, #0]
 8009aa4:	f105 0114 	add.w	r1, r5, #20
 8009aa8:	46b6      	mov	lr, r6
 8009aaa:	f04f 0a00 	mov.w	sl, #0
 8009aae:	880a      	ldrh	r2, [r1, #0]
 8009ab0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009ab4:	fb09 b202 	mla	r2, r9, r2, fp
 8009ab8:	4492      	add	sl, r2
 8009aba:	b2a4      	uxth	r4, r4
 8009abc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009ac0:	f84e 4b04 	str.w	r4, [lr], #4
 8009ac4:	f851 4b04 	ldr.w	r4, [r1], #4
 8009ac8:	f8be 2000 	ldrh.w	r2, [lr]
 8009acc:	0c24      	lsrs	r4, r4, #16
 8009ace:	fb09 2404 	mla	r4, r9, r4, r2
 8009ad2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009ad6:	458c      	cmp	ip, r1
 8009ad8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009adc:	d8e7      	bhi.n	8009aae <__multiply+0xfe>
 8009ade:	9a01      	ldr	r2, [sp, #4]
 8009ae0:	50b4      	str	r4, [r6, r2]
 8009ae2:	3604      	adds	r6, #4
 8009ae4:	e7a3      	b.n	8009a2e <__multiply+0x7e>
 8009ae6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1a5      	bne.n	8009a3a <__multiply+0x8a>
 8009aee:	3f01      	subs	r7, #1
 8009af0:	e7a1      	b.n	8009a36 <__multiply+0x86>
 8009af2:	bf00      	nop
 8009af4:	0800bd19 	.word	0x0800bd19
 8009af8:	0800be0c 	.word	0x0800be0c

08009afc <__pow5mult>:
 8009afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b00:	4615      	mov	r5, r2
 8009b02:	f012 0203 	ands.w	r2, r2, #3
 8009b06:	4606      	mov	r6, r0
 8009b08:	460f      	mov	r7, r1
 8009b0a:	d007      	beq.n	8009b1c <__pow5mult+0x20>
 8009b0c:	4c25      	ldr	r4, [pc, #148]	; (8009ba4 <__pow5mult+0xa8>)
 8009b0e:	3a01      	subs	r2, #1
 8009b10:	2300      	movs	r3, #0
 8009b12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b16:	f7ff fe51 	bl	80097bc <__multadd>
 8009b1a:	4607      	mov	r7, r0
 8009b1c:	10ad      	asrs	r5, r5, #2
 8009b1e:	d03d      	beq.n	8009b9c <__pow5mult+0xa0>
 8009b20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b22:	b97c      	cbnz	r4, 8009b44 <__pow5mult+0x48>
 8009b24:	2010      	movs	r0, #16
 8009b26:	f7ff fdbf 	bl	80096a8 <malloc>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	6270      	str	r0, [r6, #36]	; 0x24
 8009b2e:	b928      	cbnz	r0, 8009b3c <__pow5mult+0x40>
 8009b30:	4b1d      	ldr	r3, [pc, #116]	; (8009ba8 <__pow5mult+0xac>)
 8009b32:	481e      	ldr	r0, [pc, #120]	; (8009bac <__pow5mult+0xb0>)
 8009b34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009b38:	f7fe f97a 	bl	8007e30 <__assert_func>
 8009b3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b40:	6004      	str	r4, [r0, #0]
 8009b42:	60c4      	str	r4, [r0, #12]
 8009b44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b4c:	b94c      	cbnz	r4, 8009b62 <__pow5mult+0x66>
 8009b4e:	f240 2171 	movw	r1, #625	; 0x271
 8009b52:	4630      	mov	r0, r6
 8009b54:	f7ff ff16 	bl	8009984 <__i2b>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b5e:	4604      	mov	r4, r0
 8009b60:	6003      	str	r3, [r0, #0]
 8009b62:	f04f 0900 	mov.w	r9, #0
 8009b66:	07eb      	lsls	r3, r5, #31
 8009b68:	d50a      	bpl.n	8009b80 <__pow5mult+0x84>
 8009b6a:	4639      	mov	r1, r7
 8009b6c:	4622      	mov	r2, r4
 8009b6e:	4630      	mov	r0, r6
 8009b70:	f7ff ff1e 	bl	80099b0 <__multiply>
 8009b74:	4639      	mov	r1, r7
 8009b76:	4680      	mov	r8, r0
 8009b78:	4630      	mov	r0, r6
 8009b7a:	f7ff fdfd 	bl	8009778 <_Bfree>
 8009b7e:	4647      	mov	r7, r8
 8009b80:	106d      	asrs	r5, r5, #1
 8009b82:	d00b      	beq.n	8009b9c <__pow5mult+0xa0>
 8009b84:	6820      	ldr	r0, [r4, #0]
 8009b86:	b938      	cbnz	r0, 8009b98 <__pow5mult+0x9c>
 8009b88:	4622      	mov	r2, r4
 8009b8a:	4621      	mov	r1, r4
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	f7ff ff0f 	bl	80099b0 <__multiply>
 8009b92:	6020      	str	r0, [r4, #0]
 8009b94:	f8c0 9000 	str.w	r9, [r0]
 8009b98:	4604      	mov	r4, r0
 8009b9a:	e7e4      	b.n	8009b66 <__pow5mult+0x6a>
 8009b9c:	4638      	mov	r0, r7
 8009b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ba2:	bf00      	nop
 8009ba4:	0800bf60 	.word	0x0800bf60
 8009ba8:	0800baf8 	.word	0x0800baf8
 8009bac:	0800be0c 	.word	0x0800be0c

08009bb0 <__lshift>:
 8009bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb4:	460c      	mov	r4, r1
 8009bb6:	6849      	ldr	r1, [r1, #4]
 8009bb8:	6923      	ldr	r3, [r4, #16]
 8009bba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009bbe:	68a3      	ldr	r3, [r4, #8]
 8009bc0:	4607      	mov	r7, r0
 8009bc2:	4691      	mov	r9, r2
 8009bc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009bc8:	f108 0601 	add.w	r6, r8, #1
 8009bcc:	42b3      	cmp	r3, r6
 8009bce:	db0b      	blt.n	8009be8 <__lshift+0x38>
 8009bd0:	4638      	mov	r0, r7
 8009bd2:	f7ff fd91 	bl	80096f8 <_Balloc>
 8009bd6:	4605      	mov	r5, r0
 8009bd8:	b948      	cbnz	r0, 8009bee <__lshift+0x3e>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	4b28      	ldr	r3, [pc, #160]	; (8009c80 <__lshift+0xd0>)
 8009bde:	4829      	ldr	r0, [pc, #164]	; (8009c84 <__lshift+0xd4>)
 8009be0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009be4:	f7fe f924 	bl	8007e30 <__assert_func>
 8009be8:	3101      	adds	r1, #1
 8009bea:	005b      	lsls	r3, r3, #1
 8009bec:	e7ee      	b.n	8009bcc <__lshift+0x1c>
 8009bee:	2300      	movs	r3, #0
 8009bf0:	f100 0114 	add.w	r1, r0, #20
 8009bf4:	f100 0210 	add.w	r2, r0, #16
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	4553      	cmp	r3, sl
 8009bfc:	db33      	blt.n	8009c66 <__lshift+0xb6>
 8009bfe:	6920      	ldr	r0, [r4, #16]
 8009c00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c04:	f104 0314 	add.w	r3, r4, #20
 8009c08:	f019 091f 	ands.w	r9, r9, #31
 8009c0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c14:	d02b      	beq.n	8009c6e <__lshift+0xbe>
 8009c16:	f1c9 0e20 	rsb	lr, r9, #32
 8009c1a:	468a      	mov	sl, r1
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	6818      	ldr	r0, [r3, #0]
 8009c20:	fa00 f009 	lsl.w	r0, r0, r9
 8009c24:	4302      	orrs	r2, r0
 8009c26:	f84a 2b04 	str.w	r2, [sl], #4
 8009c2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c2e:	459c      	cmp	ip, r3
 8009c30:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c34:	d8f3      	bhi.n	8009c1e <__lshift+0x6e>
 8009c36:	ebac 0304 	sub.w	r3, ip, r4
 8009c3a:	3b15      	subs	r3, #21
 8009c3c:	f023 0303 	bic.w	r3, r3, #3
 8009c40:	3304      	adds	r3, #4
 8009c42:	f104 0015 	add.w	r0, r4, #21
 8009c46:	4584      	cmp	ip, r0
 8009c48:	bf38      	it	cc
 8009c4a:	2304      	movcc	r3, #4
 8009c4c:	50ca      	str	r2, [r1, r3]
 8009c4e:	b10a      	cbz	r2, 8009c54 <__lshift+0xa4>
 8009c50:	f108 0602 	add.w	r6, r8, #2
 8009c54:	3e01      	subs	r6, #1
 8009c56:	4638      	mov	r0, r7
 8009c58:	612e      	str	r6, [r5, #16]
 8009c5a:	4621      	mov	r1, r4
 8009c5c:	f7ff fd8c 	bl	8009778 <_Bfree>
 8009c60:	4628      	mov	r0, r5
 8009c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c66:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	e7c5      	b.n	8009bfa <__lshift+0x4a>
 8009c6e:	3904      	subs	r1, #4
 8009c70:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c74:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c78:	459c      	cmp	ip, r3
 8009c7a:	d8f9      	bhi.n	8009c70 <__lshift+0xc0>
 8009c7c:	e7ea      	b.n	8009c54 <__lshift+0xa4>
 8009c7e:	bf00      	nop
 8009c80:	0800bd19 	.word	0x0800bd19
 8009c84:	0800be0c 	.word	0x0800be0c

08009c88 <__mcmp>:
 8009c88:	b530      	push	{r4, r5, lr}
 8009c8a:	6902      	ldr	r2, [r0, #16]
 8009c8c:	690c      	ldr	r4, [r1, #16]
 8009c8e:	1b12      	subs	r2, r2, r4
 8009c90:	d10e      	bne.n	8009cb0 <__mcmp+0x28>
 8009c92:	f100 0314 	add.w	r3, r0, #20
 8009c96:	3114      	adds	r1, #20
 8009c98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009c9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ca0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ca4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ca8:	42a5      	cmp	r5, r4
 8009caa:	d003      	beq.n	8009cb4 <__mcmp+0x2c>
 8009cac:	d305      	bcc.n	8009cba <__mcmp+0x32>
 8009cae:	2201      	movs	r2, #1
 8009cb0:	4610      	mov	r0, r2
 8009cb2:	bd30      	pop	{r4, r5, pc}
 8009cb4:	4283      	cmp	r3, r0
 8009cb6:	d3f3      	bcc.n	8009ca0 <__mcmp+0x18>
 8009cb8:	e7fa      	b.n	8009cb0 <__mcmp+0x28>
 8009cba:	f04f 32ff 	mov.w	r2, #4294967295
 8009cbe:	e7f7      	b.n	8009cb0 <__mcmp+0x28>

08009cc0 <__mdiff>:
 8009cc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc4:	460c      	mov	r4, r1
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	4611      	mov	r1, r2
 8009cca:	4620      	mov	r0, r4
 8009ccc:	4617      	mov	r7, r2
 8009cce:	f7ff ffdb 	bl	8009c88 <__mcmp>
 8009cd2:	1e05      	subs	r5, r0, #0
 8009cd4:	d110      	bne.n	8009cf8 <__mdiff+0x38>
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	4630      	mov	r0, r6
 8009cda:	f7ff fd0d 	bl	80096f8 <_Balloc>
 8009cde:	b930      	cbnz	r0, 8009cee <__mdiff+0x2e>
 8009ce0:	4b39      	ldr	r3, [pc, #228]	; (8009dc8 <__mdiff+0x108>)
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	f240 2132 	movw	r1, #562	; 0x232
 8009ce8:	4838      	ldr	r0, [pc, #224]	; (8009dcc <__mdiff+0x10c>)
 8009cea:	f7fe f8a1 	bl	8007e30 <__assert_func>
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009cf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf8:	bfa4      	itt	ge
 8009cfa:	463b      	movge	r3, r7
 8009cfc:	4627      	movge	r7, r4
 8009cfe:	4630      	mov	r0, r6
 8009d00:	6879      	ldr	r1, [r7, #4]
 8009d02:	bfa6      	itte	ge
 8009d04:	461c      	movge	r4, r3
 8009d06:	2500      	movge	r5, #0
 8009d08:	2501      	movlt	r5, #1
 8009d0a:	f7ff fcf5 	bl	80096f8 <_Balloc>
 8009d0e:	b920      	cbnz	r0, 8009d1a <__mdiff+0x5a>
 8009d10:	4b2d      	ldr	r3, [pc, #180]	; (8009dc8 <__mdiff+0x108>)
 8009d12:	4602      	mov	r2, r0
 8009d14:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d18:	e7e6      	b.n	8009ce8 <__mdiff+0x28>
 8009d1a:	693e      	ldr	r6, [r7, #16]
 8009d1c:	60c5      	str	r5, [r0, #12]
 8009d1e:	6925      	ldr	r5, [r4, #16]
 8009d20:	f107 0114 	add.w	r1, r7, #20
 8009d24:	f104 0914 	add.w	r9, r4, #20
 8009d28:	f100 0e14 	add.w	lr, r0, #20
 8009d2c:	f107 0210 	add.w	r2, r7, #16
 8009d30:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009d34:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009d38:	46f2      	mov	sl, lr
 8009d3a:	2700      	movs	r7, #0
 8009d3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009d44:	fa1f f883 	uxth.w	r8, r3
 8009d48:	fa17 f78b 	uxtah	r7, r7, fp
 8009d4c:	0c1b      	lsrs	r3, r3, #16
 8009d4e:	eba7 0808 	sub.w	r8, r7, r8
 8009d52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009d56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009d5a:	fa1f f888 	uxth.w	r8, r8
 8009d5e:	141f      	asrs	r7, r3, #16
 8009d60:	454d      	cmp	r5, r9
 8009d62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009d66:	f84a 3b04 	str.w	r3, [sl], #4
 8009d6a:	d8e7      	bhi.n	8009d3c <__mdiff+0x7c>
 8009d6c:	1b2b      	subs	r3, r5, r4
 8009d6e:	3b15      	subs	r3, #21
 8009d70:	f023 0303 	bic.w	r3, r3, #3
 8009d74:	3304      	adds	r3, #4
 8009d76:	3415      	adds	r4, #21
 8009d78:	42a5      	cmp	r5, r4
 8009d7a:	bf38      	it	cc
 8009d7c:	2304      	movcc	r3, #4
 8009d7e:	4419      	add	r1, r3
 8009d80:	4473      	add	r3, lr
 8009d82:	469e      	mov	lr, r3
 8009d84:	460d      	mov	r5, r1
 8009d86:	4565      	cmp	r5, ip
 8009d88:	d30e      	bcc.n	8009da8 <__mdiff+0xe8>
 8009d8a:	f10c 0203 	add.w	r2, ip, #3
 8009d8e:	1a52      	subs	r2, r2, r1
 8009d90:	f022 0203 	bic.w	r2, r2, #3
 8009d94:	3903      	subs	r1, #3
 8009d96:	458c      	cmp	ip, r1
 8009d98:	bf38      	it	cc
 8009d9a:	2200      	movcc	r2, #0
 8009d9c:	441a      	add	r2, r3
 8009d9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009da2:	b17b      	cbz	r3, 8009dc4 <__mdiff+0x104>
 8009da4:	6106      	str	r6, [r0, #16]
 8009da6:	e7a5      	b.n	8009cf4 <__mdiff+0x34>
 8009da8:	f855 8b04 	ldr.w	r8, [r5], #4
 8009dac:	fa17 f488 	uxtah	r4, r7, r8
 8009db0:	1422      	asrs	r2, r4, #16
 8009db2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009db6:	b2a4      	uxth	r4, r4
 8009db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009dbc:	f84e 4b04 	str.w	r4, [lr], #4
 8009dc0:	1417      	asrs	r7, r2, #16
 8009dc2:	e7e0      	b.n	8009d86 <__mdiff+0xc6>
 8009dc4:	3e01      	subs	r6, #1
 8009dc6:	e7ea      	b.n	8009d9e <__mdiff+0xde>
 8009dc8:	0800bd19 	.word	0x0800bd19
 8009dcc:	0800be0c 	.word	0x0800be0c

08009dd0 <__ulp>:
 8009dd0:	b082      	sub	sp, #8
 8009dd2:	ed8d 0b00 	vstr	d0, [sp]
 8009dd6:	9b01      	ldr	r3, [sp, #4]
 8009dd8:	4912      	ldr	r1, [pc, #72]	; (8009e24 <__ulp+0x54>)
 8009dda:	4019      	ands	r1, r3
 8009ddc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009de0:	2900      	cmp	r1, #0
 8009de2:	dd05      	ble.n	8009df0 <__ulp+0x20>
 8009de4:	2200      	movs	r2, #0
 8009de6:	460b      	mov	r3, r1
 8009de8:	ec43 2b10 	vmov	d0, r2, r3
 8009dec:	b002      	add	sp, #8
 8009dee:	4770      	bx	lr
 8009df0:	4249      	negs	r1, r1
 8009df2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009df6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009dfa:	f04f 0200 	mov.w	r2, #0
 8009dfe:	f04f 0300 	mov.w	r3, #0
 8009e02:	da04      	bge.n	8009e0e <__ulp+0x3e>
 8009e04:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009e08:	fa41 f300 	asr.w	r3, r1, r0
 8009e0c:	e7ec      	b.n	8009de8 <__ulp+0x18>
 8009e0e:	f1a0 0114 	sub.w	r1, r0, #20
 8009e12:	291e      	cmp	r1, #30
 8009e14:	bfda      	itte	le
 8009e16:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009e1a:	fa20 f101 	lsrle.w	r1, r0, r1
 8009e1e:	2101      	movgt	r1, #1
 8009e20:	460a      	mov	r2, r1
 8009e22:	e7e1      	b.n	8009de8 <__ulp+0x18>
 8009e24:	7ff00000 	.word	0x7ff00000

08009e28 <__b2d>:
 8009e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e2a:	6905      	ldr	r5, [r0, #16]
 8009e2c:	f100 0714 	add.w	r7, r0, #20
 8009e30:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009e34:	1f2e      	subs	r6, r5, #4
 8009e36:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f7ff fd52 	bl	80098e4 <__hi0bits>
 8009e40:	f1c0 0320 	rsb	r3, r0, #32
 8009e44:	280a      	cmp	r0, #10
 8009e46:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009ec4 <__b2d+0x9c>
 8009e4a:	600b      	str	r3, [r1, #0]
 8009e4c:	dc14      	bgt.n	8009e78 <__b2d+0x50>
 8009e4e:	f1c0 0e0b 	rsb	lr, r0, #11
 8009e52:	fa24 f10e 	lsr.w	r1, r4, lr
 8009e56:	42b7      	cmp	r7, r6
 8009e58:	ea41 030c 	orr.w	r3, r1, ip
 8009e5c:	bf34      	ite	cc
 8009e5e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009e62:	2100      	movcs	r1, #0
 8009e64:	3015      	adds	r0, #21
 8009e66:	fa04 f000 	lsl.w	r0, r4, r0
 8009e6a:	fa21 f10e 	lsr.w	r1, r1, lr
 8009e6e:	ea40 0201 	orr.w	r2, r0, r1
 8009e72:	ec43 2b10 	vmov	d0, r2, r3
 8009e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e78:	42b7      	cmp	r7, r6
 8009e7a:	bf3a      	itte	cc
 8009e7c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009e80:	f1a5 0608 	subcc.w	r6, r5, #8
 8009e84:	2100      	movcs	r1, #0
 8009e86:	380b      	subs	r0, #11
 8009e88:	d017      	beq.n	8009eba <__b2d+0x92>
 8009e8a:	f1c0 0c20 	rsb	ip, r0, #32
 8009e8e:	fa04 f500 	lsl.w	r5, r4, r0
 8009e92:	42be      	cmp	r6, r7
 8009e94:	fa21 f40c 	lsr.w	r4, r1, ip
 8009e98:	ea45 0504 	orr.w	r5, r5, r4
 8009e9c:	bf8c      	ite	hi
 8009e9e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009ea2:	2400      	movls	r4, #0
 8009ea4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009ea8:	fa01 f000 	lsl.w	r0, r1, r0
 8009eac:	fa24 f40c 	lsr.w	r4, r4, ip
 8009eb0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009eb4:	ea40 0204 	orr.w	r2, r0, r4
 8009eb8:	e7db      	b.n	8009e72 <__b2d+0x4a>
 8009eba:	ea44 030c 	orr.w	r3, r4, ip
 8009ebe:	460a      	mov	r2, r1
 8009ec0:	e7d7      	b.n	8009e72 <__b2d+0x4a>
 8009ec2:	bf00      	nop
 8009ec4:	3ff00000 	.word	0x3ff00000

08009ec8 <__d2b>:
 8009ec8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ecc:	4689      	mov	r9, r1
 8009ece:	2101      	movs	r1, #1
 8009ed0:	ec57 6b10 	vmov	r6, r7, d0
 8009ed4:	4690      	mov	r8, r2
 8009ed6:	f7ff fc0f 	bl	80096f8 <_Balloc>
 8009eda:	4604      	mov	r4, r0
 8009edc:	b930      	cbnz	r0, 8009eec <__d2b+0x24>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	4b25      	ldr	r3, [pc, #148]	; (8009f78 <__d2b+0xb0>)
 8009ee2:	4826      	ldr	r0, [pc, #152]	; (8009f7c <__d2b+0xb4>)
 8009ee4:	f240 310a 	movw	r1, #778	; 0x30a
 8009ee8:	f7fd ffa2 	bl	8007e30 <__assert_func>
 8009eec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009ef0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ef4:	bb35      	cbnz	r5, 8009f44 <__d2b+0x7c>
 8009ef6:	2e00      	cmp	r6, #0
 8009ef8:	9301      	str	r3, [sp, #4]
 8009efa:	d028      	beq.n	8009f4e <__d2b+0x86>
 8009efc:	4668      	mov	r0, sp
 8009efe:	9600      	str	r6, [sp, #0]
 8009f00:	f7ff fd10 	bl	8009924 <__lo0bits>
 8009f04:	9900      	ldr	r1, [sp, #0]
 8009f06:	b300      	cbz	r0, 8009f4a <__d2b+0x82>
 8009f08:	9a01      	ldr	r2, [sp, #4]
 8009f0a:	f1c0 0320 	rsb	r3, r0, #32
 8009f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f12:	430b      	orrs	r3, r1
 8009f14:	40c2      	lsrs	r2, r0
 8009f16:	6163      	str	r3, [r4, #20]
 8009f18:	9201      	str	r2, [sp, #4]
 8009f1a:	9b01      	ldr	r3, [sp, #4]
 8009f1c:	61a3      	str	r3, [r4, #24]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	bf14      	ite	ne
 8009f22:	2202      	movne	r2, #2
 8009f24:	2201      	moveq	r2, #1
 8009f26:	6122      	str	r2, [r4, #16]
 8009f28:	b1d5      	cbz	r5, 8009f60 <__d2b+0x98>
 8009f2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f2e:	4405      	add	r5, r0
 8009f30:	f8c9 5000 	str.w	r5, [r9]
 8009f34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f38:	f8c8 0000 	str.w	r0, [r8]
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	b003      	add	sp, #12
 8009f40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f48:	e7d5      	b.n	8009ef6 <__d2b+0x2e>
 8009f4a:	6161      	str	r1, [r4, #20]
 8009f4c:	e7e5      	b.n	8009f1a <__d2b+0x52>
 8009f4e:	a801      	add	r0, sp, #4
 8009f50:	f7ff fce8 	bl	8009924 <__lo0bits>
 8009f54:	9b01      	ldr	r3, [sp, #4]
 8009f56:	6163      	str	r3, [r4, #20]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	6122      	str	r2, [r4, #16]
 8009f5c:	3020      	adds	r0, #32
 8009f5e:	e7e3      	b.n	8009f28 <__d2b+0x60>
 8009f60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f68:	f8c9 0000 	str.w	r0, [r9]
 8009f6c:	6918      	ldr	r0, [r3, #16]
 8009f6e:	f7ff fcb9 	bl	80098e4 <__hi0bits>
 8009f72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f76:	e7df      	b.n	8009f38 <__d2b+0x70>
 8009f78:	0800bd19 	.word	0x0800bd19
 8009f7c:	0800be0c 	.word	0x0800be0c

08009f80 <__ratio>:
 8009f80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f84:	4688      	mov	r8, r1
 8009f86:	4669      	mov	r1, sp
 8009f88:	4681      	mov	r9, r0
 8009f8a:	f7ff ff4d 	bl	8009e28 <__b2d>
 8009f8e:	a901      	add	r1, sp, #4
 8009f90:	4640      	mov	r0, r8
 8009f92:	ec55 4b10 	vmov	r4, r5, d0
 8009f96:	f7ff ff47 	bl	8009e28 <__b2d>
 8009f9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f9e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009fa2:	eba3 0c02 	sub.w	ip, r3, r2
 8009fa6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009faa:	1a9b      	subs	r3, r3, r2
 8009fac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009fb0:	ec51 0b10 	vmov	r0, r1, d0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	bfd6      	itet	le
 8009fb8:	460a      	movle	r2, r1
 8009fba:	462a      	movgt	r2, r5
 8009fbc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009fc0:	468b      	mov	fp, r1
 8009fc2:	462f      	mov	r7, r5
 8009fc4:	bfd4      	ite	le
 8009fc6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009fca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009fce:	4620      	mov	r0, r4
 8009fd0:	ee10 2a10 	vmov	r2, s0
 8009fd4:	465b      	mov	r3, fp
 8009fd6:	4639      	mov	r1, r7
 8009fd8:	f7f6 fc48 	bl	800086c <__aeabi_ddiv>
 8009fdc:	ec41 0b10 	vmov	d0, r0, r1
 8009fe0:	b003      	add	sp, #12
 8009fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009fe6 <__copybits>:
 8009fe6:	3901      	subs	r1, #1
 8009fe8:	b570      	push	{r4, r5, r6, lr}
 8009fea:	1149      	asrs	r1, r1, #5
 8009fec:	6914      	ldr	r4, [r2, #16]
 8009fee:	3101      	adds	r1, #1
 8009ff0:	f102 0314 	add.w	r3, r2, #20
 8009ff4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ff8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ffc:	1f05      	subs	r5, r0, #4
 8009ffe:	42a3      	cmp	r3, r4
 800a000:	d30c      	bcc.n	800a01c <__copybits+0x36>
 800a002:	1aa3      	subs	r3, r4, r2
 800a004:	3b11      	subs	r3, #17
 800a006:	f023 0303 	bic.w	r3, r3, #3
 800a00a:	3211      	adds	r2, #17
 800a00c:	42a2      	cmp	r2, r4
 800a00e:	bf88      	it	hi
 800a010:	2300      	movhi	r3, #0
 800a012:	4418      	add	r0, r3
 800a014:	2300      	movs	r3, #0
 800a016:	4288      	cmp	r0, r1
 800a018:	d305      	bcc.n	800a026 <__copybits+0x40>
 800a01a:	bd70      	pop	{r4, r5, r6, pc}
 800a01c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a020:	f845 6f04 	str.w	r6, [r5, #4]!
 800a024:	e7eb      	b.n	8009ffe <__copybits+0x18>
 800a026:	f840 3b04 	str.w	r3, [r0], #4
 800a02a:	e7f4      	b.n	800a016 <__copybits+0x30>

0800a02c <__any_on>:
 800a02c:	f100 0214 	add.w	r2, r0, #20
 800a030:	6900      	ldr	r0, [r0, #16]
 800a032:	114b      	asrs	r3, r1, #5
 800a034:	4298      	cmp	r0, r3
 800a036:	b510      	push	{r4, lr}
 800a038:	db11      	blt.n	800a05e <__any_on+0x32>
 800a03a:	dd0a      	ble.n	800a052 <__any_on+0x26>
 800a03c:	f011 011f 	ands.w	r1, r1, #31
 800a040:	d007      	beq.n	800a052 <__any_on+0x26>
 800a042:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a046:	fa24 f001 	lsr.w	r0, r4, r1
 800a04a:	fa00 f101 	lsl.w	r1, r0, r1
 800a04e:	428c      	cmp	r4, r1
 800a050:	d10b      	bne.n	800a06a <__any_on+0x3e>
 800a052:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a056:	4293      	cmp	r3, r2
 800a058:	d803      	bhi.n	800a062 <__any_on+0x36>
 800a05a:	2000      	movs	r0, #0
 800a05c:	bd10      	pop	{r4, pc}
 800a05e:	4603      	mov	r3, r0
 800a060:	e7f7      	b.n	800a052 <__any_on+0x26>
 800a062:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a066:	2900      	cmp	r1, #0
 800a068:	d0f5      	beq.n	800a056 <__any_on+0x2a>
 800a06a:	2001      	movs	r0, #1
 800a06c:	e7f6      	b.n	800a05c <__any_on+0x30>

0800a06e <_calloc_r>:
 800a06e:	b513      	push	{r0, r1, r4, lr}
 800a070:	434a      	muls	r2, r1
 800a072:	4611      	mov	r1, r2
 800a074:	9201      	str	r2, [sp, #4]
 800a076:	f000 f859 	bl	800a12c <_malloc_r>
 800a07a:	4604      	mov	r4, r0
 800a07c:	b118      	cbz	r0, 800a086 <_calloc_r+0x18>
 800a07e:	9a01      	ldr	r2, [sp, #4]
 800a080:	2100      	movs	r1, #0
 800a082:	f7fb ff05 	bl	8005e90 <memset>
 800a086:	4620      	mov	r0, r4
 800a088:	b002      	add	sp, #8
 800a08a:	bd10      	pop	{r4, pc}

0800a08c <_free_r>:
 800a08c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a08e:	2900      	cmp	r1, #0
 800a090:	d048      	beq.n	800a124 <_free_r+0x98>
 800a092:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a096:	9001      	str	r0, [sp, #4]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	f1a1 0404 	sub.w	r4, r1, #4
 800a09e:	bfb8      	it	lt
 800a0a0:	18e4      	addlt	r4, r4, r3
 800a0a2:	f000 fc47 	bl	800a934 <__malloc_lock>
 800a0a6:	4a20      	ldr	r2, [pc, #128]	; (800a128 <_free_r+0x9c>)
 800a0a8:	9801      	ldr	r0, [sp, #4]
 800a0aa:	6813      	ldr	r3, [r2, #0]
 800a0ac:	4615      	mov	r5, r2
 800a0ae:	b933      	cbnz	r3, 800a0be <_free_r+0x32>
 800a0b0:	6063      	str	r3, [r4, #4]
 800a0b2:	6014      	str	r4, [r2, #0]
 800a0b4:	b003      	add	sp, #12
 800a0b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0ba:	f000 bc41 	b.w	800a940 <__malloc_unlock>
 800a0be:	42a3      	cmp	r3, r4
 800a0c0:	d90b      	bls.n	800a0da <_free_r+0x4e>
 800a0c2:	6821      	ldr	r1, [r4, #0]
 800a0c4:	1862      	adds	r2, r4, r1
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	bf04      	itt	eq
 800a0ca:	681a      	ldreq	r2, [r3, #0]
 800a0cc:	685b      	ldreq	r3, [r3, #4]
 800a0ce:	6063      	str	r3, [r4, #4]
 800a0d0:	bf04      	itt	eq
 800a0d2:	1852      	addeq	r2, r2, r1
 800a0d4:	6022      	streq	r2, [r4, #0]
 800a0d6:	602c      	str	r4, [r5, #0]
 800a0d8:	e7ec      	b.n	800a0b4 <_free_r+0x28>
 800a0da:	461a      	mov	r2, r3
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	b10b      	cbz	r3, 800a0e4 <_free_r+0x58>
 800a0e0:	42a3      	cmp	r3, r4
 800a0e2:	d9fa      	bls.n	800a0da <_free_r+0x4e>
 800a0e4:	6811      	ldr	r1, [r2, #0]
 800a0e6:	1855      	adds	r5, r2, r1
 800a0e8:	42a5      	cmp	r5, r4
 800a0ea:	d10b      	bne.n	800a104 <_free_r+0x78>
 800a0ec:	6824      	ldr	r4, [r4, #0]
 800a0ee:	4421      	add	r1, r4
 800a0f0:	1854      	adds	r4, r2, r1
 800a0f2:	42a3      	cmp	r3, r4
 800a0f4:	6011      	str	r1, [r2, #0]
 800a0f6:	d1dd      	bne.n	800a0b4 <_free_r+0x28>
 800a0f8:	681c      	ldr	r4, [r3, #0]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	6053      	str	r3, [r2, #4]
 800a0fe:	4421      	add	r1, r4
 800a100:	6011      	str	r1, [r2, #0]
 800a102:	e7d7      	b.n	800a0b4 <_free_r+0x28>
 800a104:	d902      	bls.n	800a10c <_free_r+0x80>
 800a106:	230c      	movs	r3, #12
 800a108:	6003      	str	r3, [r0, #0]
 800a10a:	e7d3      	b.n	800a0b4 <_free_r+0x28>
 800a10c:	6825      	ldr	r5, [r4, #0]
 800a10e:	1961      	adds	r1, r4, r5
 800a110:	428b      	cmp	r3, r1
 800a112:	bf04      	itt	eq
 800a114:	6819      	ldreq	r1, [r3, #0]
 800a116:	685b      	ldreq	r3, [r3, #4]
 800a118:	6063      	str	r3, [r4, #4]
 800a11a:	bf04      	itt	eq
 800a11c:	1949      	addeq	r1, r1, r5
 800a11e:	6021      	streq	r1, [r4, #0]
 800a120:	6054      	str	r4, [r2, #4]
 800a122:	e7c7      	b.n	800a0b4 <_free_r+0x28>
 800a124:	b003      	add	sp, #12
 800a126:	bd30      	pop	{r4, r5, pc}
 800a128:	20000244 	.word	0x20000244

0800a12c <_malloc_r>:
 800a12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a12e:	1ccd      	adds	r5, r1, #3
 800a130:	f025 0503 	bic.w	r5, r5, #3
 800a134:	3508      	adds	r5, #8
 800a136:	2d0c      	cmp	r5, #12
 800a138:	bf38      	it	cc
 800a13a:	250c      	movcc	r5, #12
 800a13c:	2d00      	cmp	r5, #0
 800a13e:	4606      	mov	r6, r0
 800a140:	db01      	blt.n	800a146 <_malloc_r+0x1a>
 800a142:	42a9      	cmp	r1, r5
 800a144:	d903      	bls.n	800a14e <_malloc_r+0x22>
 800a146:	230c      	movs	r3, #12
 800a148:	6033      	str	r3, [r6, #0]
 800a14a:	2000      	movs	r0, #0
 800a14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a14e:	f000 fbf1 	bl	800a934 <__malloc_lock>
 800a152:	4921      	ldr	r1, [pc, #132]	; (800a1d8 <_malloc_r+0xac>)
 800a154:	680a      	ldr	r2, [r1, #0]
 800a156:	4614      	mov	r4, r2
 800a158:	b99c      	cbnz	r4, 800a182 <_malloc_r+0x56>
 800a15a:	4f20      	ldr	r7, [pc, #128]	; (800a1dc <_malloc_r+0xb0>)
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	b923      	cbnz	r3, 800a16a <_malloc_r+0x3e>
 800a160:	4621      	mov	r1, r4
 800a162:	4630      	mov	r0, r6
 800a164:	f000 fafc 	bl	800a760 <_sbrk_r>
 800a168:	6038      	str	r0, [r7, #0]
 800a16a:	4629      	mov	r1, r5
 800a16c:	4630      	mov	r0, r6
 800a16e:	f000 faf7 	bl	800a760 <_sbrk_r>
 800a172:	1c43      	adds	r3, r0, #1
 800a174:	d123      	bne.n	800a1be <_malloc_r+0x92>
 800a176:	230c      	movs	r3, #12
 800a178:	6033      	str	r3, [r6, #0]
 800a17a:	4630      	mov	r0, r6
 800a17c:	f000 fbe0 	bl	800a940 <__malloc_unlock>
 800a180:	e7e3      	b.n	800a14a <_malloc_r+0x1e>
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	1b5b      	subs	r3, r3, r5
 800a186:	d417      	bmi.n	800a1b8 <_malloc_r+0x8c>
 800a188:	2b0b      	cmp	r3, #11
 800a18a:	d903      	bls.n	800a194 <_malloc_r+0x68>
 800a18c:	6023      	str	r3, [r4, #0]
 800a18e:	441c      	add	r4, r3
 800a190:	6025      	str	r5, [r4, #0]
 800a192:	e004      	b.n	800a19e <_malloc_r+0x72>
 800a194:	6863      	ldr	r3, [r4, #4]
 800a196:	42a2      	cmp	r2, r4
 800a198:	bf0c      	ite	eq
 800a19a:	600b      	streq	r3, [r1, #0]
 800a19c:	6053      	strne	r3, [r2, #4]
 800a19e:	4630      	mov	r0, r6
 800a1a0:	f000 fbce 	bl	800a940 <__malloc_unlock>
 800a1a4:	f104 000b 	add.w	r0, r4, #11
 800a1a8:	1d23      	adds	r3, r4, #4
 800a1aa:	f020 0007 	bic.w	r0, r0, #7
 800a1ae:	1ac2      	subs	r2, r0, r3
 800a1b0:	d0cc      	beq.n	800a14c <_malloc_r+0x20>
 800a1b2:	1a1b      	subs	r3, r3, r0
 800a1b4:	50a3      	str	r3, [r4, r2]
 800a1b6:	e7c9      	b.n	800a14c <_malloc_r+0x20>
 800a1b8:	4622      	mov	r2, r4
 800a1ba:	6864      	ldr	r4, [r4, #4]
 800a1bc:	e7cc      	b.n	800a158 <_malloc_r+0x2c>
 800a1be:	1cc4      	adds	r4, r0, #3
 800a1c0:	f024 0403 	bic.w	r4, r4, #3
 800a1c4:	42a0      	cmp	r0, r4
 800a1c6:	d0e3      	beq.n	800a190 <_malloc_r+0x64>
 800a1c8:	1a21      	subs	r1, r4, r0
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	f000 fac8 	bl	800a760 <_sbrk_r>
 800a1d0:	3001      	adds	r0, #1
 800a1d2:	d1dd      	bne.n	800a190 <_malloc_r+0x64>
 800a1d4:	e7cf      	b.n	800a176 <_malloc_r+0x4a>
 800a1d6:	bf00      	nop
 800a1d8:	20000244 	.word	0x20000244
 800a1dc:	20000248 	.word	0x20000248

0800a1e0 <__ssputs_r>:
 800a1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e4:	688e      	ldr	r6, [r1, #8]
 800a1e6:	429e      	cmp	r6, r3
 800a1e8:	4682      	mov	sl, r0
 800a1ea:	460c      	mov	r4, r1
 800a1ec:	4690      	mov	r8, r2
 800a1ee:	461f      	mov	r7, r3
 800a1f0:	d838      	bhi.n	800a264 <__ssputs_r+0x84>
 800a1f2:	898a      	ldrh	r2, [r1, #12]
 800a1f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a1f8:	d032      	beq.n	800a260 <__ssputs_r+0x80>
 800a1fa:	6825      	ldr	r5, [r4, #0]
 800a1fc:	6909      	ldr	r1, [r1, #16]
 800a1fe:	eba5 0901 	sub.w	r9, r5, r1
 800a202:	6965      	ldr	r5, [r4, #20]
 800a204:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a208:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a20c:	3301      	adds	r3, #1
 800a20e:	444b      	add	r3, r9
 800a210:	106d      	asrs	r5, r5, #1
 800a212:	429d      	cmp	r5, r3
 800a214:	bf38      	it	cc
 800a216:	461d      	movcc	r5, r3
 800a218:	0553      	lsls	r3, r2, #21
 800a21a:	d531      	bpl.n	800a280 <__ssputs_r+0xa0>
 800a21c:	4629      	mov	r1, r5
 800a21e:	f7ff ff85 	bl	800a12c <_malloc_r>
 800a222:	4606      	mov	r6, r0
 800a224:	b950      	cbnz	r0, 800a23c <__ssputs_r+0x5c>
 800a226:	230c      	movs	r3, #12
 800a228:	f8ca 3000 	str.w	r3, [sl]
 800a22c:	89a3      	ldrh	r3, [r4, #12]
 800a22e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a232:	81a3      	strh	r3, [r4, #12]
 800a234:	f04f 30ff 	mov.w	r0, #4294967295
 800a238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a23c:	6921      	ldr	r1, [r4, #16]
 800a23e:	464a      	mov	r2, r9
 800a240:	f7ff fa4c 	bl	80096dc <memcpy>
 800a244:	89a3      	ldrh	r3, [r4, #12]
 800a246:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a24a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a24e:	81a3      	strh	r3, [r4, #12]
 800a250:	6126      	str	r6, [r4, #16]
 800a252:	6165      	str	r5, [r4, #20]
 800a254:	444e      	add	r6, r9
 800a256:	eba5 0509 	sub.w	r5, r5, r9
 800a25a:	6026      	str	r6, [r4, #0]
 800a25c:	60a5      	str	r5, [r4, #8]
 800a25e:	463e      	mov	r6, r7
 800a260:	42be      	cmp	r6, r7
 800a262:	d900      	bls.n	800a266 <__ssputs_r+0x86>
 800a264:	463e      	mov	r6, r7
 800a266:	4632      	mov	r2, r6
 800a268:	6820      	ldr	r0, [r4, #0]
 800a26a:	4641      	mov	r1, r8
 800a26c:	f000 fb48 	bl	800a900 <memmove>
 800a270:	68a3      	ldr	r3, [r4, #8]
 800a272:	6822      	ldr	r2, [r4, #0]
 800a274:	1b9b      	subs	r3, r3, r6
 800a276:	4432      	add	r2, r6
 800a278:	60a3      	str	r3, [r4, #8]
 800a27a:	6022      	str	r2, [r4, #0]
 800a27c:	2000      	movs	r0, #0
 800a27e:	e7db      	b.n	800a238 <__ssputs_r+0x58>
 800a280:	462a      	mov	r2, r5
 800a282:	f000 fb63 	bl	800a94c <_realloc_r>
 800a286:	4606      	mov	r6, r0
 800a288:	2800      	cmp	r0, #0
 800a28a:	d1e1      	bne.n	800a250 <__ssputs_r+0x70>
 800a28c:	6921      	ldr	r1, [r4, #16]
 800a28e:	4650      	mov	r0, sl
 800a290:	f7ff fefc 	bl	800a08c <_free_r>
 800a294:	e7c7      	b.n	800a226 <__ssputs_r+0x46>
	...

0800a298 <_svfiprintf_r>:
 800a298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a29c:	4698      	mov	r8, r3
 800a29e:	898b      	ldrh	r3, [r1, #12]
 800a2a0:	061b      	lsls	r3, r3, #24
 800a2a2:	b09d      	sub	sp, #116	; 0x74
 800a2a4:	4607      	mov	r7, r0
 800a2a6:	460d      	mov	r5, r1
 800a2a8:	4614      	mov	r4, r2
 800a2aa:	d50e      	bpl.n	800a2ca <_svfiprintf_r+0x32>
 800a2ac:	690b      	ldr	r3, [r1, #16]
 800a2ae:	b963      	cbnz	r3, 800a2ca <_svfiprintf_r+0x32>
 800a2b0:	2140      	movs	r1, #64	; 0x40
 800a2b2:	f7ff ff3b 	bl	800a12c <_malloc_r>
 800a2b6:	6028      	str	r0, [r5, #0]
 800a2b8:	6128      	str	r0, [r5, #16]
 800a2ba:	b920      	cbnz	r0, 800a2c6 <_svfiprintf_r+0x2e>
 800a2bc:	230c      	movs	r3, #12
 800a2be:	603b      	str	r3, [r7, #0]
 800a2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c4:	e0d1      	b.n	800a46a <_svfiprintf_r+0x1d2>
 800a2c6:	2340      	movs	r3, #64	; 0x40
 800a2c8:	616b      	str	r3, [r5, #20]
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ce:	2320      	movs	r3, #32
 800a2d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2d8:	2330      	movs	r3, #48	; 0x30
 800a2da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a484 <_svfiprintf_r+0x1ec>
 800a2de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2e2:	f04f 0901 	mov.w	r9, #1
 800a2e6:	4623      	mov	r3, r4
 800a2e8:	469a      	mov	sl, r3
 800a2ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2ee:	b10a      	cbz	r2, 800a2f4 <_svfiprintf_r+0x5c>
 800a2f0:	2a25      	cmp	r2, #37	; 0x25
 800a2f2:	d1f9      	bne.n	800a2e8 <_svfiprintf_r+0x50>
 800a2f4:	ebba 0b04 	subs.w	fp, sl, r4
 800a2f8:	d00b      	beq.n	800a312 <_svfiprintf_r+0x7a>
 800a2fa:	465b      	mov	r3, fp
 800a2fc:	4622      	mov	r2, r4
 800a2fe:	4629      	mov	r1, r5
 800a300:	4638      	mov	r0, r7
 800a302:	f7ff ff6d 	bl	800a1e0 <__ssputs_r>
 800a306:	3001      	adds	r0, #1
 800a308:	f000 80aa 	beq.w	800a460 <_svfiprintf_r+0x1c8>
 800a30c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a30e:	445a      	add	r2, fp
 800a310:	9209      	str	r2, [sp, #36]	; 0x24
 800a312:	f89a 3000 	ldrb.w	r3, [sl]
 800a316:	2b00      	cmp	r3, #0
 800a318:	f000 80a2 	beq.w	800a460 <_svfiprintf_r+0x1c8>
 800a31c:	2300      	movs	r3, #0
 800a31e:	f04f 32ff 	mov.w	r2, #4294967295
 800a322:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a326:	f10a 0a01 	add.w	sl, sl, #1
 800a32a:	9304      	str	r3, [sp, #16]
 800a32c:	9307      	str	r3, [sp, #28]
 800a32e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a332:	931a      	str	r3, [sp, #104]	; 0x68
 800a334:	4654      	mov	r4, sl
 800a336:	2205      	movs	r2, #5
 800a338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a33c:	4851      	ldr	r0, [pc, #324]	; (800a484 <_svfiprintf_r+0x1ec>)
 800a33e:	f7f5 ff5f 	bl	8000200 <memchr>
 800a342:	9a04      	ldr	r2, [sp, #16]
 800a344:	b9d8      	cbnz	r0, 800a37e <_svfiprintf_r+0xe6>
 800a346:	06d0      	lsls	r0, r2, #27
 800a348:	bf44      	itt	mi
 800a34a:	2320      	movmi	r3, #32
 800a34c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a350:	0711      	lsls	r1, r2, #28
 800a352:	bf44      	itt	mi
 800a354:	232b      	movmi	r3, #43	; 0x2b
 800a356:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a35a:	f89a 3000 	ldrb.w	r3, [sl]
 800a35e:	2b2a      	cmp	r3, #42	; 0x2a
 800a360:	d015      	beq.n	800a38e <_svfiprintf_r+0xf6>
 800a362:	9a07      	ldr	r2, [sp, #28]
 800a364:	4654      	mov	r4, sl
 800a366:	2000      	movs	r0, #0
 800a368:	f04f 0c0a 	mov.w	ip, #10
 800a36c:	4621      	mov	r1, r4
 800a36e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a372:	3b30      	subs	r3, #48	; 0x30
 800a374:	2b09      	cmp	r3, #9
 800a376:	d94e      	bls.n	800a416 <_svfiprintf_r+0x17e>
 800a378:	b1b0      	cbz	r0, 800a3a8 <_svfiprintf_r+0x110>
 800a37a:	9207      	str	r2, [sp, #28]
 800a37c:	e014      	b.n	800a3a8 <_svfiprintf_r+0x110>
 800a37e:	eba0 0308 	sub.w	r3, r0, r8
 800a382:	fa09 f303 	lsl.w	r3, r9, r3
 800a386:	4313      	orrs	r3, r2
 800a388:	9304      	str	r3, [sp, #16]
 800a38a:	46a2      	mov	sl, r4
 800a38c:	e7d2      	b.n	800a334 <_svfiprintf_r+0x9c>
 800a38e:	9b03      	ldr	r3, [sp, #12]
 800a390:	1d19      	adds	r1, r3, #4
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	9103      	str	r1, [sp, #12]
 800a396:	2b00      	cmp	r3, #0
 800a398:	bfbb      	ittet	lt
 800a39a:	425b      	neglt	r3, r3
 800a39c:	f042 0202 	orrlt.w	r2, r2, #2
 800a3a0:	9307      	strge	r3, [sp, #28]
 800a3a2:	9307      	strlt	r3, [sp, #28]
 800a3a4:	bfb8      	it	lt
 800a3a6:	9204      	strlt	r2, [sp, #16]
 800a3a8:	7823      	ldrb	r3, [r4, #0]
 800a3aa:	2b2e      	cmp	r3, #46	; 0x2e
 800a3ac:	d10c      	bne.n	800a3c8 <_svfiprintf_r+0x130>
 800a3ae:	7863      	ldrb	r3, [r4, #1]
 800a3b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a3b2:	d135      	bne.n	800a420 <_svfiprintf_r+0x188>
 800a3b4:	9b03      	ldr	r3, [sp, #12]
 800a3b6:	1d1a      	adds	r2, r3, #4
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	9203      	str	r2, [sp, #12]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	bfb8      	it	lt
 800a3c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3c4:	3402      	adds	r4, #2
 800a3c6:	9305      	str	r3, [sp, #20]
 800a3c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a494 <_svfiprintf_r+0x1fc>
 800a3cc:	7821      	ldrb	r1, [r4, #0]
 800a3ce:	2203      	movs	r2, #3
 800a3d0:	4650      	mov	r0, sl
 800a3d2:	f7f5 ff15 	bl	8000200 <memchr>
 800a3d6:	b140      	cbz	r0, 800a3ea <_svfiprintf_r+0x152>
 800a3d8:	2340      	movs	r3, #64	; 0x40
 800a3da:	eba0 000a 	sub.w	r0, r0, sl
 800a3de:	fa03 f000 	lsl.w	r0, r3, r0
 800a3e2:	9b04      	ldr	r3, [sp, #16]
 800a3e4:	4303      	orrs	r3, r0
 800a3e6:	3401      	adds	r4, #1
 800a3e8:	9304      	str	r3, [sp, #16]
 800a3ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ee:	4826      	ldr	r0, [pc, #152]	; (800a488 <_svfiprintf_r+0x1f0>)
 800a3f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3f4:	2206      	movs	r2, #6
 800a3f6:	f7f5 ff03 	bl	8000200 <memchr>
 800a3fa:	2800      	cmp	r0, #0
 800a3fc:	d038      	beq.n	800a470 <_svfiprintf_r+0x1d8>
 800a3fe:	4b23      	ldr	r3, [pc, #140]	; (800a48c <_svfiprintf_r+0x1f4>)
 800a400:	bb1b      	cbnz	r3, 800a44a <_svfiprintf_r+0x1b2>
 800a402:	9b03      	ldr	r3, [sp, #12]
 800a404:	3307      	adds	r3, #7
 800a406:	f023 0307 	bic.w	r3, r3, #7
 800a40a:	3308      	adds	r3, #8
 800a40c:	9303      	str	r3, [sp, #12]
 800a40e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a410:	4433      	add	r3, r6
 800a412:	9309      	str	r3, [sp, #36]	; 0x24
 800a414:	e767      	b.n	800a2e6 <_svfiprintf_r+0x4e>
 800a416:	fb0c 3202 	mla	r2, ip, r2, r3
 800a41a:	460c      	mov	r4, r1
 800a41c:	2001      	movs	r0, #1
 800a41e:	e7a5      	b.n	800a36c <_svfiprintf_r+0xd4>
 800a420:	2300      	movs	r3, #0
 800a422:	3401      	adds	r4, #1
 800a424:	9305      	str	r3, [sp, #20]
 800a426:	4619      	mov	r1, r3
 800a428:	f04f 0c0a 	mov.w	ip, #10
 800a42c:	4620      	mov	r0, r4
 800a42e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a432:	3a30      	subs	r2, #48	; 0x30
 800a434:	2a09      	cmp	r2, #9
 800a436:	d903      	bls.n	800a440 <_svfiprintf_r+0x1a8>
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d0c5      	beq.n	800a3c8 <_svfiprintf_r+0x130>
 800a43c:	9105      	str	r1, [sp, #20]
 800a43e:	e7c3      	b.n	800a3c8 <_svfiprintf_r+0x130>
 800a440:	fb0c 2101 	mla	r1, ip, r1, r2
 800a444:	4604      	mov	r4, r0
 800a446:	2301      	movs	r3, #1
 800a448:	e7f0      	b.n	800a42c <_svfiprintf_r+0x194>
 800a44a:	ab03      	add	r3, sp, #12
 800a44c:	9300      	str	r3, [sp, #0]
 800a44e:	462a      	mov	r2, r5
 800a450:	4b0f      	ldr	r3, [pc, #60]	; (800a490 <_svfiprintf_r+0x1f8>)
 800a452:	a904      	add	r1, sp, #16
 800a454:	4638      	mov	r0, r7
 800a456:	f7fb fdc3 	bl	8005fe0 <_printf_float>
 800a45a:	1c42      	adds	r2, r0, #1
 800a45c:	4606      	mov	r6, r0
 800a45e:	d1d6      	bne.n	800a40e <_svfiprintf_r+0x176>
 800a460:	89ab      	ldrh	r3, [r5, #12]
 800a462:	065b      	lsls	r3, r3, #25
 800a464:	f53f af2c 	bmi.w	800a2c0 <_svfiprintf_r+0x28>
 800a468:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a46a:	b01d      	add	sp, #116	; 0x74
 800a46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a470:	ab03      	add	r3, sp, #12
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	462a      	mov	r2, r5
 800a476:	4b06      	ldr	r3, [pc, #24]	; (800a490 <_svfiprintf_r+0x1f8>)
 800a478:	a904      	add	r1, sp, #16
 800a47a:	4638      	mov	r0, r7
 800a47c:	f7fc f854 	bl	8006528 <_printf_i>
 800a480:	e7eb      	b.n	800a45a <_svfiprintf_r+0x1c2>
 800a482:	bf00      	nop
 800a484:	0800bf6c 	.word	0x0800bf6c
 800a488:	0800bf76 	.word	0x0800bf76
 800a48c:	08005fe1 	.word	0x08005fe1
 800a490:	0800a1e1 	.word	0x0800a1e1
 800a494:	0800bf72 	.word	0x0800bf72

0800a498 <__sfputc_r>:
 800a498:	6893      	ldr	r3, [r2, #8]
 800a49a:	3b01      	subs	r3, #1
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	b410      	push	{r4}
 800a4a0:	6093      	str	r3, [r2, #8]
 800a4a2:	da08      	bge.n	800a4b6 <__sfputc_r+0x1e>
 800a4a4:	6994      	ldr	r4, [r2, #24]
 800a4a6:	42a3      	cmp	r3, r4
 800a4a8:	db01      	blt.n	800a4ae <__sfputc_r+0x16>
 800a4aa:	290a      	cmp	r1, #10
 800a4ac:	d103      	bne.n	800a4b6 <__sfputc_r+0x1e>
 800a4ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4b2:	f7fd bbfd 	b.w	8007cb0 <__swbuf_r>
 800a4b6:	6813      	ldr	r3, [r2, #0]
 800a4b8:	1c58      	adds	r0, r3, #1
 800a4ba:	6010      	str	r0, [r2, #0]
 800a4bc:	7019      	strb	r1, [r3, #0]
 800a4be:	4608      	mov	r0, r1
 800a4c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4c4:	4770      	bx	lr

0800a4c6 <__sfputs_r>:
 800a4c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c8:	4606      	mov	r6, r0
 800a4ca:	460f      	mov	r7, r1
 800a4cc:	4614      	mov	r4, r2
 800a4ce:	18d5      	adds	r5, r2, r3
 800a4d0:	42ac      	cmp	r4, r5
 800a4d2:	d101      	bne.n	800a4d8 <__sfputs_r+0x12>
 800a4d4:	2000      	movs	r0, #0
 800a4d6:	e007      	b.n	800a4e8 <__sfputs_r+0x22>
 800a4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4dc:	463a      	mov	r2, r7
 800a4de:	4630      	mov	r0, r6
 800a4e0:	f7ff ffda 	bl	800a498 <__sfputc_r>
 800a4e4:	1c43      	adds	r3, r0, #1
 800a4e6:	d1f3      	bne.n	800a4d0 <__sfputs_r+0xa>
 800a4e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a4ec <_vfiprintf_r>:
 800a4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f0:	460d      	mov	r5, r1
 800a4f2:	b09d      	sub	sp, #116	; 0x74
 800a4f4:	4614      	mov	r4, r2
 800a4f6:	4698      	mov	r8, r3
 800a4f8:	4606      	mov	r6, r0
 800a4fa:	b118      	cbz	r0, 800a504 <_vfiprintf_r+0x18>
 800a4fc:	6983      	ldr	r3, [r0, #24]
 800a4fe:	b90b      	cbnz	r3, 800a504 <_vfiprintf_r+0x18>
 800a500:	f7fe fc48 	bl	8008d94 <__sinit>
 800a504:	4b89      	ldr	r3, [pc, #548]	; (800a72c <_vfiprintf_r+0x240>)
 800a506:	429d      	cmp	r5, r3
 800a508:	d11b      	bne.n	800a542 <_vfiprintf_r+0x56>
 800a50a:	6875      	ldr	r5, [r6, #4]
 800a50c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a50e:	07d9      	lsls	r1, r3, #31
 800a510:	d405      	bmi.n	800a51e <_vfiprintf_r+0x32>
 800a512:	89ab      	ldrh	r3, [r5, #12]
 800a514:	059a      	lsls	r2, r3, #22
 800a516:	d402      	bmi.n	800a51e <_vfiprintf_r+0x32>
 800a518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a51a:	f7ff f85e 	bl	80095da <__retarget_lock_acquire_recursive>
 800a51e:	89ab      	ldrh	r3, [r5, #12]
 800a520:	071b      	lsls	r3, r3, #28
 800a522:	d501      	bpl.n	800a528 <_vfiprintf_r+0x3c>
 800a524:	692b      	ldr	r3, [r5, #16]
 800a526:	b9eb      	cbnz	r3, 800a564 <_vfiprintf_r+0x78>
 800a528:	4629      	mov	r1, r5
 800a52a:	4630      	mov	r0, r6
 800a52c:	f7fd fc12 	bl	8007d54 <__swsetup_r>
 800a530:	b1c0      	cbz	r0, 800a564 <_vfiprintf_r+0x78>
 800a532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a534:	07dc      	lsls	r4, r3, #31
 800a536:	d50e      	bpl.n	800a556 <_vfiprintf_r+0x6a>
 800a538:	f04f 30ff 	mov.w	r0, #4294967295
 800a53c:	b01d      	add	sp, #116	; 0x74
 800a53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a542:	4b7b      	ldr	r3, [pc, #492]	; (800a730 <_vfiprintf_r+0x244>)
 800a544:	429d      	cmp	r5, r3
 800a546:	d101      	bne.n	800a54c <_vfiprintf_r+0x60>
 800a548:	68b5      	ldr	r5, [r6, #8]
 800a54a:	e7df      	b.n	800a50c <_vfiprintf_r+0x20>
 800a54c:	4b79      	ldr	r3, [pc, #484]	; (800a734 <_vfiprintf_r+0x248>)
 800a54e:	429d      	cmp	r5, r3
 800a550:	bf08      	it	eq
 800a552:	68f5      	ldreq	r5, [r6, #12]
 800a554:	e7da      	b.n	800a50c <_vfiprintf_r+0x20>
 800a556:	89ab      	ldrh	r3, [r5, #12]
 800a558:	0598      	lsls	r0, r3, #22
 800a55a:	d4ed      	bmi.n	800a538 <_vfiprintf_r+0x4c>
 800a55c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a55e:	f7ff f83d 	bl	80095dc <__retarget_lock_release_recursive>
 800a562:	e7e9      	b.n	800a538 <_vfiprintf_r+0x4c>
 800a564:	2300      	movs	r3, #0
 800a566:	9309      	str	r3, [sp, #36]	; 0x24
 800a568:	2320      	movs	r3, #32
 800a56a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a56e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a572:	2330      	movs	r3, #48	; 0x30
 800a574:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a738 <_vfiprintf_r+0x24c>
 800a578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a57c:	f04f 0901 	mov.w	r9, #1
 800a580:	4623      	mov	r3, r4
 800a582:	469a      	mov	sl, r3
 800a584:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a588:	b10a      	cbz	r2, 800a58e <_vfiprintf_r+0xa2>
 800a58a:	2a25      	cmp	r2, #37	; 0x25
 800a58c:	d1f9      	bne.n	800a582 <_vfiprintf_r+0x96>
 800a58e:	ebba 0b04 	subs.w	fp, sl, r4
 800a592:	d00b      	beq.n	800a5ac <_vfiprintf_r+0xc0>
 800a594:	465b      	mov	r3, fp
 800a596:	4622      	mov	r2, r4
 800a598:	4629      	mov	r1, r5
 800a59a:	4630      	mov	r0, r6
 800a59c:	f7ff ff93 	bl	800a4c6 <__sfputs_r>
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	f000 80aa 	beq.w	800a6fa <_vfiprintf_r+0x20e>
 800a5a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5a8:	445a      	add	r2, fp
 800a5aa:	9209      	str	r2, [sp, #36]	; 0x24
 800a5ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f000 80a2 	beq.w	800a6fa <_vfiprintf_r+0x20e>
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a5bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5c0:	f10a 0a01 	add.w	sl, sl, #1
 800a5c4:	9304      	str	r3, [sp, #16]
 800a5c6:	9307      	str	r3, [sp, #28]
 800a5c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5cc:	931a      	str	r3, [sp, #104]	; 0x68
 800a5ce:	4654      	mov	r4, sl
 800a5d0:	2205      	movs	r2, #5
 800a5d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5d6:	4858      	ldr	r0, [pc, #352]	; (800a738 <_vfiprintf_r+0x24c>)
 800a5d8:	f7f5 fe12 	bl	8000200 <memchr>
 800a5dc:	9a04      	ldr	r2, [sp, #16]
 800a5de:	b9d8      	cbnz	r0, 800a618 <_vfiprintf_r+0x12c>
 800a5e0:	06d1      	lsls	r1, r2, #27
 800a5e2:	bf44      	itt	mi
 800a5e4:	2320      	movmi	r3, #32
 800a5e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5ea:	0713      	lsls	r3, r2, #28
 800a5ec:	bf44      	itt	mi
 800a5ee:	232b      	movmi	r3, #43	; 0x2b
 800a5f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a5f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a5fa:	d015      	beq.n	800a628 <_vfiprintf_r+0x13c>
 800a5fc:	9a07      	ldr	r2, [sp, #28]
 800a5fe:	4654      	mov	r4, sl
 800a600:	2000      	movs	r0, #0
 800a602:	f04f 0c0a 	mov.w	ip, #10
 800a606:	4621      	mov	r1, r4
 800a608:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a60c:	3b30      	subs	r3, #48	; 0x30
 800a60e:	2b09      	cmp	r3, #9
 800a610:	d94e      	bls.n	800a6b0 <_vfiprintf_r+0x1c4>
 800a612:	b1b0      	cbz	r0, 800a642 <_vfiprintf_r+0x156>
 800a614:	9207      	str	r2, [sp, #28]
 800a616:	e014      	b.n	800a642 <_vfiprintf_r+0x156>
 800a618:	eba0 0308 	sub.w	r3, r0, r8
 800a61c:	fa09 f303 	lsl.w	r3, r9, r3
 800a620:	4313      	orrs	r3, r2
 800a622:	9304      	str	r3, [sp, #16]
 800a624:	46a2      	mov	sl, r4
 800a626:	e7d2      	b.n	800a5ce <_vfiprintf_r+0xe2>
 800a628:	9b03      	ldr	r3, [sp, #12]
 800a62a:	1d19      	adds	r1, r3, #4
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	9103      	str	r1, [sp, #12]
 800a630:	2b00      	cmp	r3, #0
 800a632:	bfbb      	ittet	lt
 800a634:	425b      	neglt	r3, r3
 800a636:	f042 0202 	orrlt.w	r2, r2, #2
 800a63a:	9307      	strge	r3, [sp, #28]
 800a63c:	9307      	strlt	r3, [sp, #28]
 800a63e:	bfb8      	it	lt
 800a640:	9204      	strlt	r2, [sp, #16]
 800a642:	7823      	ldrb	r3, [r4, #0]
 800a644:	2b2e      	cmp	r3, #46	; 0x2e
 800a646:	d10c      	bne.n	800a662 <_vfiprintf_r+0x176>
 800a648:	7863      	ldrb	r3, [r4, #1]
 800a64a:	2b2a      	cmp	r3, #42	; 0x2a
 800a64c:	d135      	bne.n	800a6ba <_vfiprintf_r+0x1ce>
 800a64e:	9b03      	ldr	r3, [sp, #12]
 800a650:	1d1a      	adds	r2, r3, #4
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	9203      	str	r2, [sp, #12]
 800a656:	2b00      	cmp	r3, #0
 800a658:	bfb8      	it	lt
 800a65a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a65e:	3402      	adds	r4, #2
 800a660:	9305      	str	r3, [sp, #20]
 800a662:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a748 <_vfiprintf_r+0x25c>
 800a666:	7821      	ldrb	r1, [r4, #0]
 800a668:	2203      	movs	r2, #3
 800a66a:	4650      	mov	r0, sl
 800a66c:	f7f5 fdc8 	bl	8000200 <memchr>
 800a670:	b140      	cbz	r0, 800a684 <_vfiprintf_r+0x198>
 800a672:	2340      	movs	r3, #64	; 0x40
 800a674:	eba0 000a 	sub.w	r0, r0, sl
 800a678:	fa03 f000 	lsl.w	r0, r3, r0
 800a67c:	9b04      	ldr	r3, [sp, #16]
 800a67e:	4303      	orrs	r3, r0
 800a680:	3401      	adds	r4, #1
 800a682:	9304      	str	r3, [sp, #16]
 800a684:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a688:	482c      	ldr	r0, [pc, #176]	; (800a73c <_vfiprintf_r+0x250>)
 800a68a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a68e:	2206      	movs	r2, #6
 800a690:	f7f5 fdb6 	bl	8000200 <memchr>
 800a694:	2800      	cmp	r0, #0
 800a696:	d03f      	beq.n	800a718 <_vfiprintf_r+0x22c>
 800a698:	4b29      	ldr	r3, [pc, #164]	; (800a740 <_vfiprintf_r+0x254>)
 800a69a:	bb1b      	cbnz	r3, 800a6e4 <_vfiprintf_r+0x1f8>
 800a69c:	9b03      	ldr	r3, [sp, #12]
 800a69e:	3307      	adds	r3, #7
 800a6a0:	f023 0307 	bic.w	r3, r3, #7
 800a6a4:	3308      	adds	r3, #8
 800a6a6:	9303      	str	r3, [sp, #12]
 800a6a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6aa:	443b      	add	r3, r7
 800a6ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ae:	e767      	b.n	800a580 <_vfiprintf_r+0x94>
 800a6b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6b4:	460c      	mov	r4, r1
 800a6b6:	2001      	movs	r0, #1
 800a6b8:	e7a5      	b.n	800a606 <_vfiprintf_r+0x11a>
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	3401      	adds	r4, #1
 800a6be:	9305      	str	r3, [sp, #20]
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	f04f 0c0a 	mov.w	ip, #10
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6cc:	3a30      	subs	r2, #48	; 0x30
 800a6ce:	2a09      	cmp	r2, #9
 800a6d0:	d903      	bls.n	800a6da <_vfiprintf_r+0x1ee>
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d0c5      	beq.n	800a662 <_vfiprintf_r+0x176>
 800a6d6:	9105      	str	r1, [sp, #20]
 800a6d8:	e7c3      	b.n	800a662 <_vfiprintf_r+0x176>
 800a6da:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6de:	4604      	mov	r4, r0
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e7f0      	b.n	800a6c6 <_vfiprintf_r+0x1da>
 800a6e4:	ab03      	add	r3, sp, #12
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	462a      	mov	r2, r5
 800a6ea:	4b16      	ldr	r3, [pc, #88]	; (800a744 <_vfiprintf_r+0x258>)
 800a6ec:	a904      	add	r1, sp, #16
 800a6ee:	4630      	mov	r0, r6
 800a6f0:	f7fb fc76 	bl	8005fe0 <_printf_float>
 800a6f4:	4607      	mov	r7, r0
 800a6f6:	1c78      	adds	r0, r7, #1
 800a6f8:	d1d6      	bne.n	800a6a8 <_vfiprintf_r+0x1bc>
 800a6fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6fc:	07d9      	lsls	r1, r3, #31
 800a6fe:	d405      	bmi.n	800a70c <_vfiprintf_r+0x220>
 800a700:	89ab      	ldrh	r3, [r5, #12]
 800a702:	059a      	lsls	r2, r3, #22
 800a704:	d402      	bmi.n	800a70c <_vfiprintf_r+0x220>
 800a706:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a708:	f7fe ff68 	bl	80095dc <__retarget_lock_release_recursive>
 800a70c:	89ab      	ldrh	r3, [r5, #12]
 800a70e:	065b      	lsls	r3, r3, #25
 800a710:	f53f af12 	bmi.w	800a538 <_vfiprintf_r+0x4c>
 800a714:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a716:	e711      	b.n	800a53c <_vfiprintf_r+0x50>
 800a718:	ab03      	add	r3, sp, #12
 800a71a:	9300      	str	r3, [sp, #0]
 800a71c:	462a      	mov	r2, r5
 800a71e:	4b09      	ldr	r3, [pc, #36]	; (800a744 <_vfiprintf_r+0x258>)
 800a720:	a904      	add	r1, sp, #16
 800a722:	4630      	mov	r0, r6
 800a724:	f7fb ff00 	bl	8006528 <_printf_i>
 800a728:	e7e4      	b.n	800a6f4 <_vfiprintf_r+0x208>
 800a72a:	bf00      	nop
 800a72c:	0800bd4c 	.word	0x0800bd4c
 800a730:	0800bd6c 	.word	0x0800bd6c
 800a734:	0800bd2c 	.word	0x0800bd2c
 800a738:	0800bf6c 	.word	0x0800bf6c
 800a73c:	0800bf76 	.word	0x0800bf76
 800a740:	08005fe1 	.word	0x08005fe1
 800a744:	0800a4c7 	.word	0x0800a4c7
 800a748:	0800bf72 	.word	0x0800bf72
 800a74c:	00000000 	.word	0x00000000

0800a750 <nan>:
 800a750:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a758 <nan+0x8>
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
 800a758:	00000000 	.word	0x00000000
 800a75c:	7ff80000 	.word	0x7ff80000

0800a760 <_sbrk_r>:
 800a760:	b538      	push	{r3, r4, r5, lr}
 800a762:	4d06      	ldr	r5, [pc, #24]	; (800a77c <_sbrk_r+0x1c>)
 800a764:	2300      	movs	r3, #0
 800a766:	4604      	mov	r4, r0
 800a768:	4608      	mov	r0, r1
 800a76a:	602b      	str	r3, [r5, #0]
 800a76c:	f7f7 fd42 	bl	80021f4 <_sbrk>
 800a770:	1c43      	adds	r3, r0, #1
 800a772:	d102      	bne.n	800a77a <_sbrk_r+0x1a>
 800a774:	682b      	ldr	r3, [r5, #0]
 800a776:	b103      	cbz	r3, 800a77a <_sbrk_r+0x1a>
 800a778:	6023      	str	r3, [r4, #0]
 800a77a:	bd38      	pop	{r3, r4, r5, pc}
 800a77c:	20000748 	.word	0x20000748

0800a780 <__sread>:
 800a780:	b510      	push	{r4, lr}
 800a782:	460c      	mov	r4, r1
 800a784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a788:	f000 f906 	bl	800a998 <_read_r>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	bfab      	itete	ge
 800a790:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a792:	89a3      	ldrhlt	r3, [r4, #12]
 800a794:	181b      	addge	r3, r3, r0
 800a796:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a79a:	bfac      	ite	ge
 800a79c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a79e:	81a3      	strhlt	r3, [r4, #12]
 800a7a0:	bd10      	pop	{r4, pc}

0800a7a2 <__swrite>:
 800a7a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a6:	461f      	mov	r7, r3
 800a7a8:	898b      	ldrh	r3, [r1, #12]
 800a7aa:	05db      	lsls	r3, r3, #23
 800a7ac:	4605      	mov	r5, r0
 800a7ae:	460c      	mov	r4, r1
 800a7b0:	4616      	mov	r6, r2
 800a7b2:	d505      	bpl.n	800a7c0 <__swrite+0x1e>
 800a7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7b8:	2302      	movs	r3, #2
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f000 f88e 	bl	800a8dc <_lseek_r>
 800a7c0:	89a3      	ldrh	r3, [r4, #12]
 800a7c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7ca:	81a3      	strh	r3, [r4, #12]
 800a7cc:	4632      	mov	r2, r6
 800a7ce:	463b      	mov	r3, r7
 800a7d0:	4628      	mov	r0, r5
 800a7d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d6:	f000 b835 	b.w	800a844 <_write_r>

0800a7da <__sseek>:
 800a7da:	b510      	push	{r4, lr}
 800a7dc:	460c      	mov	r4, r1
 800a7de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7e2:	f000 f87b 	bl	800a8dc <_lseek_r>
 800a7e6:	1c43      	adds	r3, r0, #1
 800a7e8:	89a3      	ldrh	r3, [r4, #12]
 800a7ea:	bf15      	itete	ne
 800a7ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800a7ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a7f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a7f6:	81a3      	strheq	r3, [r4, #12]
 800a7f8:	bf18      	it	ne
 800a7fa:	81a3      	strhne	r3, [r4, #12]
 800a7fc:	bd10      	pop	{r4, pc}

0800a7fe <__sclose>:
 800a7fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a802:	f000 b839 	b.w	800a878 <_close_r>

0800a806 <strncmp>:
 800a806:	b510      	push	{r4, lr}
 800a808:	b16a      	cbz	r2, 800a826 <strncmp+0x20>
 800a80a:	3901      	subs	r1, #1
 800a80c:	1884      	adds	r4, r0, r2
 800a80e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a812:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a816:	4293      	cmp	r3, r2
 800a818:	d103      	bne.n	800a822 <strncmp+0x1c>
 800a81a:	42a0      	cmp	r0, r4
 800a81c:	d001      	beq.n	800a822 <strncmp+0x1c>
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d1f5      	bne.n	800a80e <strncmp+0x8>
 800a822:	1a98      	subs	r0, r3, r2
 800a824:	bd10      	pop	{r4, pc}
 800a826:	4610      	mov	r0, r2
 800a828:	e7fc      	b.n	800a824 <strncmp+0x1e>

0800a82a <__ascii_wctomb>:
 800a82a:	b149      	cbz	r1, 800a840 <__ascii_wctomb+0x16>
 800a82c:	2aff      	cmp	r2, #255	; 0xff
 800a82e:	bf85      	ittet	hi
 800a830:	238a      	movhi	r3, #138	; 0x8a
 800a832:	6003      	strhi	r3, [r0, #0]
 800a834:	700a      	strbls	r2, [r1, #0]
 800a836:	f04f 30ff 	movhi.w	r0, #4294967295
 800a83a:	bf98      	it	ls
 800a83c:	2001      	movls	r0, #1
 800a83e:	4770      	bx	lr
 800a840:	4608      	mov	r0, r1
 800a842:	4770      	bx	lr

0800a844 <_write_r>:
 800a844:	b538      	push	{r3, r4, r5, lr}
 800a846:	4d07      	ldr	r5, [pc, #28]	; (800a864 <_write_r+0x20>)
 800a848:	4604      	mov	r4, r0
 800a84a:	4608      	mov	r0, r1
 800a84c:	4611      	mov	r1, r2
 800a84e:	2200      	movs	r2, #0
 800a850:	602a      	str	r2, [r5, #0]
 800a852:	461a      	mov	r2, r3
 800a854:	f7f6 ffea 	bl	800182c <_write>
 800a858:	1c43      	adds	r3, r0, #1
 800a85a:	d102      	bne.n	800a862 <_write_r+0x1e>
 800a85c:	682b      	ldr	r3, [r5, #0]
 800a85e:	b103      	cbz	r3, 800a862 <_write_r+0x1e>
 800a860:	6023      	str	r3, [r4, #0]
 800a862:	bd38      	pop	{r3, r4, r5, pc}
 800a864:	20000748 	.word	0x20000748

0800a868 <abort>:
 800a868:	b508      	push	{r3, lr}
 800a86a:	2006      	movs	r0, #6
 800a86c:	f000 f8ce 	bl	800aa0c <raise>
 800a870:	2001      	movs	r0, #1
 800a872:	f7f7 fc63 	bl	800213c <_exit>
	...

0800a878 <_close_r>:
 800a878:	b538      	push	{r3, r4, r5, lr}
 800a87a:	4d06      	ldr	r5, [pc, #24]	; (800a894 <_close_r+0x1c>)
 800a87c:	2300      	movs	r3, #0
 800a87e:	4604      	mov	r4, r0
 800a880:	4608      	mov	r0, r1
 800a882:	602b      	str	r3, [r5, #0]
 800a884:	f7f7 fc81 	bl	800218a <_close>
 800a888:	1c43      	adds	r3, r0, #1
 800a88a:	d102      	bne.n	800a892 <_close_r+0x1a>
 800a88c:	682b      	ldr	r3, [r5, #0]
 800a88e:	b103      	cbz	r3, 800a892 <_close_r+0x1a>
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	bd38      	pop	{r3, r4, r5, pc}
 800a894:	20000748 	.word	0x20000748

0800a898 <_fstat_r>:
 800a898:	b538      	push	{r3, r4, r5, lr}
 800a89a:	4d07      	ldr	r5, [pc, #28]	; (800a8b8 <_fstat_r+0x20>)
 800a89c:	2300      	movs	r3, #0
 800a89e:	4604      	mov	r4, r0
 800a8a0:	4608      	mov	r0, r1
 800a8a2:	4611      	mov	r1, r2
 800a8a4:	602b      	str	r3, [r5, #0]
 800a8a6:	f7f7 fc7c 	bl	80021a2 <_fstat>
 800a8aa:	1c43      	adds	r3, r0, #1
 800a8ac:	d102      	bne.n	800a8b4 <_fstat_r+0x1c>
 800a8ae:	682b      	ldr	r3, [r5, #0]
 800a8b0:	b103      	cbz	r3, 800a8b4 <_fstat_r+0x1c>
 800a8b2:	6023      	str	r3, [r4, #0]
 800a8b4:	bd38      	pop	{r3, r4, r5, pc}
 800a8b6:	bf00      	nop
 800a8b8:	20000748 	.word	0x20000748

0800a8bc <_isatty_r>:
 800a8bc:	b538      	push	{r3, r4, r5, lr}
 800a8be:	4d06      	ldr	r5, [pc, #24]	; (800a8d8 <_isatty_r+0x1c>)
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	4608      	mov	r0, r1
 800a8c6:	602b      	str	r3, [r5, #0]
 800a8c8:	f7f7 fc7b 	bl	80021c2 <_isatty>
 800a8cc:	1c43      	adds	r3, r0, #1
 800a8ce:	d102      	bne.n	800a8d6 <_isatty_r+0x1a>
 800a8d0:	682b      	ldr	r3, [r5, #0]
 800a8d2:	b103      	cbz	r3, 800a8d6 <_isatty_r+0x1a>
 800a8d4:	6023      	str	r3, [r4, #0]
 800a8d6:	bd38      	pop	{r3, r4, r5, pc}
 800a8d8:	20000748 	.word	0x20000748

0800a8dc <_lseek_r>:
 800a8dc:	b538      	push	{r3, r4, r5, lr}
 800a8de:	4d07      	ldr	r5, [pc, #28]	; (800a8fc <_lseek_r+0x20>)
 800a8e0:	4604      	mov	r4, r0
 800a8e2:	4608      	mov	r0, r1
 800a8e4:	4611      	mov	r1, r2
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	602a      	str	r2, [r5, #0]
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	f7f7 fc74 	bl	80021d8 <_lseek>
 800a8f0:	1c43      	adds	r3, r0, #1
 800a8f2:	d102      	bne.n	800a8fa <_lseek_r+0x1e>
 800a8f4:	682b      	ldr	r3, [r5, #0]
 800a8f6:	b103      	cbz	r3, 800a8fa <_lseek_r+0x1e>
 800a8f8:	6023      	str	r3, [r4, #0]
 800a8fa:	bd38      	pop	{r3, r4, r5, pc}
 800a8fc:	20000748 	.word	0x20000748

0800a900 <memmove>:
 800a900:	4288      	cmp	r0, r1
 800a902:	b510      	push	{r4, lr}
 800a904:	eb01 0402 	add.w	r4, r1, r2
 800a908:	d902      	bls.n	800a910 <memmove+0x10>
 800a90a:	4284      	cmp	r4, r0
 800a90c:	4623      	mov	r3, r4
 800a90e:	d807      	bhi.n	800a920 <memmove+0x20>
 800a910:	1e43      	subs	r3, r0, #1
 800a912:	42a1      	cmp	r1, r4
 800a914:	d008      	beq.n	800a928 <memmove+0x28>
 800a916:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a91a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a91e:	e7f8      	b.n	800a912 <memmove+0x12>
 800a920:	4402      	add	r2, r0
 800a922:	4601      	mov	r1, r0
 800a924:	428a      	cmp	r2, r1
 800a926:	d100      	bne.n	800a92a <memmove+0x2a>
 800a928:	bd10      	pop	{r4, pc}
 800a92a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a92e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a932:	e7f7      	b.n	800a924 <memmove+0x24>

0800a934 <__malloc_lock>:
 800a934:	4801      	ldr	r0, [pc, #4]	; (800a93c <__malloc_lock+0x8>)
 800a936:	f7fe be50 	b.w	80095da <__retarget_lock_acquire_recursive>
 800a93a:	bf00      	nop
 800a93c:	20000740 	.word	0x20000740

0800a940 <__malloc_unlock>:
 800a940:	4801      	ldr	r0, [pc, #4]	; (800a948 <__malloc_unlock+0x8>)
 800a942:	f7fe be4b 	b.w	80095dc <__retarget_lock_release_recursive>
 800a946:	bf00      	nop
 800a948:	20000740 	.word	0x20000740

0800a94c <_realloc_r>:
 800a94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94e:	4607      	mov	r7, r0
 800a950:	4614      	mov	r4, r2
 800a952:	460e      	mov	r6, r1
 800a954:	b921      	cbnz	r1, 800a960 <_realloc_r+0x14>
 800a956:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a95a:	4611      	mov	r1, r2
 800a95c:	f7ff bbe6 	b.w	800a12c <_malloc_r>
 800a960:	b922      	cbnz	r2, 800a96c <_realloc_r+0x20>
 800a962:	f7ff fb93 	bl	800a08c <_free_r>
 800a966:	4625      	mov	r5, r4
 800a968:	4628      	mov	r0, r5
 800a96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a96c:	f000 f86a 	bl	800aa44 <_malloc_usable_size_r>
 800a970:	42a0      	cmp	r0, r4
 800a972:	d20f      	bcs.n	800a994 <_realloc_r+0x48>
 800a974:	4621      	mov	r1, r4
 800a976:	4638      	mov	r0, r7
 800a978:	f7ff fbd8 	bl	800a12c <_malloc_r>
 800a97c:	4605      	mov	r5, r0
 800a97e:	2800      	cmp	r0, #0
 800a980:	d0f2      	beq.n	800a968 <_realloc_r+0x1c>
 800a982:	4631      	mov	r1, r6
 800a984:	4622      	mov	r2, r4
 800a986:	f7fe fea9 	bl	80096dc <memcpy>
 800a98a:	4631      	mov	r1, r6
 800a98c:	4638      	mov	r0, r7
 800a98e:	f7ff fb7d 	bl	800a08c <_free_r>
 800a992:	e7e9      	b.n	800a968 <_realloc_r+0x1c>
 800a994:	4635      	mov	r5, r6
 800a996:	e7e7      	b.n	800a968 <_realloc_r+0x1c>

0800a998 <_read_r>:
 800a998:	b538      	push	{r3, r4, r5, lr}
 800a99a:	4d07      	ldr	r5, [pc, #28]	; (800a9b8 <_read_r+0x20>)
 800a99c:	4604      	mov	r4, r0
 800a99e:	4608      	mov	r0, r1
 800a9a0:	4611      	mov	r1, r2
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	602a      	str	r2, [r5, #0]
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	f7f7 fbd2 	bl	8002150 <_read>
 800a9ac:	1c43      	adds	r3, r0, #1
 800a9ae:	d102      	bne.n	800a9b6 <_read_r+0x1e>
 800a9b0:	682b      	ldr	r3, [r5, #0]
 800a9b2:	b103      	cbz	r3, 800a9b6 <_read_r+0x1e>
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	bd38      	pop	{r3, r4, r5, pc}
 800a9b8:	20000748 	.word	0x20000748

0800a9bc <_raise_r>:
 800a9bc:	291f      	cmp	r1, #31
 800a9be:	b538      	push	{r3, r4, r5, lr}
 800a9c0:	4604      	mov	r4, r0
 800a9c2:	460d      	mov	r5, r1
 800a9c4:	d904      	bls.n	800a9d0 <_raise_r+0x14>
 800a9c6:	2316      	movs	r3, #22
 800a9c8:	6003      	str	r3, [r0, #0]
 800a9ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ce:	bd38      	pop	{r3, r4, r5, pc}
 800a9d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a9d2:	b112      	cbz	r2, 800a9da <_raise_r+0x1e>
 800a9d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9d8:	b94b      	cbnz	r3, 800a9ee <_raise_r+0x32>
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f000 f830 	bl	800aa40 <_getpid_r>
 800a9e0:	462a      	mov	r2, r5
 800a9e2:	4601      	mov	r1, r0
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9ea:	f000 b817 	b.w	800aa1c <_kill_r>
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d00a      	beq.n	800aa08 <_raise_r+0x4c>
 800a9f2:	1c59      	adds	r1, r3, #1
 800a9f4:	d103      	bne.n	800a9fe <_raise_r+0x42>
 800a9f6:	2316      	movs	r3, #22
 800a9f8:	6003      	str	r3, [r0, #0]
 800a9fa:	2001      	movs	r0, #1
 800a9fc:	e7e7      	b.n	800a9ce <_raise_r+0x12>
 800a9fe:	2400      	movs	r4, #0
 800aa00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa04:	4628      	mov	r0, r5
 800aa06:	4798      	blx	r3
 800aa08:	2000      	movs	r0, #0
 800aa0a:	e7e0      	b.n	800a9ce <_raise_r+0x12>

0800aa0c <raise>:
 800aa0c:	4b02      	ldr	r3, [pc, #8]	; (800aa18 <raise+0xc>)
 800aa0e:	4601      	mov	r1, r0
 800aa10:	6818      	ldr	r0, [r3, #0]
 800aa12:	f7ff bfd3 	b.w	800a9bc <_raise_r>
 800aa16:	bf00      	nop
 800aa18:	20000014 	.word	0x20000014

0800aa1c <_kill_r>:
 800aa1c:	b538      	push	{r3, r4, r5, lr}
 800aa1e:	4d07      	ldr	r5, [pc, #28]	; (800aa3c <_kill_r+0x20>)
 800aa20:	2300      	movs	r3, #0
 800aa22:	4604      	mov	r4, r0
 800aa24:	4608      	mov	r0, r1
 800aa26:	4611      	mov	r1, r2
 800aa28:	602b      	str	r3, [r5, #0]
 800aa2a:	f7f7 fb77 	bl	800211c <_kill>
 800aa2e:	1c43      	adds	r3, r0, #1
 800aa30:	d102      	bne.n	800aa38 <_kill_r+0x1c>
 800aa32:	682b      	ldr	r3, [r5, #0]
 800aa34:	b103      	cbz	r3, 800aa38 <_kill_r+0x1c>
 800aa36:	6023      	str	r3, [r4, #0]
 800aa38:	bd38      	pop	{r3, r4, r5, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20000748 	.word	0x20000748

0800aa40 <_getpid_r>:
 800aa40:	f7f7 bb64 	b.w	800210c <_getpid>

0800aa44 <_malloc_usable_size_r>:
 800aa44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa48:	1f18      	subs	r0, r3, #4
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	bfbc      	itt	lt
 800aa4e:	580b      	ldrlt	r3, [r1, r0]
 800aa50:	18c0      	addlt	r0, r0, r3
 800aa52:	4770      	bx	lr

0800aa54 <pow>:
 800aa54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa58:	ec59 8b10 	vmov	r8, r9, d0
 800aa5c:	ec57 6b11 	vmov	r6, r7, d1
 800aa60:	f000 f8a6 	bl	800abb0 <__ieee754_pow>
 800aa64:	4b4e      	ldr	r3, [pc, #312]	; (800aba0 <pow+0x14c>)
 800aa66:	f993 3000 	ldrsb.w	r3, [r3]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	ec55 4b10 	vmov	r4, r5, d0
 800aa70:	d015      	beq.n	800aa9e <pow+0x4a>
 800aa72:	4632      	mov	r2, r6
 800aa74:	463b      	mov	r3, r7
 800aa76:	4630      	mov	r0, r6
 800aa78:	4639      	mov	r1, r7
 800aa7a:	f7f6 f867 	bl	8000b4c <__aeabi_dcmpun>
 800aa7e:	b970      	cbnz	r0, 800aa9e <pow+0x4a>
 800aa80:	4642      	mov	r2, r8
 800aa82:	464b      	mov	r3, r9
 800aa84:	4640      	mov	r0, r8
 800aa86:	4649      	mov	r1, r9
 800aa88:	f7f6 f860 	bl	8000b4c <__aeabi_dcmpun>
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	2300      	movs	r3, #0
 800aa90:	b148      	cbz	r0, 800aaa6 <pow+0x52>
 800aa92:	4630      	mov	r0, r6
 800aa94:	4639      	mov	r1, r7
 800aa96:	f7f6 f827 	bl	8000ae8 <__aeabi_dcmpeq>
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	d17d      	bne.n	800ab9a <pow+0x146>
 800aa9e:	ec45 4b10 	vmov	d0, r4, r5
 800aaa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaa6:	4640      	mov	r0, r8
 800aaa8:	4649      	mov	r1, r9
 800aaaa:	f7f6 f81d 	bl	8000ae8 <__aeabi_dcmpeq>
 800aaae:	b1e0      	cbz	r0, 800aaea <pow+0x96>
 800aab0:	2200      	movs	r2, #0
 800aab2:	2300      	movs	r3, #0
 800aab4:	4630      	mov	r0, r6
 800aab6:	4639      	mov	r1, r7
 800aab8:	f7f6 f816 	bl	8000ae8 <__aeabi_dcmpeq>
 800aabc:	2800      	cmp	r0, #0
 800aabe:	d16c      	bne.n	800ab9a <pow+0x146>
 800aac0:	ec47 6b10 	vmov	d0, r6, r7
 800aac4:	f000 fe53 	bl	800b76e <finite>
 800aac8:	2800      	cmp	r0, #0
 800aaca:	d0e8      	beq.n	800aa9e <pow+0x4a>
 800aacc:	2200      	movs	r2, #0
 800aace:	2300      	movs	r3, #0
 800aad0:	4630      	mov	r0, r6
 800aad2:	4639      	mov	r1, r7
 800aad4:	f7f6 f812 	bl	8000afc <__aeabi_dcmplt>
 800aad8:	2800      	cmp	r0, #0
 800aada:	d0e0      	beq.n	800aa9e <pow+0x4a>
 800aadc:	f7fb f9ae 	bl	8005e3c <__errno>
 800aae0:	2321      	movs	r3, #33	; 0x21
 800aae2:	6003      	str	r3, [r0, #0]
 800aae4:	2400      	movs	r4, #0
 800aae6:	4d2f      	ldr	r5, [pc, #188]	; (800aba4 <pow+0x150>)
 800aae8:	e7d9      	b.n	800aa9e <pow+0x4a>
 800aaea:	ec45 4b10 	vmov	d0, r4, r5
 800aaee:	f000 fe3e 	bl	800b76e <finite>
 800aaf2:	bbb8      	cbnz	r0, 800ab64 <pow+0x110>
 800aaf4:	ec49 8b10 	vmov	d0, r8, r9
 800aaf8:	f000 fe39 	bl	800b76e <finite>
 800aafc:	b390      	cbz	r0, 800ab64 <pow+0x110>
 800aafe:	ec47 6b10 	vmov	d0, r6, r7
 800ab02:	f000 fe34 	bl	800b76e <finite>
 800ab06:	b368      	cbz	r0, 800ab64 <pow+0x110>
 800ab08:	4622      	mov	r2, r4
 800ab0a:	462b      	mov	r3, r5
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	4629      	mov	r1, r5
 800ab10:	f7f6 f81c 	bl	8000b4c <__aeabi_dcmpun>
 800ab14:	b160      	cbz	r0, 800ab30 <pow+0xdc>
 800ab16:	f7fb f991 	bl	8005e3c <__errno>
 800ab1a:	2321      	movs	r3, #33	; 0x21
 800ab1c:	6003      	str	r3, [r0, #0]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	2300      	movs	r3, #0
 800ab22:	4610      	mov	r0, r2
 800ab24:	4619      	mov	r1, r3
 800ab26:	f7f5 fea1 	bl	800086c <__aeabi_ddiv>
 800ab2a:	4604      	mov	r4, r0
 800ab2c:	460d      	mov	r5, r1
 800ab2e:	e7b6      	b.n	800aa9e <pow+0x4a>
 800ab30:	f7fb f984 	bl	8005e3c <__errno>
 800ab34:	2322      	movs	r3, #34	; 0x22
 800ab36:	6003      	str	r3, [r0, #0]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	4640      	mov	r0, r8
 800ab3e:	4649      	mov	r1, r9
 800ab40:	f7f5 ffdc 	bl	8000afc <__aeabi_dcmplt>
 800ab44:	2400      	movs	r4, #0
 800ab46:	b158      	cbz	r0, 800ab60 <pow+0x10c>
 800ab48:	ec47 6b10 	vmov	d0, r6, r7
 800ab4c:	f000 fe1a 	bl	800b784 <rint>
 800ab50:	4632      	mov	r2, r6
 800ab52:	ec51 0b10 	vmov	r0, r1, d0
 800ab56:	463b      	mov	r3, r7
 800ab58:	f7f5 ffc6 	bl	8000ae8 <__aeabi_dcmpeq>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d0c2      	beq.n	800aae6 <pow+0x92>
 800ab60:	4d11      	ldr	r5, [pc, #68]	; (800aba8 <pow+0x154>)
 800ab62:	e79c      	b.n	800aa9e <pow+0x4a>
 800ab64:	2200      	movs	r2, #0
 800ab66:	2300      	movs	r3, #0
 800ab68:	4620      	mov	r0, r4
 800ab6a:	4629      	mov	r1, r5
 800ab6c:	f7f5 ffbc 	bl	8000ae8 <__aeabi_dcmpeq>
 800ab70:	2800      	cmp	r0, #0
 800ab72:	d094      	beq.n	800aa9e <pow+0x4a>
 800ab74:	ec49 8b10 	vmov	d0, r8, r9
 800ab78:	f000 fdf9 	bl	800b76e <finite>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	d08e      	beq.n	800aa9e <pow+0x4a>
 800ab80:	ec47 6b10 	vmov	d0, r6, r7
 800ab84:	f000 fdf3 	bl	800b76e <finite>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d088      	beq.n	800aa9e <pow+0x4a>
 800ab8c:	f7fb f956 	bl	8005e3c <__errno>
 800ab90:	2322      	movs	r3, #34	; 0x22
 800ab92:	6003      	str	r3, [r0, #0]
 800ab94:	2400      	movs	r4, #0
 800ab96:	2500      	movs	r5, #0
 800ab98:	e781      	b.n	800aa9e <pow+0x4a>
 800ab9a:	4d04      	ldr	r5, [pc, #16]	; (800abac <pow+0x158>)
 800ab9c:	2400      	movs	r4, #0
 800ab9e:	e77e      	b.n	800aa9e <pow+0x4a>
 800aba0:	200001e8 	.word	0x200001e8
 800aba4:	fff00000 	.word	0xfff00000
 800aba8:	7ff00000 	.word	0x7ff00000
 800abac:	3ff00000 	.word	0x3ff00000

0800abb0 <__ieee754_pow>:
 800abb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb4:	ed2d 8b06 	vpush	{d8-d10}
 800abb8:	b08d      	sub	sp, #52	; 0x34
 800abba:	ed8d 1b02 	vstr	d1, [sp, #8]
 800abbe:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800abc2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800abc6:	ea56 0100 	orrs.w	r1, r6, r0
 800abca:	ec53 2b10 	vmov	r2, r3, d0
 800abce:	f000 84d1 	beq.w	800b574 <__ieee754_pow+0x9c4>
 800abd2:	497f      	ldr	r1, [pc, #508]	; (800add0 <__ieee754_pow+0x220>)
 800abd4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800abd8:	428c      	cmp	r4, r1
 800abda:	ee10 8a10 	vmov	r8, s0
 800abde:	4699      	mov	r9, r3
 800abe0:	dc09      	bgt.n	800abf6 <__ieee754_pow+0x46>
 800abe2:	d103      	bne.n	800abec <__ieee754_pow+0x3c>
 800abe4:	b97a      	cbnz	r2, 800ac06 <__ieee754_pow+0x56>
 800abe6:	42a6      	cmp	r6, r4
 800abe8:	dd02      	ble.n	800abf0 <__ieee754_pow+0x40>
 800abea:	e00c      	b.n	800ac06 <__ieee754_pow+0x56>
 800abec:	428e      	cmp	r6, r1
 800abee:	dc02      	bgt.n	800abf6 <__ieee754_pow+0x46>
 800abf0:	428e      	cmp	r6, r1
 800abf2:	d110      	bne.n	800ac16 <__ieee754_pow+0x66>
 800abf4:	b178      	cbz	r0, 800ac16 <__ieee754_pow+0x66>
 800abf6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800abfa:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800abfe:	ea54 0308 	orrs.w	r3, r4, r8
 800ac02:	f000 84b7 	beq.w	800b574 <__ieee754_pow+0x9c4>
 800ac06:	4873      	ldr	r0, [pc, #460]	; (800add4 <__ieee754_pow+0x224>)
 800ac08:	b00d      	add	sp, #52	; 0x34
 800ac0a:	ecbd 8b06 	vpop	{d8-d10}
 800ac0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac12:	f7ff bd9d 	b.w	800a750 <nan>
 800ac16:	f1b9 0f00 	cmp.w	r9, #0
 800ac1a:	da36      	bge.n	800ac8a <__ieee754_pow+0xda>
 800ac1c:	496e      	ldr	r1, [pc, #440]	; (800add8 <__ieee754_pow+0x228>)
 800ac1e:	428e      	cmp	r6, r1
 800ac20:	dc51      	bgt.n	800acc6 <__ieee754_pow+0x116>
 800ac22:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800ac26:	428e      	cmp	r6, r1
 800ac28:	f340 84af 	ble.w	800b58a <__ieee754_pow+0x9da>
 800ac2c:	1531      	asrs	r1, r6, #20
 800ac2e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ac32:	2914      	cmp	r1, #20
 800ac34:	dd0f      	ble.n	800ac56 <__ieee754_pow+0xa6>
 800ac36:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800ac3a:	fa20 fc01 	lsr.w	ip, r0, r1
 800ac3e:	fa0c f101 	lsl.w	r1, ip, r1
 800ac42:	4281      	cmp	r1, r0
 800ac44:	f040 84a1 	bne.w	800b58a <__ieee754_pow+0x9da>
 800ac48:	f00c 0c01 	and.w	ip, ip, #1
 800ac4c:	f1cc 0102 	rsb	r1, ip, #2
 800ac50:	9100      	str	r1, [sp, #0]
 800ac52:	b180      	cbz	r0, 800ac76 <__ieee754_pow+0xc6>
 800ac54:	e059      	b.n	800ad0a <__ieee754_pow+0x15a>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d155      	bne.n	800ad06 <__ieee754_pow+0x156>
 800ac5a:	f1c1 0114 	rsb	r1, r1, #20
 800ac5e:	fa46 fc01 	asr.w	ip, r6, r1
 800ac62:	fa0c f101 	lsl.w	r1, ip, r1
 800ac66:	42b1      	cmp	r1, r6
 800ac68:	f040 848c 	bne.w	800b584 <__ieee754_pow+0x9d4>
 800ac6c:	f00c 0c01 	and.w	ip, ip, #1
 800ac70:	f1cc 0102 	rsb	r1, ip, #2
 800ac74:	9100      	str	r1, [sp, #0]
 800ac76:	4959      	ldr	r1, [pc, #356]	; (800addc <__ieee754_pow+0x22c>)
 800ac78:	428e      	cmp	r6, r1
 800ac7a:	d12d      	bne.n	800acd8 <__ieee754_pow+0x128>
 800ac7c:	2f00      	cmp	r7, #0
 800ac7e:	da79      	bge.n	800ad74 <__ieee754_pow+0x1c4>
 800ac80:	4956      	ldr	r1, [pc, #344]	; (800addc <__ieee754_pow+0x22c>)
 800ac82:	2000      	movs	r0, #0
 800ac84:	f7f5 fdf2 	bl	800086c <__aeabi_ddiv>
 800ac88:	e016      	b.n	800acb8 <__ieee754_pow+0x108>
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	9100      	str	r1, [sp, #0]
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	d13b      	bne.n	800ad0a <__ieee754_pow+0x15a>
 800ac92:	494f      	ldr	r1, [pc, #316]	; (800add0 <__ieee754_pow+0x220>)
 800ac94:	428e      	cmp	r6, r1
 800ac96:	d1ee      	bne.n	800ac76 <__ieee754_pow+0xc6>
 800ac98:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ac9c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800aca0:	ea53 0308 	orrs.w	r3, r3, r8
 800aca4:	f000 8466 	beq.w	800b574 <__ieee754_pow+0x9c4>
 800aca8:	4b4d      	ldr	r3, [pc, #308]	; (800ade0 <__ieee754_pow+0x230>)
 800acaa:	429c      	cmp	r4, r3
 800acac:	dd0d      	ble.n	800acca <__ieee754_pow+0x11a>
 800acae:	2f00      	cmp	r7, #0
 800acb0:	f280 8464 	bge.w	800b57c <__ieee754_pow+0x9cc>
 800acb4:	2000      	movs	r0, #0
 800acb6:	2100      	movs	r1, #0
 800acb8:	ec41 0b10 	vmov	d0, r0, r1
 800acbc:	b00d      	add	sp, #52	; 0x34
 800acbe:	ecbd 8b06 	vpop	{d8-d10}
 800acc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc6:	2102      	movs	r1, #2
 800acc8:	e7e0      	b.n	800ac8c <__ieee754_pow+0xdc>
 800acca:	2f00      	cmp	r7, #0
 800accc:	daf2      	bge.n	800acb4 <__ieee754_pow+0x104>
 800acce:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800acd2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800acd6:	e7ef      	b.n	800acb8 <__ieee754_pow+0x108>
 800acd8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800acdc:	d104      	bne.n	800ace8 <__ieee754_pow+0x138>
 800acde:	4610      	mov	r0, r2
 800ace0:	4619      	mov	r1, r3
 800ace2:	f7f5 fc99 	bl	8000618 <__aeabi_dmul>
 800ace6:	e7e7      	b.n	800acb8 <__ieee754_pow+0x108>
 800ace8:	493e      	ldr	r1, [pc, #248]	; (800ade4 <__ieee754_pow+0x234>)
 800acea:	428f      	cmp	r7, r1
 800acec:	d10d      	bne.n	800ad0a <__ieee754_pow+0x15a>
 800acee:	f1b9 0f00 	cmp.w	r9, #0
 800acf2:	db0a      	blt.n	800ad0a <__ieee754_pow+0x15a>
 800acf4:	ec43 2b10 	vmov	d0, r2, r3
 800acf8:	b00d      	add	sp, #52	; 0x34
 800acfa:	ecbd 8b06 	vpop	{d8-d10}
 800acfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad02:	f000 bc77 	b.w	800b5f4 <__ieee754_sqrt>
 800ad06:	2100      	movs	r1, #0
 800ad08:	9100      	str	r1, [sp, #0]
 800ad0a:	ec43 2b10 	vmov	d0, r2, r3
 800ad0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ad12:	f000 fd23 	bl	800b75c <fabs>
 800ad16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad1a:	ec51 0b10 	vmov	r0, r1, d0
 800ad1e:	f1b8 0f00 	cmp.w	r8, #0
 800ad22:	d12a      	bne.n	800ad7a <__ieee754_pow+0x1ca>
 800ad24:	b12c      	cbz	r4, 800ad32 <__ieee754_pow+0x182>
 800ad26:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800addc <__ieee754_pow+0x22c>
 800ad2a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800ad2e:	45e6      	cmp	lr, ip
 800ad30:	d123      	bne.n	800ad7a <__ieee754_pow+0x1ca>
 800ad32:	2f00      	cmp	r7, #0
 800ad34:	da05      	bge.n	800ad42 <__ieee754_pow+0x192>
 800ad36:	4602      	mov	r2, r0
 800ad38:	460b      	mov	r3, r1
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	4927      	ldr	r1, [pc, #156]	; (800addc <__ieee754_pow+0x22c>)
 800ad3e:	f7f5 fd95 	bl	800086c <__aeabi_ddiv>
 800ad42:	f1b9 0f00 	cmp.w	r9, #0
 800ad46:	dab7      	bge.n	800acb8 <__ieee754_pow+0x108>
 800ad48:	9b00      	ldr	r3, [sp, #0]
 800ad4a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ad4e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ad52:	4323      	orrs	r3, r4
 800ad54:	d108      	bne.n	800ad68 <__ieee754_pow+0x1b8>
 800ad56:	4602      	mov	r2, r0
 800ad58:	460b      	mov	r3, r1
 800ad5a:	4610      	mov	r0, r2
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	f7f5 faa3 	bl	80002a8 <__aeabi_dsub>
 800ad62:	4602      	mov	r2, r0
 800ad64:	460b      	mov	r3, r1
 800ad66:	e78d      	b.n	800ac84 <__ieee754_pow+0xd4>
 800ad68:	9b00      	ldr	r3, [sp, #0]
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d1a4      	bne.n	800acb8 <__ieee754_pow+0x108>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad74:	4610      	mov	r0, r2
 800ad76:	4619      	mov	r1, r3
 800ad78:	e79e      	b.n	800acb8 <__ieee754_pow+0x108>
 800ad7a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800ad7e:	f10c 35ff 	add.w	r5, ip, #4294967295
 800ad82:	950a      	str	r5, [sp, #40]	; 0x28
 800ad84:	9d00      	ldr	r5, [sp, #0]
 800ad86:	46ac      	mov	ip, r5
 800ad88:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ad8a:	ea5c 0505 	orrs.w	r5, ip, r5
 800ad8e:	d0e4      	beq.n	800ad5a <__ieee754_pow+0x1aa>
 800ad90:	4b15      	ldr	r3, [pc, #84]	; (800ade8 <__ieee754_pow+0x238>)
 800ad92:	429e      	cmp	r6, r3
 800ad94:	f340 80fc 	ble.w	800af90 <__ieee754_pow+0x3e0>
 800ad98:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ad9c:	429e      	cmp	r6, r3
 800ad9e:	4b10      	ldr	r3, [pc, #64]	; (800ade0 <__ieee754_pow+0x230>)
 800ada0:	dd07      	ble.n	800adb2 <__ieee754_pow+0x202>
 800ada2:	429c      	cmp	r4, r3
 800ada4:	dc0a      	bgt.n	800adbc <__ieee754_pow+0x20c>
 800ada6:	2f00      	cmp	r7, #0
 800ada8:	da84      	bge.n	800acb4 <__ieee754_pow+0x104>
 800adaa:	a307      	add	r3, pc, #28	; (adr r3, 800adc8 <__ieee754_pow+0x218>)
 800adac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb0:	e795      	b.n	800acde <__ieee754_pow+0x12e>
 800adb2:	429c      	cmp	r4, r3
 800adb4:	dbf7      	blt.n	800ada6 <__ieee754_pow+0x1f6>
 800adb6:	4b09      	ldr	r3, [pc, #36]	; (800addc <__ieee754_pow+0x22c>)
 800adb8:	429c      	cmp	r4, r3
 800adba:	dd17      	ble.n	800adec <__ieee754_pow+0x23c>
 800adbc:	2f00      	cmp	r7, #0
 800adbe:	dcf4      	bgt.n	800adaa <__ieee754_pow+0x1fa>
 800adc0:	e778      	b.n	800acb4 <__ieee754_pow+0x104>
 800adc2:	bf00      	nop
 800adc4:	f3af 8000 	nop.w
 800adc8:	8800759c 	.word	0x8800759c
 800adcc:	7e37e43c 	.word	0x7e37e43c
 800add0:	7ff00000 	.word	0x7ff00000
 800add4:	0800bbab 	.word	0x0800bbab
 800add8:	433fffff 	.word	0x433fffff
 800addc:	3ff00000 	.word	0x3ff00000
 800ade0:	3fefffff 	.word	0x3fefffff
 800ade4:	3fe00000 	.word	0x3fe00000
 800ade8:	41e00000 	.word	0x41e00000
 800adec:	4b64      	ldr	r3, [pc, #400]	; (800af80 <__ieee754_pow+0x3d0>)
 800adee:	2200      	movs	r2, #0
 800adf0:	f7f5 fa5a 	bl	80002a8 <__aeabi_dsub>
 800adf4:	a356      	add	r3, pc, #344	; (adr r3, 800af50 <__ieee754_pow+0x3a0>)
 800adf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfa:	4604      	mov	r4, r0
 800adfc:	460d      	mov	r5, r1
 800adfe:	f7f5 fc0b 	bl	8000618 <__aeabi_dmul>
 800ae02:	a355      	add	r3, pc, #340	; (adr r3, 800af58 <__ieee754_pow+0x3a8>)
 800ae04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae08:	4606      	mov	r6, r0
 800ae0a:	460f      	mov	r7, r1
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	4629      	mov	r1, r5
 800ae10:	f7f5 fc02 	bl	8000618 <__aeabi_dmul>
 800ae14:	4b5b      	ldr	r3, [pc, #364]	; (800af84 <__ieee754_pow+0x3d4>)
 800ae16:	4682      	mov	sl, r0
 800ae18:	468b      	mov	fp, r1
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	4629      	mov	r1, r5
 800ae20:	f7f5 fbfa 	bl	8000618 <__aeabi_dmul>
 800ae24:	4602      	mov	r2, r0
 800ae26:	460b      	mov	r3, r1
 800ae28:	a14d      	add	r1, pc, #308	; (adr r1, 800af60 <__ieee754_pow+0x3b0>)
 800ae2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae2e:	f7f5 fa3b 	bl	80002a8 <__aeabi_dsub>
 800ae32:	4622      	mov	r2, r4
 800ae34:	462b      	mov	r3, r5
 800ae36:	f7f5 fbef 	bl	8000618 <__aeabi_dmul>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	2000      	movs	r0, #0
 800ae40:	4951      	ldr	r1, [pc, #324]	; (800af88 <__ieee754_pow+0x3d8>)
 800ae42:	f7f5 fa31 	bl	80002a8 <__aeabi_dsub>
 800ae46:	4622      	mov	r2, r4
 800ae48:	4680      	mov	r8, r0
 800ae4a:	4689      	mov	r9, r1
 800ae4c:	462b      	mov	r3, r5
 800ae4e:	4620      	mov	r0, r4
 800ae50:	4629      	mov	r1, r5
 800ae52:	f7f5 fbe1 	bl	8000618 <__aeabi_dmul>
 800ae56:	4602      	mov	r2, r0
 800ae58:	460b      	mov	r3, r1
 800ae5a:	4640      	mov	r0, r8
 800ae5c:	4649      	mov	r1, r9
 800ae5e:	f7f5 fbdb 	bl	8000618 <__aeabi_dmul>
 800ae62:	a341      	add	r3, pc, #260	; (adr r3, 800af68 <__ieee754_pow+0x3b8>)
 800ae64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae68:	f7f5 fbd6 	bl	8000618 <__aeabi_dmul>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	460b      	mov	r3, r1
 800ae70:	4650      	mov	r0, sl
 800ae72:	4659      	mov	r1, fp
 800ae74:	f7f5 fa18 	bl	80002a8 <__aeabi_dsub>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	4680      	mov	r8, r0
 800ae7e:	4689      	mov	r9, r1
 800ae80:	4630      	mov	r0, r6
 800ae82:	4639      	mov	r1, r7
 800ae84:	f7f5 fa12 	bl	80002ac <__adddf3>
 800ae88:	2400      	movs	r4, #0
 800ae8a:	4632      	mov	r2, r6
 800ae8c:	463b      	mov	r3, r7
 800ae8e:	4620      	mov	r0, r4
 800ae90:	460d      	mov	r5, r1
 800ae92:	f7f5 fa09 	bl	80002a8 <__aeabi_dsub>
 800ae96:	4602      	mov	r2, r0
 800ae98:	460b      	mov	r3, r1
 800ae9a:	4640      	mov	r0, r8
 800ae9c:	4649      	mov	r1, r9
 800ae9e:	f7f5 fa03 	bl	80002a8 <__aeabi_dsub>
 800aea2:	9b00      	ldr	r3, [sp, #0]
 800aea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aea6:	3b01      	subs	r3, #1
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	4682      	mov	sl, r0
 800aeac:	468b      	mov	fp, r1
 800aeae:	f040 81f1 	bne.w	800b294 <__ieee754_pow+0x6e4>
 800aeb2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800af70 <__ieee754_pow+0x3c0>
 800aeb6:	eeb0 8a47 	vmov.f32	s16, s14
 800aeba:	eef0 8a67 	vmov.f32	s17, s15
 800aebe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aec2:	2600      	movs	r6, #0
 800aec4:	4632      	mov	r2, r6
 800aec6:	463b      	mov	r3, r7
 800aec8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aecc:	f7f5 f9ec 	bl	80002a8 <__aeabi_dsub>
 800aed0:	4622      	mov	r2, r4
 800aed2:	462b      	mov	r3, r5
 800aed4:	f7f5 fba0 	bl	8000618 <__aeabi_dmul>
 800aed8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aedc:	4680      	mov	r8, r0
 800aede:	4689      	mov	r9, r1
 800aee0:	4650      	mov	r0, sl
 800aee2:	4659      	mov	r1, fp
 800aee4:	f7f5 fb98 	bl	8000618 <__aeabi_dmul>
 800aee8:	4602      	mov	r2, r0
 800aeea:	460b      	mov	r3, r1
 800aeec:	4640      	mov	r0, r8
 800aeee:	4649      	mov	r1, r9
 800aef0:	f7f5 f9dc 	bl	80002ac <__adddf3>
 800aef4:	4632      	mov	r2, r6
 800aef6:	463b      	mov	r3, r7
 800aef8:	4680      	mov	r8, r0
 800aefa:	4689      	mov	r9, r1
 800aefc:	4620      	mov	r0, r4
 800aefe:	4629      	mov	r1, r5
 800af00:	f7f5 fb8a 	bl	8000618 <__aeabi_dmul>
 800af04:	460b      	mov	r3, r1
 800af06:	4604      	mov	r4, r0
 800af08:	460d      	mov	r5, r1
 800af0a:	4602      	mov	r2, r0
 800af0c:	4649      	mov	r1, r9
 800af0e:	4640      	mov	r0, r8
 800af10:	f7f5 f9cc 	bl	80002ac <__adddf3>
 800af14:	4b1d      	ldr	r3, [pc, #116]	; (800af8c <__ieee754_pow+0x3dc>)
 800af16:	4299      	cmp	r1, r3
 800af18:	ec45 4b19 	vmov	d9, r4, r5
 800af1c:	4606      	mov	r6, r0
 800af1e:	460f      	mov	r7, r1
 800af20:	468b      	mov	fp, r1
 800af22:	f340 82fe 	ble.w	800b522 <__ieee754_pow+0x972>
 800af26:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800af2a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800af2e:	4303      	orrs	r3, r0
 800af30:	f000 81f0 	beq.w	800b314 <__ieee754_pow+0x764>
 800af34:	a310      	add	r3, pc, #64	; (adr r3, 800af78 <__ieee754_pow+0x3c8>)
 800af36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3a:	ec51 0b18 	vmov	r0, r1, d8
 800af3e:	f7f5 fb6b 	bl	8000618 <__aeabi_dmul>
 800af42:	a30d      	add	r3, pc, #52	; (adr r3, 800af78 <__ieee754_pow+0x3c8>)
 800af44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af48:	e6cb      	b.n	800ace2 <__ieee754_pow+0x132>
 800af4a:	bf00      	nop
 800af4c:	f3af 8000 	nop.w
 800af50:	60000000 	.word	0x60000000
 800af54:	3ff71547 	.word	0x3ff71547
 800af58:	f85ddf44 	.word	0xf85ddf44
 800af5c:	3e54ae0b 	.word	0x3e54ae0b
 800af60:	55555555 	.word	0x55555555
 800af64:	3fd55555 	.word	0x3fd55555
 800af68:	652b82fe 	.word	0x652b82fe
 800af6c:	3ff71547 	.word	0x3ff71547
 800af70:	00000000 	.word	0x00000000
 800af74:	bff00000 	.word	0xbff00000
 800af78:	8800759c 	.word	0x8800759c
 800af7c:	7e37e43c 	.word	0x7e37e43c
 800af80:	3ff00000 	.word	0x3ff00000
 800af84:	3fd00000 	.word	0x3fd00000
 800af88:	3fe00000 	.word	0x3fe00000
 800af8c:	408fffff 	.word	0x408fffff
 800af90:	4bd7      	ldr	r3, [pc, #860]	; (800b2f0 <__ieee754_pow+0x740>)
 800af92:	ea03 0309 	and.w	r3, r3, r9
 800af96:	2200      	movs	r2, #0
 800af98:	b92b      	cbnz	r3, 800afa6 <__ieee754_pow+0x3f6>
 800af9a:	4bd6      	ldr	r3, [pc, #856]	; (800b2f4 <__ieee754_pow+0x744>)
 800af9c:	f7f5 fb3c 	bl	8000618 <__aeabi_dmul>
 800afa0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800afa4:	460c      	mov	r4, r1
 800afa6:	1523      	asrs	r3, r4, #20
 800afa8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800afac:	4413      	add	r3, r2
 800afae:	9309      	str	r3, [sp, #36]	; 0x24
 800afb0:	4bd1      	ldr	r3, [pc, #836]	; (800b2f8 <__ieee754_pow+0x748>)
 800afb2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800afb6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800afba:	429c      	cmp	r4, r3
 800afbc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800afc0:	dd08      	ble.n	800afd4 <__ieee754_pow+0x424>
 800afc2:	4bce      	ldr	r3, [pc, #824]	; (800b2fc <__ieee754_pow+0x74c>)
 800afc4:	429c      	cmp	r4, r3
 800afc6:	f340 8163 	ble.w	800b290 <__ieee754_pow+0x6e0>
 800afca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afcc:	3301      	adds	r3, #1
 800afce:	9309      	str	r3, [sp, #36]	; 0x24
 800afd0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800afd4:	2400      	movs	r4, #0
 800afd6:	00e3      	lsls	r3, r4, #3
 800afd8:	930b      	str	r3, [sp, #44]	; 0x2c
 800afda:	4bc9      	ldr	r3, [pc, #804]	; (800b300 <__ieee754_pow+0x750>)
 800afdc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800afe0:	ed93 7b00 	vldr	d7, [r3]
 800afe4:	4629      	mov	r1, r5
 800afe6:	ec53 2b17 	vmov	r2, r3, d7
 800afea:	eeb0 8a47 	vmov.f32	s16, s14
 800afee:	eef0 8a67 	vmov.f32	s17, s15
 800aff2:	4682      	mov	sl, r0
 800aff4:	f7f5 f958 	bl	80002a8 <__aeabi_dsub>
 800aff8:	4652      	mov	r2, sl
 800affa:	4606      	mov	r6, r0
 800affc:	460f      	mov	r7, r1
 800affe:	462b      	mov	r3, r5
 800b000:	ec51 0b18 	vmov	r0, r1, d8
 800b004:	f7f5 f952 	bl	80002ac <__adddf3>
 800b008:	4602      	mov	r2, r0
 800b00a:	460b      	mov	r3, r1
 800b00c:	2000      	movs	r0, #0
 800b00e:	49bd      	ldr	r1, [pc, #756]	; (800b304 <__ieee754_pow+0x754>)
 800b010:	f7f5 fc2c 	bl	800086c <__aeabi_ddiv>
 800b014:	ec41 0b19 	vmov	d9, r0, r1
 800b018:	4602      	mov	r2, r0
 800b01a:	460b      	mov	r3, r1
 800b01c:	4630      	mov	r0, r6
 800b01e:	4639      	mov	r1, r7
 800b020:	f7f5 fafa 	bl	8000618 <__aeabi_dmul>
 800b024:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b028:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b02c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b030:	2300      	movs	r3, #0
 800b032:	9304      	str	r3, [sp, #16]
 800b034:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b038:	46ab      	mov	fp, r5
 800b03a:	106d      	asrs	r5, r5, #1
 800b03c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b040:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b044:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b048:	2200      	movs	r2, #0
 800b04a:	4640      	mov	r0, r8
 800b04c:	4649      	mov	r1, r9
 800b04e:	4614      	mov	r4, r2
 800b050:	461d      	mov	r5, r3
 800b052:	f7f5 fae1 	bl	8000618 <__aeabi_dmul>
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	4630      	mov	r0, r6
 800b05c:	4639      	mov	r1, r7
 800b05e:	f7f5 f923 	bl	80002a8 <__aeabi_dsub>
 800b062:	ec53 2b18 	vmov	r2, r3, d8
 800b066:	4606      	mov	r6, r0
 800b068:	460f      	mov	r7, r1
 800b06a:	4620      	mov	r0, r4
 800b06c:	4629      	mov	r1, r5
 800b06e:	f7f5 f91b 	bl	80002a8 <__aeabi_dsub>
 800b072:	4602      	mov	r2, r0
 800b074:	460b      	mov	r3, r1
 800b076:	4650      	mov	r0, sl
 800b078:	4659      	mov	r1, fp
 800b07a:	f7f5 f915 	bl	80002a8 <__aeabi_dsub>
 800b07e:	4642      	mov	r2, r8
 800b080:	464b      	mov	r3, r9
 800b082:	f7f5 fac9 	bl	8000618 <__aeabi_dmul>
 800b086:	4602      	mov	r2, r0
 800b088:	460b      	mov	r3, r1
 800b08a:	4630      	mov	r0, r6
 800b08c:	4639      	mov	r1, r7
 800b08e:	f7f5 f90b 	bl	80002a8 <__aeabi_dsub>
 800b092:	ec53 2b19 	vmov	r2, r3, d9
 800b096:	f7f5 fabf 	bl	8000618 <__aeabi_dmul>
 800b09a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b09e:	ec41 0b18 	vmov	d8, r0, r1
 800b0a2:	4610      	mov	r0, r2
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	f7f5 fab7 	bl	8000618 <__aeabi_dmul>
 800b0aa:	a37d      	add	r3, pc, #500	; (adr r3, 800b2a0 <__ieee754_pow+0x6f0>)
 800b0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b0:	4604      	mov	r4, r0
 800b0b2:	460d      	mov	r5, r1
 800b0b4:	f7f5 fab0 	bl	8000618 <__aeabi_dmul>
 800b0b8:	a37b      	add	r3, pc, #492	; (adr r3, 800b2a8 <__ieee754_pow+0x6f8>)
 800b0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0be:	f7f5 f8f5 	bl	80002ac <__adddf3>
 800b0c2:	4622      	mov	r2, r4
 800b0c4:	462b      	mov	r3, r5
 800b0c6:	f7f5 faa7 	bl	8000618 <__aeabi_dmul>
 800b0ca:	a379      	add	r3, pc, #484	; (adr r3, 800b2b0 <__ieee754_pow+0x700>)
 800b0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d0:	f7f5 f8ec 	bl	80002ac <__adddf3>
 800b0d4:	4622      	mov	r2, r4
 800b0d6:	462b      	mov	r3, r5
 800b0d8:	f7f5 fa9e 	bl	8000618 <__aeabi_dmul>
 800b0dc:	a376      	add	r3, pc, #472	; (adr r3, 800b2b8 <__ieee754_pow+0x708>)
 800b0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e2:	f7f5 f8e3 	bl	80002ac <__adddf3>
 800b0e6:	4622      	mov	r2, r4
 800b0e8:	462b      	mov	r3, r5
 800b0ea:	f7f5 fa95 	bl	8000618 <__aeabi_dmul>
 800b0ee:	a374      	add	r3, pc, #464	; (adr r3, 800b2c0 <__ieee754_pow+0x710>)
 800b0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f4:	f7f5 f8da 	bl	80002ac <__adddf3>
 800b0f8:	4622      	mov	r2, r4
 800b0fa:	462b      	mov	r3, r5
 800b0fc:	f7f5 fa8c 	bl	8000618 <__aeabi_dmul>
 800b100:	a371      	add	r3, pc, #452	; (adr r3, 800b2c8 <__ieee754_pow+0x718>)
 800b102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b106:	f7f5 f8d1 	bl	80002ac <__adddf3>
 800b10a:	4622      	mov	r2, r4
 800b10c:	4606      	mov	r6, r0
 800b10e:	460f      	mov	r7, r1
 800b110:	462b      	mov	r3, r5
 800b112:	4620      	mov	r0, r4
 800b114:	4629      	mov	r1, r5
 800b116:	f7f5 fa7f 	bl	8000618 <__aeabi_dmul>
 800b11a:	4602      	mov	r2, r0
 800b11c:	460b      	mov	r3, r1
 800b11e:	4630      	mov	r0, r6
 800b120:	4639      	mov	r1, r7
 800b122:	f7f5 fa79 	bl	8000618 <__aeabi_dmul>
 800b126:	4642      	mov	r2, r8
 800b128:	4604      	mov	r4, r0
 800b12a:	460d      	mov	r5, r1
 800b12c:	464b      	mov	r3, r9
 800b12e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b132:	f7f5 f8bb 	bl	80002ac <__adddf3>
 800b136:	ec53 2b18 	vmov	r2, r3, d8
 800b13a:	f7f5 fa6d 	bl	8000618 <__aeabi_dmul>
 800b13e:	4622      	mov	r2, r4
 800b140:	462b      	mov	r3, r5
 800b142:	f7f5 f8b3 	bl	80002ac <__adddf3>
 800b146:	4642      	mov	r2, r8
 800b148:	4682      	mov	sl, r0
 800b14a:	468b      	mov	fp, r1
 800b14c:	464b      	mov	r3, r9
 800b14e:	4640      	mov	r0, r8
 800b150:	4649      	mov	r1, r9
 800b152:	f7f5 fa61 	bl	8000618 <__aeabi_dmul>
 800b156:	4b6c      	ldr	r3, [pc, #432]	; (800b308 <__ieee754_pow+0x758>)
 800b158:	2200      	movs	r2, #0
 800b15a:	4606      	mov	r6, r0
 800b15c:	460f      	mov	r7, r1
 800b15e:	f7f5 f8a5 	bl	80002ac <__adddf3>
 800b162:	4652      	mov	r2, sl
 800b164:	465b      	mov	r3, fp
 800b166:	f7f5 f8a1 	bl	80002ac <__adddf3>
 800b16a:	9c04      	ldr	r4, [sp, #16]
 800b16c:	460d      	mov	r5, r1
 800b16e:	4622      	mov	r2, r4
 800b170:	460b      	mov	r3, r1
 800b172:	4640      	mov	r0, r8
 800b174:	4649      	mov	r1, r9
 800b176:	f7f5 fa4f 	bl	8000618 <__aeabi_dmul>
 800b17a:	4b63      	ldr	r3, [pc, #396]	; (800b308 <__ieee754_pow+0x758>)
 800b17c:	4680      	mov	r8, r0
 800b17e:	4689      	mov	r9, r1
 800b180:	2200      	movs	r2, #0
 800b182:	4620      	mov	r0, r4
 800b184:	4629      	mov	r1, r5
 800b186:	f7f5 f88f 	bl	80002a8 <__aeabi_dsub>
 800b18a:	4632      	mov	r2, r6
 800b18c:	463b      	mov	r3, r7
 800b18e:	f7f5 f88b 	bl	80002a8 <__aeabi_dsub>
 800b192:	4602      	mov	r2, r0
 800b194:	460b      	mov	r3, r1
 800b196:	4650      	mov	r0, sl
 800b198:	4659      	mov	r1, fp
 800b19a:	f7f5 f885 	bl	80002a8 <__aeabi_dsub>
 800b19e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1a2:	f7f5 fa39 	bl	8000618 <__aeabi_dmul>
 800b1a6:	4622      	mov	r2, r4
 800b1a8:	4606      	mov	r6, r0
 800b1aa:	460f      	mov	r7, r1
 800b1ac:	462b      	mov	r3, r5
 800b1ae:	ec51 0b18 	vmov	r0, r1, d8
 800b1b2:	f7f5 fa31 	bl	8000618 <__aeabi_dmul>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	4639      	mov	r1, r7
 800b1be:	f7f5 f875 	bl	80002ac <__adddf3>
 800b1c2:	4606      	mov	r6, r0
 800b1c4:	460f      	mov	r7, r1
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	4640      	mov	r0, r8
 800b1cc:	4649      	mov	r1, r9
 800b1ce:	f7f5 f86d 	bl	80002ac <__adddf3>
 800b1d2:	9c04      	ldr	r4, [sp, #16]
 800b1d4:	a33e      	add	r3, pc, #248	; (adr r3, 800b2d0 <__ieee754_pow+0x720>)
 800b1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1da:	4620      	mov	r0, r4
 800b1dc:	460d      	mov	r5, r1
 800b1de:	f7f5 fa1b 	bl	8000618 <__aeabi_dmul>
 800b1e2:	4642      	mov	r2, r8
 800b1e4:	ec41 0b18 	vmov	d8, r0, r1
 800b1e8:	464b      	mov	r3, r9
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	4629      	mov	r1, r5
 800b1ee:	f7f5 f85b 	bl	80002a8 <__aeabi_dsub>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	4639      	mov	r1, r7
 800b1fa:	f7f5 f855 	bl	80002a8 <__aeabi_dsub>
 800b1fe:	a336      	add	r3, pc, #216	; (adr r3, 800b2d8 <__ieee754_pow+0x728>)
 800b200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b204:	f7f5 fa08 	bl	8000618 <__aeabi_dmul>
 800b208:	a335      	add	r3, pc, #212	; (adr r3, 800b2e0 <__ieee754_pow+0x730>)
 800b20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20e:	4606      	mov	r6, r0
 800b210:	460f      	mov	r7, r1
 800b212:	4620      	mov	r0, r4
 800b214:	4629      	mov	r1, r5
 800b216:	f7f5 f9ff 	bl	8000618 <__aeabi_dmul>
 800b21a:	4602      	mov	r2, r0
 800b21c:	460b      	mov	r3, r1
 800b21e:	4630      	mov	r0, r6
 800b220:	4639      	mov	r1, r7
 800b222:	f7f5 f843 	bl	80002ac <__adddf3>
 800b226:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b228:	4b38      	ldr	r3, [pc, #224]	; (800b30c <__ieee754_pow+0x75c>)
 800b22a:	4413      	add	r3, r2
 800b22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b230:	f7f5 f83c 	bl	80002ac <__adddf3>
 800b234:	4682      	mov	sl, r0
 800b236:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b238:	468b      	mov	fp, r1
 800b23a:	f7f5 f983 	bl	8000544 <__aeabi_i2d>
 800b23e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b240:	4b33      	ldr	r3, [pc, #204]	; (800b310 <__ieee754_pow+0x760>)
 800b242:	4413      	add	r3, r2
 800b244:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b248:	4606      	mov	r6, r0
 800b24a:	460f      	mov	r7, r1
 800b24c:	4652      	mov	r2, sl
 800b24e:	465b      	mov	r3, fp
 800b250:	ec51 0b18 	vmov	r0, r1, d8
 800b254:	f7f5 f82a 	bl	80002ac <__adddf3>
 800b258:	4642      	mov	r2, r8
 800b25a:	464b      	mov	r3, r9
 800b25c:	f7f5 f826 	bl	80002ac <__adddf3>
 800b260:	4632      	mov	r2, r6
 800b262:	463b      	mov	r3, r7
 800b264:	f7f5 f822 	bl	80002ac <__adddf3>
 800b268:	9c04      	ldr	r4, [sp, #16]
 800b26a:	4632      	mov	r2, r6
 800b26c:	463b      	mov	r3, r7
 800b26e:	4620      	mov	r0, r4
 800b270:	460d      	mov	r5, r1
 800b272:	f7f5 f819 	bl	80002a8 <__aeabi_dsub>
 800b276:	4642      	mov	r2, r8
 800b278:	464b      	mov	r3, r9
 800b27a:	f7f5 f815 	bl	80002a8 <__aeabi_dsub>
 800b27e:	ec53 2b18 	vmov	r2, r3, d8
 800b282:	f7f5 f811 	bl	80002a8 <__aeabi_dsub>
 800b286:	4602      	mov	r2, r0
 800b288:	460b      	mov	r3, r1
 800b28a:	4650      	mov	r0, sl
 800b28c:	4659      	mov	r1, fp
 800b28e:	e606      	b.n	800ae9e <__ieee754_pow+0x2ee>
 800b290:	2401      	movs	r4, #1
 800b292:	e6a0      	b.n	800afd6 <__ieee754_pow+0x426>
 800b294:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800b2e8 <__ieee754_pow+0x738>
 800b298:	e60d      	b.n	800aeb6 <__ieee754_pow+0x306>
 800b29a:	bf00      	nop
 800b29c:	f3af 8000 	nop.w
 800b2a0:	4a454eef 	.word	0x4a454eef
 800b2a4:	3fca7e28 	.word	0x3fca7e28
 800b2a8:	93c9db65 	.word	0x93c9db65
 800b2ac:	3fcd864a 	.word	0x3fcd864a
 800b2b0:	a91d4101 	.word	0xa91d4101
 800b2b4:	3fd17460 	.word	0x3fd17460
 800b2b8:	518f264d 	.word	0x518f264d
 800b2bc:	3fd55555 	.word	0x3fd55555
 800b2c0:	db6fabff 	.word	0xdb6fabff
 800b2c4:	3fdb6db6 	.word	0x3fdb6db6
 800b2c8:	33333303 	.word	0x33333303
 800b2cc:	3fe33333 	.word	0x3fe33333
 800b2d0:	e0000000 	.word	0xe0000000
 800b2d4:	3feec709 	.word	0x3feec709
 800b2d8:	dc3a03fd 	.word	0xdc3a03fd
 800b2dc:	3feec709 	.word	0x3feec709
 800b2e0:	145b01f5 	.word	0x145b01f5
 800b2e4:	be3e2fe0 	.word	0xbe3e2fe0
 800b2e8:	00000000 	.word	0x00000000
 800b2ec:	3ff00000 	.word	0x3ff00000
 800b2f0:	7ff00000 	.word	0x7ff00000
 800b2f4:	43400000 	.word	0x43400000
 800b2f8:	0003988e 	.word	0x0003988e
 800b2fc:	000bb679 	.word	0x000bb679
 800b300:	0800bf80 	.word	0x0800bf80
 800b304:	3ff00000 	.word	0x3ff00000
 800b308:	40080000 	.word	0x40080000
 800b30c:	0800bfa0 	.word	0x0800bfa0
 800b310:	0800bf90 	.word	0x0800bf90
 800b314:	a3b5      	add	r3, pc, #724	; (adr r3, 800b5ec <__ieee754_pow+0xa3c>)
 800b316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31a:	4640      	mov	r0, r8
 800b31c:	4649      	mov	r1, r9
 800b31e:	f7f4 ffc5 	bl	80002ac <__adddf3>
 800b322:	4622      	mov	r2, r4
 800b324:	ec41 0b1a 	vmov	d10, r0, r1
 800b328:	462b      	mov	r3, r5
 800b32a:	4630      	mov	r0, r6
 800b32c:	4639      	mov	r1, r7
 800b32e:	f7f4 ffbb 	bl	80002a8 <__aeabi_dsub>
 800b332:	4602      	mov	r2, r0
 800b334:	460b      	mov	r3, r1
 800b336:	ec51 0b1a 	vmov	r0, r1, d10
 800b33a:	f7f5 fbfd 	bl	8000b38 <__aeabi_dcmpgt>
 800b33e:	2800      	cmp	r0, #0
 800b340:	f47f adf8 	bne.w	800af34 <__ieee754_pow+0x384>
 800b344:	4aa4      	ldr	r2, [pc, #656]	; (800b5d8 <__ieee754_pow+0xa28>)
 800b346:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b34a:	4293      	cmp	r3, r2
 800b34c:	f340 810b 	ble.w	800b566 <__ieee754_pow+0x9b6>
 800b350:	151b      	asrs	r3, r3, #20
 800b352:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b356:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b35a:	fa4a f303 	asr.w	r3, sl, r3
 800b35e:	445b      	add	r3, fp
 800b360:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b364:	4e9d      	ldr	r6, [pc, #628]	; (800b5dc <__ieee754_pow+0xa2c>)
 800b366:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b36a:	4116      	asrs	r6, r2
 800b36c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b370:	2000      	movs	r0, #0
 800b372:	ea23 0106 	bic.w	r1, r3, r6
 800b376:	f1c2 0214 	rsb	r2, r2, #20
 800b37a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b37e:	fa4a fa02 	asr.w	sl, sl, r2
 800b382:	f1bb 0f00 	cmp.w	fp, #0
 800b386:	4602      	mov	r2, r0
 800b388:	460b      	mov	r3, r1
 800b38a:	4620      	mov	r0, r4
 800b38c:	4629      	mov	r1, r5
 800b38e:	bfb8      	it	lt
 800b390:	f1ca 0a00 	rsblt	sl, sl, #0
 800b394:	f7f4 ff88 	bl	80002a8 <__aeabi_dsub>
 800b398:	ec41 0b19 	vmov	d9, r0, r1
 800b39c:	4642      	mov	r2, r8
 800b39e:	464b      	mov	r3, r9
 800b3a0:	ec51 0b19 	vmov	r0, r1, d9
 800b3a4:	f7f4 ff82 	bl	80002ac <__adddf3>
 800b3a8:	2400      	movs	r4, #0
 800b3aa:	a379      	add	r3, pc, #484	; (adr r3, 800b590 <__ieee754_pow+0x9e0>)
 800b3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	460d      	mov	r5, r1
 800b3b4:	f7f5 f930 	bl	8000618 <__aeabi_dmul>
 800b3b8:	ec53 2b19 	vmov	r2, r3, d9
 800b3bc:	4606      	mov	r6, r0
 800b3be:	460f      	mov	r7, r1
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	4629      	mov	r1, r5
 800b3c4:	f7f4 ff70 	bl	80002a8 <__aeabi_dsub>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	4640      	mov	r0, r8
 800b3ce:	4649      	mov	r1, r9
 800b3d0:	f7f4 ff6a 	bl	80002a8 <__aeabi_dsub>
 800b3d4:	a370      	add	r3, pc, #448	; (adr r3, 800b598 <__ieee754_pow+0x9e8>)
 800b3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3da:	f7f5 f91d 	bl	8000618 <__aeabi_dmul>
 800b3de:	a370      	add	r3, pc, #448	; (adr r3, 800b5a0 <__ieee754_pow+0x9f0>)
 800b3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e4:	4680      	mov	r8, r0
 800b3e6:	4689      	mov	r9, r1
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	4629      	mov	r1, r5
 800b3ec:	f7f5 f914 	bl	8000618 <__aeabi_dmul>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	4640      	mov	r0, r8
 800b3f6:	4649      	mov	r1, r9
 800b3f8:	f7f4 ff58 	bl	80002ac <__adddf3>
 800b3fc:	4604      	mov	r4, r0
 800b3fe:	460d      	mov	r5, r1
 800b400:	4602      	mov	r2, r0
 800b402:	460b      	mov	r3, r1
 800b404:	4630      	mov	r0, r6
 800b406:	4639      	mov	r1, r7
 800b408:	f7f4 ff50 	bl	80002ac <__adddf3>
 800b40c:	4632      	mov	r2, r6
 800b40e:	463b      	mov	r3, r7
 800b410:	4680      	mov	r8, r0
 800b412:	4689      	mov	r9, r1
 800b414:	f7f4 ff48 	bl	80002a8 <__aeabi_dsub>
 800b418:	4602      	mov	r2, r0
 800b41a:	460b      	mov	r3, r1
 800b41c:	4620      	mov	r0, r4
 800b41e:	4629      	mov	r1, r5
 800b420:	f7f4 ff42 	bl	80002a8 <__aeabi_dsub>
 800b424:	4642      	mov	r2, r8
 800b426:	4606      	mov	r6, r0
 800b428:	460f      	mov	r7, r1
 800b42a:	464b      	mov	r3, r9
 800b42c:	4640      	mov	r0, r8
 800b42e:	4649      	mov	r1, r9
 800b430:	f7f5 f8f2 	bl	8000618 <__aeabi_dmul>
 800b434:	a35c      	add	r3, pc, #368	; (adr r3, 800b5a8 <__ieee754_pow+0x9f8>)
 800b436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43a:	4604      	mov	r4, r0
 800b43c:	460d      	mov	r5, r1
 800b43e:	f7f5 f8eb 	bl	8000618 <__aeabi_dmul>
 800b442:	a35b      	add	r3, pc, #364	; (adr r3, 800b5b0 <__ieee754_pow+0xa00>)
 800b444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b448:	f7f4 ff2e 	bl	80002a8 <__aeabi_dsub>
 800b44c:	4622      	mov	r2, r4
 800b44e:	462b      	mov	r3, r5
 800b450:	f7f5 f8e2 	bl	8000618 <__aeabi_dmul>
 800b454:	a358      	add	r3, pc, #352	; (adr r3, 800b5b8 <__ieee754_pow+0xa08>)
 800b456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45a:	f7f4 ff27 	bl	80002ac <__adddf3>
 800b45e:	4622      	mov	r2, r4
 800b460:	462b      	mov	r3, r5
 800b462:	f7f5 f8d9 	bl	8000618 <__aeabi_dmul>
 800b466:	a356      	add	r3, pc, #344	; (adr r3, 800b5c0 <__ieee754_pow+0xa10>)
 800b468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46c:	f7f4 ff1c 	bl	80002a8 <__aeabi_dsub>
 800b470:	4622      	mov	r2, r4
 800b472:	462b      	mov	r3, r5
 800b474:	f7f5 f8d0 	bl	8000618 <__aeabi_dmul>
 800b478:	a353      	add	r3, pc, #332	; (adr r3, 800b5c8 <__ieee754_pow+0xa18>)
 800b47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47e:	f7f4 ff15 	bl	80002ac <__adddf3>
 800b482:	4622      	mov	r2, r4
 800b484:	462b      	mov	r3, r5
 800b486:	f7f5 f8c7 	bl	8000618 <__aeabi_dmul>
 800b48a:	4602      	mov	r2, r0
 800b48c:	460b      	mov	r3, r1
 800b48e:	4640      	mov	r0, r8
 800b490:	4649      	mov	r1, r9
 800b492:	f7f4 ff09 	bl	80002a8 <__aeabi_dsub>
 800b496:	4604      	mov	r4, r0
 800b498:	460d      	mov	r5, r1
 800b49a:	4602      	mov	r2, r0
 800b49c:	460b      	mov	r3, r1
 800b49e:	4640      	mov	r0, r8
 800b4a0:	4649      	mov	r1, r9
 800b4a2:	f7f5 f8b9 	bl	8000618 <__aeabi_dmul>
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	ec41 0b19 	vmov	d9, r0, r1
 800b4ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	f7f4 fef8 	bl	80002a8 <__aeabi_dsub>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	ec51 0b19 	vmov	r0, r1, d9
 800b4c0:	f7f5 f9d4 	bl	800086c <__aeabi_ddiv>
 800b4c4:	4632      	mov	r2, r6
 800b4c6:	4604      	mov	r4, r0
 800b4c8:	460d      	mov	r5, r1
 800b4ca:	463b      	mov	r3, r7
 800b4cc:	4640      	mov	r0, r8
 800b4ce:	4649      	mov	r1, r9
 800b4d0:	f7f5 f8a2 	bl	8000618 <__aeabi_dmul>
 800b4d4:	4632      	mov	r2, r6
 800b4d6:	463b      	mov	r3, r7
 800b4d8:	f7f4 fee8 	bl	80002ac <__adddf3>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	460b      	mov	r3, r1
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	4629      	mov	r1, r5
 800b4e4:	f7f4 fee0 	bl	80002a8 <__aeabi_dsub>
 800b4e8:	4642      	mov	r2, r8
 800b4ea:	464b      	mov	r3, r9
 800b4ec:	f7f4 fedc 	bl	80002a8 <__aeabi_dsub>
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	493a      	ldr	r1, [pc, #232]	; (800b5e0 <__ieee754_pow+0xa30>)
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	f7f4 fed6 	bl	80002a8 <__aeabi_dsub>
 800b4fc:	e9cd 0100 	strd	r0, r1, [sp]
 800b500:	9b01      	ldr	r3, [sp, #4]
 800b502:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b50a:	da2f      	bge.n	800b56c <__ieee754_pow+0x9bc>
 800b50c:	4650      	mov	r0, sl
 800b50e:	ed9d 0b00 	vldr	d0, [sp]
 800b512:	f000 f9c1 	bl	800b898 <scalbn>
 800b516:	ec51 0b10 	vmov	r0, r1, d0
 800b51a:	ec53 2b18 	vmov	r2, r3, d8
 800b51e:	f7ff bbe0 	b.w	800ace2 <__ieee754_pow+0x132>
 800b522:	4b30      	ldr	r3, [pc, #192]	; (800b5e4 <__ieee754_pow+0xa34>)
 800b524:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b528:	429e      	cmp	r6, r3
 800b52a:	f77f af0b 	ble.w	800b344 <__ieee754_pow+0x794>
 800b52e:	4b2e      	ldr	r3, [pc, #184]	; (800b5e8 <__ieee754_pow+0xa38>)
 800b530:	440b      	add	r3, r1
 800b532:	4303      	orrs	r3, r0
 800b534:	d00b      	beq.n	800b54e <__ieee754_pow+0x99e>
 800b536:	a326      	add	r3, pc, #152	; (adr r3, 800b5d0 <__ieee754_pow+0xa20>)
 800b538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53c:	ec51 0b18 	vmov	r0, r1, d8
 800b540:	f7f5 f86a 	bl	8000618 <__aeabi_dmul>
 800b544:	a322      	add	r3, pc, #136	; (adr r3, 800b5d0 <__ieee754_pow+0xa20>)
 800b546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54a:	f7ff bbca 	b.w	800ace2 <__ieee754_pow+0x132>
 800b54e:	4622      	mov	r2, r4
 800b550:	462b      	mov	r3, r5
 800b552:	f7f4 fea9 	bl	80002a8 <__aeabi_dsub>
 800b556:	4642      	mov	r2, r8
 800b558:	464b      	mov	r3, r9
 800b55a:	f7f5 fae3 	bl	8000b24 <__aeabi_dcmpge>
 800b55e:	2800      	cmp	r0, #0
 800b560:	f43f aef0 	beq.w	800b344 <__ieee754_pow+0x794>
 800b564:	e7e7      	b.n	800b536 <__ieee754_pow+0x986>
 800b566:	f04f 0a00 	mov.w	sl, #0
 800b56a:	e717      	b.n	800b39c <__ieee754_pow+0x7ec>
 800b56c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b570:	4619      	mov	r1, r3
 800b572:	e7d2      	b.n	800b51a <__ieee754_pow+0x96a>
 800b574:	491a      	ldr	r1, [pc, #104]	; (800b5e0 <__ieee754_pow+0xa30>)
 800b576:	2000      	movs	r0, #0
 800b578:	f7ff bb9e 	b.w	800acb8 <__ieee754_pow+0x108>
 800b57c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b580:	f7ff bb9a 	b.w	800acb8 <__ieee754_pow+0x108>
 800b584:	9000      	str	r0, [sp, #0]
 800b586:	f7ff bb76 	b.w	800ac76 <__ieee754_pow+0xc6>
 800b58a:	2100      	movs	r1, #0
 800b58c:	f7ff bb60 	b.w	800ac50 <__ieee754_pow+0xa0>
 800b590:	00000000 	.word	0x00000000
 800b594:	3fe62e43 	.word	0x3fe62e43
 800b598:	fefa39ef 	.word	0xfefa39ef
 800b59c:	3fe62e42 	.word	0x3fe62e42
 800b5a0:	0ca86c39 	.word	0x0ca86c39
 800b5a4:	be205c61 	.word	0xbe205c61
 800b5a8:	72bea4d0 	.word	0x72bea4d0
 800b5ac:	3e663769 	.word	0x3e663769
 800b5b0:	c5d26bf1 	.word	0xc5d26bf1
 800b5b4:	3ebbbd41 	.word	0x3ebbbd41
 800b5b8:	af25de2c 	.word	0xaf25de2c
 800b5bc:	3f11566a 	.word	0x3f11566a
 800b5c0:	16bebd93 	.word	0x16bebd93
 800b5c4:	3f66c16c 	.word	0x3f66c16c
 800b5c8:	5555553e 	.word	0x5555553e
 800b5cc:	3fc55555 	.word	0x3fc55555
 800b5d0:	c2f8f359 	.word	0xc2f8f359
 800b5d4:	01a56e1f 	.word	0x01a56e1f
 800b5d8:	3fe00000 	.word	0x3fe00000
 800b5dc:	000fffff 	.word	0x000fffff
 800b5e0:	3ff00000 	.word	0x3ff00000
 800b5e4:	4090cbff 	.word	0x4090cbff
 800b5e8:	3f6f3400 	.word	0x3f6f3400
 800b5ec:	652b82fe 	.word	0x652b82fe
 800b5f0:	3c971547 	.word	0x3c971547

0800b5f4 <__ieee754_sqrt>:
 800b5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f8:	ec55 4b10 	vmov	r4, r5, d0
 800b5fc:	4e56      	ldr	r6, [pc, #344]	; (800b758 <__ieee754_sqrt+0x164>)
 800b5fe:	43ae      	bics	r6, r5
 800b600:	ee10 0a10 	vmov	r0, s0
 800b604:	ee10 3a10 	vmov	r3, s0
 800b608:	4629      	mov	r1, r5
 800b60a:	462a      	mov	r2, r5
 800b60c:	d110      	bne.n	800b630 <__ieee754_sqrt+0x3c>
 800b60e:	ee10 2a10 	vmov	r2, s0
 800b612:	462b      	mov	r3, r5
 800b614:	f7f5 f800 	bl	8000618 <__aeabi_dmul>
 800b618:	4602      	mov	r2, r0
 800b61a:	460b      	mov	r3, r1
 800b61c:	4620      	mov	r0, r4
 800b61e:	4629      	mov	r1, r5
 800b620:	f7f4 fe44 	bl	80002ac <__adddf3>
 800b624:	4604      	mov	r4, r0
 800b626:	460d      	mov	r5, r1
 800b628:	ec45 4b10 	vmov	d0, r4, r5
 800b62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b630:	2d00      	cmp	r5, #0
 800b632:	dc10      	bgt.n	800b656 <__ieee754_sqrt+0x62>
 800b634:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b638:	4330      	orrs	r0, r6
 800b63a:	d0f5      	beq.n	800b628 <__ieee754_sqrt+0x34>
 800b63c:	b15d      	cbz	r5, 800b656 <__ieee754_sqrt+0x62>
 800b63e:	ee10 2a10 	vmov	r2, s0
 800b642:	462b      	mov	r3, r5
 800b644:	ee10 0a10 	vmov	r0, s0
 800b648:	f7f4 fe2e 	bl	80002a8 <__aeabi_dsub>
 800b64c:	4602      	mov	r2, r0
 800b64e:	460b      	mov	r3, r1
 800b650:	f7f5 f90c 	bl	800086c <__aeabi_ddiv>
 800b654:	e7e6      	b.n	800b624 <__ieee754_sqrt+0x30>
 800b656:	1509      	asrs	r1, r1, #20
 800b658:	d076      	beq.n	800b748 <__ieee754_sqrt+0x154>
 800b65a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b65e:	07ce      	lsls	r6, r1, #31
 800b660:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800b664:	bf5e      	ittt	pl
 800b666:	0fda      	lsrpl	r2, r3, #31
 800b668:	005b      	lslpl	r3, r3, #1
 800b66a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800b66e:	0fda      	lsrs	r2, r3, #31
 800b670:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800b674:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800b678:	2000      	movs	r0, #0
 800b67a:	106d      	asrs	r5, r5, #1
 800b67c:	005b      	lsls	r3, r3, #1
 800b67e:	f04f 0e16 	mov.w	lr, #22
 800b682:	4684      	mov	ip, r0
 800b684:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b688:	eb0c 0401 	add.w	r4, ip, r1
 800b68c:	4294      	cmp	r4, r2
 800b68e:	bfde      	ittt	le
 800b690:	1b12      	suble	r2, r2, r4
 800b692:	eb04 0c01 	addle.w	ip, r4, r1
 800b696:	1840      	addle	r0, r0, r1
 800b698:	0052      	lsls	r2, r2, #1
 800b69a:	f1be 0e01 	subs.w	lr, lr, #1
 800b69e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b6a2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b6a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b6aa:	d1ed      	bne.n	800b688 <__ieee754_sqrt+0x94>
 800b6ac:	4671      	mov	r1, lr
 800b6ae:	2720      	movs	r7, #32
 800b6b0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b6b4:	4562      	cmp	r2, ip
 800b6b6:	eb04 060e 	add.w	r6, r4, lr
 800b6ba:	dc02      	bgt.n	800b6c2 <__ieee754_sqrt+0xce>
 800b6bc:	d113      	bne.n	800b6e6 <__ieee754_sqrt+0xf2>
 800b6be:	429e      	cmp	r6, r3
 800b6c0:	d811      	bhi.n	800b6e6 <__ieee754_sqrt+0xf2>
 800b6c2:	2e00      	cmp	r6, #0
 800b6c4:	eb06 0e04 	add.w	lr, r6, r4
 800b6c8:	da43      	bge.n	800b752 <__ieee754_sqrt+0x15e>
 800b6ca:	f1be 0f00 	cmp.w	lr, #0
 800b6ce:	db40      	blt.n	800b752 <__ieee754_sqrt+0x15e>
 800b6d0:	f10c 0801 	add.w	r8, ip, #1
 800b6d4:	eba2 020c 	sub.w	r2, r2, ip
 800b6d8:	429e      	cmp	r6, r3
 800b6da:	bf88      	it	hi
 800b6dc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b6e0:	1b9b      	subs	r3, r3, r6
 800b6e2:	4421      	add	r1, r4
 800b6e4:	46c4      	mov	ip, r8
 800b6e6:	0052      	lsls	r2, r2, #1
 800b6e8:	3f01      	subs	r7, #1
 800b6ea:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b6ee:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b6f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b6f6:	d1dd      	bne.n	800b6b4 <__ieee754_sqrt+0xc0>
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	d006      	beq.n	800b70a <__ieee754_sqrt+0x116>
 800b6fc:	1c4c      	adds	r4, r1, #1
 800b6fe:	bf13      	iteet	ne
 800b700:	3101      	addne	r1, #1
 800b702:	3001      	addeq	r0, #1
 800b704:	4639      	moveq	r1, r7
 800b706:	f021 0101 	bicne.w	r1, r1, #1
 800b70a:	1043      	asrs	r3, r0, #1
 800b70c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b710:	0849      	lsrs	r1, r1, #1
 800b712:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b716:	07c2      	lsls	r2, r0, #31
 800b718:	bf48      	it	mi
 800b71a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b71e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800b722:	460c      	mov	r4, r1
 800b724:	463d      	mov	r5, r7
 800b726:	e77f      	b.n	800b628 <__ieee754_sqrt+0x34>
 800b728:	0ada      	lsrs	r2, r3, #11
 800b72a:	3815      	subs	r0, #21
 800b72c:	055b      	lsls	r3, r3, #21
 800b72e:	2a00      	cmp	r2, #0
 800b730:	d0fa      	beq.n	800b728 <__ieee754_sqrt+0x134>
 800b732:	02d7      	lsls	r7, r2, #11
 800b734:	d50a      	bpl.n	800b74c <__ieee754_sqrt+0x158>
 800b736:	f1c1 0420 	rsb	r4, r1, #32
 800b73a:	fa23 f404 	lsr.w	r4, r3, r4
 800b73e:	1e4d      	subs	r5, r1, #1
 800b740:	408b      	lsls	r3, r1
 800b742:	4322      	orrs	r2, r4
 800b744:	1b41      	subs	r1, r0, r5
 800b746:	e788      	b.n	800b65a <__ieee754_sqrt+0x66>
 800b748:	4608      	mov	r0, r1
 800b74a:	e7f0      	b.n	800b72e <__ieee754_sqrt+0x13a>
 800b74c:	0052      	lsls	r2, r2, #1
 800b74e:	3101      	adds	r1, #1
 800b750:	e7ef      	b.n	800b732 <__ieee754_sqrt+0x13e>
 800b752:	46e0      	mov	r8, ip
 800b754:	e7be      	b.n	800b6d4 <__ieee754_sqrt+0xe0>
 800b756:	bf00      	nop
 800b758:	7ff00000 	.word	0x7ff00000

0800b75c <fabs>:
 800b75c:	ec51 0b10 	vmov	r0, r1, d0
 800b760:	ee10 2a10 	vmov	r2, s0
 800b764:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b768:	ec43 2b10 	vmov	d0, r2, r3
 800b76c:	4770      	bx	lr

0800b76e <finite>:
 800b76e:	b082      	sub	sp, #8
 800b770:	ed8d 0b00 	vstr	d0, [sp]
 800b774:	9801      	ldr	r0, [sp, #4]
 800b776:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b77a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b77e:	0fc0      	lsrs	r0, r0, #31
 800b780:	b002      	add	sp, #8
 800b782:	4770      	bx	lr

0800b784 <rint>:
 800b784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b786:	ec51 0b10 	vmov	r0, r1, d0
 800b78a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b78e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b792:	2e13      	cmp	r6, #19
 800b794:	ee10 4a10 	vmov	r4, s0
 800b798:	460b      	mov	r3, r1
 800b79a:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800b79e:	dc58      	bgt.n	800b852 <rint+0xce>
 800b7a0:	2e00      	cmp	r6, #0
 800b7a2:	da2b      	bge.n	800b7fc <rint+0x78>
 800b7a4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b7a8:	4302      	orrs	r2, r0
 800b7aa:	d023      	beq.n	800b7f4 <rint+0x70>
 800b7ac:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800b7b0:	4302      	orrs	r2, r0
 800b7b2:	4254      	negs	r4, r2
 800b7b4:	4314      	orrs	r4, r2
 800b7b6:	0c4b      	lsrs	r3, r1, #17
 800b7b8:	0b24      	lsrs	r4, r4, #12
 800b7ba:	045b      	lsls	r3, r3, #17
 800b7bc:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800b7c0:	ea44 0103 	orr.w	r1, r4, r3
 800b7c4:	4b32      	ldr	r3, [pc, #200]	; (800b890 <rint+0x10c>)
 800b7c6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b7ca:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	4630      	mov	r0, r6
 800b7d4:	4639      	mov	r1, r7
 800b7d6:	f7f4 fd69 	bl	80002ac <__adddf3>
 800b7da:	e9cd 0100 	strd	r0, r1, [sp]
 800b7de:	463b      	mov	r3, r7
 800b7e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7e4:	4632      	mov	r2, r6
 800b7e6:	f7f4 fd5f 	bl	80002a8 <__aeabi_dsub>
 800b7ea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b7ee:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800b7f2:	4639      	mov	r1, r7
 800b7f4:	ec41 0b10 	vmov	d0, r0, r1
 800b7f8:	b003      	add	sp, #12
 800b7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7fc:	4a25      	ldr	r2, [pc, #148]	; (800b894 <rint+0x110>)
 800b7fe:	4132      	asrs	r2, r6
 800b800:	ea01 0702 	and.w	r7, r1, r2
 800b804:	4307      	orrs	r7, r0
 800b806:	d0f5      	beq.n	800b7f4 <rint+0x70>
 800b808:	0851      	lsrs	r1, r2, #1
 800b80a:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800b80e:	4314      	orrs	r4, r2
 800b810:	d00c      	beq.n	800b82c <rint+0xa8>
 800b812:	ea23 0201 	bic.w	r2, r3, r1
 800b816:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b81a:	2e13      	cmp	r6, #19
 800b81c:	fa43 f606 	asr.w	r6, r3, r6
 800b820:	bf0c      	ite	eq
 800b822:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800b826:	2400      	movne	r4, #0
 800b828:	ea42 0306 	orr.w	r3, r2, r6
 800b82c:	4918      	ldr	r1, [pc, #96]	; (800b890 <rint+0x10c>)
 800b82e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800b832:	4622      	mov	r2, r4
 800b834:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b838:	4620      	mov	r0, r4
 800b83a:	4629      	mov	r1, r5
 800b83c:	f7f4 fd36 	bl	80002ac <__adddf3>
 800b840:	e9cd 0100 	strd	r0, r1, [sp]
 800b844:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b848:	4622      	mov	r2, r4
 800b84a:	462b      	mov	r3, r5
 800b84c:	f7f4 fd2c 	bl	80002a8 <__aeabi_dsub>
 800b850:	e7d0      	b.n	800b7f4 <rint+0x70>
 800b852:	2e33      	cmp	r6, #51	; 0x33
 800b854:	dd07      	ble.n	800b866 <rint+0xe2>
 800b856:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b85a:	d1cb      	bne.n	800b7f4 <rint+0x70>
 800b85c:	ee10 2a10 	vmov	r2, s0
 800b860:	f7f4 fd24 	bl	80002ac <__adddf3>
 800b864:	e7c6      	b.n	800b7f4 <rint+0x70>
 800b866:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800b86a:	f04f 36ff 	mov.w	r6, #4294967295
 800b86e:	40d6      	lsrs	r6, r2
 800b870:	4230      	tst	r0, r6
 800b872:	d0bf      	beq.n	800b7f4 <rint+0x70>
 800b874:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800b878:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800b87c:	bf1f      	itttt	ne
 800b87e:	ea24 0101 	bicne.w	r1, r4, r1
 800b882:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800b886:	fa44 f202 	asrne.w	r2, r4, r2
 800b88a:	ea41 0402 	orrne.w	r4, r1, r2
 800b88e:	e7cd      	b.n	800b82c <rint+0xa8>
 800b890:	0800bfb0 	.word	0x0800bfb0
 800b894:	000fffff 	.word	0x000fffff

0800b898 <scalbn>:
 800b898:	b570      	push	{r4, r5, r6, lr}
 800b89a:	ec55 4b10 	vmov	r4, r5, d0
 800b89e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b8a2:	4606      	mov	r6, r0
 800b8a4:	462b      	mov	r3, r5
 800b8a6:	b99a      	cbnz	r2, 800b8d0 <scalbn+0x38>
 800b8a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b8ac:	4323      	orrs	r3, r4
 800b8ae:	d036      	beq.n	800b91e <scalbn+0x86>
 800b8b0:	4b39      	ldr	r3, [pc, #228]	; (800b998 <scalbn+0x100>)
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	ee10 0a10 	vmov	r0, s0
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f7f4 fead 	bl	8000618 <__aeabi_dmul>
 800b8be:	4b37      	ldr	r3, [pc, #220]	; (800b99c <scalbn+0x104>)
 800b8c0:	429e      	cmp	r6, r3
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	460d      	mov	r5, r1
 800b8c6:	da10      	bge.n	800b8ea <scalbn+0x52>
 800b8c8:	a32b      	add	r3, pc, #172	; (adr r3, 800b978 <scalbn+0xe0>)
 800b8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ce:	e03a      	b.n	800b946 <scalbn+0xae>
 800b8d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b8d4:	428a      	cmp	r2, r1
 800b8d6:	d10c      	bne.n	800b8f2 <scalbn+0x5a>
 800b8d8:	ee10 2a10 	vmov	r2, s0
 800b8dc:	4620      	mov	r0, r4
 800b8de:	4629      	mov	r1, r5
 800b8e0:	f7f4 fce4 	bl	80002ac <__adddf3>
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	460d      	mov	r5, r1
 800b8e8:	e019      	b.n	800b91e <scalbn+0x86>
 800b8ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	3a36      	subs	r2, #54	; 0x36
 800b8f2:	4432      	add	r2, r6
 800b8f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b8f8:	428a      	cmp	r2, r1
 800b8fa:	dd08      	ble.n	800b90e <scalbn+0x76>
 800b8fc:	2d00      	cmp	r5, #0
 800b8fe:	a120      	add	r1, pc, #128	; (adr r1, 800b980 <scalbn+0xe8>)
 800b900:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b904:	da1c      	bge.n	800b940 <scalbn+0xa8>
 800b906:	a120      	add	r1, pc, #128	; (adr r1, 800b988 <scalbn+0xf0>)
 800b908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b90c:	e018      	b.n	800b940 <scalbn+0xa8>
 800b90e:	2a00      	cmp	r2, #0
 800b910:	dd08      	ble.n	800b924 <scalbn+0x8c>
 800b912:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b916:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b91a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b91e:	ec45 4b10 	vmov	d0, r4, r5
 800b922:	bd70      	pop	{r4, r5, r6, pc}
 800b924:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b928:	da19      	bge.n	800b95e <scalbn+0xc6>
 800b92a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b92e:	429e      	cmp	r6, r3
 800b930:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b934:	dd0a      	ble.n	800b94c <scalbn+0xb4>
 800b936:	a112      	add	r1, pc, #72	; (adr r1, 800b980 <scalbn+0xe8>)
 800b938:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d1e2      	bne.n	800b906 <scalbn+0x6e>
 800b940:	a30f      	add	r3, pc, #60	; (adr r3, 800b980 <scalbn+0xe8>)
 800b942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b946:	f7f4 fe67 	bl	8000618 <__aeabi_dmul>
 800b94a:	e7cb      	b.n	800b8e4 <scalbn+0x4c>
 800b94c:	a10a      	add	r1, pc, #40	; (adr r1, 800b978 <scalbn+0xe0>)
 800b94e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d0b8      	beq.n	800b8c8 <scalbn+0x30>
 800b956:	a10e      	add	r1, pc, #56	; (adr r1, 800b990 <scalbn+0xf8>)
 800b958:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b95c:	e7b4      	b.n	800b8c8 <scalbn+0x30>
 800b95e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b962:	3236      	adds	r2, #54	; 0x36
 800b964:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b968:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b96c:	4620      	mov	r0, r4
 800b96e:	4b0c      	ldr	r3, [pc, #48]	; (800b9a0 <scalbn+0x108>)
 800b970:	2200      	movs	r2, #0
 800b972:	e7e8      	b.n	800b946 <scalbn+0xae>
 800b974:	f3af 8000 	nop.w
 800b978:	c2f8f359 	.word	0xc2f8f359
 800b97c:	01a56e1f 	.word	0x01a56e1f
 800b980:	8800759c 	.word	0x8800759c
 800b984:	7e37e43c 	.word	0x7e37e43c
 800b988:	8800759c 	.word	0x8800759c
 800b98c:	fe37e43c 	.word	0xfe37e43c
 800b990:	c2f8f359 	.word	0xc2f8f359
 800b994:	81a56e1f 	.word	0x81a56e1f
 800b998:	43500000 	.word	0x43500000
 800b99c:	ffff3cb0 	.word	0xffff3cb0
 800b9a0:	3c900000 	.word	0x3c900000

0800b9a4 <_init>:
 800b9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a6:	bf00      	nop
 800b9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9aa:	bc08      	pop	{r3}
 800b9ac:	469e      	mov	lr, r3
 800b9ae:	4770      	bx	lr

0800b9b0 <_fini>:
 800b9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9b2:	bf00      	nop
 800b9b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9b6:	bc08      	pop	{r3}
 800b9b8:	469e      	mov	lr, r3
 800b9ba:	4770      	bx	lr
